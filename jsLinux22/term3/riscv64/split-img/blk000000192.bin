me = 0;
    SYSTEMTIME StandardDate;
    LONG       StandardBias;
    WCHAR[32]  DaylightName = 0;
    SYSTEMTIME DaylightDate;
    LONG       DaylightBias;
}
alias TIME_ZONE_INFORMATION* LPTIME_ZONE_INFORMATION;

// Does not exist in Windows headers, only MSDN
// documentation (for TIME_ZONE_INFORMATION).
// Provided solely for compatibility with the old
// core.sys.windows.windows
struct REG_TZI_FORMAT {
    LONG Bias;
    LONG StandardBias;
    LONG DaylightBias;
    SYSTEMTIME StandardDate;
    SYSTEMTIME DaylightDate;
}

// MSDN documents this, possibly erroneously, as Win2000+.
struct MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
}
alias MEMORYSTATUS* LPMEMORYSTATUS;

static if (_WIN32_WINNT >= 0x500) {
    struct MEMORYSTATUSEX {
        DWORD     dwLength;
        DWORD     dwMemoryLoad;
        DWORDLONG ullTotalPhys;
        DWORDLONG ullAvailPhys;
        DWORDLONG ullTotalPageFile;
        DWORDLONG ullAvailPageFile;
        DWORDLONG ullTotalVirtual;
        DWORDLONG ullAvailVirtual;
        DWORDLONG ullAvailExtendedVirtual;
    }
    alias MEMORYSTATUSEX* LPMEMORYSTATUSEX;
}

struct LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    struct {
        BYTE BaseMid;
        BYTE Flags1;
        BYTE Flags2;
        BYTE BaseHi;

        byte Type(byte f)        { Flags1 = cast(BYTE) ((Flags1 & 0xE0) | f); return cast(byte)(f & 0x1F); }
        byte Dpl(byte f)         { Flags1 = cast(BYTE) ((Flags1 & 0x9F) | (f<<5)); return cast(byte)(f & 3); }
        bool Pres(bool f)        { Flags1 = cast(BYTE) ((Flags1 & 0x7F) | (f<<7)); return f; }

        byte LimitHi(byte f)     { Flags2 = cast(BYTE) ((Flags2 & 0xF0) | (f&0x0F)); return cast(byte)(f & 0x0F); }
        bool Sys(bool f)         { Flags2 = cast(BYTE) ((Flags2 & 0xEF) | (f<<4)); return f; }
        // Next bit is reserved
        bool Default_Big(bool f) { Flags2 = cast(BYTE) ((Flags2 & 0xBF) | (f<<6)); return f; }
        bool Granularity(bool f) { Flags2 = cast(BYTE) ((Flags2 & 0x7F) | (f<<7)); return f; }

        byte Type()        { return cast(byte) (Flags1 & 0x1F); }
        byte Dpl()         { return cast(byte) ((Flags1 & 0x60)>>5); }
        bool Pres()        { return cast(bool) (Flags1 & 0x80); }

        byte LimitHi()     { return cast(byte) (Flags2 & 0x0F); }
        bool Sys()         { return cast(bool) (Flags2 & 0x10); }
        bool Default_Big() { return cast(bool) (Flags2 & 0x40); }
        bool Granularity() { return cast(bool) (Flags2 & 0x80); }
    }
/+
    union  HighWord {
        struct Bytes {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        }
    struct Bits {
        DWORD BaseMid:8;
        DWORD Type:5;
        DWORD Dpl:2;
        DWORD Pres:1;
        DWORD LimitHi:4;
        DWORD Sys:1;
        DWORD Reserved_0:1;
        DWORD Default_Big:1;
        DWORD Granularity:1;
        DWORD BaseHi:8;
    }
    }
+/
}
alias LDT_ENTRY* PLDT_ENTRY, LPLDT_ENTRY;

/*  As with the other memory management functions and structures, MSDN's
 *  Windows version info shall be taken with a cup of salt.
 */
struct PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE  cbOverhead;
    BYTE  iRegionIndex;
    WORD  wFlags;
    union {
        struct _Block {
            HANDLE   hMem;
            DWORD[3] dwReserved;
        }
        _Block Block;
        struct _Region {
            DWORD    dwCommittedSize;
            DWORD    dwUnCommittedSize;
            LPVOID   lpFirstBlock;
            LPVOID   lpLastBlock;
        }
        _Region Region;
    }
}
alias PROCESS_HEAP_ENTRY* LPPROCESS_HEAP_ENTRY;

struct OFSTRUCT {
    BYTE      cBytes = OFSTRUCT.sizeof;
    BYTE      fFixedDisk;
    WORD      nErrCode;
    WORD      Reserved1;
    WORD      Reserved2;
    CHAR[128] szPathName = 0; // const OFS_MAXPATHNAME = 128;
}
alias OFSTRUCT* LPOFSTRUCT, POFSTRUCT;

/*  ??? MSDN documents this only for Windows CE, but it's used by
 *  ImageGetCertificateData, which is in desktop Windows.
 */
struct WIN_CERTIFICATE {
    DWORD dwLength;
    WORD  wRevision;
    WORD  wCertificateType;
    BYTE  _bCertificate;

    BYTE* bCertificate() return { return &_bCertificate; }
}
alias WIN_CERTIFICATE* LPWIN_CERTIFICATE;

static if (_WIN32_WINNT >= 0x500) {
    enum COMPUTER_NAME_FORMAT {
        ComputerNameNetBIOS,
        ComputerNameDnsHostname,
        ComputerNameDnsDomain,
        ComputerNameDnsFullyQualified,
        ComputerNamePhysicalNetBIOS,
        ComputerNamePhysicalDnsHostname,
        ComputerNamePhysicalDnsDomain,
        ComputerNamePhysicalDnsFullyQualified,
        ComputerNameMax
    }
}

static if (_WIN32_WINNT >= 0x501) {
    struct ACTCTXA {
        ULONG cbSize = this.sizeof;
        DWORD dwFlags;
        LPCSTR lpSource;
        USHORT wProcessorArchitecture;
        LANGID wLangId;
        LPCSTR lpAssemblyDirectory;
        LPCSTR lpResourceName;
        LPCSTR lpApplicationName;
        HMODULE hModule;
    }
    alias ACTCTXA*        PACTCTXA;
    alias const(ACTCTXA)* PCACTCTXA;

    struct ACTCTXW {
        ULONG cbSize = this.sizeof;
        DWORD dwFlags;
        LPCWSTR lpSource;
        USHORT wProcessorArchitecture;
        LANGID wLangId;
        LPCWSTR lpAssemblyDirectory;
        LPCWSTR lpResourceName;
        LPCWSTR lpApplicationName;
        HMODULE hModule;
    }
    alias ACTCTXW*        PACTCTXW;
    alias const(ACTCTXW)* PCACTCTXW;

    struct ACTCTX_SECTION_KEYED_DATA {
        ULONG cbSize = this.sizeof;
        ULONG ulDataFormatVersion;
        PVOID lpData;
        ULONG ulLength;
        PVOID lpSectionGlobalData;
        ULONG ulSectionGlobalDataLength;
        PVOID lpSectionBase;
        ULONG ulSectionTotalLength;
        HANDLE hActCtx;
        HANDLE ulAssemblyRosterIndex;
    }
    alias ACTCTX_SECTION_KEYED_DATA*        PACTCTX_SECTION_KEYED_DATA;
    alias const(ACTCTX_SECTION_KEYED_DATA)* PCACTCTX_SECTION_KEYED_DATA;

    enum MEMORY_RESOURCE_NOTIFICATION_TYPE {
        LowMemoryResourceNotification,
        HighMemoryResourceNotification
    }

} // (_WIN32_WINNT >= 0x501)

static if (_WIN32_WINNT >= 0x410) {
    /*  apparently used only by SetThreadExecutionState (Win2000+)
     *  and DDK functions (version compatibility not established)
     */
    alias DWORD EXECUTION_STATE;
}

// Callbacks
extern (Windows) {
    alias DWORD function(LPVOID) LPTHREAD_START_ROUTINE;
    alias DWORD function(LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER,
        DWORD, DWORD, HANDLE, HANDLE, LPVOID)  LPPROGRESS_ROUTINE;
    alias void function(PVOID) LPFIBER_START_ROUTINE;

    alias BOOL function(HMODULE, LPCSTR, LPCSTR, WORD, LONG_PTR) ENUMRESLANGPROCA;
    alias BOOL function(HMODULE, LPCWSTR, LPCWSTR, WORD, LONG_PTR) ENUMRESLANGPROCW;
    alias BOOL function(HMODULE, LPCSTR, LPSTR, LONG_PTR) ENUMRESNAMEPROCA;
    alias BOOL function(HMODULE, LPCWSTR, LPWSTR, LONG_PTR) ENUMRESNAMEPROCW;
    alias BOOL function(HMODULE, LPSTR, LONG_PTR) ENUMRESTYPEPROCA;
    alias BOOL function(HMODULE, LPWSTR, LONG_PTR) ENUMRESTYPEPROCW;
    alias void function(DWORD, DWORD, LPOVERLAPPED) LPOVERLAPPED_COMPLETION_ROUTINE;
    alias LONG function(LPEXCEPTION_POINTERS) PTOP_LEVEL_EXCEPTION_FILTER;
    alias PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

    alias void function(ULONG_PTR) PAPCFUNC;
    alias void function(PVOID, DWORD, DWORD) PTIMERAPCROUTINE;

    static if (_WIN32_WINNT >= 0x500) {
        alias void function(PVOID, BOOLEAN) WAITORTIMERCALLBACK;
    }
}

LPTSTR MAKEINTATOM()(ushort i) {
    return cast(LPTSTR) cast(size_t) i;
}

extern (Windows) nothrow @nogc {
    // The following Win16 functions are obselete in Win32.
    int _hread(HFILE, LPVOID, int);
    int _hwrite(HFILE, LPCSTR, int);
    HFILE _lclose(HFILE);
    HFILE _lcreat(LPCSTR, int);
    LONG _llseek(HFILE, LONG, int);
    HFILE _lopen(LPCSTR, int);
    UINT _lread(HFILE, LPVOID, UINT);
    UINT _lwrite(HFILE, LPCSTR, UINT);
    SIZE_T GlobalCompact(DWORD);
    VOID GlobalFix(HGLOBAL);

    // MSDN contradicts itself on GlobalFlags:
    // "This function is provided only for compatibility with 16-bit versions of Windows."
    // but also requires Windows 2000 or above
    UINT GlobalFlags(HGLOBAL);
    VOID GlobalUnfix(HGLOBAL);
    BOOL GlobalUnWire(HGLOBAL);
    PVOID GlobalWire(HGLOBAL);
    SIZE_T LocalCompact(UINT);
    UINT LocalFlags(HLOCAL);
    SIZE_T LocalShrink(HLOCAL, UINT);

    /+
    //--------------------------------------
    // These functions are problematic

    version (UseNtoSKernel) {}else {
        /* CAREFUL: These are exported from ntoskrnl.exe and declared in winddk.h
           as __fastcall functions, but are  exported from kernel32.dll as __stdcall */
        static if (_WIN32_WINNT >= 0x501) {
         VOID InitializeSListHead(PSLIST_HEADER);
        }
        LONG InterlockedCompareExchange(LPLONG, LONG, LONG);
        // PVOID WINAPI InterlockedCompareExchangePointer(PVOID*, PVOID, PVOID);
        (PVOID)InterlockedCompareExchange((LPLONG)(d)    (PVOID)InterlockedCompareExchange((LPLONG)(d), (LONG)(e), (LONG)(c))
        LONG InterlockedDecrement(LPLONG);
        LONG InterlockedExchange(LPLONG, LONG);
        // PVOID WINAPI InterlockedExchangePointer(PVOID*, PVOID);
        (PVOID)InterlockedExchange((LPLONG)((PVOID)InterlockedExchange((LPLONG)(t), (LONG)(v))
        LONG InterlockedExchangeAdd(LPLONG, LONG);

        static if (_WIN32_WINNT >= 0x501) {
        PSLIST_ENTRY InterlockedFlushSList(PSLIST_HEADER);
        }
        LONG InterlockedIncrement(LPLONG);
        static if (_WIN32_WINNT >= 0x501) {
        PSLIST_ENTRY InterlockedPopEntrySList(PSLIST_HEADER);
        PSLIST_ENTRY InterlockedPushEntrySList(PSLIST_HEADER, PSLIST_ENTRY);
        }
    } // #endif //  __USE_NTOSKRNL__
    //--------------------------------------
    +/

    LONG InterlockedIncrement(LPLONG lpAddend);
    LONG InterlockedDecrement(LPLONG lpAddend);
    LONG InterlockedExchange(LPLONG Target, LONG Value);
    LONG InterlockedExchangeAdd(LPLONG Addend, LONG Value);
    LONG InterlockedCompareExchange(LONG *Destination, LONG Exchange, LONG Comperand);

    ATOM AddAtomA(LPCSTR);
    ATOM AddAtomW(LPCWSTR);
    BOOL AreFileApisANSI();
    BOOL Beep(DWORD, DWORD);
    HANDLE BeginUpdateResourceA(LPCSTR, BOOL);
    HANDLE BeginUpdateResourceW(LPCWSTR, BOOL);
    BOOL BuildCommDCBA(LPCSTR, LPDCB);
    BOOL BuildCommDCBW(LPCWSTR, LPDCB);
    BOOL BuildCommDCBAndTimeoutsA(LPCSTR, LPDCB, LPCOMMTIMEOUTS);
    BOOL BuildCommDCBAndTimeoutsW(LPCWSTR, LPDCB, LPCOMMTIMEOUTS);
    BOOL CallNamedPipeA(LPCSTR, PVOID, DWORD, PVOID, DWORD, PDWORD, DWORD);
    BOOL CallNamedPipeW(LPCWSTR, PVOID, DWORD, PVOID, DWORD, PDWORD, DWORD);
    BOOL CancelDeviceWakeupRequest(HANDLE);
    BOOL CheckTokenMembership(HANDLE, PSID, PBOOL);
    BOOL ClearCommBreak(HANDLE);
    BOOL ClearCommError(HANDLE, PDWORD, LPCOMSTAT);
    BOOL CloseHandle(HANDLE) @trusted;
    BOOL CommConfigDialogA(LPCSTR, HWND, LPCOMMCONFIG);
    BOOL CommConfigDialogW(LPCWSTR, HWND, LPCOMMCONFIG);
    LONG CompareFileTime(const(FILETIME)*, const(FILETIME)*);
    BOOL ContinueDebugEvent(DWORD, DWORD, DWORD);
    BOOL CopyFileA(LPCSTR, LPCSTR, BOOL);
    BOOL CopyFileW(LPCWSTR, LPCWSTR, BOOL);
    BOOL CopyFileExA(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD);
    BOOL CopyFileExW(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD);

    /+ FIXME
    alias memmove RtlMoveMemory;
    alias memcpy RtlCopyMemory;

    void RtlFillMemory(PVOID dest, SIZE_T len, BYTE fill) {
        memset(dest, fill, len);
    }

    void RtlZeroMemory(PVOID dest, SIZE_T len) {
        RtlFillMemory(dest, len, 0);
    }

    alias RtlMoveMemory MoveMemory;
    alias RtlCopyMemory CopyMemory;
    alias RtlFillMemory FillMemory;
    alias RtlZeroMemory ZeroMemory;
    +/
    BOOL CreateDirectoryA(LPCSTR, LPSECURITY_ATTRIBUTES);
    BOOL CreateDirectoryW(LPCWSTR, LPSECURITY_ATTRIBUTES);
    BOOL CreateDirectoryExA(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES);
    BOOL CreateDirectoryExW(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES);
    HANDLE CreateEvent0  0  0  0  0  	0  
0  0  0  0  0  0  0  0                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          A(LPSECURITY_ATTRIBUTES, BOOL, BOOL, LPCSTR);
    HANDLE CreateEventW(LPSECURITY_ATTRIBUTES, BOOL, BOOL, LPCWSTR);
    HANDLE CreateFileA(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE);
    HANDLE CreateFileW(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE);
    HANDLE CreateIoCompletionPort(HANDLE, HANDLE, ULONG_PTR, DWORD);
    HANDLE CreateMailslotA(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES);
    HANDLE CreateMailslotW(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES);
    HANDLE CreateMutexA(LPSECURITY_ATTRIBUTES, BOOL, LPCSTR);
    HANDLE CreateMutexW(LPSECURITY_ATTRIBUTES, BOOL, LPCWSTR);
    BOOL CreatePipe(PHANDLE, PHANDLE, LPSECURITY_ATTRIBUTES, DWORD);
    BOOL CreateProcessA(LPCSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, PVOID, LPCSTR, LPSTARTUPINFOA, LPPROCESS_INFORMATION);
    BOOL CreateProcessW(LPCWSTR, LPWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, PVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION);
    HANDLE CreateSemaphoreA(LPSECURITY_ATTRIBUTES, LONG, LONG, LPCSTR) @trusted;
    HANDLE CreateSemaphoreW(LPSECURITY_ATTRIBUTES, LONG, LONG, LPCWSTR) @trusted;
    HANDLE CreateThread(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, PVOID, DWORD, PDWORD);
    BOOL DebugActiveProcess(DWORD);
    void DebugBreak();
    ATOM DeleteAtom(ATOM);
    void DeleteCriticalSection(PCRITICAL_SECTION);
    BOOL DeleteFileA(LPCSTR);
    BOOL DeleteFileW(LPCWSTR);
    BOOL DisableThreadLibraryCalls(HMODULE);
    BOOL DosDateTimeToFileTime(WORD, WORD, LPFILETIME);
    BOOL DuplicateHandle(HANDLE, HANDLE, HANDLE, PHANDLE, DWORD, BOOL, DWORD);
    BOOL EndUpdateResourceA(HANDLE, BOOL);
    BOOL EndUpdateResourceW(HANDLE, BOOL);
    void EnterCriticalSection(LPCRITICAL_SECTION);
    void EnterCriticalSection(shared(CRITICAL_SECTION)*);
    BOOL EnumResourceLanguagesA(HMODULE, LPCSTR, LPCSTR, ENUMRESLANGPROC, LONG_PTR);
    BOOL EnumResourceLanguagesW(HMODULE, LPCWSTR, LPCWSTR, ENUMRESLANGPROC, LONG_PTR);
    BOOL EnumResourceNamesA(HMODULE, LPCSTR, ENUMRESNAMEPROC, LONG_PTR);
    BOOL EnumResourceNamesW(HMODULE, LPCWSTR, ENUMRESNAMEPROC, LONG_PTR);
    BOOL EnumResourceTypesA(HMODULE, ENUMRESTYPEPROC, LONG_PTR);
    BOOL EnumResourceTypesW(HMODULE, ENUMRESTYPEPROC, LONG_PTR);
    BOOL EscapeCommFunction(HANDLE, DWORD);
    void ExitProcess(UINT); // Never returns
    void ExitThread(DWORD); // Never returns
    DWORD ExpandEnvironmentStringsA(LPCSTR, LPSTR, DWORD);
    DWORD ExpandEnvironmentStringsW(LPCWSTR, LPWSTR, DWORD);
    void FatalAppExitA(UINT, LPCSTR);
    void FatalAppExitW(UINT, LPCWSTR);
    void FatalExit(int);
    BOOL FileTimeToDosDateTime(const(FILETIME)*, LPWORD, LPWORD);
    BOOL FileTimeToLocalFileTime(const(FILETIME)*, LPFILETIME);
    BOOL FileTimeToSystemTime(const(FILETIME)*, LPSYSTEMTIME);
    ATOM FindAtomA(LPCSTR);
    ATOM FindAtomW(LPCWSTR);
    BOOL FindClose(HANDLE);
    BOOL FindCloseChangeNotification(HANDLE);
    HANDLE FindFirstChangeNotificationA(LPCSTR, BOOL, DWORD);
    HANDLE FindFirstChangeNotificationW(LPCWSTR, BOOL, DWORD);
    HANDLE FindFirstFileA(LPCSTR, LPWIN32_FIND_DATAA);
    HANDLE FindFirstFileW(LPCWSTR, LPWIN32_FIND_DATAW);
    BOOL FindNextChangeNotification(HANDLE);
    BOOL FindNextFileA(HANDLE, LPWIN32_FIND_DATAA);
    BOOL FindNextFileW(HANDLE, LPWIN32_FIND_DATAW);
    HRSRC FindResourceA(HMODULE, LPCSTR, LPCSTR);
    HRSRC FindResourceW(HINSTANCE, LPCWSTR, LPCWSTR);
    HRSRC FindResourceExA(HINSTANCE, LPCSTR, LPCSTR, WORD);
    HRSRC FindResourceExW(HINSTANCE, LPCWSTR, LPCWSTR, WORD);
    BOOL FlushFileBuffers(HANDLE);
    BOOL FlushInstructionCache(HANDLE, PCVOID, SIZE_T);
    DWORD FormatMessageA(DWORD, PCVOID, DWORD, DWORD, LPSTR, DWORD, va_list*);
    DWORD FormatMessageW(DWORD, PCVOID, DWORD, DWORD, LPWSTR, DWORD, va_list*);
    BOOL FreeEnvironmentStringsA(LPSTR);
    BOOL FreeEnvironmentStringsW(LPWSTR);
    BOOL FreeLibrary(HMODULE);
    void FreeLibraryAndExitThread(HMODULE, DWORD); // never returns
    BOOL FreeResource(HGLOBAL);
    UINT GetAtomNameA(ATOM, LPSTR, int);
    UINT GetAtomNameW(ATOM, LPWSTR, int);
    LPSTR GetCommandLineA();
    LPWSTR GetCommandLineW();
    BOOL GetCommConfig(HANDLE, LPCOMMCONFIG, PDWORD);
    BOOL GetCommMask(HANDLE, PDWORD);
    BOOL GetCommModemStatus(HANDLE, PDWORD);
    BOOL GetCommProperties(HANDLE, LPCOMMPROP);
    BOOL GetCommState(HANDLE, LPDCB);
    BOOL GetCommTimeouts(HANDLE, LPCOMMTIMEOUTS);
    BOOL GetComputerNameA(LPSTR, PDWORD);
    BOOL GetComputerNameW(LPWSTR, PDWORD);
    DWORD GetCurrentDirectoryA(DWORD, LPSTR);
    DWORD GetCurrentDirectoryW(DWORD, LPWSTR);
    HANDLE GetCurrentProcess();
    DWORD GetCurrentProcessId();
    HANDLE GetCurrentThread();
/* In MinGW:
#ifdef _WIN32_WCE
extern DWORD GetCurrentThreadId(void);
#else
WINBASEAPI DWORD WINAPI GetCurrentThreadId(void);
#endif
*/
    DWORD GetCurrentThreadId();

    alias GetTickCount GetCurrentTime;

    BOOL GetDefaultCommConfigA(LPCSTR, LPCOMMCONFIG, PDWORD);
    BOOL GetDefaultCommConfigW(LPCWSTR, LPCOMMCONFIG, PDWORD);
    BOOL GetDiskFreeSpaceA(LPCSTR, PDWORD, PDWORD, PDWORD, PDWORD);
    BOOL GetDiskFreeSpaceW(LPCWSTR, PDWORD, PDWORD, PDWORD, PDWORD);
    BOOL GetDiskFreeSpaceExA(LPCSTR, PULARGE_INTEGER, PULARGE_INTEGER, PULARGE_INTEGER);
    BOOL GetDiskFreeSpaceExW(LPCWSTR, PULARGE_INTEGER, PULARGE_INTEGER, PULARGE_INTEGER);
    UINT GetDriveTypeA(LPCSTR);
    UINT GetDriveTypeW(LPCWSTR);
    LPSTR GetEnvironmentStringsA();
    LPWSTR GetEnvironmentStringsW();
    DWORD GetEnvironmentVariableA(LPCSTR, LPSTR, DWORD);
    DWORD GetEnvironmentVariableW(LPCWSTR, LPWSTR, DWORD);
    BOOL GetExitCodeProcess(HANDLE, PDWORD);
    BOOL GetExitCodeThread(HANDLE, PDWORD);
    DWORD GetFileAttributesA(LPCSTR);
    DWORD GetFileAttributesW(LPCWSTR);
    BOOL GetFileInformationByHandle(HANDLE, LPBY_HANDLE_FILE_INFORMATION);
    DWORD GetFileSize(HANDLE, PDWORD);
    BOOL GetFileTime(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME);
    DWORD GetFileType(HANDLE);
    DWORD GetFullPathNameA(LPCSTR, DWORD, LPSTR, LPSTR*);
    DWORD GetFullPathNameW(LPCWSTR, DWORD, LPWSTR, LPWSTR*);
    DWORD GetLastError() @trusted;
    void GetLocalTime(LPSYSTEMTIME);
    DWORD GetLogicalDrives();
    DWORD GetLogicalDriveStringsA(DWORD, LPSTR);
    DWORD GetLogicalDriveStringsW(DWORD, LPWSTR);
    BOOL GetMailslotInfo(HANDLE, PDWORD, PDWORD, PDWORD, PDWORD);
    DWORD GetModuleFileNameA(HINSTANCE, LPSTR, DWORD);
    DWORD GetModuleFileNameW(HINSTANCE, LPWSTR, DWORD);
    HMODULE GetModuleHandleA(LPCSTR);
    HMODULE GetModuleHandleW(LPCWSTR);
    BOOL GetNamedPipeHandleStateA(HANDLE, PDWORD, PDWORD, PDWORD, PDWORD, LPSTR, DWORD);
    BOOL GetNamedPipeHandleStateW(HANDLE, PDWORD, PDWORD, PDWORD, PDWORD, LPWSTR, DWORD);
    BOOL GetNamedPipeInfo(HANDLE, PDWORD, PDWORD, PDWORD, PDWORD);
    BOOL GetOverlappedResult(HANDLE, LPOVERLAPPED, PDWORD, BOOL);
    DWORD GetPriorityClass(HANDLE);
    UINT GetPrivateProfileIntA(LPCSTR, LPCSTR, INT, LPCSTR);
    UINT GetPrivateProfileIntW(LPCWSTR, LPCWSTR, INT, LPCWSTR);
    DWORD GetPrivateProfileSectionA(LPCSTR, LPSTR, DWORD, LPCSTR);
    DWORD GetPrivateProfileSectionW(LPCWSTR, LPWSTR, DWORD, LPCWSTR);
    DWORD GetPrivateProfileSectionNamesA(LPSTR, DWORD, LPCSTR);
    DWORD GetPrivateProfileSectionNamesW(LPWSTR, DWORD, LPCWSTR);
    DWORD GetPrivateProfileStringA(LPCSTR, LPCSTR, LPCSTR, LPSTR, DWORD, LPCSTR);
    DWORD GetPrivateProfileStringW(LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, DWORD, LPCWSTR);
    BOOL GetPrivateProfileStructA(LPCSTR, LPCSTR, LPVOID, UINT, LPCSTR);
    BOOL GetPrivateProfileStructW(LPCWSTR, LPCWSTR, LPVOID, UINT, LPCWSTR);
    FARPROC GetProcAddress(HMODULE, LPCSTR); // 1st param wrongly HINSTANCE in MinGW
    BOOL GetProcessAffinityMask(HANDLE, PDWORD_PTR, PDWORD_PTR);
    DWORD GetProcessVersion(DWORD);
    UINT GetProfileIntA(LPCSTR, LPCSTR, INT);
    UINT GetProfileIntW(LPCWSTR, LPCWSTR, INT);
    DWORD GetProfileSectionA(LPCSTR, LPSTR, DWORD);
    DWORD GetProfileSectionW(LPCWSTR, LPWSTR, DWORD);
    DWORD GetProfileStringA(LPCSTR, LPCSTR, LPCSTR, LPSTR, DWORD);
    DWORD GetProfileStringW(LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, DWORD);
    DWORD GetShortPathNameA(LPCSTR, LPSTR, DWORD);
    DWORD GetShortPathNameW(LPCWSTR, LPWSTR, DWORD);
    VOID GetStartupInfoA(LPSTARTUPINFOA);
    VOID GetStartupInfoW(LPSTARTUPINFOW);
    HANDLE GetStdHandle(DWORD);
    UINT GetSystemDirectoryA(LPSTR, UINT);
    UINT GetSystemDirectoryW(LPWSTR, UINT);
    VOID GetSystemInfo(LPSYSTEM_INFO);
    VOID GetSystemTime(LPSYSTEMTIME);
    BOOL GetSystemTimeAdjustment(PDWORD, PDWORD, PBOOL);
    void GetSystemTimeAsFileTime(LPFILETIME);
    UINT GetTempFileNameA(LPCSTR, LPCSTR, UINT, LPSTR);
    UINT GetTempFileNameW(LPCWSTR, LPCWSTR, UINT, LPWSTR);
    DWORD GetTempPathA(DWORD, LPSTR);
    DWORD GetTempPathW(DWORD, LPWSTR);
    BOOL GetThreadContext(HANDLE, LPCONTEXT);
    int GetThreadPriority(HANDLE);
    BOOL GetThreadSelectorEntry(HANDLE, DWORD, LPLDT_ENTRY);
    DWORD GetTickCount();
    DWORD GetTimeZoneInformation(LPTIME_ZONE_INFORMATION);
    BOOL GetUserNameA (LPSTR, PDWORD);
    BOOL GetUserNameW(LPWSTR, PDWORD);
    DWORD GetVersion();
    BOOL GetVersionExA(LPOSVERSIONINFOA);
    BOOL GetVersionExW(LPOSVERSIONINFOW);
    BOOL GetVolumeInformationA(LPCSTR, LPSTR, DWORD, PDWORD, PDWORD, PDWORD, LPSTR, DWORD);
    BOOL GetVolumeInformationW(LPCWSTR, LPWSTR, DWORD, PDWORD, PDWORD, PDWORD, LPWSTR, DWORD);
    UINT GetWindowsDirectoryA(LPSTR, UINT);
    UINT GetWindowsDirectoryW(LPWSTR, UINT);
    DWORD GetWindowThreadProcessId(HWND, PDWORD);
    ATOM GlobalAddAtomA(LPCSTR);
    ATOM GlobalAddAtomW(LPCWSTR);
    ATOM GlobalDeleteAtom(ATOM);
    ATOM GlobalFindAtomA(LPCSTR);
    ATOM GlobalFindAtomW(LPCWSTR);
    UINT GlobalGetAtomNameA(ATOM, LPSTR, int);
    UINT GlobalGetAtomNameW(ATOM, LPWSTR, int);

    bool HasOverlappedIoCompleted(LPOVERLAPPED lpOverlapped) {
        return lpOverlapped.Internal != STATUS_PENDING;
    }

    BOOL InitAtomTable(DWORD);
    VOID InitializeCriticalSection(LPCRITICAL_SECTION) @trusted;
    /*  ??? The next two are allegedly obsolete and "supported only for
     *  backward compatibility with the 16-bit Windows API".  Yet the
     *  replacements IsBadReadPtr and IsBadWritePtr are apparently Win2000+
     *  only.  Where's the mistake?
     */
    BOOL IsBadHugeReadPtr(PCVOID, UINT_PTR);
    BOOL IsBadHugeWritePtr(PVOID, UINT_PTR);
    BOOL IsBadReadPtr(PCVOID, UINT_PTR);
    BOOL IsBadStringPtrA(LPCSTR, UINT_PTR);
    BOOL IsBadStringPtrW(LPCWSTR, UINT_PTR);
    BOOL IsBadWritePtr(PVOID, UINT_PTR);
    void LeaveCriticalSection(LPCRITICAL_SECTION);
    void LeaveCriticalSection(shared(CRITICAL_SECTION)*);
    HINSTANCE LoadLibraryA(LPCSTR);
    HINSTANCE LoadLibraryW(LPCWSTR);
    HINSTANCE LoadLibraryExA(LPCSTR, HANDLE, DWORD);
    HINSTANCE LoadLibraryExW(LPCWSTR, HANDLE, DWORD);
    DWORD LoadModule(LPCSTR, PVOID);
    HGLOBAL LoadResource(HINSTANCE, HRSRC);
    BOOL LocalFileTimeToFileTime(const(FILETIME)*, LPFILETIME);
    BOOL LockFile(HANDLE, DWORD, DWORD, DWORD, DWORD);
    PVOID LockResource(HGLOBAL);

    LPSTR lstrcatA(LPSTR, LPCSTR);
    LPWSTR lstrcatW(LPWSTR, LPCWSTR);
    int lstrcmpA(LPCSTR, LPCSTR);
    int lstrcmpiA(LPCSTR, LPCSTR);
    int lstrcmpiW(LPCWSTR, LPCWSTR);
    int lstrcmpW(LPCWSTR, LPCWSTR);
    LPSTR lstrcpyA(LPSTR, LPCSTR);
    LPSTR lstrcpynA(LPSTR, LPCSTR, int);
    LPWSTR lstrcpynW(LPWSTR, LPCWSTR, int);
    LPWSTR lstrcpyW(LPWSTR, LPCWSTR);
    int lstrlenA(LPCSTR);
    int lstrlenW(LPCWSTR);

    BOOL MoveFileA(LPCSTR, LPCSTR);
    BOOL MoveFileW(LPCWSTR, LPCWSTR);
    int MulDiv(int, int, int);
    HANDLE OpenEventA(DWORD, BOOL, LPCSTR);
    HANDLE OpenEventW(DWORD, BOOL, LPCWSTR);
    deprecated HFILE OpenFile(LPCSTR, LPOFSTRUCT, UINT);
    HANDLE OpenMutexA(DWORD, BOOL, LPCSTR);
    HANDLE OpenMutexW(DWORD, BOOL, LPCWSTR);
    HANDLE OpenProcess(DWORD, BOOL, DWORD);
    HANDLE OpenSemaphoreA(DWORD, BOOL, LPCSTR);
    HANDLE OpenSemaphoreW(DWORD, BOOL, LPCWSTR);
    void OutputDebugStringA(LPCSTR);
    void OutputDebugStringW(LPCWSTR);
    BOOL PeekNamedPipe(HANDLE, PVOID, DWORD, PDWORD, PDWORD, PDWORD);
    BOOL PulseEvent(HANDLE);
    BOOL PurgeComm(HANDLE, DWORD);
    BOOL QueryPerformanceCounter(PLARGE_INTEGER);
    BOOL QueryPerformanceFrequency(PLARGE_INTEGER);
    DWORD QueueUserAPC(PAPCFUNC, HANDLE, ULONG_PTR);
    void RaiseException(DWORD, DWORD, DWORD, const(ULONG_PTR)*);
    BOOL ReadFile(HANDLE, PVOID, DWORD, PDWORD, LPOVERLAPPED);
    BOOL ReadFileEx(HANDLE, PVOID, DWORD, LPOVERLAPPED, LPOVERLAPPED_COMPLETION_ROUTINE);
    BOOL ReadProcessMemory(HANDLE, PCVOID, PVOID, SIZE_T, SIZE_T*);
    BOOL ReleaseMutex(HANDLE);
    BOOL ReleaseSemaphore(HANDLE, LONG, LPLONG);
    BOOL RemoveDirectoryA(LPCSTR);
    BOOL RemoveDirectoryW(LPCWSTR);
/* In MinGW:
#ifdef _WIN32_WCE
extern BOOL ResetEvent(HANDLE);
#else
WINBASEAPI BOOL WINAPI ResetEvent(HANDLE);
#endif
*/
    BOOL ResetEvent(HANDLE);
    DWORD ResumeThread(HANDLE);
    DWORD SearchPathA(LPCSTR, LPCSTR, LPCSTR, DWORD, LPSTR, LPSTR*);
    DWORD SearchPathW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPWSTR, LPWSTR*);
    BOOL SetCommBreak(HANDLE);
    BOOL SetCommConfig(HANDLE, LPCOMMCONFIG, DWORD);
    BOOL SetCommMask(HANDLE, DWORD);
    BOOL SetCommState(HANDLE, LPDCB);
    BOOL SetCommTimeouts(HANDLE, LPCOMMTIMEOUTS);
    BOOL SetComputerNameA(LPCSTR);
    BOOL SetComputerNameW(LPCWSTR);
    BOOL SetCurrentDirectoryA(LPCSTR);
    BOOL SetCurrentDirectoryW(LPCWSTR);
    BOOL SetDefaultCommConfigA(LPCSTR, LPCOMMCONFIG, DWORD);
    BOOL SetDefaultCommConfigW(LPCWSTR, LPCOMMCONFIG, DWORD);
    BOOL SetEndOfFile(HANDLE);
    BOOL SetEnvironmentVariableA(LPCSTR, LPCSTR);
    BOOL SetEnvironmentVariableW(LPCWSTR, LPCWSTR);
    UINT SetErrorMode(UINT);
/* In MinGW:
#ifdef _WIN32_WCE
extern BOOL SetEvent(HANDLE);
#else
WINBASEAPI BOOL WINAPI SetEvent(HANDLE);
#endif
*/
    BOOL SetEvent(HANDLE);
    VOID SetFileApisToANSI();
    VOID SetFileApisToOEM();
    BOOL SetFileAttributesA(LPCSTR, DWORD);
    BOOL SetFileAttributesW(LPCWSTR, DWORD);
    DWORD SetFilePointer(HANDLE, LONG, PLONG, DWORD);
    BOOL SetFileTime(HANDLE, const(FILETIME)*, const(FILETIME)*, const(FILETIME)*);
    deprecated UINT SetHandleCount(UINT);
    void SetLastError(DWORD);
    void SetLastErrorEx(DWORD, DWORD);
    BOOL SetLocalTime(const(SYSTEMTIME)*);
    BOOL SetMailslotInfo(HANDLE, DWORD);
    BOOL SetNamedPipeHandleState(HANDLE, PDWORD, PDWORD, PDWORD);
    BOOL SetPriorityClass(HANDLE, DWORD);
    BOOL SetStdHandle(DWORD, HANDLE);
    BOOL SetSystemTime(const(SYSTEMTIME)*);
    DWORD_PTR SetThreadAffinityMask(HANDLE, DWORD_PTR);
    BOOL SetThreadContext(HANDLE, const(CONTEXT)*);
    BOOL SetThreadPriority(HANDLE, int);
    BOOL SetTimeZoneInformation(const(TIME_ZONE_INFORMATION)*);
    LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER);
    BOOL SetupComm(HANDLE, DWORD, DWORD);
    BOOL SetVolumeLabelA(LPCSTR, LPCSTR);
    BOOL SetVolumeLabelW(LPCWSTR, LPCWSTR);

    DWORD SizeofResource(HINSTANCE, HRSRC);
    void Sleep(DWORD);
    DWORD SleepEx(DWORD, BOOL);
    DWORD SuspendThread(HANDLE);
    BOOL SystemTimeToFileTime(const(SYSTEMTIME)*, LPFILETIME);
    BOOL TerminateProcess(HANDLE, UINT);
    BOOL TerminateThread(HANDLE, DWORD);
    DWORD TlsAlloc();
    BOOL TlsFree(DWORD);
    PVOID TlsGetValue(DWORD);
    BOOL TlsSetValue(DWORD, PVOID);
    BOOL TransactNamedPipe(HANDLE, PVOID, DWORD, PVOID, DWORD, PDWORD, LPOVERLAPPED);
    BOOL TransmitCommChar(HANDLE, char);
    LONG UnhandledExceptionFilter(LPEXCEPTION_POINTERS);
    BOOL UnlockFile(HANDLE, DWORD, DWORD, DWORD, DWORD);
    BOOL WaitCommEvent(HANDLE, PDWORD, LPOVERLAPPED);
    BOOL WaitForDebugEvent(LPDEBUG_EVENT, DWORD);
    DWORD WaitForMultipleObjects(DWORD, const(HANDLE)*, BOOL, DWORD);
    DWORD WaitForMultipleObjectsEx(DWORD, const(HANDLE)*, BOOL, DWORD, BOOL);
    DWORD WaitForSingleObject(HANDLE, DWORD);
    DWORD WaitForSingleObjectEx(HANDLE, DWORD, BOOL);
    BOOL WaitNamedPipeA(LPCSTR, DWORD);
    BOOL WaitNamedPipeW(LPCWSTR, DWORD);
    // undocumented on MSDN
    BOOL WinLoadTrustProvider(GUID*);
    BOOL WriteFile(HANDLE, PCVOID, DWORD, PDWORD, LPOVERLAPPED);
    BOOL WriteFileEx(HANDLE, PCVOID, DWORD, LPOVERLAPPED, LPOVERLAPPED_COMPLETION_ROUTINE);
    BOOL WritePrivateProfileSectionA(LPCSTR, LPCSTR, LPCSTR);
    BOOL WritePrivateProfileSectionW(LPCWSTR, LPCWSTR, LPCWSTR);
    BOOL WritePrivateProfileStringA(LPCSTR, LPCSTR, LPCSTR, LPCSTR);
    BOOL WritePrivateProfileStringW(LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR);
    BOOL WritePrivateProfileStructA(LPCSTR, LPCSTR, LPVOID, UINT, LPCSTR);
    BOOL WritePrivateProfileStructW(LPCWSTR, LPCWSTR, LPVOID, UINT, LPCWSTR);
    BOOL WriteProcessMemory(HANDLE, LPVOID, LPCVOID, SIZE_T, SIZE_T*);
    BOOL WriteProfileSectionA(LPCSTR, LPCSTR);
    BOOL WriteProfileSectionW(LPCWSTR, LPCWSTR);
    BOOL WriteProfileStringA(LPCSTR, LPCSTR, LPCSTR);
    BOOL WriteProfileStringW(LPCWSTR, LPCWSTR, LPCWSTR);

    /*  Memory allocation functions.
     *  MSDN documents these erroneously as Win2000+; thus it is uncertain what
     *  version compatibility they really have.
     */
    HGLOBAL GlobalAlloc(UINT, SIZE_T);
    HGLOBAL GlobalDiscard(HGLOBAL);
    HGLOBAL GlobalFree(HGLOBAL);
    HGLOBAL GlobalHandle(PCVOID);
    LPVOID GlobalLock(HGLOBAL);
    VOID GlobalMemoryStatus(LPMEMORYSTATUS);
    HGLOBAL GlobalReAlloc(HGLOBAL, SIZE_T, UINT);
    SIZE_T GlobalSize(HGLOBAL);
    BOOL GlobalUnlock(HGLOBAL);
    PVOID HeapAlloc(HANDLE, DWORD, SIZE_T);
    SIZE_T HeapCompact(HANDLE, DWORD);
    HANDLE HeapCreate(DWORD, SIZE_T, SIZE_T);
    BOOL HeapDestroy(HANDLE);
    BOOL HeapFree(HANDLE, DWORD, PVOID);
    BOOL HeapLock(HANDLE);
    PVOID HeapReAlloc(HANDLE, DWORD, PVOID, SIZE_T);
    SIZE_T HeapSize(HANDLE, DWORD, PCVOID);
    BOOL HeapUnlock(HANDLE);
    BOOL HeapValidate(HANDLE, DWORD, PCVOID);
    BOOL HeapWalk(HANDLE, LPPROCESS_HEAP_ENTRY);
    HLOCAL LocalAlloc(UINT, SIZE_T);
    HLOCAL LocalDiscard(HLOCAL);
    HLOCAL LocalFree(HLOCAL);
    HLOCAL LocalHandle(LPCVOID);
    PVOID LocalLock(HLOCAL);
    HLOCAL LocalReAlloc(HLOCAL, SIZE_T, UINT);
    SIZE_T LocalSize(HLOCAL);
    BOOL LocalUnlock(HLOCAL);
    PVOID VirtualAlloc(PVOID, SIZE_T, DWORD, DWORD);
    PVOID VirtualAllocEx(HANDLE, PVOID, SIZE_T, DWORD, DWORD);
    BOOL VirtualFree(PVOID, SIZE_T, DWORD);
    BOOL VirtualFreeEx(HANDLE, PVOID, SIZE_T, DWORD);
    BOOL VirtualLock(PVOID, SIZE_T);
    BOOL VirtualProtect(PVOID, SIZE_T, DWORD, PDWORD);
    BOOL VirtualProtectEx(HANDLE, PVOID, SIZE_T, DWORD, PDWORD);
    SIZE_T VirtualQuery(LPCVOID, PMEMORY_BASIC_INFORMATION, SIZE_T);
    SIZE_T VirtualQueryEx(HANDLE, LPCVOID, PMEMORY_BASIC_INFORMATION, SIZE_T);
    BOOL VirtualUnlock(PVOID, SIZE_T);
// not in MinGW 4.0 - ???
    static if (_WIN32_WINNT >= 0x600) {
        BOOL CancelIoEx(HANDLE, LPOVERLAPPED);
    }

    BOOL CancelIo(HANDLE);
    BOOL CancelWaitableTimer(HANDLE);
    PVOID ConvertThreadToFiber(PVOID);
    LPVOID CreateFiber(SIZE_T, LPFIBER_START_ROUTINE, LPVOID);
    HANDLE CreateWaitableTimerA(LPSECURITY_ATTRIBUTES, BOOL, LPCSTR);
    HANDLE CreateWaitableTimerW(LPSECURITY_ATTRIBUTES, BOOL, LPCWSTR);
    void DeleteFiber(PVOID);
    BOOL GetFileAttributesExA(LPCSTR, GET_FILEEX_INFO_LEVELS, PVOID);
    BOOL GetFileAttributesExW(LPCWSTR, GET_FILEEX_INFO_LEVELS, PVOID);
    DWORD GetLongPathNameA(LPCSTR, LPSTR, DWORD);
    DWORD GetLongPathNameW(LPCWSTR, LPWSTR, DWORD);
    BOOL InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION, DWORD);
    BOOL IsDebuggerPresent();
    HANDLE OpenWaitableTimerA(DWORD, BOOL, LPCSTR);
    HANDLE OpenWaitableTimerW(DWORD, BOOL, LPCWSTR);
    DWORD QueryDosDeviceA(LPCSTR, LPSTR, DWORD);
    DWORD QueryDosDeviceW(LPCWSTR, LPWSTR, DWORD);
    BOOL SetWaitableTimer(HANDLE, const(LARGE_INTEGER)*, LONG, PTIMERAPCROUTINE, PVOID, BOOL);
    void SwitchToFiber(PVOID);

    static if (_WIN32_WINNT >= 0x500) {
        HANDLE OpenThread(DWORD, BOOL, DWORD);
    }

    BOOL AccessCheck(PSECURITY_DESCRIPTOR, HANDLE, DWORD, PGENERIC_MAPPING, PPRIVILEGE_SET, PDWORD, PDWORD, PBOOL);
    BOOL AccessCheckAndAuditAlarmA(LPCSTR, LPVOID, LPSTR, LPSTR, PSECURITY_DESCRIPTOR, DWORD, PGENERIC_MAPPING, BOOL, PDWORD, PBOOL, PBOOL);
    BOOL AccessCheckAndAuditAlarmW(LPCWSTR, LPVOID, LPWSTR, LPWSTR, PSECURITY_DESCRIPTOR, DWORD, PGENERIC_MAPPING, BOOL, PDWORD, PBOOL, PBOOL);
    BOOL AddAccessAllowedAce(PACL, DWORD, DWORD, PSID);
    BOOL AddAccessDeniedAce(PACL, DWORD, DWORD, PSID);
    BOOL AddAce(PACL, DWORD, DWORD, PVOID, DWORD);
    BOOL AddAuditAccessAce(PACL, DWORD, DWORD, PSID, BOOL, BOOL);
    BOOL AdjustTokenGroups(HANDLE, BOOL, PTOKEN_GROUPS, DWORD, PTOKEN_GROUPS, PDWORD);
    BOOL AdjustTokenPrivileges(HANDLE, BOOL, PTOKEN_PRIVILEGES, DWORD, PTOKEN_PRIVILEGES, PDWORD);
    BOOL AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY, BYTE, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, PSID*);
    BOOL AllocateLocallyUniqueId(PLUID);
    BOOL AreAllAccessesGranted(DWORD, DWORD);
    BOOL AreAnyAccessesGranted(DWORD, DWORD);
    BOOL BackupEventLogA(HANDLE, LPCSTR);
    BOOL BackupEventLogW(HANDLE, LPCWSTR);
    BOOL BackupRead(HANDLE, LPBYTE, DWORD, LPDWORD, BOOL, BOOL, LPVOID*);
    BOOL BackupSeek(HANDLE, DWORD, DWORD, LPDWORD, LPDWORD, LPVOID*);
    BOOL BackupWrite(HANDLE, LPBYTE, DWORD, LPDWORD, BOOL, BOOL, LPVOID*);
    BOOL ClearEventLogA(HANDLE, LPCSTR);
    BOOL ClearEventLogW(HANDLE, LPCWSTR);
    BOOL CloseEventLog(HANDLE);
    BOOL ConnectNamedPipe(HANDLE, LPOVERLAPPED);
    BOOL CopySid(DWORD, PSID, PSID);
    HANDLE CreateNamedPipeA(LPCSTR, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPSECURITY_ATTRIBUTES);
    HANDLE CreateNamedPipeW(LPCWSTR, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPSECURITY_ATTRIBUTES);
    BOOL CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR*, BOOL, HANDLE, PGENERIC_MAPPING);
    BOOL CreateProcessAsUserA(HANDLE, LPCSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, PVOID, LPCSTR, LPSTARTUPINFOA, LPPROCESS_INFORMATION);
    BOOL CreateProcessAsUserW(HANDLE, LPCWSTR, LPWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, PVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION);
    HANDLE CreateRemoteThread(HANDLE, LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD);
    DWORD CreateTapePartition(HANDLE, DWORD, DWORD, DWORD);
    BOOL DefineDosDeviceA(DWORD, LPCSTR, LPCSTR);
    BOOL DefineDosDeviceW(DWORD, LPCWSTR, LPCWSTR);
    BOOL DeleteAce(PACL, DWORD);
    BOOL DeregisterEventSource(HANDLE);
    BOOL DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR*);
    BOOL DeviceIoControl(HANDLE, DWORD, PVOID, DWORD, PVOID, DWORD, PDWORD, POVERLAPPED);
    BOOL DisconnectNamedPipe(HANDLE);
    BOOL DuplicateToken(HANDLE, SECURITY_IMPERSONATION_LEVEL, PHANDLE);
    BOOL DuplicateTokenEx(HANDLE, DWORD, LPSECURITY_ATTRIBUTES, SECURITY_IMPERSONATION_LEVEL, TOKEN_TYPE, PHANDLE);
    BOOL EqualPrefixSid(PSID, PSID);
    BOOL EqualSid(PSID, PSID);
    DWORD EraseTape(HANDLE, DWORD, BOOL);
    HANDLE FindFirstFileExA(LPCSTR, FINDEX_INFO_LEVELS, PVOID, FINDEX_SEARCH_OPS, PVOID, DWORD);
    HANDLE FindFirstFileExW(LPCWSTR, FINDEX_INFO_LEVELS, PVOID, FINDEX_SEARCH_OPS, PVOID, DWORD);
    BOOL FindFirstFreeAce(PACL, PVOID*);
    PVOID FreeSid(PSID);
    BOOL GetAce(PACL, DWORD, LPVOID*);
    BOOL GetAclInformation(PACL, PVOID, DWORD, ACL_INFORMATION_CLASS);
    BOOL GetBinaryTypeA(LPCSTR, PDWORD);
    BOOL GetBinaryTypeW(LPCWSTR, PDWORD);
    DWORD GetCompressedFileSizeA(LPCSTR, PDWORD);
    DWORD GetCompressedFileSizeW(LPCWSTR, PDWORD);
    BOOL GetCurrentHwProfileA(LPHW_PROFILE_INFOA);
    BOOL GetCurrentHwProfileW(LPHW_PROFILE_INFOW);
    BOOL GetFileSecurityA(LPCSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, PDWORD);
    BOOL GetFileSecurityW(LPCWSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, PDWORD);
    BOOL GetHandleInformation(HANDLE, PDWORD);
    BOOL GetKernelObjectSecurity(HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, PDWORD);
    DWORD GetLengthSid(PSID);
    BOOL GetNumberOfEventLogRecords(HANDLE, PDWORD);
    BOOL GetOldestEventLogRecord(HANDLE, PDWORD);
    BOOL GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, PDWORD);
    BOOL GetProcessPriorityBoost(HANDLE, PBOOL);
    BOOL GetProcessShutdownParameters(PDWORD, PDWORD);
    BOOL GetProcessTimes(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME);
    HWINSTA GetProcessWindowStation();
    BOOL GetProcessWorkingSetSize(HANDLE, PSIZE_T, PSIZE_T);
    BOOL GetQueuedCompletionStatus(HANDLE, PDWORD, PULONG_PTR, LPOVERLAPPED*, DWORD);
    BOOL GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR_CONTROL, PDWORD);
    BOOL GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR, LPBOOL, PACL*, LPBOOL);
    BOOL GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR, PSID*, LPBOOL);
    DWORD GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR);
    BOOL GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR, PSID*, LPBOOL);
    BOOL GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR, LPBOOL, PACL*, LPBOOL);
    PSID_IDENTIFIER_AUTHORITY GetSidIdentifierAuthority(PSID);
    DWORD GetSidLengthRequired(UCHAR);
    PDWORD GetSidSubAuthority(PSID, DWORD);
    PUCHAR GetSidSubAuthorityCount(PSID);
    DWORD GetTapeParameters(HANDLE, DWORD, PDWORD, PVOID);
    DWORD GetTapePosition(HANDLE, DWORD, PDWORD, PDWORD, PDWORD);
    DWORD GetTapeStatus(HANDLE);
    BOOL GetThreadPriorityBoost(HANDLE, PBOOL);
    BOOL GetThreadTimes(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME);
    BOOL GetTokenInformation(HANDLE, TOKEN_INFORMATION_CLASS, PVOID, DWORD, PDWORD);
    BOOL ImpersonateLoggedOnUser(HANDLE);
    BOOL ImpersonateNamedPipeClient(HANDLE);
    BOOL ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL);
    BOOL InitializeAcl(PACL, DWORD, DWORD);
    DWORD SetCriticalSectionSpinCount(LPCRITICAL_SECTION, DWORD);
    BOOL InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR, DWORD);
    BOOL InitializeSid(PSID, PSID_IDENTIFIER_AUTHORITY, BYTE);
    BOOL IsProcessorFeaturePresent(DWORD);
    BOOL IsTextUnicode(PCVOID, int, LPINT);
    BOOL IsValidAcl(PACL);
    BOOL IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR);
    BOOL IsValidSid(PSID);
    BOOL LockFileEx(HANDLE, DWORD, DWORD, DWORD, DWORD, LPOVERLAPPED);
    BOOL LogonUserA(LPSTR, LPSTR, LPSTR, DWORD, DWORD, PHANDLE);
    BOOL LogonUserW(LPWSTR, LPWSTR, LPWSTR, DWORD, DWORD, PHANDLE);
    BOOL LookupAccountNameA(LPCSTR, LPCSTR, PSID, PDWORD, LPSTR, PDWORD, PSID_NAME_USE);
    BOOL LookupAccountNameW(LPCWSTR, LPCWSTR, PSID, PDWORD, LPWSTR, PDWORD, PSID_NAME_USE);
    BOOL LookupAccountSidA(LPCSTR, PSID, LPSTR, PDWORD, LPSTR, PDWORD, PSID_NAME_USE);
    BOOL LookupAccountSidW(LPCWSTR, PSID, LPWSTR, PDWORD, LPWSTR, PDWORD, PSID_NAME_USE);
    BOOL LookupPrivilegeDisplayNameA(LPCSTR, LPCSTR, LPSTR, PDWORD, PDWORD);
    BOOL LookupPrivilegeDisplayNameW(LPCWSTR, LPCWSTR, LPWSTR, PDWORD, PDWORD);
    BOOL LookupPrivilegeNameA(LPCSTR, PLUID, LPSTR, PDWORD);
    BOOL LookupPrivilegeNameW(LPCWSTR, PLUID, LPWSTR, PDWORD);
    BOOL LookupPrivilegeValueA(LPCSTR, LPCSTR, PLUID);
    BOOL LookupPrivilegeValueW(LPCWSTR, LPCWSTR, PLUID);
    BOOL MakeAbsoluteSD(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PDWORD, PACL, PDWORD, PACL, PDWORD, PSID, PDWORD, PSID, PDWORD);
    BOOL MakeSelfRelativeSD(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PDWORD);
    VOID MapGenericMask(PDWORD, PGENERIC_MAPPING);
    BOOL MoveFileExA(LPCSTR, LPCSTR, DWORD);
    BOOL MoveFileExW(LPCWSTR, LPCWSTR, DWORD);
    BOOL NotifyChangeEventLog(HANDLE, HANDLE);
    BOOL ObjectCloseAuditAlarmA(LPCSTR, PVOID, BOOL);
    BOOL ObjectCloseAuditAlarmW(LPCWSTR, PVOID, BOOL);
    BOOL ObjectDeleteAuditAlarmA(LPCSTR, PVOID, BOOL);
    BOOL ObjectDeleteAuditAlarmW(LPCWSTR, PVOID, BOOL);
    BOOL ObjectOpenAuditAlarmA(LPCSTR, PVOID, LPSTR, LPSTR, PSECURITY_DESCRIPTOR, HANDLE, DWORD, DWORD, PPRIVILEGE_SET, BOOL, BOOL, PBOOL);
    BOOL ObjectOpenAuditAlarmW(LPCWSTR, PVOID, LPWSTR, LPWSTR, PSECURITY_DESCRIPTOR, HANDLE, DWORD, DWORD, PPRIVILEGE_SET, BOOL, BOOL, PBOOL);
    BOOL ObjectPrivilegeAuditAlarmA(LPCSTR, PVOID, HANDLE, DWORD, PPRIVILEGE_SET, BOOL);
    BOOL ObjectPrivilegeAuditAlarmW(LPCWSTR, PVOID, HANDLE, DWORD, PPRIVILEGE_SET, BOOL);
    HANDLE OpenBackupEventLogA(LPCSTR, LPCSTR);
    HANDLE OpenBackupEventLogW(LPCWSTR, LPCWSTR);
    HANDLE OpenEventLogA(LPCSTR, LPCSTR);
    HANDLE OpenEventLogW(LPCWSTR, LPCWSTR);
    BOOL OpenProcessToken(HANDLE, DWORD, PHANDLE);
    BOOL OpenThreadToken(HANDLE, DWORD, BOOL, PHANDLE);
    BOOL PostQueuedCompletionStatus(HANDLE, DWORD, ULONG_PTR, LPOVERLAPPED);
    DWORD PrepareTape(HANDLE, DWORD, BOOL);
    BOOL PrivilegeCheck(HANDLE, PPRIVILEGE_SET, PBOOL);
    BOOL PrivilegedServiceAuditAlarmA(LPCSTR, LPCSTR, HANDLE, PPRIVILEGE_SET, BOOL);
    BOOL PrivilegedServiceAuditAlarmW(LPCWSTR, LPCWSTR, HANDLE, PPRIVILEGE_SET, BOOL);
    BOOL ReadDirectoryChangesW(HANDLE, PVOID, DWORD, BOOL, DWORD, PDWORD, LPOVERLAPPED, LPOVERLAPPED_COMPLETION_ROUTINE);
    BOOL ReadEventLogA(HANDLE, DWORD, DWORD, PVOID, DWORD, DWORD*, DWORD*);
    BOOL ReadEventLogW(HANDLE, DWORD, DWORD, PVOID, DWORD, DWORD*, DWORD*);
    BOOL ReadFileScatter(HANDLE, FILE_SEGMENT_ELEMENT*, DWORD, LPDWORD, LPOVERLAPPED);
    HANDLE RegisterEventSourceA (LPCSTR, LPCSTR);
    HANDLE RegisterEventSourceW(LPCWSTR, LPCWSTR);
    BOOL ReportEventA(HANDLE, WORD, WORD, DWORD, PSID, WORD, DWORD, LPCSTR*, PVOID);
    BOOL ReportEventW(HANDLE, WORD, WORD, DWORD, PSID, WORD, DWORD, LPCWSTR*, PVOID);
    BOOL RevertToSelf();
    BOOL SetAclInformation(PACL, PVOID, DWORD, ACL_INFORMATION_CLASS);
    BOOL SetFileSecurityA(LPCSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR);
    BOOL SetFileSecurityW(LPCWSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR);
    BOOL SetHandleInformation(HANDLE, DWORD, DWORD);
    BOOL SetKernelObjectSecurity(HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR);
    BOOL SetPrivateObjectSecurity(SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR*, PGENERIC_MAPPING, HANDLE);
    BOOL SetProcessAffinityMask(HANDLE, DWORD_PTR);
    BOOL SetProcessPriorityBoost(HANDLE, BOOL);
    BOOL SetProcessShutdownParameters(DWORD, DWORD);
    BOOL SetProcessWorkingSetSize(HANDLE, SIZE_T, SIZE_T);
    BOOL SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR, BOOL, PACL, BOOL);
    BOOL SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR, PSID, BOOL);
    BOOL SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR, PSID, BOOL);
    BOOL SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR, BOOL, PACL, BOOL);
    BOOL SetSystemTimeAdjustment(DWORD, BOOL);
    DWORD SetTapeParameters(HANDLE, DWORD, PVOID);
    DWORD SetTapePosition(HANDLE, DWORD, DWORD, DWORD, DWORD, BOOL);
    BOOL SetThreadPriorityBoost(HANDLE, BOOL);
    BOOL SetThreadToken(PHANDLE, HANDLE);
    BOOL SetTokenInformation(HANDLE, TOKEN_INFORMATION_CLASS, PVOID, DWORD);
    DWORD SignalObjectAndWait(HANDLE, HANDLE, DWORD, BOOL);
    BOOL SwitchToThread();
    BOOL SystemTimeToTzSpecificLocalTime(LPTIME_ZONE_INFORMATION, LPSYSTEMTIME, LPSYSTEMTIME);
    BOOL TzSpecificLocalTimeToSystemTime(LPTIME_ZONE_INFORMATION, LPSYSTEMTIME, LPSYSTEMTIME);
    BOOL TryEnterCriticalSection(LPCRITICAL_SECTION);
    BOOL TryEnterCriticalSection(shared(CRITICAL_SECTION)*);
    BOOL UnlockFileEx(HANDLE, DWORD, DWORD, DWORD, LPOVERLAPPED);
    BOOL UpdateResourceA(HANDLE, LPCSTR, LPCSTR, WORD, PVOID, DWORD);
    BOOL UpdateResourceW(HANDLE, LPCWSTR, LPCWSTR, WORD, PVOID, DWORD);
    BOOL WriteFileGather(HANDLE, FILE_SEGMENT_ELEMENT*, DWORD, LPDWORD, LPOVERLAPPED);
    DWORD WriteTapemark(HANDLE, DWORD, DWORD, BOOL);

    static if (_WIN32_WINNT >= 0x500) {
        BOOL AddAccessAllowedAceEx(PACL, DWORD, DWORD, DWORD, PSID);
        BOOL AddAccessDeniedAceEx(PACL, DWORD, DWORD, DWORD, PSID);
        PVOID AddVectoredExceptionHandler(ULONG, PVECTORED_EXCEPTION_HANDLER);
        BOOL AllocateUserPhysicalPages(HANDLE, PULONG_PTR, PULONG_PTR);
        BOOL AssignProcessToJobObject(HANDLE, HANDLE);
        BOOL ChangeTimerQueueTimer(HANDLE,HANDLE,ULONG,ULONG);
        LPVOID CreateFiberEx(SIZE_T, SIZE_T, DWORD, LPFIBER_START_ROUTINE, LPVOID);
        HANDLE CreateFileMappingA(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCSTR);
        HANDLE CreateFileMappingW(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCWSTR);
        BOOL CreateHardLinkA(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES);
        BOOL CreateHardLinkW(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES);
        HANDLE CreateJobObjectA(LPSECURITY_ATTRIBUTES, LPCSTR);
        HANDLE CreateJobObjectW(LPSECURITY_ATTRIBUTES, LPCWSTR);
        BOOL CreateProcessWithLogonW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPCWSTR, LPWSTR, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION);
        HANDLE CreateTimerQueue();
        BOOL CreateTimerQueueTimer(PHANDLE, HANDLE, WAITORTIMERCALLBACK, PVOID, DWORD, DWORD, ULONG);
        BOOL DeleteTimerQueue(HANDLE);
        BOOL DeleteTimerQueueEx(HANDLE, HANDLE);
        BOOL DeleteTimerQueueTimer(HANDLE, HANDLE, HANDLE);
        BOOL DeleteVolumeMountPointA(LPCSTR);
        BOOL DeleteVolumeMountPointW(LPCWSTR);
        BOOL DnsHostnameToComputerNameA(LPCSTR, LPSTR, LPDWORD);
        BOOL DnsHostnameToComputerNameW(LPCWSTR, LPWSTR, LPDWORD);
        BOOL EncryptFileA(LPCSTR);
        BOOL EncryptFileW(LPCWSTR);
        BOOL FileEncryptionStatusA(LPCSTR, LPDWORD);
        BOOL FileEncryptionStatusW(LPCWSTR, LPDWORD);
        HANDLE FindFirstVolumeA(LPCSTR, DWORD);
        HANDLE FindFirstVolumeMountPointA(LPSTR, LPSTR, DWORD);
        HANDLE FindFirstVolumeMountPointW(LPWSTR, LPWSTR, DWORD);
        HANDLE FindFirstVolumeW(LPCWSTR, DWORD);
        BOOL FindNextVolumeA(HANDLE, LPCSTR, DWORD);
        BOOL FindNextVolumeW(HANDLE, LPWSTR, DWORD);
        BOOL FindNextVolumeMountPointA(HANDLE, LPSTR, DWORD);
        BOOL FindNextVolumeMountPointW(HANDLE, LPWSTR, DWORD);
        BOOL FindVolumeClose(HANDLE);
        BOOL FindVolumeMountPointClose(HANDLE);
        BOOL FlushViewOfFile(PCVOID, SIZE_T);
        BOOL FreeUserPhysicalPages(HANDLE, PULONG_PTR, PULONG_PTR);
        BOOL GetComputerNameExA(COMPUTER_NAME_FORMAT, LPSTR, LPDWORD);
        BOOL GetComputerNameExW(COMPUTER_NAME_FORMAT, LPWSTR, LPDWORD);
        BOOL GetFileSizeEx(HANDLE, PLARGE_INTEGER);
        BOOL GetModuleHandleExA(DWORD, LPCSTR, HMODULE*);
        BOOL GetModuleHandleExW(DWORD, LPCWSTR, HMODULE*);
        HANDLE GetProcessHeap();
        DWORD GetProcessHeaps(DWORD, PHANDLE);
        BOOL GetProcessIoCounters(HANDLE, PIO_COUNTERS);
        BOOL GetSystemPowerStatus(LPSYSTEM_POWER_STATUS);
        UINT GetSystemWindowsDirectoryA(LPSTR, UINT);
        UINT GetSystemWindowsDirectoryW(LPWSTR, UINT);
        BOOL GetVolumeNameForVolumeMountPointA(LPCSTR, LPSTR, DWORD);
        BOOL GetVolumeNameForVolumeMountPointW(LPCWSTR, LPWSTR, DWORD);
        BOOL GetVolumePathNameA(LPCSTR, LPSTR, DWORD);
        BOOL GetVolumePathNameW(LPCWSTR, LPWSTR, DWORD);
        BOOL GlobalMemoryStatusEx(LPMEMORYSTATUSEX);
        BOOL IsBadCodePtr(FARPROC);
        BOOL IsSystemResumeAutomatic();
        BOOL MapUserPhysicalPages(PVOID, ULONG_PTR, PULONG_PTR);
        BOOL MapUserPhysicalPagesScatter(PVOID*, ULONG_PTR, PULONG_PTR);
        PVOID MapViewOfFile(HANDLE, DWORD, DWORD, DWORD, SIZE_T);
        PVOID MapViewOfFileEx(HANDLE, DWORD, DWORD, DWORD, SIZE_T, PVOID);
        HANDLE OpenFileMappingA(DWORD, BOOL, LPCSTR);
        HANDLE OpenFileMappingW(DWORD, BOOL, LPCWSTR);
        BOOL ProcessIdToSessionId(DWORD, DWORD*);
        BOOL QueryInformationJobObject(HANDLE, JOBOBJECTINFOCLASS, LPVOID, DWORD, LPDWORD);
        ULONG RemoveVectoredExceptionHandler(PVOID);
        BOOL ReplaceFileA(LPCSTR, LPCSTR, LPCSTR, DWORD, LPVOID, LPVOID);
        BOOL ReplaceFileW(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPVOID, LPVOID);
        BOOL SetComputerNameExA(COMPUTER_NAME_FORMAT, LPCSTR);
        BOOL SetComputerNameExW(COMPUTER_NAME_FORMAT, LPCWSTR);
        BOOL SetFilePointerEx(HANDLE, LARGE_INTEGER, PLARGE_INTEGER, DWORD);
        BOOL SetInformationJobObject(HANDLE, JOBOBJECTINFOCLASS, LPVOID, DWORD);
        BOOL SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR, SECURITY_DESCRIPTOR_CONTROL, SECURITY_DESCRIPTOR_CONTROL);
        BOOL SetSystemPowerState(BOOL, BOOL);
        EXECUTION_STATE SetThreadExecutionState(EXECUTION_STATE);
        DWORD SetThreadIdealProcessor(HANDLE, DWORD);
        BOOL SetVolumeMountPointA(LPCSTR, LPCSTR);
        BOOL SetVolumeMountPointW(LPCWSTR, LPCWSTR);
        BOOL TerminateJobObject(HANDLE, UINT);
        BOOL UnmapViewOfFile(PCVOID);
        BOOL UnregisterWait(HANDLE);
        BOOL UnregisterWaitEx(HANDLE, HANDLE);
        BOOL VerifyVersionInfoA(LPOSVERSIONINFOEXA, DWORD, DWORDLONG);
        BOOL VerifyVersionInfoW(LPOSVERSIONINFOEXW, DWORD, DWORDLONG);
    }

    static if (_WIN32_WINNT >= 0x501) {
        BOOL ActivateActCtx(HANDLE, ULONG_PTR*);
        void AddRefActCtx(HANDLE);
        BOOL CheckNameLegalDOS8Dot3A(LPCSTR, LPSTR, DWORD, PBOOL, PBOOL);
        BOOL CheckNameLegalDOS8Dot3W(LPCWSTR, LPSTR, DWORD, PBOOL, PBOOL);
        BOOL CheckRemoteDebuggerPresent(HANDLE, PBOOL);
        BOOL ConvertFiberToThread();
        HANDLE CreateActCtxA(PCACTCTXA);
        HANDLE CreateActCtxW(PCACTCTXW);
        HANDLE CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE);
        BOOL DeactivateActCtx(DWORD, ULONG_PTR);
        BOOL DebugActiveProcessStop(DWORD);
        BOOL DebugBreakProcess(HANDLE);
        BOOL DebugSetProcessKillOnExit(BOOL);
        BOOL FindActCtxSectionGuid(DWORD, const(GUID)*, ULONG, const(GUID)*,
          PACTCTX_SECTION_KEYED_DATA);
        BOOL FindActCtxSectionStringA(DWORD, const(GUID)*, ULONG, LPCSTR,
          PACTCTX_SECTION_KEYED_DATA);
        BOOL FindActCtxSectionStringW(DWORD, const(GUID)*, ULONG, LPCWSTR,
          PACTCTX_SECTION_KEYED_DATA);
        BOOL GetCurrentActCtx(HANDLE*);
        VOID GetNativeSystemInfo(LPSYSTEM_INFO);
        BOOL GetProcessHandleCount(HANDLE, PDWORD);
        BOOL GetSystemRegistryQuota(PDWORD, PDWORD);
        BOOL GetSystemTimes(LPFILETIME, LPFILETIME, LPFILETIME);
        UINT GetSystemWow64DirectoryA(LPSTR, UINT);
        UINT GetSystemWow64DirectoryW(LPWSTR, UINT);
        BOOL GetThreadIOPendingFlag(HANDLE, PBOOL);
        BOOL GetVolumePathNamesForVolumeNameA(LPCSTR, LPSTR, DWORD, PDWORD);
        BOOL GetVolumePathNamesForVolumeNameW(LPCWSTR, LPWSTR, DWORD, PDWORD);
        UINT GetWriteWatch(DWORD, PVOID, SIZE_T, PVOID*, PULONG_PTR, PULONG);
        BOOL HeapQueryInformation(HANDLE, HEAP_INFORMATION_CLASS, PVOID, SIZE_T, PSIZE_T);
        BOOL HeapSetInformation(HANDLE, HEAP_INFORMATION_CLASS, PVOID, SIZE_T);
        BOOL IsProcessInJob(HANDLE, HANDLE, PBOOL);
        BOOL IsWow64Process(HANDLE, PBOOL);
        BOOL QueryActCtxW(DWORD, HANDLE, PVOID, ULONG, PVOID, SIZE_T, SIZE_T*);
        BOOL QueryMemoryResourceNotification(HANDLE, PBOOL);
        void ReleaseActCtx(HANDLE);
        UINT ResetWriteWatch(LPVOID, SIZE_T);
        BOOL SetFileShortNameA(HANDLE, LPCSTR);
        BOOL SetFileShortNameW(HANDLE, LPCWSTR);
        BOOL SetFileValidData(HANDLE, LONGLONG);
        BOOL ZombifyActCtx(HANDLE);
    }

    static if (_WIN32_WINNT >= 0x502) {
        DWORD GetFirmwareEnvironmentVariableA(LPCSTR, LPCSTR, PVOID, DWORD);
        DWORD GetFirmwareEnvironmentVariableW(LPCWSTR, LPCWSTR, PVOID, DWORD);
        DWORD GetDllDirectoryA(DWORD, LPSTR);
        DWORD GetDllDirectoryW(DWORD, LPWSTR);
        DWORD GetThreadId(HANDLE);
        DWORD GetProcessId(HANDLE);
        HANDLE ReOpenFile(HANDLE, DWORD, DWORD, DWORD);
        BOOL SetDllDirectoryA(LPCSTR);
        BOOL SetDllDirectoryW(LPCWSTR);
        BOOL SetFirmwareEnvironmentVariableA(LPCSTR, LPCSTR, PVOID, DWORD);
        BOOL SetFirmwareEnvironmentVariableW(LPCWSTR, LPCWSTR, PVOID, DWORD);
    }

    // ???
    static if (_WIN32_WINNT >= 0x510) {
        VOID RestoreLastError(DWORD);
    }
}

// For compatibility with old core.sys.windows.windows:
version (LittleEndian) nothrow @nogc
{
    BOOL QueryPerformanceCounter(long* lpPerformanceCount) { return QueryPerformanceCounter(cast(PLARGE_INTEGER)lpPerformanceCount); }
    BOOL QueryPerformanceFrequency(long* lpFrequency) { return QueryPerformanceFrequency(cast(PLARGE_INTEGER)lpFrequency); }
}

mixin DECLARE_AW!("STARTUPINFO");
version (Unicode) {
    //alias STARTUPINFOW STARTUPINFO;
    alias WIN32_FIND_DATAW WIN32_FIND_DATA;
    alias ENUMRESLANGPROCW ENUMRESLANGPROC;
    alias ENUMRESNAMEPROCW ENUMRESNAMEPROC;
    alias ENUMRESTYPEPROCW ENUMRESTYPEPROC;
    alias AddAtomW AddAtom;
    alias BeginUpdateResourceW BeginUpdateResource;
    alias BuildCommDCBW BuildCommDCB;
    alias BuildCommDCBAndTimeoutsW BuildCommDCBAndTimeouts;
    alias CallNamedPipeW CallNamedPipe;
    alias CommConfigDialogW CommConfigDialog;
    alias CopyFileW CopyFile;
    alias CopyFileExW CopyFileEx;
    alias CreateDirectoryW CreateDirectory;
    alias CreateDirectoryExW CreateDirectoryEx;
    alias CreateEventW CreateEvent;
    alias CreateFileW CreateFile;
    alias CreateMailslotW CreateMailslot;
    alias CreateMutexW CreateMutex;
    alias CreateProcessW CreateProcess;
    alias CreateSemaphoreW CreateSemaphore;
    alias DeleteFileW DeleteFile;
    alias EndUpdateResourceW EndUpdateResource;
    alias EnumResourceLanguagesW EnumResourceLanguages;
    alias EnumResourceNamesW EnumResourceNames;
    alias EnumResourceTypesW EnumResourceTypes;
    alias ExpandEnvironmentStringsW ExpandEnvironmentStrings;
    alias FatalAppExitW FatalAppExit;
    alias FindAtomW FindAtom;
    alias FindFirstChangeNotificationW FindFirstChangeNotification;
    alias FindFirstFileW FindFirstFile;
    alias FindNextFileW FindNextFile;
    alias FindResourceW FindResource;
    alias FindResourceExW FindResourceEx;
    alias FormatMessageW FormatMessage;
    alias FreeEnvironmentStringsW FreeEnvironmentStrings;
    alias GetAtomNameW GetAtomName;
    alias GetCommandLineW GetCommandLine;
    alias GetComputerNameW GetComputerName;
    alias GetCurrentDirectoryW GetCurrentDirectory;
    alias GetDefaultCommConfigW GetDefaultCommConfig;
    alias GetDiskFreeSpaceW GetDiskFreeSpace;
    alias GetDiskFreeSpaceExW GetDiskFreeSpaceEx;
    alias GetDriveTypeW GetDriveType;
    alias GetEnvironmentStringsW GetEnvironmentStrings;
    alias GetEnvironmentVariableW GetEnvironmentVariable;
    alias GetFileAttributesW GetFileAttributes;
    alias GetFullPathNameW GetFullPathName;
    alias GetLogicalDriveStringsW GetLogicalDriveStrings;
    alias GetModuleFileNameW GetModuleFileName;
    alias GetModuleHandleW GetModuleHandle;
    alias GetNamedPipeHandleStateW GetNamedPipeHandleState;
    alias GetPrivateProfileIntW GetPrivateProfileInt;
    alias GetPrivateProfileSectionW GetPrivateProfileSection;
    alias GetPrivateProfileSectionNamesW GetPrivateProfileSectionNames;
    alias GetPrivateProfileStringW GetPrivateProfileString;
    alias GetPrivateProfileStructW GetPrivateProfileStruct;
    alias GetProfileIntW GetProfileInt;
    alias GetProfileSectionW GetProfileSection;
    alias GetProfileStringW GetProfileString;
    alias GetShortPathNameW GetShortPathName;
    alias GetStartupInfoW GetStartupInfo;
    alias GetSystemDirectoryW GetSystemDirectory;
    alias GetTempFileNameW GetTempFileName;
    alias GetTempPathW GetTempPath;
    alias GetUserNameW GetUserName;
    alias GetVersionExW GetVersionEx;
    alias GetVolumeInformationW GetVolumeInformation;
    alias GetWindowsDirectoryW GetWindowsDirectory;
    alias GlobalAddAtomW GlobalAddAtom;
    alias GlobalFindAtomW GlobalFindAtom;
    alias GlobalGetAtomNameW GlobalGetAtomName;
    alias IsBadStringPtrW IsBadStringPtr;
    alias LoadLibraryW LoadLibrary;
    alias LoadLibraryExW LoadLibraryEx;
    alias lstrcatW lstrcat;
    alias lstrcmpW lstrcmp;
    alias lstrcmpiW lstrcmpi;
    alias lstrcpyW lstrcpy;
    alias lstrcpynW lstrcpyn;
    alias lstrlenW lstrlen;
    alias MoveFileW MoveFile;
    alias OpenEventW OpenEvent;
    alias OpenMutexW OpenMutex;
    alias OpenSemaphoreW OpenSemaphore;
    alias OutputDebugStringW OutputDebugString;
    alias RemoveDirectoryW RemoveDirectory;
    alias SearchPathW SearchPath;
    alias SetComputerNameW SetComputerName;
    alias SetCurrentDirectoryW SetCurrentDirectory;
    alias SetDefaultCommConfigW SetDefaultCommConfig;
    alias SetEnvironmentVariableW SetEnvironmentVariable;
    alias SetFileAttributesW SetFileAttributes;
    alias SetVolumeLabelW SetVolumeLabel;
    alias WaitNamedPipeW WaitNamedPipe;
    alias WritePrivateProfileSectionW WritePrivateProfileSection;
    alias WritePrivateProfileStringW WritePrivateProfileString;
    alias WritePrivateProfileStructW WritePrivateProfileStruct;
    alias WriteProfileSectionW WriteProfileSection;
    alias WriteProfileStringW WriteProfileString;
    alias CreateWaitableTimerW CreateWaitableTimer;
    alias GetFileAttributesExW GetFileAttributesEx;
    alias GetLongPathNameW GetLongPathName;
    alias QueryDosDeviceW QueryDosDevice;

    alias HW_PROFILE_INFOW HW_PROFILE_INFO;
    alias AccessCheckAndAuditAlarmW AccessCheckAndAuditAlarm;
    alias BackupEventLogW BackupEventLog;
    alias ClearEventLogW ClearEventLog;
    alias CreateNamedPipeW CreateNamedPipe;
    alias CreateProcessAsUserW CreateProcessAsUser;
    alias DefineDosDeviceW DefineDosDevice;
    alias FindFirstFileExW FindFirstFileEx;
    alias GetBinaryTypeW GetBinaryType;
    alias GetCompressedFileSizeW GetCompressedFileSize;
    alias GetFileSecurityW GetFileSecurity;
    alias LogonUserW LogonUser;
    alias LookupAccountNameW LookupAccountName;
    alias LookupAccountSidW LookupAccountSid;
    alias LookupPrivilegeDisplayNameW LookupPrivilegeDisplayName;
    alias LookupPrivilegeNameW LookupPrivilegeName;
    alias LookupPrivilegeValueW LookupPrivilegeValue;
    alias MoveFileExW MoveFileEx;
    alias ObjectCloseAuditAlarmW ObjectCloseAuditAlarm;
    alias ObjectDeleteAuditAlarmW ObjectDeleteAuditAlarm;
    alias ObjectOpenAuditAlarmW ObjectOpenAuditAlarm;
    alias ObjectPrivilegeAuditAlarmW ObjectPrivilegeAuditAlarm;
    alias OpenBackupEventLogW OpenBackupEventLog;
    alias OpenEventLogW OpenEventLog;
    alias PrivilegedServiceAuditAlarmW PrivilegedServiceAuditAlarm;
    alias ReadEventLogW ReadEventLog;
    alias RegisterEventSourceW RegisterEventSource;
    alias ReportEventW ReportEvent;
    alias SetFileSecurityW SetFileSecurity;
    alias UpdateResourceW UpdateResource;

    static if (_WIN32_WINNT >= 0x500) {
        alias CreateFileMappingW CreateFileMapping;
        alias CreateHardLinkW CreateHardLink;
        alias CreateJobObjectW CreateJobObject;
        alias DeleteVolumeMountPointW DeleteVolumeMountPoint;
        alias DnsHostnameToComputerNameW DnsHostnameToComputerName;
        alias EncryptFileW EncryptFile;
        alias FileEncryptionStatusW FileEncryptionStatus;
        alias FindFirstVolumeW FindFirstVolume;
        alias FindFirstVolumeMountPointW FindFirstVolumeMountPoint;
        alias FindNextVolumeW FindNextVolume;
        alias FindNextVolumeMountPointW FindNextVolumeMountPoint;
        alias GetModuleHandleExW GetModuleHandleEx;
        alias GetSystemWindowsDirectoryW GetSystemWindowsDirectory;
        alias GetVolumeNameForVolumeMountPointW GetVolumeNameForVolumeMountPoint;
        alias GetVolumePathNameW GetVolumePathName;
        alias OpenFileMappingW OpenFileMapping;
        alias ReplaceFileW ReplaceFile;
        alias SetVolumeMountPointW SetVolumeMountPoint;
        alias VerifyVersionInfoW VerifyVersionInfo;
    }

    static if (_WIN32_WINNT >= 0x501) {
        alias ACTCTXW ACTCTX;
        alias CheckNameLegalDOS8Dot3W CheckNameLegalDOS8Dot3;
        alias CreateActCtxW CreateActCtx;
        alias FindActCtxSectionStringW FindActCtxSectionString;
        alias GetSystemWow64DirectoryW GetSystemWow64Directory;
        alias GetVolumePathNamesForVolumeNameW GetVolumePathNamesForVolumeName;
        alias SetFileShortNameW SetFileShortName;
    }

    static if (_WIN32_WINNT >= 0x502) {
        alias SetFirmwareEnvironmentVariableW SetFirmwareEnvironmentVariable;
        alias SetDllDirectoryW SetDllDirectory;
        alias GetDllDirectoryW GetDllDirectory;
    }

} else {
    //alias STARTUPINFOA STARTUPINFO;
    alias WIN32_FIND_DATAA WIN32_FIND_DATA;
    alias ENUMRESLANGPROCW ENUMRESLANGPROC;
    alias ENUMRESNAMEPROCW ENUMRESNAMEPROC;
    alias ENUMRESTYPEPROCW ENUMRESTYPEPROC;
    alias AddAtomA AddAtom;
    alias BeginUpdateResourceA BeginUpdateResource;
    alias BuildCommDCBA BuildCommDCB;
    alias BuildCommDCBAndTimeoutsA BuildCommDCBAndTimeouts;
    alias CallNamedPipeA CallNamedPipe;
    alias CommConfigDialogA CommConfigDialog;
    alias CopyFileA CopyFile;
    alias CopyFileExA CopyFileEx;
    alias CreateDirectoryA CreateDirectory;
    alias CreateDirectoryExA CreateDirectoryEx;
    alias CreateEventA CreateEvent;
    alias CreateFileA CreateFile;
    alias CreateMailslotA CreateMailslot;
    alias CreateMutexA CreateMutex;
    alias CreateProcessA CreateProcess;
    alias CreateSemaphoreA CreateSemaphore;
    alias DeleteFileA DeleteFile;
    alias EndUpdateResourceA EndUpdateResource;
    alias EnumResourceLanguagesA EnumResourceLanguages;
    alias EnumResourceNamesA EnumResourceNames;
    alias EnumResourceTypesA EnumResourceTypes;
    alias ExpandEnvironmentStringsA ExpandEnvironmentStrings;
    alias FatalAppExitA FatalAppExit;
    alias FindAtomA FindAtom;
    alias FindFirstChangeNotificationA FindFirstChangeNotification;
    alias FindFirstFileA FindFirstFile;
    alias FindNextFileA FindNextFile;
    alias FindResourceA FindResource;
    alias FindResourceExA FindResourceEx;
    alias FormatMessageA FormatMessage;
    alias FreeEnvironmentStringsA FreeEnvironmentStrings;
    alias GetAtomNameA GetAtomName;
    alias GetCommandLineA GetCommandLine;
    alias GetComputerNameA GetComputerName;
    alias GetCurrentDirectoryA GetCurrentDirectory;
    alias GetDefaultCommConfigA GetDefaultCommConfig;
    alias GetDiskFreeSpaceA GetDiskFreeSpace;
    alias GetDiskFreeSpaceExA GetDiskFreeSpaceEx;
    alias GetDriveTypeA GetDriveType;
    alias GetEnvironmentStringsA GetEnvironmentStrings;
    alias GetEnvironmentVariableA GetEnvironmentVariable;
    alias GetFileAttributesA GetFileAttributes;
    alias GetFullPathNameA GetFullPathName;
    alias GetLogicalDriveStringsA GetLogicalDriveStrings;
    alias GetNamedPipeHandleStateA GetNamedPipeHandleState;
    alias GetModuleHandleA GetModuleHandle;
    alias GetModuleFileNameA GetModuleFileName;
    alias GetPrivateProfileIntA GetPrivateProfileInt;
    alias GetPrivateProfileSectionA GetPrivateProfileSection;
    alias GetPrivateProfileSectionNamesA GetPrivateProfileSectionNames;
    alias GetPrivateProfileStringA GetPrivateProfileString;
    alias GetPrivateProfileStructA GetPrivateProfileStruct;
    alias GetProfileIntA GetProfileInt;
    alias GetProfileSectionA GetProfileSection;
    alias GetProfileStringA GetProfileString;
    alias GetShortPathNameA GetShortPathName;
    alias GetStartupInfoA GetStartupInfo;
    alias GetSystemDirectoryA GetSystemDirectory;
    alias GetTempFileNameA GetTempFileName;
    alias GetTempPathA GetTempPath;
    alias GetUserNameA GetUserName;
    alias GetVersionExA GetVersionEx;
    alias GetVolumeInformationA GetVolumeInformation;
    alias GetWindowsDirectoryA GetWindowsDirectory;
    alias GlobalAddAtomA GlobalAddAtom;
    alias GlobalFindAtomA GlobalFindAtom;
    alias GlobalGetAtomNameA GlobalGetAtomName;
    alias IsBadStringPtrA IsBadStringPtr;
    alias LoadLibraryA LoadLibrary;
    alias LoadLibraryExA LoadLibraryEx;
    alias lstrcatA lstrcat;
    alias lstrcmpA lstrcmp;
    alias lstrcmpiA lstrcmpi;
    alias lstrcpyA lstrcpy;
    alias lstrcpynA lstrcpyn;
    alias lstrlenA lstrlen;
    alias MoveFileA MoveFile;
    alias OpenEventA OpenEvent;
    alias OpenMutexA OpenMutex;
    alias OpenSemaphoreA OpenSemaphore;
    alias OutputDebugStringA OutputDebugString;
    alias RemoveDirectoryA RemoveDirectory;
    alias SearchPathA SearchPath;
    alias SetComputerNameA SetComputerName;
    alias SetCurrentDirectoryA SetCurrentDirectory;
    alias SetDefaultCommConfigA SetDefaultCommConfig;
    alias SetEnvironmentVariableA SetEnvironmentVariable;
    alias SetFileAttributesA SetFileAttributes;
    alias SetVolumeLabelA SetVolumeLabel;
    alias WaitNamedPipeA WaitNamedPipe;
    alias WritePrivateProfileSectionA WritePrivateProfileSection;
    alias WritePrivateProfileStringA WritePrivateProfileString;
    alias WritePrivateProfileStructA WritePrivateProfileStruct;
    alias WriteProfileSectionA WriteProfileSection;
    alias WriteProfileStringA WriteProfileString;
    alias CreateWaitableTimerA CreateWaitableTimer;
    alias GetFileAttributesExA GetFileAttributesEx;
    alias GetLongPathNameA GetLongPathName;
    alias QueryDosDeviceA QueryDosDevice;

    alias HW_PROFILE_INFOA HW_PROFILE_INFO;
    alias AccessCheckAndAuditAlarmA AccessCheckAndAuditAlarm;
    alias BackupEventLogA BackupEventLog;
    alias ClearEventLogA ClearEventLog;
    alias CreateNamedPipeA CreateNamedPipe;
    alias CreateProcessAsUserA CreateProcessAsUser;
    alias DefineDosDeviceA DefineDosDevice;
    alias FindFirstFileExA FindFirstFileEx;
    alias GetBinaryTypeA GetBinaryType;
    alias GetCompressedFileSizeA GetCompressedFileSize;
    alias GetFileSecurityA GetFileSecurity;
    alias LogonUserA LogonUser;
    alias LookupAccountNameA LookupAccountName;
    alias LookupAccountSidA LookupAccountSid;
    alias LookupPrivilegeDisplayNameA LookupPrivilegeDisplayName;
    alias LookupPrivilegeNameA LookupPrivilegeName;
    alias LookupPrivilegeValueA LookupPrivilegeValue;
    alias MoveFileExA MoveFileEx;
    alias ObjectCloseAuditAlarmA ObjectCloseAuditAlarm;
    alias ObjectDeleteAuditAlarmA ObjectDeleteAuditAlarm;
    alias ObjectOpenAuditAlarmA ObjectOpenAuditAlarm;
    alias ObjectPrivilegeAuditAlarmA ObjectPrivilegeAuditAlarm;
    alias OpenBackupEventLogA OpenBackupEventLog;
    alias OpenEventLogA OpenEventLog;
    alias PrivilegedServiceAuditAlarmA PrivilegedServiceAuditAlarm;
    alias ReadEventLogA ReadEventLog;
    alias RegisterEventSourceA RegisterEventSource;
    alias ReportEventA ReportEvent;
    alias SetFileSecurityA SetFileSecurity;
    alias UpdateResourceA UpdateResource;

    static if (_WIN32_WINNT >= 0x500) {
        alias CreateFileMappingA CreateFileMapping;
        alias CreateHardLinkA CreateHardLink;
        alias CreateJobObjectA CreateJobObject;
        alias DeleteVolumeMountPointA DeleteVolumeMountPoint;
        alias DnsHostnameToComputerNameA DnsHostnameToComputerName;
        alias EncryptFileA EncryptFile;
        alias FileEncryptionStatusA FileEncryptionStatus;
        alias FindFirstVolumeA FindFirstVolume;
        alias FindFirstVolumeMountPointA FindFirstVolumeMountPoint;
        alias FindNextVolumeA FindNextVolume;
        alias FindNextVolumeMountPointA FindNextVolumeMountPoint;
        alias GetModuleHandleExA GetModuleHandleEx;
        alias GetSystemWindowsDirectoryA GetSystemWindowsDirectory;
        alias GetVolumeNameForVolumeMountPointA GetVolumeNameForVolumeMountPoint;
        alias GetVolumePathNameA GetVolumePathName;
        alias OpenFileMappingA OpenFileMapping;
        alias ReplaceFileA ReplaceFile;
        alias SetVolumeMountPointA SetVolumeMountPoint;
        alias VerifyVersionInfoA VerifyVersionInfo;
    }

    static if (_WIN32_WINNT >= 0x501) {
        alias ACTCTXA ACTCTX;
        alias CheckNameLegalDOS8Dot3A CheckNameLegalDOS8Dot3;
        alias CreateActCtxA CreateActCtx;
        alias FindActCtxSectionStringA FindActCtxSectionString;
        alias GetSystemWow64DirectoryA GetSystemWow64Directory;
        alias GetVolumePathNamesForVolumeNameA GetVolumePathNamesForVolumeName;
        alias SetFileShortNameA SetFileShortName;
    }

    static if (_WIN32_WINNT >= 0x502) {
        alias GetDllDirectoryA GetDllDirectory;
        alias SetDllDirectoryA SetDllDirectory;
        alias SetFirmwareEnvironmentVariableA SetFirmwareEnvironmentVariable;
    }
}

alias STARTUPINFO* LPSTARTUPINFO;
alias WIN32_FIND_DATA* LPWIN32_FIND_DATA;

alias HW_PROFILE_INFO* LPHW_PROFILE_INFO;

static if (_WIN32_WINNT >= 0x501) {
    alias ACTCTX* PACTCTX, PCACTCTX;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /**
 * Windows API header module
 *
 * Translated from MinGW Windows headers
 *
 * Authors: Stewart Gordon
 * License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)
 * Source: $(DRUNTIMESRC src/core/sys/windows/_winber.d)
 */
module core.sys.windows.winber;
version (Windows):

/* Comment from MinGW
  winber.h - Header file for the Windows LDAP Basic Encoding Rules API

  Written by Filip Navara <xnavara@volny.cz>

  References:
    The C LDAP Application Program Interface
    http://www.watersprings.org/pub/id/draft-ietf-ldapext-ldap-c-api-05.txt

    Lightweight Directory Access Protocol Reference
    http://msdn.microsoft.com/library/en-us/netdir/ldap/ldap_reference.asp

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 */

 import core.sys.windows.basetsd;

/* Opaque structure
 *  http://msdn.microsoft.com/library/en-us/ldap/ldap/berelement.asp
 */
struct BerElement;

alias int ber_int_t, ber_slen_t;
alias uint ber_uint_t, ber_len_t, ber_tag_t;

align(4):
struct BerValue {
    ber_len_t bv_len;
    char*     bv_val;
}
alias BerValue LDAP_BERVAL, BERVAL;
alias BerValue* PLDAP_BERVAL, PBERVAL;

enum ber_tag_t
    LBER_ERROR   = -1,
    LBER_DEFAULT = -1,
    LBER_USE_DER =  1;

/*  FIXME: In MinGW, these are WINBERAPI == DECLSPEC_IMPORT.  Linkage
 *  attribute?
 */
extern (C) {
    BerElement* ber_init(const(BerValue)*);
    int ber_printf(BerElement*, const(char)*, ...);
    int ber_flatten(BerElement*, BerValue**);
    ber_tag_t ber_scanf(BerElement*, const(char)*, ...);
    ber_tag_t ber_peek_tag(BerElement*, ber_len_t*);
    ber_tag_t ber_skip_tag(BerElement*, ber_len_t*);
    ber_tag_t ber_first_element(BerElement*, ber_len_t*, char**);
    ber_tag_t ber_next_element(BerElement*, ber_len_t*, char*);
    void ber_bvfree(BerValue*);
    void ber_bvecfree(BerValue**);
    void ber_free(BerElement*, int);
    BerValue* ber_bvdup(BerValue*);
    BerElement* ber_alloc_t(int);
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             /**
 * Windows API header module
 *
 * Translated from MinGW Windows headers
 *
 * License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)
 * Source: $(DRUNTIMESRC src/core/sys/windows/_wincon.d)
 */
module core.sys.windows.wincon;
version (Windows):

version (ANSI) {} else version = Unicode;
pragma(lib, "kernel32");

private import core.sys.windows.w32api, core.sys.windows.windef;

// FIXME: clean up Windows version support

enum {
    FOREGROUND_BLUE             = 0x0001,
    FOREGROUND_GREEN            = 0x0002,
    FOREGROUND_RED              = 0x0004,
    FOREGROUND_INTENSITY        = 0x0008,
    BACKGROUND_BLUE             = 0x0010,
    BACKGROUND_GREEN            = 0x0020,
    BACKGROUND_RED              = 0x0040,
    BACKGROUND_INTENSITY        = 0x0080,

    COMMON_LVB_LEADING_BYTE     = 0x0100,
    COMMON_LVB_TRAILING_BYTE    = 0x0200,
    COMMON_LVB_GRID_HORIZONTAL  = 0x0400,
    COMMON_LVB_GRID_LVERTICAL   = 0x0800,
    COMMON_LVB_GRID_RVERTICAL   = 0x1000,
    COMMON_LVB_REVERSE_VIDEO    = 0x4000,
    COMMON_LVB_UNDERSCORE       = 0x8000,

    COMMON_LVB_SBCSDBCS         = 0x0300,
}

static if (_WIN32_WINNT >= 0x501) {
    enum {
        CONSOLE_FULLSCREEN_MODE = 1,
        CONSOLE_WINDOWED_MODE   = 0
    }
}

enum {
    CTRL_C_EVENT        = 0,
    CTRL_BREAK_EVENT    = 1,
    CTRL_CLOSE_EVENT    = 2,
    CTRL_LOGOFF_EVENT   = 5,
    CTRL_SHUTDOWN_EVENT = 6
}

enum {
    ENABLE_PROCESSED_INPUT        = 1,
    ENABLE_LINE_INPUT             = 2,
    ENABLE_ECHO_INPUT             = 4,
    ENABLE_WINDOW_INPUT           = 8,
    ENABLE_MOUSE_INPUT            = 16,
    ENABLE_INSERT_MODE            = 32,
    ENABLE_QUICK_EDIT_MODE        = 64,
    ENABLE_EXTENDED_FLAGS         = 128,
    ENABLE_AUTO_POSITION          = 256,
    ENABLE_VIRTUAL_TERMINAL_INPUT = 512
}

enum {
    ENABLE_PROCESSED_OUTPUT            = 1,
    ENABLE_WRAP_AT_EOL_OUTPUT          = 2,
    ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4,
    DISABLE_NEWLINE_AUTO_RETURN        = 8,
    ENABLE_LVB_GRID_WORLDWIDE          = 16
}

enum {
    KEY_EVENT                 = 1,
    MOUSE_EVENT               = 2,
    WINDOW_BUFFER_SIZE_EVENT  = 4,
    MENU_EVENT                = 8,
    FOCUS_EVENT               = 16
}
enum {
    RIGHT_ALT_PRESSED  = 1,
    LEFT_ALT_PRESSED   = 2,
    RIGHT_CTRL_PRESSED = 4,
    LEFT_CTRL_PRESSED  = 8,
    SHIFT_PRESSED      = 16,
    NUMLOCK_ON         = 32,
    SCROLLLOCK_ON      = 64,
    CAPSLOCK_ON        = 128,
    ENHANCED_KEY       = 256
}
enum {
    FROM_LEFT_1ST_BUTTON_PRESSED  = 1,
    RIGHTMOST_BUTTON_PRESSED      = 2,
    FROM_LEFT_2ND_BUTTON_PRESSED  = 4,
    FROM_LEFT_3RD_BUTTON_PRESSED  = 8,
    FROM_LEFT_4TH_BUTTON_PRESSED  = 16
}

enum {
    MOUSE_MOVED   = 1,
    DOUBLE_CLICK  = 2,
    MOUSE_WHEELED = 4
}

struct CHAR_INFO {
    union _Char {
        WCHAR UnicodeChar = 0;
        CHAR AsciiChar;
    }
    union {
        _Char Char;
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    }
    WORD Attributes;
}
alias CHAR_INFO* PCHAR_INFO;

struct SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
}
alias SMALL_RECT* PSMALL_RECT;

struct CONSOLE_CURSOR_INFO {
    DWORD dwSize;
    BOOL  bVisible;
}
alias CONSOLE_CURSOR_INFO* PCONSOLE_CURSOR_INFO;

struct COORD {
    SHORT X;
    SHORT Y;
}
alias COORD* PCOORD;

struct CONSOLE_FONT_INFO {
    DWORD nFont;
    COORD dwFontSize;
}
alias CONSOLE_FONT_INFO* PCONSOLE_FONT_INFO;

struct CONSOLE_SCREEN_BUFFER_INFO {
    COORD      dwSize;
    COORD      dwCursorPosition;
    WORD       wAttributes;
    SMALL_RECT srWindow;
    COORD      dwMaximumWindowSize;
}
alias CONSOLE_SCREEN_BUFFER_INFO* PCONSOLE_SCREEN_BUFFER_INFO;

alias extern(Windows) BOOL function(DWORD) nothrow PHANDLER_ROUTINE;

struct KEY_EVENT_RECORD {
    BOOL  bKeyDown;
    WORD  wRepeatCount;
    WORD  wVirtualKeyCode;
    WORD  wVirtualScanCode;
    union _uChar {
        WCHAR UnicodeChar = 0;
        CHAR  AsciiChar;
    }
    union {
        WCHAR UnicodeChar = 0;
        CHAR  AsciiChar;
        _uChar uChar;
    }
    DWORD dwControlKeyState;
}
alias KEY_EVENT_RECORD* PKEY_EVENT_RECORD;

struct MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
}
alias MOUSE_EVENT_RECORD* PMOUSE_EVENT_RECORD;

struct WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
}
alias WINDOW_BUFFER_SIZE_RECORD* PWINDOW_BUFFER_SIZE_RECORD;

struct MENU_EVENT_RECORD {
    UINT dwCommandId;
}
alias MENU_EVENT_RECORD* PMENU_EVENT_RECORD;

struct FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
}
alias FOCUS_EVENT_RECORD* PFOCUS_EVENT_RECORD;

struct INPUT_RECORD {
    WORD EventType;
    union _Event {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    }
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
        _Event Event;
    }
}
alias INPUT_RECORD* PINPUT_RECORD;

extern (Windows) nothrow @nogc:

BOOL AllocConsole();
HANDLE CreateConsoleScreenBuffer(DWORD, DWORD, const(SECURITY_ATTRIBUTES)*, DWORD, LPVOID);
BOOL FillConsoleOutputAttribute(HANDLE, WORD, DWORD, COORD, PDWORD);
BOOL FillConsoleOutputCharacterA(HANDLE, CHAR, DWORD, COORD, PDWORD);
BOOL FillConsoleOutputCharacterW(HANDLE, WCHAR, DWORD, COORD, PDWORD);
BOOL FlushConsoleInputBuffer(HANDLE);
BOOL FreeConsole();
BOOL GenerateConsoleCtrlEvent(DWORD, DWORD);
UINT GetConsoleCP();
BOOL GetConsoleCursorInfo(HANDLE, PCONSOLE_CURSOR_INFO);
BOOL GetConsoleMode(HANDLE,PDWORD);
UINT GetConsoleOutputCP();
BOOL GetConsoleScreenBufferInfo(HANDLE, PCONSOLE_SCREEN_BUFFER_INFO);
DWORD GetConsoleTitleA(LPSTR, DWORD);
DWORD GetConsoleTitleW(LPWSTR, DWORD);
COORD GetLargestConsoleWindowSize(HANDLE);
BOOL GetNumberOfConsoleInputEvents(HANDLE, PDWORD);
BOOL GetNumberOfConsoleMouseButtons(PDWORD);
BOOL PeekConsoleInputA(HANDLE, PINPUT_RECORD, DWORD, PDWORD);
BOOL PeekConsoleInputW(HANDLE, PINPUT_RECORD, DWORD, PDWORD);
BOOL ReadConsoleA(HANDLE, PVOID, DWORD, PDWORD, PVOID);
BOOL ReadConsoleW(HANDLE, PVOID, DWORD, PDWORD, PVOID);
BOOL ReadConsoleInputA(HANDLE, PINPUT_RECORD, DWORD, PDWORD);
BOOL ReadConsoleInputW(HANDLE, PINPUT_RECORD, DWORD, PDWORD);
BOOL ReadConsoleOutputAttribute(HANDLE, LPWORD, DWORD, COORD, LPDWORD);
BOOL ReadConsoleOutputCharacterA(HANDLE, LPSTR, DWORD, COORD, PDWORD);
BOOL ReadConsoleOutputCharacterW(HANDLE, LPWSTR, DWORD, COORD, PDWORD);
BOOL ReadConsoleOutputA(HANDLE, PCHAR_INFO, COORD, COORD, PSMALL_RECT);
BOOL ReadConsoleOutputW(HANDLE, PCHAR_INFO, COORD, COORD, PSMALL_RECT);
BOOL ScrollConsoleScreenBufferA(HANDLE, const(SMALL_RECT)*, const(SMALL_RECT)*, COORD, const(CHAR_INFO)*);
BOOL ScrollConsoleScreenBufferW(HANDLE, const(SMALL_RECT)*, const(SMALL_RECT)*, COORD, const(CHAR_INFO)*);
BOOL SetConsoleActiveScreenBuffer(HANDLE);
BOOL SetConsoleCP(UINT);
BOOL SetConsoleCtrlHandler(PHANDLER_ROUTINE, BOOL);
BOOL SetConsoleCursorInfo(HANDLE, const(CONSOLE_CURSOR_INFO)*);
BOOL SetConsoleCursorPosition(HANDLE, COORD);


static if (_WIN32_WINNT >= 0x500) {
BOOL GetConsoleDisplayMode(LPDWORD);
HWND GetConsoleWindow();
}

static if (_WIN32_WINNT >= 0x501) {
BOOL AttachConsole(DWORD);
BOOL SetConsoleDisplayMode(HANDLE, DWORD, PCOORD);
enum DWORD ATTACH_PARENT_PROCESS = cast(DWORD)-1;
}

BOOL SetConsoleMode(HANDLE, DWORD);
BOOL SetConsoleOutputCP(UINT);
BOOL SetConsoleScreenBufferSize(HANDLE, COORD);
BOOL SetConsoleTextAttribute(HANDLE, WORD);
BOOL SetConsoleTitleA(LPCSTR);
BOOL SetConsoleTitleW(LPCWSTR);
BOOL SetConsoleWindowInfo(HANDLE, BOOL, const(SMALL_RECT)*);
BOOL WriteConsoleA(HANDLE, PCVOID, DWORD, PDWORD, PVOID);
BOOL WriteConsoleW(HANDLE, PCVOID, DWORD, PDWORD, PVOID);
BOOL WriteConsoleInputA(HANDLE, const(INPUT_RECORD)*, DWORD, PDWORD);
BOOL WriteConsoleInputW(HANDLE, const(INPUT_RECORD)*, DWORD, PDWORD);
BOOL WriteConsoleOutputA(HANDLE, const(CHAR_INFO)*, COORD, COORD, PSMALL_RECT);
BOOL WriteConsoleOutputW(HANDLE, const(CHAR_INFO)*, COORD, COORD, PSMALL_RECT);
BOOL WriteConsoleOutputAttribute(HANDLE, const(WORD)*, DWORD, COORD, PDWORD);
BOOL WriteConsoleOutputCharacterA(HANDLE, LPCSTR, DWORD, COORD, PDWORD);
BOOL WriteConsoleOutputCharacterW(HANDLE, LPCWSTR, DWORD, COORD, PDWORD);

version (Unicode) {
    alias FillConsoleOutputCharacterW FillConsoleOutputCharacter;
    alias GetConsoleTitleW GetConsoleTitle;
    alias PeekConsoleInputW PeekConsoleInput;
    alias ReadConsoleW ReadConsole;
    alias ReadConsoleInputW ReadConsoleInput;
    alias ReadConsoleOutputW ReadConsoleOutput;
    alias ReadConsoleOutputCharacterW ReadConsoleOutputCharacter;
    alias ScrollConsoleScreenBufferW ScrollConsoleScreenBuffer;
    alias SetConsoleTitleW SetConsoleTitle;
    alias WriteConsoleW WriteConsole;
    alias WriteConsoleInputW WriteConsoleInput;
    alias WriteConsoleOutputW WriteConsoleOutput;
    alias WriteConsoleOutputCharacterW WriteConsoleOutputCharacter;
} else {
    alias FillConsoleOutputCharacterA FillConsoleOutputCharacter;
    alias GetConsoleTitleA GetConsoleTitle;
    alias PeekConsoleInputA PeekConsoleInput;
    alias ReadConsoleA ReadConsole;
    alias ReadConsoleInputA ReadConsoleInput;
    alias ReadConsoleOutputA ReadConsoleOutput;
    alias ReadConsoleOutputCharacterA ReadConsoleOutputCharacter;
    alias ScrollConsoleScreenBufferA ScrollConsoleScreenBuffer;
    alias SetConsoleTitleA SetConsoleTitle;
    alias WriteConsoleA WriteConsole;
    alias WriteConsoleInputA WriteConsoleInput;
    alias WriteConsoleOutputA WriteConsoleOutput;
    alias WriteConsoleOutputCharacterA WriteConsoleOutputCharacter;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           /**
 * Windows API header module
 *
 * Translated from MinGW Windows headers
 *
 * Authors: Stewart Gordon
 * License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)
 * Source: $(DRUNTIMESRC src/core/sys/windows/_wincrypt.d)
 */
module core.sys.windows.wincrypt;
version (Windows):
pragma(lib, "advapi32");

version (ANSI) {} else version = Unicode;

private import core.sys.windows.w32api, core.sys.windows.winbase, core.sys.windows.windef;

/* FIXME:
 *  Types of some constants
 *  Types of macros
 *  Inits of various "size" and "version" members
 *  Why are some #ifdefs commented out?
 */

const TCHAR[]
    MS_DEF_PROV = "Microsoft Base Cryptographic Provider v1.0",
    MS_ENHANCED_PROV = "Microsoft Enhanced Cryptographic Provider v1.0",
    MS_STRONG_PROV = "Microsoft Strong Cryptographic Provider",
    MS_DEF_RSA_SIG_PROV = "Microsoft RSA Signature Cryptographic Provider",
    MS_DEF_RSA_SCHANNEL_PROV = "Microsoft RSA SChannel Cryptographic Provider",
    MS_DEF_DSS_PROV = "Microsoft Base DSS Cryptographic Provider",
    MS_DEF_DSS_DH_PROV
      = "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider",
    MS_ENH_DSS_DH_PROV
      = "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider",
    MS_DEF_DH_SCHANNEL_PROV = "Microsoft DH SChannel Cryptographic Provider",
    MS_SCARD_PROV = "Microsoft Base Smart Card Crypto Provider";

static if (_WIN32_WINNT > 0x501) {
const TCHAR[] MS_ENH_RSA_AES_PROV
      = "Microsoft Enhanced RSA and AES Cryptographic Provider";
} else static if (_WIN32_WINNT == 0x501) {
const TCHAR[] MS_ENH_RSA_AES_PROV
      = "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)";
}

ALG_ID GET_ALG_CLASS(ALG_ID x) { return x & 0xE000; }
ALG_ID GET_ALG_TYPE (ALG_ID x) { return x & 0x1E00; }
ALG_ID GET_ALG_SID  (ALG_ID x) { return x & 0x01FF; }

enum : ALG_ID {
    ALG_CLASS_ANY           = 0,
    ALG_CLASS_SIGNATURE     = 0x2000,
    ALG_CLASS_MSG_ENCRYPT   = 0x4000,
    ALG_CLASS_DATA_ENCRYPT  = 0x6000,
    ALG_CLASS_HASH          = 0x8000,
    ALG_CLASS_KEY_EXCHANGE  = 0xA000,
    ALG_CLASS_ALL           = 0xE000
}

enum : ALG_ID {
    ALG_TYPE_ANY           = 0,
    ALG_TYPE_DSS           = 0x0200,
    ALG_TYPE_RSA           = 0x0400,
    ALG_TYPE_BLOCK         = 0x0600,
    ALG_TYPE_STREAM        = 0x0800,
    ALG_TYPE_DH            = 0x0A00,
    ALG_TYPE_SECURECHANNEL = 0x0C00
}

enum : ALG_ID {
    ALG_SID_ANY          =  0,
    ALG_SID_RSA_ANY      =  0,
    ALG_SID_RSA_PKCS,
    ALG_SID_RSA_MSATWORK,
    ALG_SID_RSA_ENTRUST,
    ALG_SID_RSA_PGP,  // =  4
    ALG_SID_DSS_ANY      =  0,
    ALG_SID_DSS_PKCS,
    ALG_SID_DSS_DMS,  // =  2
    ALG_SID_DES          =  1,
    ALG_SID_3DES         =  3,
    ALG_SID_DESX,
    ALG_SID_IDEA,
    ALG_SID_CAST,
    ALG_SID_SAFERSK64,
    ALG_SID_SAFERSK128,
    ALG_SID_3DES_112,
    ALG_SID_SKIPJACK,
    ALG_SID_TEK,
    ALG_SID_CYLINK_MEK,
    ALG_SID_RC5,      // = 13
    ALG_SID_RC2          =  2,
    ALG_SID_RC4          =  1,
    ALG_SID_SEAL         =  2,
    ALG_SID_MD2          =  1,
    ALG_SID_MD4,
    ALG_SID_MD5,
    ALG_SID_SHA,
    ALG_SID_MAC,
    ALG_SID_RIPEMD,
    ALG_SID_RIPEMD160,
    ALG_SID_SSL3SHAMD5,
    ALG_SID_HMAC,
    ALG_SID_TLS1PRF,  // = 10
    ALG_SID_AES_128      = 14,
    ALG_SID_AES_192,
    ALG_SID_AES_256,
    ALG_SID_AES,      // = 17
    ALG_SID_EXAMPLE      = 80
}

enum : ALG_ID {
    CALG_MD2        = ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_MD2,
    CALG_MD4        = ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_MD4,
    CALG_MD5        = ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_MD5,
    CALG_SHA        = ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_SHA,
    CALG_SHA1       = CALG_SHA,
    CALG_MAC        = ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_MAC,
    CALG_3DES       = ALG_CLASS_DATA_ENCRYPT | ALG_TYPE_BLOCK | 3,
    CALG_CYLINK_MEK = ALG_CLASS_DATA_ENCRYPT | ALG_TYPE_BLOCK | 12,
    CALG_SKIPJACK   = ALG_CLASS_DATA_ENCRYPT | ALG_TYPE_BLOCK | 10,
    CALG_KEA_KEYX   = ALG_CLASS_KEY_EXCHANGE | ALG_TYPE_STREAM | ALG_TYPE_DSS | 4,
    CALG_RSA_SIGN   = ALG_CLASS_SIGNATURE | ALG_TYPE_RSA | ALG_SID_RSA_ANY,
    CALG_DSS_SIGN   = ALG_CLASS_SIGNATURE | ALG_TYPE_DSS | ALG_SID_DSS_ANY,
    CALG_RSA_KEYX   = ALG_CLASS_KEY_EXCHANGE | ALG_TYPE_RSA | ALG_SID_RSA_ANY,
    CALG_DES        = ALG_CLASS_DATA_ENCRYPT | ALG_TYPE_BLOCK | ALG_SID_DES,
    CALG_RC2        = ALG_CLASS_DATA_ENCRYPT | ALG_TYPE_BLOCK | ALG_SID_RC2,
    CALG_RC4        = ALG_CLASS_DATA_ENCRYPT | ALG_TYPE_STREAM | ALG_SID_RC4,
    CALG_SEAL       = ALG_CLASS_DATA_ENCRYPT | ALG_TYPE_STREAM | ALG_SID_SEAL,
    CALG_DH_EPHEM   = ALG_CLASS_KEY_EXCHANGE | ALG_TYPE_STREAM | ALG_TYPE_DSS
                      | ALG_SID_DSS_DMS,
    CALG_DESX       = ALG_CLASS_DATA_ENCRYPT | ALG_TYPE_BLOCK | ALG_SID_DESX,
// is undefined ALG_CLASS_DHASH in MinGW - presuming typo
    CALG_TLS1PRF    = ALG_CLASS_HASH | ALG_TYPE_ANY | ALG_SID_TLS1PRF,
    CALG_AES_128    = ALG_CLASS_DATA_ENCRYPT | ALG_TYPE_BLOCK | ALG_SID_AES_128,
    CALG_AES_192    = ALG_CLASS_DATA_ENCRYPT | ALG_TYPE_BLOCK | ALG_SID_AES_192,
    CALG_AES_256    = ALG_CLASS_DATA_ENCRYPT | ALG_TYPE_BLOCK | ALG_SID_AES_256,
    CALG_AES        = ALG_CLASS_DATA_ENCRYPT | ALG_TYPE_BLOCK | ALG_SID_AES,
}

enum {
    CRYPT_VERIFYCONTEXT = 0xF0000000,
}

enum {
    CRYPT_NEWKEYSET = 8,
    CRYPT_DELETEKEYSET = 16,
    CRYPT_MACHINE_KEYSET = 32,
    CRYPT_SILENT = 64,
}

enum {
    CRYPT_EXPORTABLE = 1,
    CRYPT_USER_PROTECTED = 2,
    CRYPT_CREATE_SALT = 4,
    CRYPT_UPDATE_KEY = 8,
}

enum {
    SIMPLEBLOB = 1,
    PUBLICKEYBLOB = 6,
    PRIVATEKEYBLOB = 7,
    PLAINTEXTKEYBLOB = 8,
    OPAQUEKEYBLOB = 9,
    PUBLICKEYBLOBEX = 10,
    SYMMETRICWRAPKEYBLOB = 11,
}

enum {
    AT_KEYEXCHANGE = 1,
    AT_SIGNATURE = 2,
}

enum {
    CRYPT_USERDATA = 1,
}

enum {
    PKCS5_PADDING = 1,
}

enum {
    CRYPT_MODE_CBC = 1,
    CRYPT_MODE_ECB = 2,
    CRYPT_MODE_OFB = 3,
    CRYPT_MODE_CFB = 4,
    CRYPT_MODE_CTS = 5,
    CRYPT_MODE_CBCI = 6,
    CRYPT_MODE_CFBP = 7,
    CRYPT_MODE_OFBP = 8,
    CRYPT_MODE_CBCOFM = 9,
    CRYPT_MODE_CBCOFMI = 10,
}

enum {
    CRYPT_ENCRYPT = 1,
    CRYPT_DECRYPT = 2,
    CRYPT_EXPORT = 4,
    CRYPT_READ = 8,
    CRYPT_WRITE = 16,
    CRYPT_MAC = 32,
}

enum {
    HP_ALGID = 1,
    HP_HASHVAL = 2,
    HP_HASHSIZE = 4,
    HP_HMAC_INFO = 5,
}

enum {
    CRYPT_FAILED = FALSE,
    CRYPT_SUCCEED = TRUE,
}

bool RCRYPT_SUCCEEDED(BOOL r) { return r==CRYPT_SUCCEED; }
bool RCRYPT_FAILED(BOOL r) { return r==CRYPT_FAILED; }

enum {
    PP_ENUMALGS = 1,
    PP_ENUMCONTAINERS = 2,
    PP_IMPTYPE = 3,
    PP_NAME = 4,
    PP_VERSION = 5,
    PP_CONTAINER = 6,
    PP_CHANGE_PASSWORD  = 7,
    PP_KEYSET_SEC_DESCR = 8,
    PP_CERTCHAIN    = 9,
    PP_KEY_TYPE_SUBTYPE = 10,
    PP_PROVTYPE = 16,
    PP_KEYSTORAGE   = 17,
    PP_APPLI_CERT   = 18,
    PP_SYM_KEYSIZE  = 19,
    PP_SESSION_KEYSIZE  = 20,
    PP_UI_PROMPT    = 21,
    PP_ENUMALGS_EX  = 22,
    PP_ENUMMANDROOTS = 25,
    PP_ENUMELECTROOTS = 26,
    PP_KEYSET_TYPE = 27,
    PP_ADMIN_PIN = 31,
    PP_KEYEXCHANGE_PIN = 32,
    PP_SIGNATURE_PIN = 33,
    PP_SIG_KEYSIZE_INC = 34,
    PP_KEYX_KEYSIZE_INC = 35,
    PP_UNIQUE_CONTAINER = 36,
    PP_SGC_INFO = 37,
    PP_USE_HARDWARE_RNG = 38,
    PP_KEYSPEC = 39,
    PP_ENUMEX_SIGNING_PROT = 40,
}

enum {
    CRYPT_FIRST = 1,
    CRYPT_NEXT = 2,
}

enum {
    CRYPT_IMPL_HARDWARE = 1,
    CRYPT_IMPL_SOFTWARE = 2,
    CRYPT_IMPL_MIXED = 3,
    CRYPT_IMPL_UNKNOWN = 4,
}

enum {
    PROV_RSA_FULL = 1,
    PROV_RSA_SIG = 2,
    PROV_DSS = 3,
    PROV_FORTEZZA = 4,
    PROV_MS_MAIL = 5,
    PROV_SSL = 6,
    PROV_STT_MER = 7,
    PROV_STT_ACQ = 8,
    PROV_STT_BRND = 9,
    PROV_STT_ROOT = 10,
    PROV_STT_ISS = 11,
    PROV_RSA_SCHANNEL = 12,
    PROV_DSS_DH = 13,
    PROV_EC_ECDSA_SIG = 14,
    PROV_EC_ECNRA_SIG = 15,
    PROV_EC_ECDSA_FULL = 16,
    PROV_EC_ECNRA_FULL = 17,
    PROV_DH_SCHANNEL = 18,
    PROV_SPYRUS_LYNKS = 20,
    PROV_RNG = 21,
    PROV_INTEL_SEC = 22,
    PROV_RSA_AES = 24,
    MAXUIDLEN = 64,
}

enum {
    CUR_BLOB_VERSION = 2,
}

enum {
    X509_ASN_ENCODING = 1,
    PKCS_7_ASN_ENCODING  = 65536,
}

enum {
    CERT_V1 = 0,
    CERT_V2 = 1,
    CERT_V3 = 2,
}

enum {
    CERT_E_CHAINING = (-2146762486),
    CERT_E_CN_NO_MATCH = (-2146762481),
    CERT_E_EXPIRED = (-2146762495),
    CERT_E_PURPOSE = (-2146762490),
    CERT_E_REVOCATION_FAILURE = (-2146762482),
    CERT_E_REVOKED = (-2146762484),
    CERT_E_ROLE = (-2146762493),
    CERT_E_UNTRUSTEDROOT = (-2146762487),
    CERT_E_UNTRUSTEDTESTROOT = (-2146762483),
    CERT_E_VALIDITYPERIODNESTING = (-2146762494),
    CERT_E_WRONG_USAGE = (-2146762480),
    CERT_E_PATHLENCONST = (-2146762492),
    CERT_E_CRITICAL = (-2146762491),
    CERT_E_ISSUERCHAINING = (-2146762489),
    CERT_E_MALFORMED = (-2146762488),
    CRYPT_E_REVOCATION_OFFLINE = (-2146885613),
    CRYPT_E_REVOKED = (-2146885616),
    TRUST_E_BASIC_CONSTRAINTS = (-2146869223),
    TRUST_E_CERT_SIGNATURE = (-2146869244),
    TRUST_E_FAIL = (-2146762485),
}

enum {
    CERT_TRUST_NO_ERROR = 0,
    CERT_TRUST_IS_NOT_TIME_VALID = 1,
    CERT_TRUST_IS_NOT_TIME_NESTED = 2,
    CERT_TRUST_IS_REVOKED = 4,
    CERT_TRUST_IS_NOT_SIGNATURE_VALID = 8,
    CERT_TRUST_IS_NOT_VALID_FOR_USAGE = 16,
    CERT_TRUST_IS_UNTRUSTED_ROOT = 32,
    CERT_TRUST_REVOCATION_STATUS_UNKNOWN = 64,
    CERT_TRUST_IS_CYCLIC = 128,
    CERT_TRUST_IS_PARTIAL_CHAIN = 65536,
    CERT_TRUST_CTL_IS_NOT_TIME_VALID = 131072,
    CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID = 262144,
    CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE = 524288,
}

enum {
    CERT_TRUST_HAS_EXACT_MATCH_ISSUER = 1,
    CERT_TRUST_HAS_KEY_MATCH_ISSUER = 2,
    CERT_TRUST_HAS_NAME_MATCH_ISSUER = 4,
    CERT_TRUST_IS_SELF_SIGNED = 8,
    CERT_TRUST_IS_COMPLEX_CHAIN = 65536,
}

enum {
    CERT_CHAIN_POLICY_BASE              = cast(LPCSTR) 1,
    CERT_CHAIN_POLICY_AUTHENTICODE      = cast(LPCSTR) 2,
    CERT_CHAIN_POLICY_AUTHENTICODE_TS   = cast(LPCSTR) 3,
    CERT_CHAIN_POLICY_SSL               = cast(LPCSTR) 4,
    CERT_CHAIN_POLICY_BASIC_CONSTRAINTS = cast(LPCSTR) 5,
    CERT_CHAIN_POLICY_NT_AUTH           = cast(LPCSTR) 6,
}

enum {
    USAGE_MATCH_TYPE_AND = 0,
    USAGE_MATCH_TYPE_OR = 1,
}

enum {
    CERT_SIMPLE_NAME_STR = 1,
    CERT_OID_NAME_STR = 2,
    CERT_X500_NAME_STR = 3,
}
enum {
    CERT_NAME_STR_SEMICOLON_FLAG = 1073741824,
    CERT_NAME_STR_CRLF_FLAG = 134217728,
    CERT_NAME_STR_NO_PLUS_FLAG = 536870912,
    CERT_NAME_STR_NO_QUOTING_FLAG = 268435456,
    CERT_NAME_STR_REVERSE_FLAG = 33554432,
    CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072,
}

enum {
    CERT_FIND_ANY = 0,
    CERT_FIND_CERT_ID = 1048576,
    CERT_FIND_CTL_USAGE = 655360,
    CERT_FIND_ENHKEY_USAGE = 655360,
    CERT_FIND_EXISTING = 851968,
    CERT_FIND_HASH = 65536,
    CERT_FIND_ISSUER_ATTR = 196612,
    CERT_FIND_ISSUER_NAME = 131076,
    CERT_FIND_ISSUER_OF = 786432,
    CERT_FIND_KEY_IDENTIFIER = 983040,
    CERT_FIND_KEY_SPEC = 589824,
    CERT_FIND_MD5_HASH = 262144,
    CERT_FIND_PROPERTY = 327680,
    CERT_FIND_PUBLIC_KEY = 393216,
    CERT_FIND_SHA1_HASH = 65536,
    CERT_FIND_SIGNATURE_HASH = 917504,
    CERT_FIND_SUBJECT_ATTR = 196615,
    CERT_FIND_SUBJECT_CERT = 720896,
    CERT_FIND_SUBJECT_NAME = 131079,
    CERT_FIND_SUBJECT_STR_A = 458759,
    CERT_FIND_SUBJECT_STR_W = 524295,
    CERT_FIND_ISSUER_STR_A = 458756,
    CERT_FIND_ISSUER_STR_W = 524292,
}

enum {
    CERT_FIND_OR_ENHKEY_USAGE_FLAG = 16,
    CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG  = 1,
    CERT_FIND_NO_ENHKEY_USAGE_FLAG  = 8,
    CERT_FIND_VALID_ENHKEY_USAGE_FLAG  = 32,
    CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG  = 2,
}

enum {
    CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG  = 2,
    CERT_UNICODE_IS_RDN_ATTRS_FLAG = 1,
    CERT_CHAIN_FIND_BY_ISSUER = 1,
}

enum {
    CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG = 1,
    CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG = 2,
    CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = 4,
    CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG = 8,
    CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG = 16384,
    CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG = 32768,
}

enum {
    CERT_STORE_PROV_SYSTEM = 10,
    CERT_SYSTEM_STORE_LOCAL_MACHINE = 131072,
}

enum {
    szOID_PKIX_KP_SERVER_AUTH = "4235600",
    szOID_SERVER_GATED_CRYPTO = "4235658",
    szOID_SGC_NETSCAPE = "2.16.840.1.113730.4.1",
    szOID_PKIX_KP_CLIENT_AUTH = "1.3.6.1.5.5.7.3.2",
}

enum {
    CRYPT_NOHASHOID = 0x00000001,
    CRYPT_NO_SALT = 0x10,
    CRYPT_PREGEN = 0x40,
}

enum {
    CRYPT_RECIPIENT = 0x10,
    CRYPT_INITIATOR = 0x40,
    CRYPT_ONLINE = 0x80,
    CRYPT_SF = 0x100,
    CRYPT_CREATE_IV = 0x200,
    CRYPT_KEK = 0x400,
    CRYPT_DATA_KEY = 0x800,
    CRYPT_VOLATILE = 0x1000,
    CRYPT_SGCKEY = 0x2000,
}

enum {
    KP_IV               = 0x00000001,
    KP_SALT             = 0x00000002,
    KP_PADDING          = 0x00000003,
    KP_MODE             = 0x00000004,
    KP_MODE_BITS        = 0x00000005,
    KP_PERMISSIONS      = 0x00000006,
    KP_ALGID            = 0x00000007,
    KP_BLOCKLEN         = 0x00000008,
    KP_KEYLEN           = 0x00000009,
    KP_SALT_EX          = 0x0000000a,
    KP_P                = 0x0000000b,
    KP_G                = 0x0000000c,
    KP_Q                = 0x0000000d,
    KP_X                = 0x0000000e,
    KP_Y                = 0x0000000f,
    KP_RA               = 0x00000010,
    KP_RB               = 0x00000011,
    KP_INFO             = 0x00000012,
    KP_EFFECTIVE_KEYLEN = 0x00000013,
    KP_SCHANNEL_ALG     = 0x00000014,
    KP_PUB_PARAMS       = 0x00000027,
}

enum {
    CRYPT_FLAG_PCT1    = 0x0001,
    CRYPT_FLAG_SSL2    = 0x0002,
    CRYPT_FLAG_SSL3    = 0x0004,
    CRYPT_FLAG_TLS1    = 0x0008,
    CRYPT_FLAG_IPSEC   = 0x0010,
    CRYPT_FLAG_SIGNING = 0x0020,
}

enum {
    SCHANNEL_MAC_KEY    = 0x00000000,
    SCHANNEL_ENC_KEY    = 0x00000001,
}

enum {
    INTERNATIONAL_USAGE = 0x00000001,
}


alias UINT ALG_ID;
alias ULONG_PTR HCRYPTPROV, HCRYPTKEY, HCRYPTHASH;
alias PVOID HCERTSTORE, HCRYPTMSG, HCERTCHAINENGINE;

struct VTableProvStruc {
    FARPROC FuncVerifyImage;
}
alias VTableProvStruc* PVTableProvStruc;

struct _CRYPTOAPI_BLOB {
    DWORD cbData;
    BYTE* pbData;
}
alias _CRYPTOAPI_BLOB CRYPT_INTEGER_BLOB, CRYPT_UINT_BLOB,
  CRYPT_OBJID_BLOB, CERT_NAME_BLOB, CERT_RDN_VALUE_BLOB, CERT_BLOB,
  CRL_BLOB, DATA_BLOB, CRYPT_DATA_BLOB, CRYPT_HASH_BLOB,
  CRYPT_DIGEST_BLOB, CRYPT_DER_BLOB, CRYPT_ATTR_BLOB;
alias _CRYPTOAPI_BLOB* PCRYPT_INTEGER_BLOB, PCRYPT_UINT_BLOB,
  PCRYPT_OBJID_BLOB, PCERT_NAME_BLOB, PCERT_RDN_VALUE_BLOB, PCERT_BLOB,
  PCRL_BLOB, PDATA_BLOB, PCRYPT_DATA_BLOB, PCRYPT_HASH_BLOB,
  PCRYPT_DIGEST_BLOB, PCRYPT_DER_BLOB, PCRYPT_ATTR_BLOB;

// not described in SDK; has the same layout as HTTPSPolicyCallbackData
struct SSL_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD  cbStruct;
    DWORD  dwAuthType;
    DWORD  fdwChecks;
    LPWSTR pwszServerName;
}
alias SSL_EXTRA_CERT_CHAIN_POLICY_PARA HTTPSPolicyCallbackData;
alias SSL_EXTRA_CERT_CHAIN_POLICY_PARA* PSSL_EXTRA_CERT_CHAIN_POLICY_PARA,
  PHTTPSPolicyCallbackData;

/* #if (_WIN32_WINNT>=0x500) */
struct CERT_CHAIN_POLICY_PARA {
    DWORD cbSize = CERT_CHAIN_POLICY_PARA.sizeof;
    DWORD dwFlags;
    void* pvExtraPolicyPara;
}
alias CERT_CHAIN_POLICY_PARA* PCERT_CHAIN_POLICY_PARA;

struct CERT_CHAIN_POLICY_STATUS {
    DWORD cbSize = CERT_CHAIN_POLICY_STATUS.sizeof;
    DWORD dwError;
    LONG  lChainIndex;
    LONG  lElementIndex;
    void* pvExtraPolicyStatus;
}
alias CERT_CHAIN_POLICY_STATUS* PCERT_CHAIN_POLICY_STATUS;
/* #endif */

struct CRYPT_ALGORITHM_IDENTIFIER {
    LPSTR pszObjId;
    CRYPT_OBJID_BLOB Parameters;
}
alias CRYPT_ALGORITHM_IDENTIFIER* PCRYPT_ALGORITHM_IDENTIFIER;

struct CRYPT_BIT_BLOB {
    DWORD cbData;
    BYTE* pbData;
    DWORD cUnusedBits;
}
alias CRYPT_BIT_BLOB* PCRYPT_BIT_BLOB;

struct CERT_PUBLIC_KEY_INFO {
    CRYPT_ALGORITHM_IDENTIFIER Algorithm;
    CRYPT_BIT_BLOB             PublicKey;
}
alias CERT_PUBLIC_KEY_INFO* PCERT_PUBLIC_KEY_INFO;

struct CERT_EXTENSION {
    LPSTR            pszObjId;
    BOOL             fCritical;
    CRYPT_OBJID_BLOB Value;
}
alias CERT_EXTENSION* PCERT_EXTENSION;

struct CERT_INFO {
    DWORD dwVersion;
    CRYPT_INTEGER_BLOB SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB Issuer;
    FILETIME NotBefore;
    FILETIME NotAfter;
    CERT_NAME_BLOB Subject;
    CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
    CRYPT_BIT_BLOB IssuerUniqueId;
    CRYPT_BIT_BLOB SubjectUniqueId;
    DWORD cExtension;
    PCERT_EXTENSION rgExtension;
}
alias CERT_INFO* PCERT_INFO;

struct CERT_CONTEXT {
    DWORD      dwCertEncodingType;
    BYTE*      pbCertEncoded;
    DWORD      cbCertEncoded;
    PCERT_INFO pCertInfo;
    HCERTSTORE hCertStore;
}
alias CERT_CONTEXT*        PCERT_CONTEXT;
alias const(CERT_CONTEXT)* PCCERT_CONTEXT;

struct CTL_USAGE {
    DWORD  cUsageIdentifier;
    LPSTR* rgpszUsageIdentifier;
}
alias CTL_USAGE CERT_ENHKEY_USAGE;
alias CTL_USAGE* PCTRL_USAGE, PCERT_ENHKEY_USAGE;

struct CERT_USAGE_MATCH {
    DWORD             dwType;
    CERT_ENHKEY_USAGE Usage;
}
alias CERT_USAGE_MATCH* PCERT_USAGE_MATCH;
/* #if (_WIN32_WINNT>=0x500) */

struct CERT_CHAIN_PARA {
    DWORD            cbSize = CERT_CHAIN_PARA.sizeof;
    CERT_USAGE_MATCH RequestedUsage;
//#if CERT_CHAIN_PARA_HAS_EXTRA_FIELDS
    CERT_USAGE_MATCH RequestedIssuancePolicy;
    DWORD            dwUrlRetrievalTimeout;
    BOOL             fCheckRevocationFreshnessTime;
    DWORD            dwRevocationFreshnessTime;
//#endif
}
alias CERT_CHAIN_PARA* PCERT_CHAIN_PARA;

extern (Windows) alias BOOL function(PCCERT_CONTEXT, void*)
  PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK;

struct CERT_CHAIN_FIND_BY_ISSUER_PARA {
    DWORD  cbSize = CERT_CHAIN_FIND_BY_ISSUER_PARA.sizeof;
    LPCSTR pszUsageIdentifier;
    DWORD  dwKeySpec;
    DWORD  dwAcquirePrivateKeyFlags;
    DWORD  cIssuer;
    CERT_NAME_BLOB* rgIssuer;
    PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFIndCallback;
    void*  pvFindArg;
    DWORD* pdwIssuerChainIndex;
    DWORD* pdwIssuerElementIndex;
}
alias CERT_CHAIN_FIND_BY_ISSUER_PARA* PCERT_CHAIN_FIND_BY_ISSUER_PARA;
/* #endif */

struct CERT_TRUST_STATUS {
    DWORD dwErrorStatus;
    DWORD dwInfoStatus;
}
alias CERT_TRUST_STATUS* PCERT_TRUST_STATUS;

struct CRL_ENTRY {
    CRYPT_INTEGER_BLOB SerialNumber;
    FILETIME           RevocationDate;
    DWORD              cExtension;
    PCERT_EXTENSION    rgExtension;
}
alias CRL_ENTRY* PCRL_ENTRY;

struct CRL_INFO {
    DWORD           dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
    CERT_NAME_BLOB  Issuer;
    FILETIME        ThisUpdate;
    FILETIME        NextUpdate;
    DWORD           cCRLEntry;
    PCRL_ENTRY      rgCRLEntry;
    DWORD           cExtension;
    PCERT_EXTENSION rgExtension;
}
alias CRL_INFO* PCRL_INFO;

struct CRL_CONTEXT {
    DWORD      dwCertEncodingType;
    BYTE*      pbCrlEncoded;
    DWORD      cbCrlEncoded;
    PCRL_INFO  pCrlInfo;
    HCERTSTORE hCertStore;
}
alias CRL_CONTEXT*        PCRL_CONTEXT;
alias const(CRL_CONTEXT)* PCCRL_CONTEXT;

struct CERT_REVOCATION_CRL_INFO {
    DWORD         cbSize = CERT_REVOCATION_CRL_INFO.sizeof;
    PCCRL_CONTEXT pBaseCRLContext;
    PCCRL_CONTEXT pDeltaCRLContext;
    PCRL_ENTRY    pCrlEntry;
    BOOL          fDeltaCrlEntry;
}
alias CERT_REVOCATION_CRL_INFO* PCERT_REVOCATION_CRL_INFO;

struct CERT_REVOCATION_INFO {
    DWORD  cbSize = CERT_REVOCATION_INFO.sizeof;
    DWORD  dwRevocationResult;
    LPCSTR pszRevocationOid;
    LPVOID pvOidSpecificInfo;
    BOOL   fHasFreshnessTime;
    DWORD  dwFreshnessTime;
    PCERT_REVOCATION_CRL_INFO pCrlInfo;
}
alias CERT_REVOCATION_INFO* PCERT_REVOCATION_INFO;

/* #if (_WIN32_WINNT>=0x500) */
struct CERT_CHAIN_ELEMENT {
    DWORD                 cbSize = CERT_CHAIN_ELEMENT.sizeof;
    PCCERT_CONTEXT        pCertContext;
    CERT_TRUST_STATUS     TrustStatus;
    PCERT_REVOCATION_INFO pRevocationInfo;
    PCERT_ENHKEY_USAGE    pIssuanceUsage;
    PCERT_ENHKEY_USAGE    pApplicationUsage;
}
alias CERT_CHAIN_ELEMENT* PCERT_CHAIN_ELEMENT;
/* #endif */

struct CRYPT_ATTRIBUTE {
    LPSTR            pszObjId;
    DWORD            cValue;
    PCRYPT_ATTR_BLOB rgValue;
}
alias CRYPT_ATTRIBUTE* PCRYPT_ATTRIBUTE;

struct CTL_ENTRY {
    CRYPT_DATA_BLOB  SubjectIdentifier;
    DWORD            cAttribute;
    PCRYPT_ATTRIBUTE rgAttribute;
}
alias CTL_ENTRY* PCTL_ENTRY;

struct CTL_INFO {
    DWORD              dwVersion;
    CTL_USAGE          SubjectUsage;
    CRYPT_DATA_BLOB    ListIdentifier;
    CRYPT_INTEGER_BLOB SequenceNumber;
    FILETIME           ThisUpdate;
    FILETIME           NextUpdate;
    CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
    DWORD              cCTLEntry;
    PCTL_ENTRY         rgCTLEntry;
    DWORD              cExtension;
    PCERT_EXTENSION    rgExtension;
}
alias CTL_INFO* PCTL_INFO;

struct CTL_CONTEXT {
    DWORD      dwMsgAndCertEncodingType;
    BYTE*      pbCtlEncoded;
    DWORD      cbCtlEncoded;
    PCTL_INFO  pCtlInfo;
    HCERTSTORE hCertStore;
    HCRYPTMSG  hCryptMsg;
    BYTE*      pbCtlContent;
    DWORD      cbCtlContent;
}
alias CTL_CONTEXT*        PCTL_CONTEXT;
alias const(CTL_CONTEXT)* PCCTL_CONTEXT;

struct CERT_TRUST_LIST_INFO {
    DWORD         cbSize = CERT_TRUST_LIST_INFO.sizeof;
    PCTL_ENTRY    pCtlEntry;
    PCCTL_CONTEXT pCtlContext;
}
alias CERT_TRUST_LIST_INFO* PCERT_TRUST_LIST_INFO;

struct CERT_SIMPLE_CHAIN {
    DWORD                 cbSize = CERT_SIMPLE_CHAIN.sizeof;
    CERT_TRUST_STATUS     TrustStatus;
    DWORD                 cElement;
    PCERT_CHAIN_ELEMENT*  rgpElement;
    PCERT_TRUST_LIST_INFO pTrustListInfo;
    BOOL                  fHasRevocationFreshnessTime;
    DWORD                 dwRevocationFreshnessTime;
}
alias CERT_SIMPLE_CHAIN* PCERT_SIMPLE_CHAIN;

/* #if (_WIN32_WINNT>=0x500) */
alias const(CERT_CHAIN_CONTEXT)* PCCERT_CHAIN_CONTEXT;
struct CERT_CHAIN_CONTEXT {
    DWORD                 cbSize = CERT_CHAIN_CONTEXT.sizeof;
    CERT_TRUST_STATUS     TrustStatus;
    DWORD                 cChain;
    PCERT_SIMPLE_CHAIN*   rgpChain;
    DWORD                 cLowerQualityChainContext;
    PCCERT_CHAIN_CONTEXT* rgpLowerQualityChainContext;
    BOOL                  fHasRevocationFreshnessTime;
    DWORD                 dwRevocationFreshnessTime;
}
alias CERT_CHAIN_CONTEXT* PCERT_CHAIN_CONTEXT;
/* #endif */

struct PROV_ENUMALGS {
    ALG_ID   aiAlgid;
    DWORD    dwBitLen;
    DWORD    dwNameLen;
    CHAR[20] szName = 0;
}

struct PUBLICKEYSTRUC {
    BYTE   bType;
    BYTE   bVersion;
    WORD   reserved;
    ALG_ID aiKeyAlg;
}
alias PUBLICKEYSTRUC BLOBHEADER;

struct RSAPUBKEY {
    DWORD magic;
    DWORD bitlen;
    DWORD pubexp;
}

struct HMAC_INFO {
    ALG_ID HashAlgid;
    BYTE*  pbInnerString;
    DWORD  cbInnerString;
    BYTE*  pbOuterString;
    DWORD  cbOuterString;
}
alias HMAC_INFO* PHMAC_INFO;

extern (Windows) @nogc nothrow {
    BOOL CertCloseStore(HCERTSTORE, DWORD);
    BOOL CertGetCertificateChain(HCERTCHAINENGINE, PCCERT_CONTEXT, LPFILETIME,
      HCERTSTORE, PCERT_CHAIN_PARA, DWORD, LPVOID, PCCERT_CHAIN_CONTEXT*);
    BOOL CertVerifyCertificateChainPolicy(LPCSTR, PCCERT_CHAIN_CONTEXT,
      PCERT_CHAIN_POLICY_PARA, PCERT_CHAIN_POLICY_STATUS);
    void CertFreeCertificateChain(PCCERT_CHAIN_CONTEXT);
    DWORD CertNameToStrA(DWORD, PCERT_NAME_BLOB, DWORD, LPSTR, DWORD);
    DWORD CertNameToStrW(DWORD, PCERT_NAME_BLOB, DWORD, LPWSTR, DWORD);
    HCERTSTORE CertOpenSystemStoreA(HCRYPTPROV, LPCSTR);
    HCERTSTORE CertOpenSystemStoreW(HCRYPTPROV, LPCWSTR);
    HCERTSTORE CertOpenStore(LPCSTR, DWORD, HCRYPTPROV, DWORD, const(void)*);
    PCCERT_CONTEXT CertFindCertificateInStore(HCERTSTORE, DWORD, DWORD, DWORD,
const(void)*, PCCERT_CONTEXT);
    BOOL CertFreeCertificateContext(PCCERT_CONTEXT);
    PCCERT_CONTEXT CertGetIssuerCertificateFromStore(HCERTSTORE,
      PCCERT_CONTEXT, PCCERT_CONTEXT, DWORD*);
    PCCERT_CHAIN_CONTEXT CertFindChainInStore(HCERTSTORE, DWORD, DWORD, DWORD,
const(void)*, PCCERT_CHAIN_CONTEXT);

    BOOL CryptAcquireContextA(HCRYPTPROV*, LPCSTR, LPCSTR, DWORD, DWORD);
    BOOL CryptAcquireContextW(HCRYPTPROV*, LPCWSTR, LPCWSTR, DWORD, DWORD);
     BOOL CryptContextAddRef(HCRYPTPROV, DWORD*, DWORD);
    BOOL CryptReleaseContext(HCRYPTPROV, ULONG_PTR);
    BOOL CryptGenKey(HCRYPTPROV, ALG_ID, DWORD, HCRYPTKEY*);
    BOOL CryptDeriveKey(HCRYPTPROV, ALG_ID, HCRYPTHASH, DWORD, HCRYPTKEY*);
    BOOL CryptDestroyKey(HCRYPTKEY);
    static if (_WIN32_WINNT >= 0x500) {
        BOOL CryptDuplicateHash(HCRYPTHASH, DWORD*, DWORD, HCRYPTHASH*);
        BOOL CryptDuplicateKey(HCRYPTKEY, DWORD*, DWORD, HCRYPTKEY*);
    }
    BOOL CryptSetKeyParam(HCRYPTKEY, DWORD, PBYTE, DWORD);
    BOOL CryptGetKeyParam(HCRYPTKEY, DWORD, PBYTE, PDWORD, DWORD);
    BOOL CryptSetHashParam(HCRYPTHASH, DWORD, PBYTE, DWORD);
    BOOL CryptGetHashParam(HCRYPTHASH, DWORD, PBYTE, PDWORD, DWORD);
    BOOL CryptSetProvParam(HCRYPTPROV, DWORD, PBYTE, DWORD);
    BOOL CryptGetProvParam(HCRYPTPROV, DWORD, PBYTE, PDWORD, DWORD);
    BOOL CryptGenRandom(HCRYPTPROV, DWORD, PBYTE);
    BOOL CryptGetUserKey(HCRYPTPROV, DWORD, HCRYPTKEY*);
    BOOL CryptExportKey(HCRYPTKEY, HCRYPTKEY, DWORD, DWORD, PBYTE, PDWORD);
    BOOL CryptImportKey(HCRYPTPROV, PBYTE, DWORD, HCRYPTKEY, DWORD,
      HCRYPTKEY*);
    BOOL CryptEncrypt(HCRYPTKEY, HCRYPTHASH, BOOL, DWORD, PBYTE, PDWORD,
      DWORD);
    BOOL CryptDecrypt(HCRYPTKEY, HCRYPTHASH, BOOL, DWORD, PBYTE, PDWORD);
    BOOL CryptCreateHash(HCRYPTPROV, ALG_ID, HCRYPTKEY, DWORD, HCRYPTHASH*);
    BOOL CryptHashData(HCRYPTHASH, PBYTE, DWORD, DWORD);
    BOOL CryptHashSessionKey(HCRYPTHASH, HCRYPTKEY, DWORD);
    BOOL CryptGetHashValue(HCRYPTHASH, DWORD, PBYTE, PDWORD);
    BOOL CryptDestroyHash(HCRYPTHASH);
    BOOL CryptSignHashA(HCRYPTHASH, DWORD, LPCSTR, DWORD, PBYTE, PDWORD);
    BOOL CryptSignHashW(HCRYPTHASH, DWORD, LPCWSTR, DWORD, PBYTE, PDWORD);
    BOOL CryptVerifySignatureA(HCRYPTHASH, PBYTE, DWORD, HCRYPTKEY, LPCSTR,
      DWORD);
    BOOL CryptVerifySignatureW(HCRYPTHASH, PBYTE, DWORD, HCRYPTKEY, LPCWSTR,
      DWORD);
    BOOL CryptSetProviderA(LPCSTR, DWORD);
    BOOL CryptSetProviderW(LPCWSTR, DWORD);
}

version (Unicode) {
    alias CertNameToStrW CertNameToStr;
    alias CryptAcquireContextW CryptAcquireContext;
    alias CryptSignHashW CryptSignHash;
    alias CryptVerifySignatureW CryptVerifySignature;
    alias CryptSetProviderW CryptSetProvider;
    alias CertOpenSystemStoreW CertOpenSystemStore;
    /+alias CERT_FIND_SUBJECT_STR_W CERT_FIND_SUBJECT_STR;
    alias CERT_FIND_ISSUER_STR_W CERT_FIND_ISSUER_STR;+/
} else {
    alias CertNameToStrA CertNameToStr;
    alias CryptAcquireContextA CryptAcquireContext;
    alias CryptSignHashA CryptSignHash;
    alias CryptVerifySignatureA CryptVerifySignature;
    alias CryptSetProviderA CryptSetProvider;
    alias CertOpenSystemStoreA CertOpenSystemStore;
    /+alias CERT_FIND_SUBJECT_STR_A CERT_FIND_SUBJECT_STR;
    alias CERT_FIND_ISSUER_STR_A CERT_FIND_ISSUER_STR;+/
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                /**
 * Windows API header module
 *
 * Translated from MinGW Windows headers
 *
 * Authors: Stewart Gordon
 * License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)
 * Source: $(DRUNTIMESRC src/core/sys/windows/_windef.d)
 */
module core.sys.windows.windef;
version (Windows):

public import core.sys.windows.winnt;
private import core.sys.windows.w32api;

enum size_t MAX_PATH = 260;

pure nothrow @nogc {
    ushort MAKEWORD(ubyte a, ubyte b) {
        return cast(ushort) ((b << 8) | a);
    }

    ushort MAKEWORD(ushort a, ushort b) {
        assert((a & 0xFF00) == 0);
        assert((b & 0xFF00) == 0);
        return MAKEWORD(cast(ubyte)a, cast(ubyte)b);
    }

    uint MAKELONG(ushort a, ushort b) {
        return cast(uint) ((b << 16) | a);
    }

    uint MAKELONG(uint a, uint b) {
        assert((a & 0xFFFF0000) == 0);
        assert((b & 0xFFFF0000) == 0);
        return MAKELONG(cast(ushort)a, cast(ushort)b);
    }

    ushort LOWORD(ulong l) {
        return cast(ushort) l;
    }

    ushort HIWORD(ulong l) {
        return cast(ushort) (l >>> 16);
    }

    ubyte LOBYTE(ushort w) {
        return cast(ubyte) w;
    }

    ubyte HIBYTE(ushort w) {
        return cast(ubyte) (w >>> 8);
    }
}

enum NULL = null;
static assert (is(typeof({
    void test(int* p) {}
    test(NULL);
})));

alias ubyte        BYTE;
alias ubyte*       PBYTE, LPBYTE;
alias ushort       USHORT, WORD, ATOM;
alias ushort*      PUSHORT, PWORD, LPWORD;
alias uint         ULONG, DWORD, UINT, COLORREF;
alias uint*        PULONG, PDWORD, LPDWORD, PUINT, LPUINT, LPCOLORREF;
alias int          WINBOOL, BOOL, INT, LONG, HFILE, HRESULT;
alias int*         PWINBOOL, LPWINBOOL, PBOOL, LPBOOL, PINT, LPINT, LPLONG;
alias float        FLOAT;
alias float*       PFLOAT;
alias const(void)* PCVOID, LPCVOID;

alias UINT_PTR WPARAM;
alias LONG_PTR LPARAM, LRESULT;

mixin DECLARE_HANDLE!("HHOOK");
mixin DECLARE_HANDLE!("HGLOBAL");
mixin DECLARE_HANDLE!("HLOCAL");
mixin DECLARE_HANDLE!("GLOBALHANDLE");
mixin DECLARE_HANDLE!("LOCALHANDLE");
mixin DECLARE_HANDLE!("HGDIOBJ");
mixin DECLARE_HANDLE!("HACCEL");
mixin DECLARE_HANDLE!("HBITMAP", HGDIOBJ);
mixin DECLARE_HANDLE!("HBRUSH", HGDIOBJ);
mixin DECLARE_HANDLE!("HCOLORSPACE");
mixin DECLARE_HANDLE!("HDC");
mixin DECLARE_HANDLE!("HGLRC");
mixin DECLARE_HANDLE!("HDESK");
mixin DECLARE_HANDLE!("HENHMETAFILE");
mixin DECLARE_HANDLE!("HFONT", HGDIOBJ);
mixin DECLARE_HANDLE!("HICON");
mixin DECLARE_HANDLE!("HINSTANCE");
mixin DECLARE_HANDLE!("HKEY");
mixin DECLARE_HANDLE!("HMENU");
mixin DECLARE_HANDLE!("HMETAFILE");
mixin DECLARE_HANDLE!("HMODULE");
mixin DECLARE_HANDLE!("HMONITOR");
mixin DECLARE_HANDLE!("HPALETTE");
mixin DECLARE_HANDLE!("HPEN", HGDIOBJ);
mixin DECLARE_HANDLE!("HRGN", HGDIOBJ);
mixin DECLARE_HANDLE!("HRSRC");
mixin DECLARE_HANDLE!("HSTR");
mixin DECLARE_HANDLE!("HTASK");
mixin DECLARE_HANDLE!("HWND");
mixin DECLARE_HANDLE!("HWINSTA");
mixin DECLARE_HANDLE!("HKL");
mixin DECLARE_HANDLE!("HCURSOR");
alias HKEY* PHKEY;

static if (_WIN32_WINNT >= 0x500) {
    mixin DECLARE_HANDLE!("HTERMINAL");
    mixin DECLARE_HANDLE!("HWINEVENTHOOK");
}

alias extern (Windows) INT_PTR function() nothrow FARPROC, NEARPROC, PROC;

struct RECT {
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
}
alias RECT RECTL;
alias RECT*        PRECT, NPRECT, LPRECT, PRECTL, LPRECTL;
alias const(RECT)* LPCRECT, LPCRECTL;

struct POINT {
    LONG x;
    LONG y;
}
alias POINT POINTL;
alias POINT* PPOINT, NPPOINT, LPPOINT, PPOINTL, LPPOINTL;

struct SIZE {
    LONG cx;
    LONG cy;
}
alias SIZE SIZEL;
alias SIZE* PSIZE, LPSIZE, PSIZEL, LPSIZEL;

struct POINTS {
    SHORT x;
    SHORT y;
}
alias POINTS* PPOINTS, LPPOINTS;

enum : BOOL {
    FALSE = 0,
    TRUE  = 1
}
                                                                                                                                                                                                                                                                                                                                                       /**
 * Windows API header module
 *
 * Translated from MinGW API for MS-Windows 4.0
 *
 * License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)
 * Source: $(DRUNTIMESRC src/core/sys/windows/_windows.d)
 */
module core.sys.windows.windows;
version (Windows):

/*
    windows.h - main header file for the Win32 API

    Written by Anders Norlander <anorland@hem2.passagen.se>

    This file is part of a free library for the Win32 API.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

*/

public import core.sys.windows.w32api;
public import core.sys.windows.core;

public import core.sys.windows.cderr;
public import core.sys.windows.dde;
public import core.sys.windows.ddeml;
public import core.sys.windows.dlgs;
public import core.sys.windows.imm;
public import core.sys.windows.lzexpand;
public import core.sys.windows.mmsystem;
public import core.sys.windows.nb30;
public import core.sys.windows.winsvc;

public import core.sys.windows.rpc;
public import core.sys.windows.shellapi;
public import core.sys.windows.winperf;
public import core.sys.windows.commdlg;
public import core.sys.windows.winspool;
public import core.sys.windows.ole2;

public import core.sys.windows.winreg;

public import core.sys.windows.winsock2;

/+
#if (_WIN32_WINNT >= 0x400)
#include <winsock2.h>
/*
 * MS likes to include mswsock.h here as well,
 * but that can cause undefined symbols if
 * winsock2.h is included before windows.h
 */
#else
#include <winsock.h>
#endif /*  (_WIN32_WINNT >= 0x400) */
+/

// For compatibility with previous
// core.sys.windows.windows...
public import core.sys.windows.imagehlp;
public import core.sys.windows.dbghelp_types;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  /**
 * Windows API header module
 *
 * Translated from MinGW Windows headers
 *
 * License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)
 * Source: $(DRUNTIMESRC src/core/sys/windows/_winerror.d)
 */
module core.sys.windows.winerror;
version (Windows):

/* Comments from the Mingw header:
 * WAIT_TIMEOUT is also defined in winbase.h
 */

private import core.sys.windows.windef;

alias int SCODE; // was in core.sys.windows.wtypes.

enum : uint {
    ERROR_SUCCESS                                         =     0,
    NO_ERROR                                              =     0,
    ERROR_INVALID_FUNCTION,
    ERROR_FILE_NOT_FOUND,
    ERROR_PATH_NOT_FOUND,
    ERROR_TOO_MANY_OPEN_FILES,
    ERROR_ACCESS_DENIED,
    ERROR_INVALID_HANDLE,
    ERROR_ARENA_TRASHED,
    ERROR_NOT_ENOUGH_MEMORY,
    ERROR_INVALID_BLOCK,
    ERROR_BAD_ENVIRONMENT,
    ERROR_BAD_FORMAT,
    ERROR_INVALID_ACCESS,
    ERROR_INVALID_DATA,
    ERROR_OUTOFMEMORY,
    ERROR_INVALID_DRIVE,
    ERROR_CURRENT_DIRECTORY,
    ERROR_NOT_SAME_DEVICE,
    ERROR_NO_MORE_FILES,
    ERROR_WRITE_PROTECT,
    ERROR_BAD_UNIT,
    ERROR_NOT_READY,
    ERROR_BAD_COMMAND,
    ERROR_CRC,
    ERROR_BAD_LENGTH,
    ERROR_SEEK,
    ERROR_NOT_DOS_DISK,
    ERROR_SECTOR_NOT_FOUND,
    ERROR_OUT_OF_PAPER,
    ERROR_WRITE_FAULT,
    ERROR_READ_FAULT,
    ERROR_GEN_FAILURE,
    ERROR_SHARING_VIOLATION,
    ERROR_LOCK_VIOLATION,
    ERROR_WRONG_DISK,                                  // =    34
    ERROR_SHARING_BUFFER_EXCEEDED                         =    36,
    ERROR_HANDLE_EOF                                      =    38,
    ERROR_HANDLE_DISK_FULL,                            // =    39
    ERROR_NOT_SUPPORTED                                   =    50,
    ERROR_REM_NOT_LIST,
    ERROR_DUP_NAME,
    ERROR_BAD_NETPATH,
    ERROR_NETWORK_BUSY,
    ERROR_DEV_NOT_EXIST,
    ERROR_TOO_MANY_CMDS,
    ERROR_ADAP_HDW_ERR,
    ERROR_BAD_NET_RESP,
    ERROR_UNEXP_NET_ERR,
    ERROR_BAD_REM_ADAP,
    ERROR_PRINTQ_FULL,
    ERROR_NO_SPOOL_SPACE,
    ERROR_PRINT_CANCELLED,
    ERROR_NETNAME_DELETED,
    ERROR_NETWORK_ACCESS_DENIED,
    ERROR_BAD_DEV_TYPE,
    ERROR_BAD_NET_NAME,
    ERROR_TOO_MANY_NAMES,
    ERROR_TOO_MANY_SESS,
    ERROR_SHARING_PAUSED,
    ERROR_REQ_NOT_ACCEP,
    ERROR_REDIR_PAUSED,                                // =    72
    ERROR_FILE_EXISTS                                     =    80,
    ERROR_CANNOT_MAKE                                     =    82,
    ERROR_FAIL_I24,
    ERROR_OUT_OF_STRUCTURES,
    ERROR_ALREADY_ASSIGNED,
    ERROR_INVALID_PASSWORD,
    ERROR_INVALID_PARAMETER,
    ERROR_NET_WRITE_FAULT,
    ERROR_NO_PROC_SLOTS,                               // =    89
    ERROR_TOO_MANY_SEMAPHORES                             =   100,
    ERROR_EXCL_SEM_ALREADY_OWNED,
    ERROR_SEM_IS_SET,
    ERROR_TOO_MANY_SEM_REQUESTS,
    ERROR_INVALID_AT_INTERRUPT_TIME,
    ERROR_SEM_OWNER_DIED,
    ERROR_SEM_USER_LIMIT,
    ERROR_DISK_CHANGE,
    ERROR_DRIVE_LOCKED,
    ERROR_BROKEN_PIPE,
    ERROR_OPEN_FAILED,
    ERROR_BUFFER_OVERFLOW,
    ERROR_DISK_FULL,
    ERROR_NO_MORE_SEARCH_HANDLES,
    ERROR_INVALID_TARGET_HANDLE,                       // =   114
    ERROR_INVALID_CATEGORY                                =   117,
    ERROR_INVALID_VERIFY_SWITCH,
    ERROR_BAD_DRIVER_LEVEL,
    ERROR_CALL_NOT_IMPLEMENTED,
    ERROR_SEM_TIMEOUT,
    ERROR_INSUFFICIENT_BUFFER,
    ERROR_INVALID_NAME,
    ERROR_INVALID_LEVEL,
    ERROR_NO_VOLUME_LABEL,
    ERROR_MOD_NOT_FOUND,
    ERROR_PROC_NOT_FOUND,
    ERROR_WAIT_NO_CHILDREN,
    ERROR_CHILD_NOT_COMPLETE,
    ERROR_DIRECT_ACCESS_HANDLE,
    ERROR_NEGATIVE_SEEK,
    ERROR_SEEK_ON_DEVICE,
    ERROR_IS_JOIN_TARGET,
    ERROR_IS_JOINED,
    ERROR_IS_SUBSTED,
    ERROR_NOT_JOINED,
    ERROR_NOT_SUBSTED,
    ERROR_JOIN_TO_JOIN,
    ERROR_SUBST_TO_SUBST,
    ERROR_JOIN_TO_SUBST,
    ERROR_SUBST_TO_JOIN,
    ERROR_BUSY_DRIVE,
    ERROR_SAME_DRIVE,
    ERROR_DIR_NOT_ROOT,
    ERROR_DIR_NOT_EMPTY,
    ERROR_IS_SUBST_PATH,
    ERROR_IS_JOIN_PATH,
    ERROR_PATH_BUSY,
    ERROR_IS_SUBST_TARGET,
    ERROR_SYSTEM_TRACE,
    ERROR_INVALID_EVENT_COUNT,
    ERROR_TOO_MANY_MUXWAITERS,
    ERROR_INVALID_LIST_FORMAT,
    ERROR_LABEL_TOO_LONG,
    ERROR_TOO_MANY_TCBS,
    ERROR_SIGNAL_REFUSED,
    ERROR_DISCARDED,
    ERROR_NOT_LOCKED,
    ERROR_BAD_THREADID_ADDR,
    ERROR_BAD_ARGUMENTS,
    ERROR_BAD_PATHNAME,
    ERROR_SIGNAL_PENDING,                              // =   162
    ERROR_MAX_THRDS_REACHED                               =   164,
    ERROR_LOCK_FAILED                                     =   167,
    ERROR_BUSY                                            =   170,
    ERROR_CANCEL_VIOLATION                                =   173,
    ERROR_ATOMIC_LOCKS_NOT_SUPPORTED,                  // =   174
    ERROR_INVALID_SEGMENT_NUMBER                          =   180,
    ERROR_INVALID_ORDINAL                                 =   182,
    ERROR_ALREADY_EXISTS,                              // =   183
    ERROR_INVALID_FLAG_NUMBER                             =   186,
    ERROR_SEM_NOT_FOUND,
    ERROR_INVALID_STARTING_CODESEG,
    ERROR_INVALID_STACKSEG,
    ERROR_INVALID_MODULETYPE,
    ERROR_INVALID_EXE_SIGNATURE,
    ERROR_EXE_MARKED_INVALID,
    ERROR_BAD_EXE_FORMAT,
    ERROR_ITERATED_DATA_EXCEEDS_64k,
    ERROR_INVALID_MINALLOCSIZE,
    ERROR_DYNLINK_FROM_INVALID_RING,
    ERROR_IOPL_NOT_ENABLED,
    ERROR_INVALID_SEGDPL,
    ERROR_AUTODATASEG_EXCEEDS_64k,
    ERROR_RING2SEG_MUST_BE_MOVABLE,
    ERROR_RELOC_CHAIN_XEEDS_SEGLIM,
    ERROR_INFLOOP_IN_RELOC_CHAIN,
    ERROR_ENVVAR_NOT_FOUND,                            // =   203
    ERROR_NO_SIGNAL_SENT                                  =   205,
    ERROR_FILENAME_EXCED_RANGE,
    ERROR_RING2_STACK_IN_USE,
    ERROR_META_EXPANSION_TOO_LONG,
    ERROR_INVALID_SIGNAL_NUMBER,
    ERROR_THREAD_1_INACTIVE,                           // =   210
    ERROR_LOCKED                                          =   212,
    ERROR_TOO_MANY_MODULES                                =   214,
    ERROR_NESTING_NOT_ALLOWED,
    ERROR_EXE_MACHINE_TYPE_MISMATCH,
    ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY,
    ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY,      // =   218
    ERROR_BAD_PIPE                                        =   230,
    ERROR_PIPE_BUSY,
    ERROR_NO_DATA,
    ERROR_PIPE_NOT_CONNECTED,
    ERROR_MORE_DATA,                                   // =   234
    ERROR_VC_DISCONNECTED                                 =   240,
    ERROR_INVALID_EA_NAME                                 =   254,
    ERROR_EA_LIST_INCONSISTENT,                        // =   255
    WAIT_TIMEOUT                                          =   258,
    ERROR_NO_MORE_ITEMS,                               // =   259
    ERROR_CANNOT_COPY                                     =   266,
    ERROR_DIRECTORY,                                   // =   267
    ERROR_EAS_DIDNT_FIT                                   =   275,
    ERROR_EA_FILE_CORRUPT,
    ERROR_EA_TABLE_FULL,
    ERROR_INVALID_EA_HANDLE,                           // =   278
    ERROR_EAS_NOT_SUPPORTED                               =   282,
    ERROR_NOT_OWNER                                       =   288,
    ERROR_TOO_MANY_POSTS                                  =   298,
    ERROR_PARTIAL_COPY,
    ERROR_OPLOCK_NOT_GRANTED,
    ERROR_INVALID_OPLOCK_PROTOCOL,
    ERROR_DISK_TOO_FRAGMENTED,
    ERROR_DELETE_PENDING,                              // =   303
    ERROR_MR_MID_NOT_FOUND                                =   317,
    ERROR_SCOPE_NOT_FOUND,                             // =   318
    ERROR_INVALID_ADDRESS                                 =   487,
    ERROR_ARITHMETIC_OVERFLOW                             =   534,
    ERROR_PIPE_CONNECTED,
    ERROR_PIPE_LISTENING,                              // =   536
    ERROR_EA_ACCESS_DENIED                                =   994,
    ERROR_OPERATION_ABORTED,
    ERROR_IO_INCOMPLETE,
    ERROR_IO_PENDING,
    ERROR_NOACCESS,
    ERROR_SWAPERROR,                                   // =   999
    ERROR_STACK_OVERFLOW                                  =  1001,
    ERROR_INVALID_MESSAGE,
    ERROR_CAN_NOT_COMPLETE,
    ERROR_INVALID_FLAGS,
    ERROR_UNRECOGNIZED_VOLUME,
    ERROR_FILE_INVALID,
    ERROR_FULLSCREEN_MODE,
    ERROR_NO_TOKEN,
    ERROR_BADDB,
    ERROR_BADKEY,
    ERROR_CANTOPEN,
    ERROR_CANTREAD,
    ERROR_CANTWRITE,
    ERROR_REGISTRY_RECOVERED,
    ERROR_REGISTRY_CORRUPT,
    ERROR_REGISTRY_IO_FAILED,
    ERROR_NOT_REGISTRY_FILE,
    ERROR_KEY_DELETED,
    ERROR_NO_LOG_SPACE,
    ERROR_KEY_HAS_CHILDREN,
    ERROR_CHILD_MUST_BE_VOLATILE,
    ERROR_NOTIFY_ENUM_DIR,                             // =  1022
    ERROR_DEPENDENT_SERVICES_RUNNING                      =  1051,
    ERROR_INVALID_SERVICE_CONTROL,
    ERROR_SERVICE_REQUEST_TIMEOUT,
    ERROR_SERVICE_NO_THREAD,
    ERROR_SERVICE_DATABASE_LOCKED,
    ERROR_SERVICE_ALREADY_RUNNING,
    ERROR_INVALID_SERVICE_ACCOUNT,
    ERROR_SERVICE_DISABLED,
    ERROR_CIRCULAR_DEPENDENCY,
    ERROR_SERVICE_DOES_NOT_EXIST,
    ERROR_SERVICE_CANNOT_ACCEPT_CTRL,
    ERROR_SERVICE_NOT_ACTIVE,
    ERROR_FAILED_SERVICE_CONTROLLER_CONNECT,
    ERROR_EXCEPTION_IN_SERVICE,
    ERROR_DATABASE_DOES_NOT_EXIST,
    ERROR_SERVICE_SPECIFIC_ERROR,
    ERROR_PROCESS_ABORTED,
    ERROR_SERVICE_DEPENDENCY_FAIL,
    ERROR_SERVICE_LOGON_FAILED,
    ERROR_SERVICE_START_HANG,
    ERROR_INVALID_SERVICE_LOCK,
    ERROR_SERVICE_MARKED_FOR_DELETE,
    ERROR_SERVICE_EXISTS,
    ERROR_ALREADY_RUNNING_LKG,
    ERROR_SERVICE_DEPENDENCY_DELETED,
    ERROR_BOOT_ALREADY_ACCEPTED,
    ERROR_SERVICE_NEVER_STARTED,
    ERROR_DUPLICATE_SERVICE_NAME,
    ERROR_DIFFERENT_SERVICE_ACCOUNT,
    ERROR_CANNOT_DETECT_DRIVER_FAILURE,
    ERROR_CANNOT_DETECT_PROCESS_ABORT,
    ERROR_NO_RECOVERY_PROGRAM,
    ERROR_SERVICE_NOT_IN_EXE,
    ERROR_NOT_SAFEBOOT_SERVICE,                        // =  1084
    ERROR_END_OF_MEDIA                                    =  1100,
    ERROR_FILEMARK_DETECTED,
    ERROR_BEGINNING_OF_MEDIA,
    ERROR_SETMARK_DETECTED,
    ERROR_NO_DATA_DETECTED,
    ERROR_PARTITION_FAILURE,
    ERROR_INVALID_BLOCK_LENGTH,
    ERROR_DEVICE_NOT_PARTITIONED,
    ERROR_UNABLE_TO_LOCK_MEDIA,
    ERROR_UNABLE_TO_UNLOAD_MEDIA,
    ERROR_MEDIA_CHANGED,
    ERROR_BUS_RESET,
    ERROR_NO_MEDIA_IN_DRIVE,
    ERROR_NO_UNICODE_TRANSLATION,
    ERROR_DLL_INIT_FAILED,
    ERROR_SHUTDOWN_IN_PROGRESS,
    ERROR_NO_SHUTDOWN_IN_PROGRESS,
    ERROR_IO_DEVICE,
    ERROR_SERIAL_NO_DEVICE,
    ERROR_IRQ_BUSY,
    ERROR_MORE_WRITES,
    ERROR_COUNTER_TIMEOUT,
    ERROR_FLOPPY_ID_MARK_NOT_FOUND,
    ERROR_FLOPPY_WRONG_CYLINDER,
    ERROR_FLOPPY_UNKNOWN_ERROR,
    ERROR_FLOPPY_BAD_REGISTERS,
    ERROR_DISK_RECALIBRATE_FAILED,
    ERROR_DISK_OPERATION_FAILED,
    ERROR_DISK_RESET_FAILED,
    ERROR_EOM_OVERFLOW,
    ERROR_NOT_ENOUGH_SERVER_MEMORY,
    ERROR_POSSIBLE_DEADLOCK,
    ERROR_MAPPED_ALIGNMENT,                            // =  1132
    ERROR_SET_POWER_STATE_VETOED                          =  1140,
    ERROR_SET_POWER_STATE_FAILED,
    ERROR_TOO_MANY_LINKS,                              // =  1142
    ERROR_OLD_WIN_VERSION                                 =  1150,
    ERROR_APP_WRONG_OS,
    ERROR_SINGLE_INSTANCE_APP,
    ERROR_RMODE_APP,
    ERROR_INVALID_DLL,
    ERROR_NO_ASSOCIATION,
    ERROR_DDE_FAIL,
    ERROR_DLL_NOT_FOUND,
    ERROR_NO_MORE_USER_HANDLES,
    ERROR_MESSAGE_SYNC_ONLY,
    ERROR_SOURCE_ELEMENT_EMPTY,
    ERROR_DESTINATION_ELEMENT_FULL,
    ERROR_ILLEGAL_ELEMENT_ADDRESS,
    ERROR_MAGAZINE_NOT_PRESENT,
    ERROR_DEVICE_REINITIALIZATION_NEEDED,
    ERROR_DEVICE_REQUIRES_CLEANING,
    ERROR_DEVICE_DOOR_OPEN,
    ERROR_DEVICE_NOT_CONNECTED,
    ERROR_NOT_FOUND,
    ERROR_NO_MATCH,
    ERROR_SET_NOT_FOUND,
    ERROR_POINT_NOT_FOUND,
    ERROR_NO_TRACKING_SERVICE,
    ERROR_NO_VOLUME_ID,                                // =  1173
    ERROR_UNABLE_TO_REMOVE_REPLACED                       =  1175,
    ERROR_UNABLE_TO_MOVE_REPLACEMENT,
    ERROR_UNABLE_TO_MOVE_REPLACEMENT_2,
    ERROR_JOURNAL_DELETE_IN_PROGRESS,
    ERROR_JOURNAL_NOT_ACTIVE,
    ERROR_POTENTIAL_FILE_FOUND,
    ERROR_JOURNAL_ENTRY_DELETED,                       // =  1181
    ERROR_BAD_DEVICE                                      =  1200,
    ERROR_CONNECTION_UNAVAIL,
    ERROR_DEVICE_ALREADY_REMEMBERED,
    ERROR_NO_NET_OR_BAD_PATH,
    ERROR_BAD_PROVIDER,
    ERROR_CANNOT_OPEN_PROFILE,
    ERROR_BAD_PROFILE,
    ERROR_NOT_CONTAINER,
    ERROR_EXTENDED_ERROR,
    ERROR_INVALID_GROUPNAME,
    ERROR_INVALID_COMPUTERNAME,
    ERROR_INVALID_EVENTNAME,
    ERROR_INVALID_DOMAINNAME,
    ERROR_INVALID_SERVICENAME,
    ERROR_INVALID_NETNAME,
    ERROR_INVALID_SHARENAME,
    ERROR_INVALID_PASSWORDNAME,
    ERROR_INVALID_MESSAGENAME,
    ERROR_INVALID_MESSAGEDEST,
    ERROR_SESSION_CREDENTIAL_CONFLICT,
    ERROR_REMOTE_SESSION_LIMIT_EXCEEDED,
    ERROR_DUP_DOMAINNAME,
    ERROR_NO_NETWORK,
    ERROR_CANCELLED,
    ERROR_USER_MAPPED_FILE,
    ERROR_CONNECTION_REFUSED,
    ERROR_GRACEFUL_DISCONNECT,
    ERROR_ADDRESS_ALREADY_ASSOCIATED,
    ERROR_ADDRESS_NOT_ASSOCIATED,
    ERROR_CONNECTION_INVALID,
    ERROR_CONNECTION_ACTIVE,
    ERROR_NETWORK_UNREACHABLE,
    ERROR_HOST_UNREACHABLE,
    ERROR_PROTOCOL_UNREACHABLE,
    ERROR_PORT_UNREACHABLE,
    ERROR_REQUEST_ABORTED,
    ERROR_CONNECTION_ABORTED,
    ERROR_RETRY,
    ERROR_CONNECTION_COUNT_LIMIT,
    ERROR_LOGIN_TIME_RESTRICTION,
    ERROR_LOGIN_WKSTA_RESTRICTION,
    ERROR_INCORRECT_ADDRESS,
    ERROR_ALREADY_REGISTERED,
    ERROR_SERVICE_NOT_FOUND,
    ERROR_NOT_AUTHENTICATED,
    ERROR_NOT_LOGGED_ON,
    ERROR_CONTINUE,
    ERROR_ALREADY_INITIALIZED,
    ERROR_NO_MORE_DEVICES,
    ERROR_NO_SUCH_SITE,
    ERROR_DOMAIN_CONTROLLER_EXISTS,
    ERROR_ONLY_IF_CONNECTED,
    ERROR_OVERRIDE_NOCHANGES,
    ERROR_BAD_USER_PROFILE,
    ERROR_NOT_SUPPORTED_ON_SBS,
    ERROR_SERVER_SHUTDOWN_IN_PROGRESS,
    ERROR_HOST_DOWN,
    ERROR_NON_ACCOUNT_SID,
    ERROR_NON_DOMAIN_SID,
    ERROR_APPHELP_BLOCK,
    ERROR_ACCESS_DISABLED_BY_POLICY,
    ERROR_REG_NAT_CONSUMPTION,
    ERROR_CSCSHARE_OFFLINE,
    ERROR_PKINIT_FAILURE,
    ERROR_SMARTCARD_SUBSYSTEM_FAILURE,
    ERROR_DOWNGRADE_DETECTED,
    SEC_E_SMARTCARD_CERT_REVOKED,
    SEC_E_ISSUING_CA_UNTRUSTED,
    SEC_E_REVOCATION_OFFLINE_C,
    SEC_E_PKINIT_CLIENT_FAILUR,
    SEC_E_SMARTCARD_CERT_EXPIRED,
    ERROR_MACHINE_LOCKED,                              // =  1271
    ERROR_CALLBACK_SUPPLIED_INVALID_DATA                  =  1273,
    ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED,
    ERROR_DRIVER_BLOCKED,
    ERROR_INVALID_IMPORT_OF_NON_DLL,
    ERROR_ACCESS_DISABLED_WEBBLADE,
    ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER,
    ERROR_RECOVERY_FAILURE,
    ERROR_ALREADY_FIBER,
    ERROR_ALREADY_THREAD,
    ERROR_STACK_BUFFER_OVERRUN,
    ERROR_PARAMETER_QUOTA_EXCEEDED,
    ERROR_DEBUGGER_INACTIVE,                           // =  1284
    ERROR_NOT_ALL_ASSIGNED                                =  1300,
    ERROR_SOME_NOT_MAPPED,
    ERROR_NO_QUOTAS_FOR_ACCOUNT,
    ERROR_LOCAL_USER_SESSION_KEY,
    ERROR_NULL_LM_PASSWORD,
    ERROR_UNKNOWN_REVISION,
    ERROR_REVISION_MISMATCH,
    ERROR_INVALID_OWNER,
    ERROR_INVALID_PRIMARY_GROUP,
    ERROR_NO_IMPERSONATION_TOKEN,
    ERROR_CANT_DISABLE_MANDATORY,
    ERROR_NO_LOGON_SERVERS,
    ERROR_NO_SUCH_LOGON_SESSION,
    ERROR_NO_SUCH_PRIVILEGE,
    ERROR_PRIVILEGE_NOT_HELD,
    ERROR_INVALID_ACCOUNT_NAME,
    ERROR_USER_EXISTS,
    ERROR_NO_SUCH_USER,
    ERROR_GROUP_EXISTS,
    ERROR_NO_SUCH_GROUP,
    ERROR_MEMBER_IN_GROUP,
    ERROR_MEMBER_NOT_IN_GROUP,
    ERROR_LAST_ADMIN,
    ERROR_WRONG_PASSWORD,
    ERROR_ILL_FORMED_PASSWORD,
    ERROR_PASSWORD_RESTRICTION,
    ERROR_LOGON_FAILURE,
    ERROR_ACCOUNT_RESTRICTION,
    ERROR_INVALID_LOGON_HOURS,
    ERROR_INVALID_WORKSTATION,
    ERROR_PASSWORD_EXPIRED,
    ERROR_ACCOUNT_DISABLED,
    ERROR_NONE_MAPPED,
    ERROR_TOO_MANY_LUIDS_REQUESTED,
    ERROR_LUIDS_EXHAUSTED,
    ERROR_INVALID_SUB_AUTHORITY,
    ERROR_INVALID_ACL,
    ERROR_INVALID_SID,
    ERROR_INVALID_SECURITY_DESCR,                      // =  1338
    ERROR_BAD_INHERITANCE_ACL                             =  1340,
    ERROR_SERVER_DISABLED,
    ERROR_SERVER_NOT_DISABLED,
    ERROR_INVALID_ID_AUTHORITY,
    ERROR_ALLOTTED_SPACE_EXCEEDED,
    ERROR_INVALID_GROUP_ATTRIBUTES,
    ERROR_BAD_IMPERSONATION_LEVEL,
    ERROR_CANT_OPEN_ANONYMOUS,
    ERROR_BAD_VALIDATION_CLASS,
    ERROR_BAD_TOKEN_TYPE,
    ERROR_NO_SECURITY_ON_OBJECT,
    ERROR_CANT_ACCESS_DOMAIN_INFO,
    ERROR_INVALID_SERVER_STATE,
    ERROR_INVALID_DOMAIN_STATE,
    ERROR_INVALID_DOMAIN_ROLE,
    ERROR_NO_SUCH_DOMAIN,
    ERROR_DOMAIN_EXISTS,
    ERROR_DOMAIN_LIMIT_EXCEEDED,
    ERROR_INTERNAL_DB_CORRUPTION,
    ERROR_INTERNAL_ERROR,
    ERROR_GENERIC_NOT_MAPPED,
    ERROR_BAD_DESCRIPTOR_FORMAT,
    ERROR_NOT_LOGON_PROCESS,
    ERROR_LOGON_SESSION_EXISTS,
    ERROR_NO_SUCH_PACKAGE,
    ERROR_BAD_LOGON_SESSION_STATE,
    ERROR_LOGON_SESSION_COLLISION,
    ERROR_INVALID_LOGON_TYPE,
    ERROR_CANNOT_IMPERSONATE,
    ERROR_RXACT_INVALID_STATE,
    ERROR_RXACT_COMMIT_FAILURE,
    ERROR_SPECIAL_ACCOUNT,
    ERROR_SPECIAL_GROUP,
    ERROR_SPECIAL_USER,
    ERROR_MEMBERS_PRIMARY_GROUP,
    ERROR_TOKEN_ALREADY_IN_USE,
    ERROR_NO_SUCH_ALIAS,
    ERROR_MEMBER_NOT_IN_ALIAS,
    ERROR_MEMBER_IN_ALIAS,
    ERROR_ALIAS_EXISTS,
    ERROR_LOGON_NOT_GRANTED,
    ERROR_TOO_MANY_SECRETS,
    ERROR_SECRET_TOO_LONG,
    ERROR_INTERNAL_DB_ERROR,
    ERROR_TOO_MANY_CONTEXT_IDS,
    ERROR_LOGON_TYPE_NOT_GRANTED,
    ERROR_NT_CROSS_ENCRYPTION_REQUIRED,
    ERROR_NO_SUCH_MEMBER,
    ERROR_INVALID_MEMBER,
    ERROR_TOO_MANY_SIDS,
    ERROR_LM_CROSS_ENCRYPTION_REQUIRED,
    ERROR_NO_INHERITANCE,
    ERROR_FILE_CORRUPT,
    ERROR_DISK_CORRUPT,
    ERROR_NO_USER_SESSION_KEY,
    ERROR_LICENSE_QUOTA_EXCEEDED,
    ERROR_WRONG_TARGET_NAME,
    ERROR_MUTUAL_AUTH_FAILED,
    ERROR_TIME_SKEW,
    ERROR_CURRENT_DOMAIN_NOT_ALLOWED,
    ERROR_INVALID_WINDOW_HANDLE,
    ERROR_INVALID_MENU_HANDLE,
    ERROR_INVALID_CURSOR_HANDLE,
    ERROR_INVALID_ACCEL_HANDLE,
    ERROR_INVALID_HOOK_HANDLE,
    ERROR_INVALID_DWP_HANDLE,
    ERROR_TLW_WITH_WSCHILD,
    ERROR_CANNOT_FIND_WND_CLASS,
    ERROR_WINDOW_OF_OTHER_THREAD,
    ERROR_HOTKEY_ALREADY_REGISTERED,
    ERROR_CLASS_ALREADY_EXISTS,
    ERROR_CLASS_DOES_NOT_EXIST,
    ERROR_CLASS_HAS_WINDOWS,
    ERROR_INVALID_INDEX,
    ERROR_INVALID_ICON_HANDLE,
    ERROR_PRIVATE_DIALOG_INDEX,
    ERROR_LISTBOX_ID_NOT_FOUND,
    ERROR_NO_WILDCARD_CHARACTERS,
    ERROR_CLIPBOARD_NOT_OPEN,
    ERROR_HOTKEY_NOT_REGISTERED,
    ERROR_WINDOW_NOT_DIALOG,
    ERROR_CONTROL_ID_NOT_FOUND,
    ERROR_INVALID_COMBOBOX_MESSAGE,
    ERROR_WINDOW_NOT_COMBOBOX,
    ERROR_INVALID_EDIT_HEIGHT,
    ERROR_DC_NOT_FOUND,
    ERROR_INVALID_HOOK_FILTER,
    ERROR_INVALID_FILTER_PROC,
    ERROR_HOOK_NEEDS_HMOD,
    ERROR_GLOBAL_ONLY_HOOK,
    ERROR_JOURNAL_HOOK_SET,
    ERROR_HOOK_NOT_INSTALLED,
    ERROR_INVALID_LB_MESSAGE,
    ERROR_SETCOUNT_ON_BAD_LB,
    ERROR_LB_WITHOUT_TABSTOPS,
    ERROR_DESTROY_OBJECT_OF_OTHER_THREAD,
    ERROR_CHILD_WINDOW_MENU,
    ERROR_NO_SYSTEM_MENU,
    ERROR_INVALID_MSGBOX_STYLE,
    ERROR_INVALID_SPI_VALUE,
    ERROR_SCREEN_ALREADY_LOCKED,
    ERROR_HWNDS_HAVE_DIFF_PARENT,
    ERROR_NOT_CHILD_WINDOW,
    ERROR_INVALID_GW_COMMAND,
    ERROR_INVALID_THREAD_ID,
    ERROR_NON_MDICHILD_WINDOW,
    ERROR_POPUP_ALREADY_ACTIVE,
    ERROR_NO_SCROLLBARS,
    ERROR_INVALID_SCROLLBAR_RANGE,
    ERROR_INVALID_SHOWWIN_COMMAND,
    ERROR_NO_SYSTEM_RESOURCES,
    ERROR_NONPAGED_SYSTEM_RESOURCES,
    ERROR_PAGED_SYSTEM_RESOURCES,
    ERROR_WORKING_SET_QUOTA,
    ERROR_PAGEFILE_QUOTA,
    ERROR_COMMITMENT_LIMIT,
    ERROR_MENU_ITEM_NOT_FOUND,
    ERROR_INVALID_KEYBOARD_HANDLE,
    ERROR_HOOK_TYPE_NOT_ALLOWED,
    ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION,
    ERROR_TIMEOUT,
    ERROR_INVALID_MONITOR_HANDLE,                      // =  1461
    ERROR_EVENTLOG_FILE_CORRUPT                           =  1500,
    ERROR_EVENTLOG_CANT_START,
    ERROR_LOG_FILE_FULL,
    ERROR_EVENTLOG_FILE_CHANGED,                       // =  1503
    ERROR_INSTALL_SERVICE_FAILURE                         =  1601,
    ERROR_INSTALL_USEREXIT,
    ERROR_INSTALL_FAILURE,
    ERROR_INSTALL_SUSPEND,
    ERROR_UNKNOWN_PRODUCT,
    ERROR_UNKNOWN_FEATURE,
    ERROR_UNKNOWN_COMPONENT,
    ERROR_UNKNOWN_PROPERTY,
    ERROR_INVALID_HANDLE_STATE,
    ERROR_BAD_CONFIGURATION,
    ERROR_INDEX_ABSENT,
    ERROR_INSTALL_SOURCE_ABSENT,
    ERROR_INSTALL_PACKAGE_VERSION,
    ERROR_PRODUCT_UNINSTALLED,
    ERROR_BAD_QUERY_SYNTAX,
    ERROR_INVALID_FIELD,
    ERROR_DEVICE_REMOVED,
    ERROR_INSTALL_ALREADY_RUNNING,
    ERROR_INSTALL_PACKAGE_OPEN_FAILED,
    ERROR_INSTALL_PACKAGE_INVALID,
    ERROR_INSTALL_UI_FAILURE,
    ERROR_INSTALL_LOG_FAILURE,
    ERROR_INSTALL_LANGUAGE_UNSUPPORTED,
    ERROR_INSTALL_TRANSFORM_FAILURE,
    ERROR_INSTALL_PACKAGE_REJECTED,
    ERROR_FUNCTION_NOT_CALLED,
    ERROR_FUNCTION_FAILED,
    ERROR_INVALID_TABLE,
    ERROR_DATATYPE_MISMATCH,
    ERROR_UNSUPPORTED_TYPE,
    ERROR_CREATE_FAILED,
    ERROR_INSTALL_TEMP_UNWRITABLE,
    ERROR_INSTALL_PLATFORM_UNSUPPORTED,
    ERROR_INSTALL_NOTUSED,
    ERROR_PATCH_PACKAGE_OPEN_FAILED,
    ERROR_PATCH_PACKAGE_INVALID,
    ERROR_PATCH_PACKAGE_UNSUPPORTED,
    ERROR_PRODUCT_VERSION,
    ERROR_INVALID_COMMAND_LINE,
    ERROR_INSTALL_REMOTE_DISALLOWED,
    ERROR_SUCCESS_REBOOT_INITIATED,
    ERROR_PATCH_TARGET_NOT_FOUND,
    ERROR_PATCH_PACKAGE_REJECTED,
    ERROR_INSTALL_TRANSFORM_REJECTED,
    ERROR_INSTALL_REMOTE_PROHIBITED,                   // =  1645
    RPC_S_INVALID_STRING_BINDING                          =  1700,
    RPC_S_WRONG_KIND_OF_BINDING,
    RPC_S_INVALID_BINDING,
    RPC_S_PROTSEQ_NOT_SUPPORTED,
    RPC_S_INVALID_RPC_PROTSEQ,
    RPC_S_INVALID_STRING_UUID,
    RPC_S_INVALID_ENDPOINT_FORMAT,
    RPC_S_INVALID_NET_ADDR,
    RPC_S_NO_ENDPOINT_FOUND,
    RPC_S_INVALID_TIMEOUT,
    RPC_S_OBJECT_NOT_FOUND,
    RPC_S_ALREADY_REGISTERED,
    RPC_S_TYPE_ALREADY_REGISTERED,
    RPC_S_ALREADY_LISTENING,
    RPC_S_NO_PROTSEQS_REGISTERED,
    RPC_S_NOT_LISTENING,
    RPC_S_UNKNOWN_MGR_TYPE,
    RPC_S_UNKNOWN_IF,
    RPC_S_NO_BINDINGS,
    RPC_S_NO_PROTSEQS,
    RPC_S_CANT_CREATE_ENDPOINT,
    RPC_S_OUT_OF_RESOURCES,
    RPC_S_SERVER_UNAVAILABLE,
    RPC_S_SERVER_TOO_BUSY,
    RPC_S_INVALID_NETWORK_OPTIONS,
    RPC_S_NO_CALL_ACTIVE,
    RPC_S_CALL_FAILED,
    RPC_S_CALL_FAILED_DNE,
    RPC_S_PROTOCOL_ERROR,                              // =  1728
    RPC_S_UNSUPPORTED_TRANS_SYN                           =  1730,
    RPC_S_UNSUPPORTED_TYPE                                =  1732,
    RPC_S_INVALID_TAG,
    RPC_S_INVALID_BOUND,
    RPC_S_NO_ENTRY_NAME,
    RPC_S_INVALID_NAME_SYNTAX,
    RPC_S_UNSUPPORTED_NAME_SYNTAX,                     // =  1737
    RPC_S_UUID_NO_ADDRESS                                 =  1739,
    RPC_S_DUPLICATE_ENDPOINT,
    RPC_S_UNKNOWN_AUTHN_TYPE,
    RPC_S_MAX_CALLS_TOO_SMALL,
    RPC_S_STRING_TOO_LONG,
    RPC_S_PROTSEQ_NOT_FOUND,
    RPC_S_PROCNUM_OUT_OF_RANGE,
    RPC_S_BINDING_HAS_NO_AUTH,
    RPC_S_UNKNOWN_AUTHN_SERVICE,
    RPC_S_UNKNOWN_AUTHN_LEVEL,
    RPC_S_INVALID_AUTH_IDENTITY,
    RPC_S_UNKNOWN_AUTHZ_SERVICE,
    EPT_S_INVALID_ENTRY,
    EPT_S_CANT_PERFORM_OP,
    EPT_S_NOT_REGISTERED,
    RPC_S_NOTHING_TO_EXPORT,
    RPC_S_INCOMPLETE_NAME,
    RPC_S_INVALID_VERS_OPTION,
    RPC_S_NO_MORE_MEMBERS,
    RPC_S_NOT_ALL_OBJS_UNEXPORTED,
    RPC_S_INTERFACE_NOT_FOUND,
    RPC_S_ENTRY_ALREADY_EXISTS,
    RPC_S_ENTRY_NOT_FOUND,
    RPC_S_NAME_SERVICE_UNAVAILABLE,
    RPC_S_INVALID_NAF_ID,
    RPC_S_CANNOT_SUPPORT,
    RPC_S_NO_CONTEXT_AVAILABLE,
    RPC_S_INTERNAL_ERROR,
    RPC_S_ZERO_DIVIDE,
    RPC_S_ADDRESS_ERROR,
    RPC_S_FP_DIV_ZERO,
    RPC_S_FP_UNDERFLOW,
    RPC_S_FP_OVERFLOW,
    RPC_X_NO_MORE_ENTRIES,
    RPC_X_SS_CHAR_TRANS_OPEN_FAIL,
    RPC_X_SS_CHAR_TRANS_SHORT_FILE,
    RPC_X_SS_IN_NULL_CONTEXT,                          // =  1775
    RPC_X_SS_CONTEXT_DAMAGED                              =  1777,
    RPC_X_SS_HANDLES_MISMATCH,
    RPC_X_SS_CANNOT_GET_CALL_HANDLE,
    RPC_X_NULL_REF_POINTER,
    RPC_X_ENUM_VALUE_OUT_OF_RANGE,
    RPC_X_BYTE_COUNT_TOO_SMALL,
    RPC_X_BAD_STUB_DATA,
    ERROR_INVALID_USER_BUFFER,
    ERROR_UNRECOGNIZED_MEDIA,
    ERROR_NO_TRUST_LSA_SECRET,
    ERROR_NO_TRUST_SAM_ACCOUNT,
    ERROR_TRUSTED_DOMAIN_FAILURE,
    ERROR_TRUSTED_RELATIONSHIP_FAILURE,
    ERROR_TRUST_FAILURE,
    RPC_S_CALL_IN_PROGRESS,
    ERROR_NETLOGON_NOT_STARTED,
    ERROR_ACCOUNT_EXPIRED,
    ERROR_REDIRECTOR_HAS_OPEN_HANDLES,
    ERROR_PRINTER_DRIVER_ALREADY_INSTALLED,
    ERROR_UNKNOWN_PORT,
    ERROR_UNKNOWN_PRINTER_DRIVER,
    ERROR_UNKNOWN_PRINTPROCESSOR,
    ERROR_INVALID_SEPARATOR_FILE,
    ERROR_INVALID_PRIORITY,
    ERROR_INVALID_PRINTER_NAME,
    ERROR_PRINTER_ALREADY_EXISTS,
    ERROR_INVALID_PRINTER_COMMAND,
    ERROR_INVALID_DATATYPE,
    ERROR_INVALID_ENVIRONMENT,
    RPC_S_NO_MORE_BINDINGS,
    ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT,
    ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT,
    ERROR_NOLOGON_SERVER_TRUST_ACCOUNT,
    ERROR_DOMAIN_TRUST_INCONSISTENT,
    ERROR_SERVER_HAS_OPEN_HANDLES,
    ERROR_RESOURCE_DATA_NOT_FOUND,
    ERROR_RESOURCE_TYPE_NOT_FOUND,
    ERROR_RESOURCE_NAME_NOT_FOUND,
    ERROR_RESOURCE_LANG_NOT_FOUND,
    ERROR_NOT_ENOUGH_QUOTA,
    RPC_S_NO_INTERFACES,
    RPC_S_CALL_CANCELLED,
    RPC_S_BINDING_INCOMPLETE,
    RPC_S_COMM_FAILURE,
    RPC_S_UNSUPPORTED_AUTHN_LEVEL,
    RPC_S_NO_PRINC_NAME,
    RPC_S_NOT_RPC_ERROR,
    RPC_S_UUID_LOCAL_ONLY,
    RPC_S_SEC_PKG_ERROR,
    RPC_S_NOT_CANCELLED,
    RPC_X_INVALID_ES_ACTION,
    RPC_X_WRONG_ES_VERSION,
    RPC_X_WRONG_STUB_VERSION,
    RPC_X_INVALID_PIPE_OBJECT,
    RPC_X_WRONG_PIPE_ORDER,
    RPC_X_WRONG_PIPE_VERSION,                          // =  1832
    RPC_S_GROUP_MEMBER_NOT_FOUND                          =  1898,
    EPT_S_CANT_CREATE,
    RPC_S_INVALID_OBJECT,
    ERROR_INVALID_TIME,
    ERROR_INVALID_FORM_NAME,
    ERROR_INVALID_FORM_SIZE,
    ERROR_ALREADY_WAITING,
    ERROR_PRINTER_DELETED,
    ERROR_INVALID_PRINTER_STATE,
    ERROR_PASSWORD_MUST_CHANGE,
    ERROR_DOMAIN_CONTROLLER_NOT_FOUND,
    ERROR_ACCOUNT_LOCKED_OUT,
    OR_INVALID_OXID,
    OR_INVALID_OID,
    OR_INVALID_SET,
    RPC_S_SEND_INCOMPLETE,
    RPC_S_INVALID_ASYNC_HANDLE,
    RPC_S_INVALID_ASYNC_CALL,
    RPC_X_PIPE_CLOSED,
    RPC_X_PIPE_DISCIPLINE_ERROR,
    RPC_X_PIPE_EMPTY,
    ERROR_NO_SITENAME,
    ERROR_CANT_ACCESS_FILE,
    ERROR_CANT_RESOLVE_FILENAME,
    RPC_S_ENTRY_TYPE_MISMATCH,
    RPC_S_NOT_ALL_OBJS_EXPORTED,
    RPC_S_INTERFACE_NOT_EXPORTED,
    RPC_S_PROFILE_NOT_ADDED,
    RPC_S_PRF_ELT_NOT_ADDED,
    RPC_S_PRF_ELT_NOT_REMOVED,
    RPC_S_GRP_ELT_NOT_ADDED,
    RPC_S_GRP_ELT_NOT_REMOVED,
    ERROR_KM_DRIVER_BLOCKED,
    ERROR_CONTEXT_EXPIRED,
    ERROR_PER_USER_TRUST_QUOTA_EXCEEDED,
    ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED,
    ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED,            // =  1934
    ERROR_INVALID_PIXEL_FORMAT                            =  2000,
    ERROR_BAD_DRIVER,
    ERROR_INVALID_WINDOW_STYLE,
    ERROR_METAFILE_NOT_SUPPORTED,
    ERROR_TRANSFORM_NOT_SUPPORTED,
    ERROR_CLIPPING_NOT_SUPPORTED,                      // =  2005
    ERROR_INVALID_CMM                                     =  2010,
    ERROR_INVALID_PROFILE,
    ERROR_TAG_NOT_FOUND,
    ERROR_TAG_NOT_PRESENT,
    ERROR_DUPLICATE_TAG,
    ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE,
    ERROR_PROFILE_NOT_FOUND,
    ERROR_INVALID_COLORSPACE,
    ERROR_ICM_NOT_ENABLED,
    ERROR_DELETING_ICM_XFORM,
    ERROR_INVALID_TRANSFORM,
    ERROR_COLORSPACE_MISMATCH,
    ERROR_INVALID_COLORINDEX,                          // =  2022
    ERROR_CONNECTED_OTHER_PASSWORD                        =  2108,
    ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT,            // =  2109
    ERROR_BAD_USERNAME                                    =  2202,
    ERROR_NOT_CONNECTED                                   =  2250,
    ERROR_OPEN_FILES                                      =  2401,
    ERROR_ACTIVE_CONNECTIONS,                          // =  2402
    ERROR_DEVICE_IN_USE                                   =  2404,
    ERROR_UNKNOWN_PRINT_MONITOR                           =  3000,
    ERROR_PRINTER_DRIVER_IN_USE,
    ERROR_SPOOL_FILE_NOT_FOUND,
    ERROR_SPL_NO_STARTDOC,
    ERROR_SPL_NO_ADDJOB,
    ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED,
    ERROR_PRINT_MONITOR_ALREADY_INSTALLED,
    ERROR_INVALID_PRINT_MONITOR,
    ERROR_PRINT_MONITOR_IN_USE,
    ERROR_PRINTER_HAS_JOBS_QUEUED,
    ERROR_SUCCESS_REBOOT_REQUIRED,
    ERROR_SUCCESS_RESTART_REQUIRED,
    ERROR_PRINTER_NOT_FOUND,
    ERROR_PRINTER_DRIVER_WARNED,
    ERROR_PRINTER_DRIVER_BLOCKED,                      // =  3014
    ERROR_WINS_INTERNAL                                   =  4000,
    ERROR_CAN_NOT_DEL_LOCAL_WINS,
    ERROR_STATIC_INIT,
    ERROR_INC_BACKUP,
    ERROR_FULL_BACKUP,
    ERROR_REC_NON_EXISTENT,
    ERROR_RPL_NOT_ALLOWED,                             // =  4006
    ERROR_DHCP_ADDRESS_CONFLICT                           =  4100,
    ERROR_WMI_GUID_NOT_FOUND                              =  4200,
    ERROR_WMI_INSTANCE_NOT_FOUND,
    ERROR_WMI_ITEMID_NOT_FOUND,
    ERROR_WMI_TRY_AGAIN,
    ERROR_WMI_DP_NOT_FOUND,
    ERROR_WMI_UNRESOLVED_INSTANCE_REF,
    ERROR_WMI_ALREADY_ENABLED,
    ERROR_WMI_GUID_DISCONNECTED,
    ERROR_WMI_SERVER_UNAVAILABLE,
    ERROR_WMI_DP_FAILED,
    ERROR_WMI_INVALID_MOF,
    ERROR_WMI_INVALID_REGINFO,
    ERROR_WMI_ALREADY_DISABLED,
    ERROR_WMI_READ_ONLY,
    ERROR_WMI_SET_FAILURE,                             // =  4214
    ERROR_INVALID_MEDIA                                   =  4300,
    ERROR_INVALID_LIBRARY,
    ERROR_INVALID_MEDIA_POOL,
    ERROR_DRIVE_MEDIA_MISMATCH,
    ERROR_MEDIA_OFFLINE,
    ERROR_LIBRARY_OFFLINE,
    ERROR_EMPTY,
    ERROR_NOT_EMPTY,
    ERROR_MEDIA_UNAVAILABLE,
    ERROR_RESOURCE_DISABLED,
    ERROR_INVALID_CLEANER,
    ERROR_UNABLE_TO_CLEAN,
    ERROR_OBJECT_NOT_FOUND,
    ERROR_DATABASE_FAILURE,
    ERROR_DATABASE_FULL,
    ERROR_MEDIA_INCOMPATIBLE,
    ERROR_RESOURCE_NOT_PRESENT,
    ERROR_INVALID_OPERATION,
    ERROR_MEDIA_NOT_AVAILABLE,
    ERROR_DEVICE_NOT_AVAILABLE,
    ERROR_REQUEST_REFUSED,
    ERROR_INVALID_DRIVE_OBJECT,
    ERROR_LIBRARY_FULL,
    ERROR_MEDIUM_NOT_ACCESSIBLE,
    ERROR_UNABLE_TO_LOAD_MEDIUM,
    ERROR_UNABLE_TO_INVENTORY_DRIVE,
    ERROR_UNABLE_TO_INVENTORY_SLOT,
    ERROR_UNABLE_TO_INVENTORY_TRANSPORT,
    ERROR_TRANSPORT_FULL,
    ERROR_CONTROLLING_IEPORT,
    ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA,
    ERROR_CLEANER_SLOT_SET,
    ERROR_CLEANER_SLOT_NOT_SET,
    ERROR_CLEANER_CARTRIDGE_SPENT,
    ERROR_UNEXPECTED_OMID,
    ERROR_CANT_DELETE_LAST_ITEM,
    ERROR_MESSAGE_EXCEEDS_MAX_SIZE,
    ERROR_VOLUME_CONTAINS_SYS_FILES,
    ERROR_INDIGENOUS_TYPE,
    ERROR_NO_SUPPORTING_DRIVES,
    ERROR_CLEANER_CARTRIDGE_INSTALLED,                 // =  4340
    ERROR_FILE_OFFLINE                                    =  4350,
    ERROR_REMOTE_STORAGE_NOT_ACTIVE,
    ERROR_REMOTE_STORAGE_MEDIA_ERROR,                  // =  4352
    ERROR_NOT_A_REPARSE_POINT                             =  4390,
    ERROR_REPARSE_ATTRIBUTE_CONFLICT,
    ERROR_INVALID_REPARSE_DATA,
    ERROR_REPARSE_TAG_INVALID,
    ERROR_REPARSE_TAG_MISMATCH,                        // =  4394
    ERROR_VOLUME_NOT_SIS_ENABLED                          =  4500,
    ERROR_DEPENDENT_RESOURCE_EXISTS                       =  5001,
    ERROR_DEPENDENCY_NOT_FOUND,
    ERROR_DEPENDENCY_ALREADY_EXISTS,
    ERROR_RESOURCE_NOT_ONLINE,
    ERROR_HOST_NODE_NOT_AVAILABLE,
    ERROR_RESOURCE_NOT_AVAILABLE,
    ERROR_RESOURCE_NOT_FOUND,
    ERROR_SHUTDOWN_CLUSTER,
    ERROR_CANT_EVICT_ACTIVE_NODE,
    ERROR_OBJECT_ALREADY_EXISTS,
    ERROR_OBJECT_IN_LIST,
    ERROR_GROUP_NOT_AVAILABLE,
    ERROR_GROUP_NOT_FOUND,
    ERROR_GROUP_NOT_ONLINE,
    ERROR_HOST_NODE_NOT_RESOURCE_OWNER,
    ERROR_HOST_NODE_NOT_GROUP_OWNER,
    ERROR_RESMON_CREATE_FAILED,
    ERROR_RESMON_ONLINE_FAILED,
    ERROR_RESOURCE_ONLINE,
    ERROR_QUORUM_RESOURCE,
    ERROR_NOT_QUORUM_CAPABLE,
    ERROR_CLUSTER_SHUTTING_DOWN,
    ERROR_INVALID_STATE,
    ERROR_RESOURCE_PROPERTIES_STORED,
    ERROR_NOT_QUORUM_CLASS,
    ERROR_CORE_RESOURCE,
    ERROR_QUORUM_RESOURCE_ONLINE_FAILED,
    ERROR_QUORUMLOG_OPEN_FAILED,
    ERROR_CLUSTERLOG_CORRUPT,
    ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE,
    ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE,
    ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND,
    ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE,
    ERROR_QUORUM_OWNER_ALIVE,
    ERROR_NETWORK_NOT_AVAILABLE,
    ERROR_NODE_NOT_AVAILABLE,
    ERROR_ALL_NODES_NOT_AVAILABLE,
    ERROR_RESOURCE_FAILED,
    ERROR_CLUSTER_INVALID_NODE,
    ERROR_CLUSTER_NODE_EXISTS,
    ERROR_CLUSTER_JOIN_IN_PROGRESS,
    ERROR_CLUSTER_NODE_NOT_FOUND,
    ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND,
    ERROR_CLUSTER_NETWORK_EXISTS,
    ERROR_CLUSTER_NETWORK_NOT_FOUND,
    ERROR_CLUSTER_NETINTERFACE_EXISTS,
    ERROR_CLUSTER_NETINTERFACE_NOT_FOUND,
    ERROR_CLUSTER_INVALID_REQUEST,
    ERROR_CLUSTER_INVALID_NETWORK_PROVIDER,
    ERROR_CLUSTER_NODE_DOWN,
    ERROR_CLUSTER_NODE_UNREACHABLE,
    ERROR_CLUSTER_NODE_NOT_MEMBER,
    ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS,
    ERROR_CLUSTER_INVALID_NETWORK,                     // =  5054
    ERROR_CLUSTER_NODE_UP                                 =  5056,
    ERROR_CLUSTER_IPADDR_IN_USE,
    ERROR_CLUSTER_NODE_NOT_PAUSED,
    ERROR_CLUSTER_NO_SECURITY_CONTEXT,
    ERROR_CLUSTER_NETWORK_NOT_INTERNAL,
    ERROR_CLUSTER_NODE_ALREADY_UP,
    ERROR_CLUSTER_NODE_ALREADY_DOWN,
    ERROR_CLUSTER_NETWORK_ALREADY_ONLINE,
    ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE,
    ERROR_CLUSTER_NODE_ALREADY_MEMBER,
    ERROR_CLUSTER_LAST_INTERNAL_NETWORK,
    ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS,
    ERROR_INVALID_OPERATION_ON_QUORUM,
    ERROR_DEPENDENCY_NOT_ALLOWED,
    ERROR_CLUSTER_NODE_PAUSED,
    ERROR_NODE_CANT_HOST_RESOURCE,
    ERROR_CLUSTER_NODE_NOT_READY,
    ERROR_CLUSTER_NODE_SHUTTING_DOWN,
    ERROR_CLUSTER_JOIN_ABORTED,
    ERROR_CLUSTER_INCOMPATIBLE_VERSIONS,
    ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED,
    ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED,
    ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND,
    ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED,
    ERROR_CLUSTER_RESNAME_NOT_FOUND,
    ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED,
    ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST,
    ERROR_CLUSTER_DATABASE_SEQMISMATCH,
    ERROR_RESMON_INVALID_STATE,
    ERROR_CLUSTER_GUM_NOT_LOCKER,
    ERROR_QUORUM_DISK_NOT_FOUND,
    ERROR_DATABASE_BACKUP_CORRUPT,
    ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT,
    ERROR_RESOURCE_PROPERTY_UNCHANGEABLE,              // =  5089
    ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE                =  5890,
    ERROR_CLUSTER_QUORUMLOG_NOT_FOUND,
    ERROR_CLUSTER_MEMBERSHIP_HALT,
    ERROR_CLUSTER_INSTANCE_ID_MISMATCH,
    ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP,
    ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH,
    ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP,
    ERROR_CLUSTER_PARAMETER_MISMATCH,
    ERROR_NODE_CANNOT_BE_CLUSTERED,
    ERROR_CLUSTER_WRONG_OS_VERSION,
    ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME,
    ERROR_CLUSCFG_ALREADY_COMMITTED,
    ERROR_CLUSCFG_ROLLBACK_FAILED,
    ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT,
    ERROR_CLUSTER_OLD_VERSION,
    ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME,       // =  5905
    ERROR_ENCRYPTION_FAILED                               =  6000,
    ERROR_DECRYPTION_FAILED,
    ERROR_FILE_ENCRYPTED,
    ERROR_NO_RECOVERY_POLICY,
    ERROR_NO_EFS,
    ERROR_WRONG_EFS,
    ERROR_NO_USER_KEYS,
    ERROR_FILE_NOT_ENCRYPTED,
    ERROR_NOT_EXPORT_FORMAT,
    ERROR_FILE_READ_ONLY,
    ERROR_DIR_EFS_DISALLOWED,
    ERROR_EFS_SERVER_NOT_TRUSTED,
    ERROR_BAD_RECOVERY_POLICY,
    ERROR_EFS_ALG_BLOB_TOO_BIG,
    ERROR_VOLUME_NOT_SUPPORT_EFS,
    ERROR_EFS_DISABLED,
    ERROR_EFS_VERSION_NOT_SUPPORT,                     // =  6016
    ERROR_NO_BROWSER_SERVERS_FOUND                        =  6118,
    SCHED_E_SERVICE_NOT_LOCALSYSTEM                       =  6200,

    ERROR_CTX_WINSTATION_NAME_INVALID                     =  7001,
    ERROR_CTX_INVALID_PD,
    ERROR_CTX_PD_NOT_FOUND,
    ERROR_CTX_WD_NOT_FOUND,
    ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY,
    ERROR_CTX_SERVICE_NAME_COLLISION,
    ERROR_CTX_CLOSE_PENDING,
    ERROR_CTX_NO_OUTBUF,
    ERROR_CTX_MODEM_INF_NOT_FOUND,
    ERROR_CTX_INVALID_MODEMNAME,
    ERROR_CTX_MODEM_RESPONSE_ERROR,
    ERROR_CTX_MODEM_RESPONSE_TIMEOUT,
    ERROR_CTX_MODEM_RESPONSE_NO_CARRIER,
    ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE,
    ERROR_CTX_MODEM_RESPONSE_BUSY,
    ERROR_CTX_MODEM_RESPONSE_VOICE,
    ERROR_CTX_TD_ERROR,                                // =  7017
    ERROR_CTX_WINSTATION_NOT_FOUND                        =  7022,
    ERROR_CTX_WINSTATION_ALREADY_EXISTS,
    ERROR_CTX_WINSTATION_BUSY,
    ERROR_CTX_BAD_VIDEO_MODE,                          // =  7025
    ERROR_CTX_GRAPHICS_INVALID                            =  7035,
    ERROR_CTX_LOGON_DISABLED                              =  7037,
    ERROR_CTX_NOT_CONSOLE,                             // =  7038
    ERROR_CTX_CLIENT_QUERY_TIMEOUT                        =  7040,
    ERROR_CTX_CONSOLE_DISCONNECT,
    ERROR_CTX_CONSOLE_CONNECT,                         // =  7042
    ERROR_CTX_SHADOW_DENIED                               =  7044,
    ERROR_CTX_WINSTATION_ACCESS_DENIED,                // =  7045
    ERROR_CTX_INVALID_WD                                  =  7049,
    ERROR_CTX_SHADOW_INVALID,
    ERROR_CTX_SHADOW_DISABLED,
    ERROR_CTX_CLIENT_LICENSE_IN_USE,
    ERROR_CTX_CLIENT_LICENSE_NOT_SET,
    ERROR_CTX_LICENSE_NOT_AVAILABLE,
    ERROR_CTX_LICENSE_CLIENT_INVALID,
    ERROR_CTX_LICENSE_EXPIRED,
    ERROR_CTX_SHADOW_NOT_RUNNING,
    ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE,
    ERROR_ACTIVATION_COUNT_EXCEEDED,                   // =  7059

    FRS_ERR_INVALID_API_SEQUENCE                          =  8001,
    FRS_ERR_STARTING_SERVICE,
    FRS_ERR_STOPPING_SERVICE,
    FRS_ERR_INTERNAL_API,
    FRS_ERR_INTERNAL,
    FRS_ERR_SERVICE_COMM,
    FRS_ERR_INSUFFICIENT_PRIV,
    FRS_ERR_AUTHENTICATION,
    FRS_ERR_PARENT_INSUFFICIENT_PRIV,
    FRS_ERR_PARENT_AUTHENTICATION,
    FRS_ERR_CHILD_TO_PARENT_COMM,
    FRS_ERR_PARENT_TO_CHILD_COMM,
    FRS_ERR_SYSVOL_POPULATE,
    FRS_ERR_SYSVOL_POPULATE_TIMEOUT,
    FRS_ERR_SYSVOL_IS_BUSY,
    FRS_ERR_SYSVOL_DEMOTE,
    FRS_ERR_INVALID_SERVICE_PARAMETER,                 // =  8017
    ERROR_DS_NOT_INSTALLED                                =  8200,
    ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY,
    ERROR_DS_NO_ATTRIBUTE_OR_VALUE,
    ERROR_DS_INVALID_ATTRIBUTE_SYNTAX,
    ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED,
    ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS,
    ERROR_DS_BUSY,
    ERROR_DS_UNAVAILABLE,
    ERROR_DS_NO_RIDS_ALLOCATED,
    ERROR_DS_NO_MORE_RIDS,
    ERROR_DS_INCORRECT_ROLE_OWNER,
    ERROR_DS_RIDMGR_INIT_ERROR,
    ERROR_DS_OBJ_CLASS_VIOLATION,
    ERROR_DS_CANT_ON_NON_LEAF,
    ERROR_DS_CANT_ON_RDN,
    ERROR_DS_CANT_MOD_OBJ_CLASS,
    ERROR_DS_CROSS_DOM_MOVE_ERROR,
    ERROR_DS_GC_NOT_AVAILABLE,
    ERROR_SHARED_POLICY,
    ERROR_POLICY_OBJECT_NOT_FOUND,
    ERROR_POLICY_ONLY_IN_DS,
    ERROR_PROMOTION_ACTIVE,
    ERROR_NO_PROMOTION_ACTIVE,                         // =  8222
    ERROR_DS_OPERATIONS_ERROR                             =  8224,
    ERROR_DS_PROTOCOL_ERROR,
    ERROR_DS_TIMELIMIT_EXCEEDED,
    ERROR_DS_SIZELIMIT_EXCEEDED,
    ERROR_DS_ADMIN_LIMIT_EXCEEDED,
    ERROR_DS_COMPARE_FALSE,
    ERROR_DS_COMPARE_TRUE,
    ERROR_DS_AUTH_METHOD_NOT_SUPPORTED,
    ERROR_DS_STRONG_AUTH_REQUIRED,
    ERROR_DS_INAPPROPRIATE_AUTH,
    ERROR_DS_AUTH_UNKNOWN,
    ERROR_DS_REFERRAL,
    ERROR_DS_UNAVAILABLE_CRIT_EXTENSION,
    ERROR_DS_CONFIDENTIALITY_REQUIRED,
    ERROR_DS_INAPPROPRIATE_MATCHING,
    ERROR_DS_CONSTRAINT_VIOLATION,
    ERROR_DS_NO_SUCH_OBJECT,
    ERROR_DS_ALIAS_PROBLEM,
    ERROR_DS_INVALID_DN_SYNTAX,
    ERROR_DS_IS_LEAF,
    ERROR_DS_ALIAS_DEREF_PROBLEM,
    ERROR_DS_UNWILLING_TO_PERFORM,
    ERROR_DS_LOOP_DETECT,
    ERROR_DS_NAMING_VIOLATION,
    ERROR_DS_OBJECT_RESULTS_TOO_LARGE,
    ERROR_DS_AFFECTS_MULTIPLE_DSAS,
    ERROR_DS_SERVER_DOWN,
    ERROR_DS_LOCAL_ERROR,
    ERROR_DS_ENCODING_ERROR,
    ERROR_DS_DECODING_ERROR,
    ERROR_DS_FILTER_UNKNOWN,
    ERROR_DS_PARAM_ERROR,
    ERROR_DS_NOT_SUPPORTED,
    ERROR_DS_NO_RESULTS_RETURNED,
    ERROR_DS_CONTROL_NOT_FOUND,
    ERROR_DS_CLIENT_LOOP,
    ERROR_DS_REFERRAL_LIMIT_EXCEEDED,
    ERROR_DS_SORT_CONTROL_MISSING,
    ERROR_DS_OFFSET_RANGE_ERROR,                       // =  8262
    ERROR_DS_ROOT_MUST_BE_NC                              =  8301,
    ERROR_DS_ADD_REPLICA_INHIBITED,
    ERROR_DS_ATT_NOT_DEF_IN_SCHEMA,
    ERROR_DS_MAX_OBJ_SIZE_EXCEEDED,
    ERROR_DS_OBJ_STRING_NAME_EXISTS,
    ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA,
    ERROR_DS_RDN_DOESNT_MATCH_SCHEMA,
    ERROR_DS_NO_REQUESTED_ATTS_FOUND,
    ERROR_DS_USER_BUFFER_TO_SMALL,
    ERROR_DS_ATT_IS_NOT_ON_OBJ,
    ERROR_DS_ILLEGAL_MOD_OPERATION,
    ERROR_DS_OBJ_TOO_LARGE,
    ERROR_DS_BAD_INSTANCE_TYPE,
    ERROR_DS_MASTERDSA_REQUIRED,
    ERROR_DS_OBJECT_CLASS_REQUIRED,
    ERROR_DS_MISSING_REQUIRED_ATT,
    ERROR_DS_ATT_NOT_DEF_FOR_CLASS,
    ERROR_DS_ATT_ALREADY_EXISTS,                       // =  8318
    ERROR_DS_CANT_ADD_ATT_VALUES                          =  8320,
    ERROR_DS_SINGLE_VALUE_CONSTRAINT,
    ERROR_DS_RANGE_CONSTRAINT,
    ERROR_DS_ATT_VAL_ALREADY_EXISTS,
    ERROR_DS_CANT_REM_MISSING_ATT,
    ERROR_DS_CANT_REM_MISSING_ATT_VAL,
    ERROR_DS_ROOT_CANT_BE_SUBREF,
    ERROR_DS_NO_CHAINING,
    ERROR_DS_NO_CHAINED_EVAL,
    ERROR_DS_NO_PARENT_OBJECT,
    ERROR_DS_PARENT_IS_AN_ALIAS,
    ERROR_DS_CANT_MIX_MASTER_AND_REPS,
    ERROR_DS_CHILDREN_EXIST,
    ERROR_DS_OBJ_NOT_FOUND,
    ERROR_DS_ALIASED_OBJ_MISSING,
    ERROR_DS_BAD_NAME_SYNTAX,
    ERROR_DS_ALIAS_POINTS_TO_ALIAS,
    ERROR_DS_CANT_DEREF_ALIAS,
    ERROR_DS_OUT_OF_SCOPE,
    ERROR_DS_OBJECT_BEING_REMOVED,
    ERROR_DS_CANT_DELETE_DSA_OBJ,
    ERROR_DS_GENERIC_ERROR,
    ERROR_DS_DSA_MUST_BE_INT_MASTER,
    ERROR_DS_CLASS_NOT_DSA,
    ERROR_DS_INSUFF_ACCESS_RIGHTS,
    ERROR_DS_ILLEGAL_SUPERIOR,
    ERROR_DS_ATTRIBUTE_OWNED_BY_SAM,
    ERROR_DS_NAME_TOO_MANY_PARTS,
    ERROR_DS_NAME_TOO_LONG,
    ERROR_DS_NAME_VALUE_TOO_LONG,
    ERROR_DS_NAME_UNPARSEABLE,
    ERROR_DS_NAME_TYPE_UNKNOWN,
    ERROR_DS_NOT_AN_OBJECT,
    ERROR_DS_SEC_DESC_TOO_SHORT,
    ERROR_DS_SEC_DESC_INVALID,
    ERROR_DS_NO_DELETED_NAME,
    ERROR_DS_SUBREF_MUST_HAVE_PARENT,
    ERROR_DS_NCNAME_MUST_BE_NC,
    ERROR_DS_CANT_ADD_SYSTEM_ONLY,
    ERROR_DS_CLASS_MUST_BE_CONCRETE,
    ERROR_DS_INVALID_DMD,
    ERROR_DS_OBJ_GUID_EXISTS,
    ERROR_DS_NOT_ON_BACKLINK,
    ERROR_DS_NO_CROSSREF_FOR_NC,
    ERROR_DS_SHUTTING_DOWN,
    ERROR_DS_UNKNOWN_OPERATION,
    ERROR_DS_INVALID_ROLE_OWNER,
    ERROR_DS_COULDNT_CONTACT_FSMO,
    ERROR_DS_CROSS_NC_DN_RENAME,
    ERROR_DS_CANT_MOD_SYSTEM_ONLY,
    ERROR_DS_REPLICATOR_ONLY,
    ERROR_DS_OBJ_CLASS_NOT_DEFINED,
    ERROR_DS_OBJ_CLASS_NOT_SUBCLASS,
    ERROR_DS_NAME_REFERENCE_INVALID,
    ERROR_DS_CROSS_REF_EXISTS,
    ERROR_DS_CANT_DEL_MASTER_CROSSREF,
    ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD,
    ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX,
    ERROR_DS_DUP_RDN,
    ERROR_DS_DUP_OID,
    ERROR_DS_DUP_MAPI_ID,
    ERROR_DS_DUP_SCHEMA_ID_GUID,
    ERROR_DS_DUP_LDAP_DISPLAY_NAME,
    ERROR_DS_SEMANTIC_ATT_TEST,
    ERROR_DS_SYNTAX_MISMATCH,
    ERROR_DS_EXISTS_IN_MUST_HAVE,
    ERROR_DS_EXISTS_IN_MAY_HAVE,
    ERROR_DS_NONEXISTENT_MAY_HAVE,
    ERROR_DS_NONEXISTENT_MUST_HAVE,
    ERROR_DS_AUX_CLS_TEST_FAIL,
    ERROR_DS_NONEXISTENT_POSS_SUP,
    ERROR_DS_SUB_CLS_TEST_FAIL,
    ERROR_DS_BAD_RDN_ATT_ID_SYNTAX,
    ERROR_DS_EXISTS_IN_AUX_CLS,
    ERROR_DS_EXISTS_IN_SUB_CLS,
    ERROR_DS_EXISTS_IN_POSS_SUP,
    ERROR_DS_RECALCSCHEMA_FAILED,
    ERROR_DS_TREE_DELETE_NOT_FINISHED,
    ERROR_DS_CANT_DELETE,
    ERROR_DS_ATT_SCHEMA_REQ_ID,
    ERROR_DS_BAD_ATT_SCHEMA_SYNTAX,
    ERROR_DS_CANT_CACHE_ATT,
    ERROR_DS_CANT_CACHE_CLASS,
    ERROR_DS_CANT_REMOVE_ATT_CACHE,
    ERROR_DS_CANT_REMOVE_CLASS_CACHE,
    ERROR_DS_CANT_RETRIEVE_DN,
    ERROR_DS_MISSING_SUPREF,
    ERROR_DS_CANT_RETRIEVE_INSTANCE,
    ERROR_DS_CODE_INCONSISTENCY,
    ERROR_DS_DATABASE_ERROR,
    ERROR_DS_GOVERNSID_MISSING,
    ERROR_DS_MISSING_EXPECTED_ATT,
    ERROR_DS_NCNAME_MISSING_CR_REF,
    ERROR_DS_SECURITY_CHECKING_ERROR,
    ERROR_DS_SCHEMA_NOT_LOADED,
    ERROR_DS_SCHEMA_ALLOC_FAILED,
    ERROR_DS_ATT_SCHEMA_REQ_SYNTAX,
    ERROR_DS_GCVERIFY_ERROR,
    ERROR_DS_DRA_SCHEMA_MISMATCH,
    ERROR_DS_CANT_FIND_DSA_OBJ,
    ERROR_DS_CANT_FIND_EXPECTED_NC,
    ERROR_DS_CANT_FIND_NC_IN_CACHE,
    ERROR_DS_CANT_RETRIEVE_CHILD,
    ERROR_DS_SECURITY_ILLEGAL_MODIFY,
    ERROR_DS_CANT_REPLACE_HIDDEN_REC,
    ERROR_DS_BAD_HIERARCHY_FILE,
    ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED,
    ERROR_DS_CONFIG_PARAM_MISSING,
    ERROR_DS_COUNTING_AB_INDICES_FAILED,
    ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED,
    ERROR_DS_INTERNAL_FAILURE,
    ERROR_DS_UNKNOWN_ERROR,
    ERROR_DS_ROOT_REQUIRES_CLASS_TOP,
    ERROR_DS_REFUSING_FSMO_ROLES,
    ERROR_DS_MISSING_FSMO_SETTINGS,
    ERROR_DS_UNABLE_TO_SURRENDER_ROLES,
    ERROR_DS_DRA_GENERIC,
    ERROR_DS_DRA_INVALID_PARAMETER,
    ERROR_DS_DRA_BUSY,
    ERROR_DS_DRA_BAD_DN,
    ERROR_DS_DRA_BAD_NC,
    ERROR_DS_DRA_DN_EXISTS,
    ERROR_DS_DRA_INTERNAL_ERROR,
    ERROR_DS_DRA_INCONSISTENT_DIT,
    ERROR_DS_DRA_CONNECTION_FAILED,
    ERROR_DS_DRA_BAD_INSTANCE_TYPE,
    ERROR_DS_DRA_OUT_OF_MEM,
    ERROR_DS_DRA_MAIL_PROBLEM,
    ERROR_DS_DRA_REF_ALREADY_EXISTS,
    ERROR_DS_DRA_REF_NOT_FOUND,
    ERROR_DS_DRA_OBJ_IS_REP_SOURCE,
    ERROR_DS_DRA_DB_ERROR,
    ERROR_DS_DRA_NO_REPLICA,
    ERROR_DS_DRA_ACCESS_DENIED,
    ERROR_DS_DRA_NOT_SUPPORTED,
    ERROR_DS_DRA_RPC_CANCELLED,
    ERROR_DS_DRA_SOURCE_DISABLED,
    ERROR_DS_DRA_SINK_DISABLED,
    ERROR_DS_DRA_NAME_COLLISION,
    ERROR_DS_DRA_SOURCE_REINSTALLED,
    ERROR_DS_DRA_MISSING_PARENT,
    ERROR_DS_DRA_PREEMPTED,
    ERROR_DS_DRA_ABANDON_SYNC,
    ERROR_DS_DRA_SHUTDOWN,
    ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET,
    ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA,
    ERROR_DS_DRA_EXTN_CONNECTION_FAILED,
    ERROR_DS_INSTALL_SCHEMA_MISMATCH,
    ERROR_DS_DUP_LINK_ID,
    ERROR_DS_NAME_ERROR_RESOLVING,
    ERROR_DS_NAME_ERROR_NOT_FOUND,
    ERROR_DS_NAME_ERROR_NOT_UNIQUE,
    ERROR_DS_NAME_ERROR_NO_MAPPING,
    ERROR_DS_NAME_ERROR_DOMAIN_ONLY,
    ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING,
    ERROR_DS_CONSTRUCTED_ATT_MOD,
    ERROR_DS_WRONG_OM_OBJ_CLASS,
    ERROR_DS_DRA_REPL_PENDING,
    ERROR_DS_DS_REQUIRED,
    ERROR_DS_INVALID_LDAP_DISPLAY_NAME,
    ERROR_DS_NON_BASE_SEARCH,
    ERROR_DS_CANT_RETRIEVE_ATTS,
    ERROR_DS_BACKLINK_WITHOUT_LINK,
    ERROR_DS_EPOCH_MISMATCH,
    ERROR_DS_SRC_NAME_MISMATCH,
    ERROR_DS_SRC_AND_DST_NC_IDENTICAL,
    ERROR_DS_DST_NC_MISMATCH,
    ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC,
    ERROR_DS_SRC_GUID_MISMATCH,
    ERROR_DS_CANT_MOVE_DELETED_OBJECT,
    ERROR_DS_PDC_OPERATION_IN_PROGRESS,
    ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD,
    ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION,
    ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS,
    ERROR_DS_NC_MUST_HAVE_NC_PARENT,
    ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE,
    ERROR_DS_DST_DOMAIN_NOT_NATIVE,
    ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER,
    ERROR_DS_CANT_MOVE_ACCOUNT_GROUP,
    ERROR_DS_CANT_MOVE_RESOURCE_GROUP,
    ERROR_DS_INVALID_SEARCH_FLAG,
    ERROR_DS_NO_TREE_DELETE_ABOVE_NC,
    ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE,
    ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE,
    ERROR_DS_SAM_INIT_FAILURE,
    ERROR_DS_SENSITIVE_GROUP_VIOLATION,
    ERROR_DS_CANT_MOD_PRIMARYGROUPID,
    ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD,
    ERROR_DS_NONSAFE_SCHEMA_CHANGE,
    ERROR_DS_SCHEMA_UPDATE_DISALLOWED,
    ERROR_DS_CANT_CREATE_UNDER_SCHEMA,
    ERROR_DS_INSTALL_NO_SRC_SCH_VERSION,
    ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE,
    ERROR_DS_INVALID_GROUP_TYPE,
    ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN,
    ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN,
    ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER,
    ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER,
    ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER,
    ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER,
    ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER,
    ERROR_DS_HAVE_PRIMARY_MEMBERS,
    ERROR_DS_STRING_SD_CONVERSION_FAILED,
    ERROR_DS_NAMING_MASTER_GC,
    ERROR_DS_LOOKUP_FAILURE,
    ERROR_DS_COULDNT_UPDATE_SPNS,
    ERROR_DS_CANT_RETRIEVE_SD,
    ERROR_DS_KEY_NOT_UNIQUE,
    ERROR_DS_WRONG_LINKED_ATT_SYNTAX,
    ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD,
    ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY,
    ERROR_DS_CANT_START,
    ERROR_DS_INIT_FAILURE,
    ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION,
    ERROR_DS_SOURCE_DOMAIN_IN_FOREST,
    ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST,
    ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED,
    ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN,
    ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER,
    ERROR_DS_SRC_SID_EXISTS_IN_FOREST,
    ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH,
    ERROR_SAM_INIT_FAILURE,
    ERROR_DS_DRA_SCHEMA_INFO_SHIP,
    ERROR_DS_DRA_SCHEMA_CONFLICT,
    ERROR_DS_DRA_EARLIER_SCHEMA_CONLICT,
    ERROR_DS_DRA_OBJ_NC_MISMATCH,
    ERROR_DS_NC_STILL_HAS_DSAS,
    ERROR_DS_GC_REQUIRED,
    ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY,
    ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS,
    ERROR_DS_CANT_A,0  -0  .0  /0  00  10  20  30  40  50                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          DD_TO_GC,
    ERROR_DS_NO_CHECKPOINT_WITH_PDC,
    ERROR_DS_SOURCE_AUDITING_NOT_ENABLED,
    ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC,
    ERROR_DS_INVALID_NAME_FOR_SPN,
    ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS,
    ERROR_DS_UNICODEPWD_NOT_IN_QUOTES,
    ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED,
    ERROR_DS_MUST_BE_RUN_ON_DST_DC,
    ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER,
    ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ,
    ERROR_DS_INIT_FAILURE_CONSOLE,
    ERROR_DS_SAM_INIT_FAILURE_CONSOLE,
    ERROR_DS_FOREST_VERSION_TOO_HIGH,
    ERROR_DS_DOMAIN_VERSION_TOO_HIGH,
    ERROR_DS_FOREST_VERSION_TOO_LOW,
    ERROR_DS_DOMAIN_VERSION_TOO_LOW,
    ERROR_DS_INCOMPATIBLE_VERSION,
    ERROR_DS_LOW_DSA_VERSION,
    ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN,
    ERROR_DS_NOT_SUPPORTED_SORT_ORDER,
    ERROR_DS_NAME_NOT_UNIQUE,
    ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4,
    ERROR_DS_OUT_OF_VERSION_STORE,
    ERROR_DS_INCOMPATIBLE_CONTROLS_USED,
    ERROR_DS_NO_REF_DOMAIN,
    ERROR_DS_RESERVED_LINK_ID,
    ERROR_DS_LINK_ID_NOT_AVAILABLE,
    ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER,
    ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE,
    ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC,
    ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG,
    ERROR_DS_MODIFYDN_WRONG_GRANDPARENT,
    ERROR_DS_NAME_ERROR_TRUST_REFERRAL,
    ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER,
    ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD,
    ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2,
    ERROR_DS_THREAD_LIMIT_EXCEEDED,
    ERROR_DS_NOT_CLOSEST,
    ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF,
    ERROR_DS_SINGLE_USER_MODE_FAILED,
    ERROR_DS_NTDSCRIPT_SYNTAX_ERROR,
    ERROR_DS_NTDSCRIPT_PROCESS_ERROR,
    ERROR_DS_DIFFERENT_REPL_EPOCHS,
    ERROR_DS_DRS_EXTENSIONS_CHANGED,
    ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR,
    ERROR_DS_NO_MSDS_INTID,
    ERROR_DS_DUP_MSDS_INTID,
    ERROR_DS_EXISTS_IN_RDNATTID,
    ERROR_DS_AUTHORIZATION_FAILED,
    ERROR_DS_INVALID_SCRIPT,
    ERROR_DS_REMOTE_CROSSREF_OP_FAILED,
    ERROR_DS_CROSS_REF_BUSY,
    ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN,
    ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC,
    ERROR_DS_DUPLICATE_ID_FOUND,
    ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT,
    ERROR_DS_GROUP_CONVERSION_ERROR,
    ERROR_DS_CANT_MOVE_APP_BASIC_GROUP,
    ERROR_DS_CANT_MOVE_APP_QUERY_GROUP,
    ERROR_DS_ROLE_NOT_VERIFIED,
    ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL,
    ERROR_DS_DOMAIN_RENAME_IN_PROGRESS,
    ERROR_DS_EXISTING_AD_CHILD_NC,                     // =  8613
    DNS_ERROR_RCODE_FORMAT_ERROR                          =  9001,
    DNS_ERROR_RCODE_SERVER_FAILURE,
    DNS_ERROR_RCODE_NAME_ERROR,
    DNS_ERROR_RCODE_NOT_IMPLEMENTED,
    DNS_ERROR_RCODE_REFUSED,
    DNS_ERROR_RCODE_YXDOMAIN,
    DNS_ERROR_RCODE_YXRRSET,
    DNS_ERROR_RCODE_NXRRSET,
    DNS_ERROR_RCODE_NOTAUTH,
    DNS_ERROR_RCODE_NOTZONE,                           // =  9010
    DNS_ERROR_RCODE_BADSIG                                =  9016,
    DNS_ERROR_RCODE_BADKEY,
    DNS_ERROR_RCODE_BADTIME,                           // =  9018
    DNS_INFO_NO_RECORDS                                   =  9501,
    DNS_ERROR_BAD_PACKET,
    DNS_ERROR_NO_PACKET,
    DNS_ERROR_RCODE,
    DNS_ERROR_UNSECURE_PACKET,                         // =  9505
    DNS_ERROR_INVALID_TYPE                                =  9551,
    DNS_ERROR_INVALID_IP_ADDRESS,
    DNS_ERROR_INVALID_PROPERTY,
    DNS_ERROR_TRY_AGAIN_LATER,
    DNS_ERROR_NOT_UNIQUE,
    DNS_ERROR_NON_RFC_NAME,
    DNS_STATUS_FQDN,
    DNS_STATUS_DOTTED_NAME,
    DNS_STATUS_SINGLE_PART_NAME,
    DNS_ERROR_INVALID_NAME_CHAR,
    DNS_ERROR_NUMERIC_NAME,
    DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER,
    DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION,
    DNS_ERROR_CANNOT_FIND_ROOT_HINTS,
    DNS_ERROR_INCONSISTENT_ROOT_HINTS,                 // =  9565
    DNS_ERROR_ZONE_DOES_NOT_EXIST                         =  9601,
    DNS_ERROR_NO_ZONE_INFO,
    DNS_ERROR_INVALID_ZONE_OPERATION,
    DNS_ERROR_ZONE_CONFIGURATION_ERROR,
    DNS_ERROR_ZONE_HAS_NO_SOA_RECORD,
    DNS_ERROR_ZONE_HAS_NO_NS_RECORDS,
    DNS_ERROR_ZONE_LOCKED,
    DNS_ERROR_ZONE_CREATION_FAILED,
    DNS_ERROR_ZONE_ALREADY_EXISTS,
    DNS_ERROR_AUTOZONE_ALREADY_EXISTS,
    DNS_ERROR_INVALID_ZONE_TYPE,
    DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP,
    DNS_ERROR_ZONE_NOT_SECONDARY,
    DNS_ERROR_NEED_SECONDARY_ADDRESSES,
    DNS_ERROR_WINS_INIT_FAILED,
    DNS_ERROR_NEED_WINS_SERVERS,
    DNS_ERROR_NBSTAT_INIT_FAILED,
    DNS_ERROR_SOA_DELETE_INVALID,
    DNS_ERROR_FORWARDER_ALREADY_EXISTS,
    DNS_ERROR_ZONE_REQUIRES_MASTER_IP,
    DNS_ERROR_ZONE_IS_SHUTDOWN,                        // =  9621
    DNS_ERROR_PRIMARY_REQUIRES_DATAFILE                   =  9651,
    DNS_ERROR_INVALID_DATAFILE_NAME,
    DNS_ERROR_DATAFILE_OPEN_FAILURE,
    DNS_ERROR_FILE_WRITEBACK_FAILED,
    DNS_ERROR_DATAFILE_PARSING,                        // =  9655
    DNS_ERROR_RECORD_DOES_NOT_EXIST                       =  9701,
    DNS_ERROR_RECORD_FORMAT,
    DNS_ERROR_NODE_CREATION_FAILED,
    DNS_ERROR_UNKNOWN_RECORD_TYPE,
    DNS_ERROR_RECORD_TIMED_OUT,
    DNS_ERROR_NAME_NOT_IN_ZONE,
    DNS_ERROR_CNAME_LOOP,
    DNS_ERROR_NODE_IS_CNAME,
    DNS_ERROR_CNAME_COLLISION,
    DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT,
    DNS_ERROR_RECORD_ALREADY_EXISTS,
    DNS_ERROR_SECONDARY_DATA,
    DNS_ERROR_NO_CREATE_CACHE_DATA,
    DNS_ERROR_NAME_DOES_NOT_EXIST,
    DNS_WARNING_PTR_CREATE_FAILED,
    DNS_WARNING_DOMAIN_UNDELETED,
    DNS_ERROR_DS_UNAVAILABLE,
    DNS_ERROR_DS_ZONE_ALREADY_EXISTS,
    DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE,                  // =  9719
    DNS_INFO_AXFR_COMPLETE                                =  9751,
    DNS_ERROR_AXFR,
    DNS_INFO_ADDED_LOCAL_WINS,                         // =  9753
    DNS_STATUS_CONTINUE_NEEDED                            =  9801,
    DNS_ERROR_NO_TCPIP                                    =  9851,
    DNS_ERROR_NO_DNS_SERVERS,                          // =  9852
    DNS_ERROR_DP_DOES_NOT_EXIST                           =  9901,
    DNS_ERROR_DP_ALREADY_EXISTS,
    DNS_ERROR_DP_NOT_ENLISTED,
    DNS_ERROR_DP_ALREADY_ENLISTED,
    DNS_ERROR_DP_NOT_AVAILABLE,                        // =  9905

/+  already in winsock2.d defined!

    WSABASEERR                                            = 10000,
    WSAEINTR                                              = 10004,
    WSAEBADF                                              = 10009,
    WSAEACCES                                             = 10013,
    WSAEFAULT,                                         // = 10014
    WSAEINVAL                                             = 10022,
    WSAEMFILE                                             = 10024,
    WSAEWOULDBLOCK                                        = 10035,
    WSAEINPROGRESS,
    WSAEALREADY,
    WSAENOTSOCK,
    WSAEDESTADDRREQ,
    WSAEMSGSIZE,
    WSAEPROTOTYPE,
    WSAENOPROTOOPT,
    WSAEPROTONOSUPPORT,
    WSAESOCKTNOSUPPORT,
    WSAEOPNOTSUPP,
    WSAEPFNOSUPPORT,
    WSAEAFNOSUPPORT,
    WSAEADDRINUSE,
    WSAEADDRNOTAVAIL,
    WSAENETDOWN,
    WSAENETUNREACH,
    WSAENETRESET,
    WSAECONNABORTED,
    WSAECONNRESET,
    WSAENOBUFS,
    WSAEISCONN,
    WSAENOTCONN,
    WSAESHUTDOWN,
    WSAETOOMANYREFS,
    WSAETIMEDOUT,
    WSAECONNREFUSED,
    WSAELOOP,
    WSAENAMETOOLONG,
    WSAEHOSTDOWN,
    WSAEHOSTUNREACH,
    WSAENOTEMPTY,
    WSAEPROCLIM,
    WSAEUSERS,
    WSAEDQUOT,
    WSAESTALE,
    WSAEREMOTE,                                        // = 10071
    WSASYSNOTREADY                                        = 10091,
    WSAVERNOTSUPPORTED,
    WSANOTINITIALISED,                                 // = 10093
    WSAEDISCON                                            = 10101,
    WSAENOMORE,
    WSAECANCELLED,
    WSAEINVALIDPROCTABLE,
    WSAEINVALIDPROVIDER,
    WSAEPROVIDERFAILEDINIT,
    WSASYSCALLFAILURE,
    WSASERVICE_NOT_FOUND,
    WSATYPE_NOT_FOUND,
    WSA_E_NO_MORE,
    WSA_E_CANCELLED,
    WSAEREFUSED,                                       // = 10112
    WSAHOST_NOT_FOUND                                     = 11001,
    WSATRY_AGAIN,
    WSANO_RECOVERY,
    WSANO_DATA,
    WSA_QOS_RECEIVERS,
    WSA_QOS_SENDERS,
    WSA_QOS_NO_SENDERS,
    WSA_QOS_NO_RECEIVERS,
    WSA_QOS_REQUEST_CONFIRMED,
    WSA_QOS_ADMISSION_FAILURE,
    WSA_QOS_POLICY_FAILURE,
    WSA_QOS_BAD_STYLE,
    WSA_QOS_BAD_OBJECT,
    WSA_QOS_TRAFFIC_CTRL_ERROR,
    WSA_QOS_GENERIC_ERROR,
    WSA_QOS_ESERVICETYPE,
    WSA_QOS_EFLOWSPEC,
    WSA_QOS_EPROVSPECBUF,
    WSA_QOS_EFILTERSTYLE,
    WSA_QOS_EFILTERTYPE,
    WSA_QOS_EFILTERCOUNT,
    WSA_QOS_EOBJLENGTH,
    WSA_QOS_EFLOWCOUNT,
    WSA_QOS_EUNKNOWNPSOBJ,
    WSA_QOS_EPOLICYOBJ,
    WSA_QOS_EFLOWDESC,
    WSA_QOS_EPSFLOWSPEC,
    WSA_QOS_EPSFILTERSPEC,
    WSA_QOS_ESDMODEOBJ,
    WSA_QOS_ESHAPERATEOBJ,
    WSA_QOS_RESERVED_PETYPE,                           // = 11031

+/

    ERROR_IPSEC_QM_POLICY_EXISTS                          = 13000,
    ERROR_IPSEC_QM_POLICY_NOT_FOUND,
    ERROR_IPSEC_QM_POLICY_IN_USE,
    ERROR_IPSEC_MM_POLICY_EXISTS,
    ERROR_IPSEC_MM_POLICY_NOT_FOUND,
    ERROR_IPSEC_MM_POLICY_IN_USE,
    ERROR_IPSEC_MM_FILTER_EXISTS,
    ERROR_IPSEC_MM_FILTER_NOT_FOUND,
    ERROR_IPSEC_TRANSPORT_FILTER_EXISTS,
    ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND,
    ERROR_IPSEC_MM_AUTH_EXISTS,
    ERROR_IPSEC_MM_AUTH_NOT_FOUND,
    ERROR_IPSEC_MM_AUTH_IN_USE,
    ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND,
    ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND,
    ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND,
    ERROR_IPSEC_TUNNEL_FILTER_EXISTS,
    ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND,
    ERROR_IPSEC_MM_FILTER_PENDING_DELETION,
    ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION,
    ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION,
    ERROR_IPSEC_MM_POLICY_PENDING_DELETION,
    ERROR_IPSEC_MM_AUTH_PENDING_DELETION,
    ERROR_IPSEC_QM_POLICY_PENDING_DELETION,
    WARNING_IPSEC_MM_POLICY_PRUNED,
    WARNING_IPSEC_QM_POLICY_PRUNED,                    // = 13025
    ERROR_IPSEC_IKE_AUTH_FAIL                             = 13801,
    ERROR_IPSEC_IKE_ATTRIB_FAIL,
    ERROR_IPSEC_IKE_NEGOTIATION_PENDING,
    ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR,
    ERROR_IPSEC_IKE_TIMED_OUT,
    ERROR_IPSEC_IKE_NO_CERT,
    ERROR_IPSEC_IKE_SA_DELETED,
    ERROR_IPSEC_IKE_SA_REAPED,
    ERROR_IPSEC_IKE_MM_ACQUIRE_DROP,
    ERROR_IPSEC_IKE_QM_ACQUIRE_DROP,
    ERROR_IPSEC_IKE_QUEUE_DROP_MM,
    ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM,
    ERROR_IPSEC_IKE_DROP_NO_RESPONSE,
    ERROR_IPSEC_IKE_MM_DELAY_DROP,
    ERROR_IPSEC_IKE_QM_DELAY_DROP,
    ERROR_IPSEC_IKE_ERROR,
    ERROR_IPSEC_IKE_CRL_FAILED,
    ERROR_IPSEC_IKE_INVALID_KEY_USAGE,
    ERROR_IPSEC_IKE_INVALID_CERT_TYPE,
    ERROR_IPSEC_IKE_NO_PRIVATE_KEY,                    // = 13820
    ERROR_IPSEC_IKE_DH_FAIL                               = 13822,
    ERROR_IPSEC_IKE_INVALID_HEADER                        = 13824,
    ERROR_IPSEC_IKE_NO_POLICY,
    ERROR_IPSEC_IKE_INVALID_SIGNATURE,
    ERROR_IPSEC_IKE_KERBEROS_ERROR,
    ERROR_IPSEC_IKE_NO_PUBLIC_KEY,
    ERROR_IPSEC_IKE_PROCESS_ERR,
    ERROR_IPSEC_IKE_PROCESS_ERR_SA,
    ERROR_IPSEC_IKE_PROCESS_ERR_PROP,
    ERROR_IPSEC_IKE_PROCESS_ERR_TRANS,
    ERROR_IPSEC_IKE_PROCESS_ERR_KE,
    ERROR_IPSEC_IKE_PROCESS_ERR_ID,
    ERROR_IPSEC_IKE_PROCESS_ERR_CERT,
    ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ,
    ERROR_IPSEC_IKE_PROCESS_ERR_HASH,
    ERROR_IPSEC_IKE_PROCESS_ERR_SIG,
    ERROR_IPSEC_IKE_PROCESS_ERR_NONCE,
    ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY,
    ERROR_IPSEC_IKE_PROCESS_ERR_DELETE,
    ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR,
    ERROR_IPSEC_IKE_INVALID_PAYLOAD,
    ERROR_IPSEC_IKE_LOAD_SOFT_SA,
    ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN,
    ERROR_IPSEC_IKE_INVALID_COOKIE,
    ERROR_IPSEC_IKE_NO_PEER_CERT,
    ERROR_IPSEC_IKE_PEER_CRL_FAILED,
    ERROR_IPSEC_IKE_POLICY_CHANGE,
    ERROR_IPSEC_IKE_NO_MM_POLICY,
    ERROR_IPSEC_IKE_NOTCBPRIV,
    ERROR_IPSEC_IKE_SECLOADFAIL,
    ERROR_IPSEC_IKE_FAILSSPINIT,
    ERROR_IPSEC_IKE_FAILQUERYSSP,
    ERROR_IPSEC_IKE_SRVACQFAIL,
    ERROR_IPSEC_IKE_SRVQUERYCRED,
    ERROR_IPSEC_IKE_GETSPIFAIL,
    ERROR_IPSEC_IKE_INVALID_FILTER,
    ERROR_IPSEC_IKE_OUT_OF_MEMORY,
    ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED,
    ERROR_IPSEC_IKE_INVALID_POLICY,
    ERROR_IPSEC_IKE_UNKNOWN_DOI,
    ERROR_IPSEC_IKE_INVALID_SITUATION,
    ERROR_IPSEC_IKE_DH_FAILURE,
    ERROR_IPSEC_IKE_INVALID_GROUP,
    ERROR_IPSEC_IKE_ENCRYPT,
    ERROR_IPSEC_IKE_DECRYPT,
    ERROR_IPSEC_IKE_POLICY_MATCH,
    ERROR_IPSEC_IKE_UNSUPPORTED_ID,
    ERROR_IPSEC_IKE_INVALID_HASH,
    ERROR_IPSEC_IKE_INVALID_HASH_ALG,
    ERROR_IPSEC_IKE_INVALID_HASH_SIZE,
    ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG,
    ERROR_IPSEC_IKE_INVALID_AUTH_ALG,
    ERROR_IPSEC_IKE_INVALID_SIG,
    ERROR_IPSEC_IKE_LOAD_FAILED,
    ERROR_IPSEC_IKE_RPC_DELETE,
    ERROR_IPSEC_IKE_BENIGN_REINIT,
    ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY, // = 13879
    ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN                   = 13881,
    ERROR_IPSEC_IKE_MM_LIMIT,
    ERROR_IPSEC_IKE_NEGOTIATION_DISABLED,
    ERROR_IPSEC_IKE_NEG_STATUS_END,
    ERROR_SXS_SECTION_NOT_FOUND,
    ERROR_SXS_CANT_GEN_ACTCTX,
    ERROR_SXS_INVALID_ACTCTXDATA_FORMAT,
    ERROR_SXS_ASSEMBLY_NOT_FOUND,
    ERROR_SXS_MANIFEST_FORMAT_ERROR,
    ERROR_SXS_MANIFEST_PARSE_ERROR,
    ERROR_SXS_ACTIVATION_CONTEXT_DISABLED,
    ERROR_SXS_KEY_NOT_FOUND,
    ERROR_SXS_VERSION_CONFLICT,
    ERROR_SXS_WRONG_SECTION_TYPE,
    ERROR_SXS_THREAD_QUERIES_DISABLED,
    ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET,
    ERROR_SXS_UNKNOWN_ENCODING_GROUP,
    ERROR_SXS_UNKNOWN_ENCODING,
    ERROR_SXS_INVALID_XML_NAMESPACE_URI,
    ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED,
    ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED,
    ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE,
    ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE,
    ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE,
    ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT,
    ERROR_SXS_DUPLICATE_DLL_NAME,
    ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME,
    ERROR_SXS_DUPLICATE_CLSID,
    ERROR_SXS_DUPLICATE_IID,
    ERROR_SXS_DUPLICATE_TLBID,
    ERROR_SXS_DUPLICATE_PROGID,
    ERROR_SXS_DUPLICATE_ASSEMBLY_NAME,
    ERROR_SXS_FILE_HASH_MISMATCH,
    ERROR_SXS_POLICY_PARSE_ERROR,
    ERROR_SXS_XML_E_MISSINGQUOTE,
    ERROR_SXS_XML_E_COMMENTSYNTAX,
    ERROR_SXS_XML_E_BADSTARTNAMECHAR,
    ERROR_SXS_XML_E_BADNAMECHAR,
    ERROR_SXS_XML_E_BADCHARINSTRING,
    ERROR_SXS_XML_E_XMLDECLSYNTAX,
    ERROR_SXS_XML_E_BADCHARDATA,
    ERROR_SXS_XML_E_MISSINGWHITESPACE,
    ERROR_SXS_XML_E_EXPECTINGTAGEND,
    ERROR_SXS_XML_E_MISSINGSEMICOLON,
    ERROR_SXS_XML_E_UNBALANCEDPAREN,
    ERROR_SXS_XML_E_INTERNALERROR,
    ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE,
    ERROR_SXS_XML_E_INCOMPLETE_ENCODING,
    ERROR_SXS_XML_E_MISSING_PAREN,
    ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE,
    ERROR_SXS_XML_E_MULTIPLE_COLONS,
    ERROR_SXS_XML_E_INVALID_DECIMAL,
    ERROR_SXS_XML_E_INVALID_HEXIDECIMAL,
    ERROR_SXS_XML_E_INVALID_UNICODE,
    ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK,
    ERROR_SXS_XML_E_UNEXPECTEDENDTAG,
    ERROR_SXS_XML_E_UNCLOSEDTAG,
    ERROR_SXS_XML_E_DUPLICATEATTRIBUTE,
    ERROR_SXS_XML_E_MULTIPLEROOTS,
    ERROR_SXS_XML_E_INVALIDATROOTLEVEL,
    ERROR_SXS_XML_E_BADXMLDECL,
    ERROR_SXS_XML_E_MISSINGROOT,
    ERROR_SXS_XML_E_UNEXPECTEDEOF,
    ERROR_SXS_XML_E_BADPEREFINSUBSET,
    ERROR_SXS_XML_E_UNCLOSEDSTARTTAG,
    ERROR_SXS_XML_E_UNCLOSEDENDTAG,
    ERROR_SXS_XML_E_UNCLOSEDSTRING,
    ERROR_SXS_XML_E_UNCLOSEDCOMMENT,
    ERROR_SXS_XML_E_UNCLOSEDDECL,
    ERROR_SXS_XML_E_UNCLOSEDCDATA,
    ERROR_SXS_XML_E_RESERVEDNAMESPACE,
    ERROR_SXS_XML_E_INVALIDENCODING,
    ERROR_SXS_XML_E_INVALIDSWITCH,
    ERROR_SXS_XML_E_BADXMLCASE,
    ERROR_SXS_XML_E_INVALID_STANDALONE,
    ERROR_SXS_XML_E_UNEXPECTED_STANDALONE,
    ERROR_SXS_XML_E_INVALID_VERSION,
    ERROR_SXS_XML_E_MISSINGEQUALS,
    ERROR_SXS_PROTECTION_RECOVERY_FAILED,
    ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT,
    ERROR_SXS_PROTECTION_CATALOG_NOT_VALID,
    ERROR_SXS_UNTRANSLATABLE_HRESULT,
    ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING,
    ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE,
    ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME // = 14080
}

enum : HRESULT {
    S_OK                                   = 0x00000000,
    S_FALSE                                = 0x00000001,

    NOERROR                                = 0x00000000,

    E_PENDING                              = 0x8000000A,
    E_NOTIMPL                              = 0x80004001,
    E_NOINTERFACE                          = 0x80004002,
    E_POINTER                              = 0x80004003,
    E_ABORT                                = 0x80004004,
    E_FAIL                                 = 0x80004005,
    E_ACCESSDENIED                         = 0x80070005,
    E_HANDLE                               = 0x80070006,
    E_OUTOFMEMORY                          = 0x8007000E,
    E_INVALIDARG                           = 0x80070057,
    E_UNEXPECTED                           = 0x8000FFFF,

    CO_E_INIT_TLS                          = 0x80004006,
    CO_E_INIT_SHARED_ALLOCATOR             = 0x80004007,
    CO_E_INIT_MEMORY_ALLOCATOR             = 0x80004008,
    CO_E_INIT_CLASS_CACHE                  = 0x80004009,
    CO_E_INIT_RPC_CHANNEL                  = 0x8000400A,
    CO_E_INIT_TLS_SET_CHANNEL_CONTROL      = 0x8000400B,
    CO_E_INIT_TLS_CHANNEL_CONTROL          = 0x8000400C,
    CO_E_INIT_UNACCEPTED_USER_ALLOCATOR    = 0x8000400D,
    CO_E_INIT_SCM_MUTEX_EXISTS             = 0x8000400E,
    CO_E_INIT_SCM_FILE_MAPPING_EXISTS      = 0x8000400F,
    CO_E_INIT_SCM_MAP_VIEW_OF_FILE         = 0x80004010,
    CO_E_INIT_SCM_EXEC_FAILURE             = 0x80004011,
    CO_E_INIT_ONLY_SINGLE_THREADED         = 0x80004012,

    RPC_E_CALL_REJECTED                    = 0x80010001,
    RPC_E_CALL_CANCELED                    = 0x80010002,
    RPC_E_CANTPOST_INSENDCALL              = 0x80010003,
    RPC_E_CANTCALLOUT_INASYNCCALL          = 0x80010004,
    RPC_E_CANTCALLOUT_INEXTERNALCALL       = 0x80010005,
    RPC_E_CONNECTION_TERMINATED            = 0x80010006,
    RPC_E_SERVER_DIED                      = 0x80010007,
    RPC_E_CLIENT_DIED                      = 0x80010008,
    RPC_E_INVALID_DATAPACKET               = 0x80010009,
    RPC_E_CANTTRANSMIT_CALL                = 0x8001000A,
    RPC_E_CLIENT_CANTMARSHAL_DATA          = 0x8001000B,
    RPC_E_CLIENT_CANTUNMARSHAL_DATA        = 0x8001000C,
    RPC_E_SERVER_CANTMARSHAL_DATA          = 0x8001000D,
    RPC_E_SERVER_CANTUNMARSHAL_DATA        = 0x8001000E,
    RPC_E_INVALID_DATA                     = 0x8001000F,
    RPC_E_INVALID_PARAMETER                = 0x80010010,
    RPC_E_CANTCALLOUT_AGAIN                = 0x80010011,
    RPC_E_SERVER_DIED_DNE                  = 0x80010012,
    RPC_E_SYS_CALL_FAILED                  = 0x80010100,
    RPC_E_OUT_OF_RESOURCES                 = 0x80010101,
    RPC_E_ATTEMPTED_MULTITHREAD            = 0x80010102,
    RPC_E_NOT_REGISTERED                   = 0x80010103,
    RPC_E_FAULT                            = 0x80010104,
    RPC_E_SERVERFAULT                      = 0x80010105,
    RPC_E_CHANGED_MODE                     = 0x80010106,
    RPC_E_INVALIDMETHOD                    = 0x80010107,
    RPC_E_DISCONNECTED                     = 0x80010108,
    RPC_E_RETRY                            = 0x80010109,
    RPC_E_SERVERCALL_RETRYLATER            = 0x8001010A,
    RPC_E_SERVERCALL_REJECTED              = 0x8001010B,
    RPC_E_INVALID_CALLDATA                 = 0x8001010C,
    RPC_E_CANTCALLOUT_ININPUTSYNCCALL      = 0x8001010D,
    RPC_E_WRONG_THREAD                     = 0x8001010E,
    RPC_E_THREAD_NOT_INIT                  = 0x8001010F,
    RPC_E_UNEXPECTED                       = 0x8001FFFF,

    DISP_E_UNKNOWNINTERFACE                = 0x80020001,
    DISP_E_MEMBERNOTFOUND                  = 0x80020003,
    DISP_E_PARAMNOTFOUND                   = 0x80020004,
    DISP_E_TYPEMISMATCH                    = 0x80020005,
    DISP_E_UNKNOWNNAME                     = 0x80020006,
    DISP_E_NONAMEDARGS                     = 0x80020007,
    DISP_E_BADVARTYPE                      = 0x80020008,
    DISP_E_EXCEPTION                       = 0x80020009,
    DISP_E_OVERFLOW                        = 0x8002000A,
    DISP_E_BADINDEX                        = 0x8002000B,
    DISP_E_UNKNOWNLCID                     = 0x8002000C,
    DISP_E_ARRAYISLOCKED                   = 0x8002000D,
    DISP_E_BADPARAMCOUNT                   = 0x8002000E,
    DISP_E_PARAMNOTOPTIONAL                = 0x8002000F,
    DISP_E_BADCALLEE                       = 0x80020010,
    DISP_E_NOTACOLLECTION                  = 0x80020011,
    DISP_E_DIVBYZERO                       = 0x80020012,

    TYPE_E_BUFFERTOOSMALL                  = 0x80028016,
    TYPE_E_INVDATAREAD                     = 0x80028018,
    TYPE_E_UNSUPFORMAT                     = 0x80028019,
    TYPE_E_REGISTRYACCESS                  = 0x8002801C,
    TYPE_E_LIBNOTREGISTERED                = 0x8002801D,
    TYPE_E_UNDEFINEDTYPE                   = 0x80028027,
    TYPE_E_QUALIFIEDNAMEDISALLOWED         = 0x80028028,
    TYPE_E_INVALIDSTATE                    = 0x80028029,
    TYPE_E_WRONGTYPEKIND                   = 0x8002802A,
    TYPE_E_ELEMENTNOTFOUND                 = 0x8002802B,
    TYPE_E_AMBIGUOUSNAME                   = 0x8002802C,
    TYPE_E_NAMECONFLICT                    = 0x8002802D,
    TYPE_E_UNKNOWNLCID                     = 0x8002802E,
    TYPE_E_DLLFUNCTIONNOTFOUND             = 0x8002802F,
    TYPE_E_BADMODULEKIND                   = 0x800288BD,
    TYPE_E_SIZETOOBIG                      = 0x800288C5,
    TYPE_E_DUPLICATEID                     = 0x800288C6,
    TYPE_E_INVALIDID                       = 0x800288CF,
    TYPE_E_TYPEMISMATCH                    = 0x80028CA0,
    TYPE_E_OUTOFBOUNDS                     = 0x80028CA1,
    TYPE_E_IOERROR                         = 0x80028CA2,
    TYPE_E_CANTCREATETMPFILE               = 0x80028CA3,
    TYPE_E_CANTLOADLIBRARY                 = 0x80029C4A,
    TYPE_E_INCONSISTENTPROPFUNCS           = 0x80029C83,
    TYPE_E_CIRCULARTYPE                    = 0x80029C84,

    STG_E_INVALIDFUNCTION                  = 0x80030001,
    STG_E_FILENOTFOUND                     = 0x80030002,
    STG_E_PATHNOTFOUND                     = 0x80030003,
    STG_E_TOOMANYOPENFILES                 = 0x80030004,
    STG_E_ACCESSDENIED                     = 0x80030005,
    STG_E_INVALIDHANDLE                    = 0x80030006,
    STG_E_INSUFFICIENTMEMORY               = 0x80030008,
    STG_E_INVALIDPOINTER                   = 0x80030009,
    STG_E_NOMOREFILES                      = 0x80030012,
    STG_E_DISKISWRITEPROTECTED             = 0x80030013,
    STG_E_SEEKERROR                        = 0x80030019,
    STG_E_WRITEFAULT                       = 0x8003001D,
    STG_E_READFAULT                        = 0x8003001E,
    STG_E_SHAREVIOLATION                   = 0x80030020,
    STG_E_LOCKVIOLATION                    = 0x80030021,
    STG_E_FILEALREADYEXISTS                = 0x80030050,
    STG_E_INVALIDPARAMETER                 = 0x80030057,
    STG_E_MEDIUMFULL                       = 0x80030070,
    STG_E_ABNORMALAPIEXIT                  = 0x800300FA,
    STG_E_INVALIDHEADER                    = 0x800300FB,
    STG_E_INVALIDNAME                      = 0x800300FC,
    STG_E_UNKNOWN                          = 0x800300FD,
    STG_E_UNIMPLEMENTEDFUNCTION            = 0x800300FE,
    STG_E_INVALIDFLAG                      = 0x800300FF,
    STG_E_INUSE                            = 0x80030100,
    STG_E_NOTCURRENT                       = 0x80030101,
    STG_E_REVERTED                         = 0x80030102,
    STG_E_CANTSAVE                         = 0x80030103,
    STG_E_OLDFORMAT                        = 0x80030104,
    STG_E_OLDDLL                           = 0x80030105,
    STG_E_SHAREREQUIRED                    = 0x80030106,
    STG_E_NOTFILEBASEDSTORAGE              = 0x80030107,
    STG_E_EXTANTMARSHALLINGS               = 0x80030108,
    STG_S_CONVERTED                        = 0x00030200,

    OLE_E_FIRST                            = 0x80040000,
    OLE_S_FIRST                            = 0x00040000,
    OLE_E_OLEVERB                          = 0x80040000,
    OLE_S_USEREG                           = 0x00040000,
    OLE_E_ADVF                             = 0x80040001,
    OLE_S_STATIC                           = 0x00040001,
    OLE_E_ENUM_NOMORE                      = 0x80040002,
    OLE_S_MAC_CLIPFORMAT                   = 0x00040002,
    OLE_E_ADVISENOTSUPPORTED               = 0x80040003,
    OLE_E_NOCONNECTION                     = 0x80040004,
    OLE_E_NOTRUNNING                       = 0x80040005,
    OLE_E_NOCACHE                          = 0x80040006,
    OLE_E_BLANK                            = 0x80040007,
    OLE_E_CLASSDIFF                        = 0x80040008,
    OLE_E_CANT_GETMONIKER                  = 0x80040009,
    OLE_E_CANT_BINDTOSOURCE                = 0x8004000A,
    OLE_E_STATIC                           = 0x8004000B,
    OLE_E_PROMPTSAVECANCELLED              = 0x8004000C,
    OLE_E_INVALIDRECT                      = 0x8004000D,
    OLE_E_WRONGCOMPOBJ                     = 0x8004000E,
    OLE_E_INVALIDHWND                      = 0x8004000F,
    OLE_E_NOT_INPLACEACTIVE                = 0x80040010,
    OLE_E_CANTCONVERT                      = 0x80040011,
    OLE_E_NOSTORAGE                        = 0x80040012,

    DV_E_FORMATETC                         = 0x80040064,
    DV_E_DVTARGETDEVICE                    = 0x80040065,
    DV_E_STGMEDIUM                         = 0x80040066,
    DV_E_STATDATA                          = 0x80040067,
    DV_E_LINDEX                            = 0x80040068,
    DV_E_TYMED                             = 0x80040069,
    DV_E_CLIPFORMAT                        = 0x8004006A,
    DV_E_DVASPECT                          = 0x8004006B,
    DV_E_DVTARGETDEVICE_SIZE               = 0x8004006C,
    DV_E_NOIVIEWOBJECT                     = 0x8004006D,

    OLE_E_LAST                             = 0x800400FF,
    OLE_S_LAST                             = 0x000400FF,
    DRAGDROP_E_FIRST                       = 0x80040100,
    DRAGDROP_S_FIRST                       = 0x00040100,
    DRAGDROP_E_NOTREGISTERED               = 0x80040100,
    DRAGDROP_S_DROP                        = 0x00040100,
    DRAGDROP_E_ALREADYREGISTERED           = 0x80040101,
    DRAGDROP_S_CANCEL                      = 0x00040101,
    DRAGDROP_E_INVALIDHWND                 = 0x80040102,
    DRAGDROP_S_USEDEFAULTCURSORS           = 0x00040102,
    DRAGDROP_E_LAST                        = 0x8004010F,
    DRAGDROP_S_LAST                        = 0x0004010F,
    CLASSFACTORY_E_FIRST                   = 0x80040110,
    CLASSFACTORY_S_FIRST                   = 0x00040110,
    CLASS_E_NOAGGREGATION                  = 0x80040110,
    CLASS_E_CLASSNOTAVAILABLE              = 0x80040111,
    CLASSFACTORY_E_LAST                    = 0x8004011F,
    CLASSFACTORY_S_LAST                    = 0x0004011F,
    MARSHAL_E_FIRST                        = 0x80040120,
    MARSHAL_S_FIRST                        = 0x00040120,
    MARSHAL_E_LAST                         = 0x8004012F,
    MARSHAL_S_LAST                         = 0x0004012F,
    DATA_E_FIRST                           = 0x80040130,
    DATA_S_FIRST                           = 0x00040130,
    DATA_S_SAMEFORMATETC                   = 0x00040130,
    DATA_E_LAST                            = 0x8004013F,
    DATA_S_LAST                            = 0x0004013F,
    VIEW_E_FIRST                           = 0x80040140,
    VIEW_S_FIRST                           = 0x00040140,
    VIEW_E_DRAW                            = 0x80040140,
    VIEW_S_ALREADY_FROZEN                  = 0x00040140,
    VIEW_E_LAST                            = 0x8004014F,
    VIEW_S_LAST                            = 0x0004014F,
    REGDB_E_FIRST                          = 0x80040150,
    REGDB_S_FIRST                          = 0x00040150,
    REGDB_E_READREGDB                      = 0x80040150,
    REGDB_E_WRITEREGDB                     = 0x80040151,
    REGDB_E_KEYMISSING                     = 0x80040152,
    REGDB_E_INVALIDVALUE                   = 0x80040153,
    REGDB_E_CLASSNOTREG                    = 0x80040154,
    REGDB_E_IIDNOTREG                      = 0x80040155,
    REGDB_E_LAST                           = 0x8004015F,
    REGDB_S_LAST                           = 0x0004015F,
    CACHE_E_FIRST                          = 0x80040170,
    CACHE_S_FIRST                          = 0x00040170,
    CACHE_E_NOCACHE_UPDATED                = 0x80040170,
    CACHE_S_FORMATETC_NOTSUPPORTED         = 0x00040170,
    CACHE_S_SAMECACHE                      = 0x00040171,
    CACHE_S_SOMECACHES_NOTUPDATED          = 0x00040172,
    CACHE_E_LAST                           = 0x8004017F,
    CACHE_S_LAST                           = 0x0004017F,
    OLEOBJ_E_FIRST                         = 0x80040180,
    OLEOBJ_S_FIRST                         = 0x00040180,
    OLEOBJ_E_NOVERBS                       = 0x80040180,
    OLEOBJ_S_INVALIDVERB                   = 0x00040180,
    OLEOBJ_E_INVALIDVERB                   = 0x80040181,
    OLEOBJ_S_CANNOT_DOVERB_NOW             = 0x00040181,
    OLEOBJ_S_INVALIDHWND                   = 0x00040182,
    OLEOBJ_E_LAST                          = 0x8004018F,
    OLEOBJ_S_LAST                          = 0x0004018F,
    CLIENTSITE_E_FIRST                     = 0x80040190,
    CLIENTSITE_S_FIRST                     = 0x00040190,
    CLIENTSITE_E_LAST                      = 0x8004019F,
    CLIENTSITE_S_LAST                      = 0x0004019F,
    INPLACE_E_NOTUNDOABLE                  = 0x800401A0,
    INPLACE_E_FIRST                        = 0x800401A0,
    INPLACE_S_FIRST                        = 0x000401A0,
    INPLACE_S_TRUNCATED                    = 0x000401A0,
    INPLACE_E_NOTOOLSPACE                  = 0x800401A1,
    INPLACE_E_LAST                         = 0x800401AF,
    INPLACE_S_LAST                         = 0x000401AF,
    ENUM_E_FIRST                           = 0x800401B0,
    ENUM_S_FIRST                           = 0x000401B0,
    ENUM_E_LAST                            = 0x800401BF,
    ENUM_S_LAST                            = 0x000401BF,
    CONVERT10_E_FIRST                      = 0x800401C0,
    CONVERT10_S_FIRST                      = 0x000401C0,
    CONVERT10_E_OLESTREAM_GET              = 0x800401C0,
    CONVERT10_S_NO_PRESENTATION            = 0x000401C0,
    CONVERT10_E_OLESTREAM_PUT              = 0x800401C1,
    CONVERT10_E_OLESTREAM_FMT              = 0x800401C2,
    CONVERT10_E_OLESTREAM_BITMAP_TO_DIB    = 0x800401C3,
    CONVERT10_E_STG_FMT                    = 0x800401C4,
    CONVERT10_E_STG_NO_STD_STREAM          = 0x800401C5,
    CONVERT10_E_STG_DIB_TO_BITMAP          = 0x800401C6,
    CONVERT10_E_LAST                       = 0x800401CF,
    CONVERT10_S_LAST                       = 0x000401CF,
    CLIPBRD_E_FIRST                        = 0x800401D0,
    CLIPBRD_S_FIRST                        = 0x000401D0,
    CLIPBRD_E_CANT_OPEN                    = 0x800401D0,
    CLIPBRD_E_CANT_EMPTY                   = 0x800401D1,
    CLIPBRD_E_CANT_SET                     = 0x800401D2,
    CLIPBRD_E_BAD_DATA                     = 0x800401D3,
    CLIPBRD_E_CANT_CLOSE                   = 0x800401D4,
    CLIPBRD_E_LAST                         = 0x800401DF,
    CLIPBRD_S_LAST                         = 0x000401DF,
    MK_E_FIRST                             = 0x800401E0,
    MK_S_FIRST                             = 0x000401E0,
    MK_E_CONNECTMANUALLY                   = 0x800401E0,
    MK_E_EXCEEDEDDEADLINE                  = 0x800401E1,
    MK_E_NEEDGENERIC                       = 0x800401E2,
    MK_S_REDUCED_TO_SELF                   = 0x000401E2,
    MK_E_UNAVAILABLE                       = 0x800401E3,
    MK_E_SYNTAX                            = 0x800401E4,
    MK_S_ME                                = 0x000401E4,
    MK_E_NOOBJECT                          = 0x800401E5,
    MK_S_HIM                               = 0x000401E5,
    MK_E_INVALIDEXTENSION                  = 0x800401E6,
    MK_S_US                                = 0x000401E6,
    MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = 0x800401E7,
    MK_S_MONIKERALREADYREGISTERED          = 0x000401E7,
    MK_E_NOTBINDABLE                       = 0x800401E8,
    MK_E_NOTBOUND                          = 0x800401E9,
    MK_E_CANTOPENFILE                      = 0x800401EA,
    MK_E_MUSTBOTHERUSER                    = 0x800401EB,
    MK_E_NOINVERSE                         = 0x800401EC,
    MK_E_NOSTORAGE                         = 0x800401ED,
    MK_E_NOPREFIX                          = 0x800401EE,
    MK_E_LAST                              = 0x800401EF,
    MK_S_LAST                              = 0x000401EF,
    MK_E_ENUMERATION_FAILED                = 0x800401EF,
    CO_E_FIRST                             = 0x800401F0,
    CO_S_FIRST                             = 0x000401F0,
    CO_E_NOTINITIALIZED                    = 0x800401F0,
    CO_E_ALREADYINITIALIZED                = 0x800401F1,
    CO_E_CANTDETERMINECLASS                = 0x800401F2,
    CO_E_CLASSSTRING                       = 0x800401F3,
    CO_E_IIDSTRING                         = 0x800401F4,
    CO_E_APPNOTFOUND                       = 0x800401F5,
    CO_E_APPSINGLEUSE                      = 0x800401F6,
    CO_E_ERRORINAPP                        = 0x800401F7,
    CO_E_DLLNOTFOUND                       = 0x800401F8,
    CO_E_ERRORINDLL                        = 0x800401F9,
    CO_E_WRONGOSFORAPP                     = 0x800401FA,
    CO_E_OBJNOTREG                         = 0x800401FB,
    CO_E_OBJISREG                          = 0x800401FC,
    CO_E_OBJNOTCONNECTED                   = 0x800401FD,
    CO_E_APPDIDNTREG                       = 0x800401FE,
    CO_E_LAST                              = 0x800401FF,
    CO_S_LAST                              = 0x000401FF,
    CO_E_RELEASED                          = 0x800401FF,

    CO_E_CLASS_CREATE_FAILED               = 0x80080001,
    CO_E_SCM_ERROR                         = 0x80080002,
    CO_E_SCM_RPC_FAILURE                   = 0x80080003,
    CO_E_BAD_PATH                          = 0x80080004,
    CO_E_SERVER_EXEC_FAILURE               = 0x80080005,
    CO_E_OBJSRV_RPC_FAILURE                = 0x80080006,
    MK_E_NO_NORMALIZED                     = 0x80080007,
    CO_E_SERVER_STOPPING                   = 0x80080008,
    MEM_E_INVALID_ROOT                     = 0x80080009,
    MEM_E_INVALID_LINK                     = 0x80080010,
    MEM_E_INVALID_SIZE                     = 0x80080011,
    CO_S_NOTALLINTERFACES                  = 0x00080012,

    NTE_BAD_UID                            = 0x80090001,
    NTE_BAD_HASH                           = 0x80090002,
    NTE_BAD_KEY                            = 0x80090003,
    NTE_BAD_LEN                            = 0x80090004,
    NTE_BAD_DATA                           = 0x80090005,
    NTE_BAD_SIGNATURE                      = 0x80090006,
    NTE_BAD_VER                            = 0x80090007,
    NTE_BAD_ALGID                          = 0x80090008,
    NTE_BAD_FLAGS                          = 0x80090009,
    NTE_BAD_TYPE                           = 0x8009000A,
    NTE_BAD_KEY_STATE                      = 0x8009000B,
    NTE_BAD_HASH_STATE                     = 0x8009000C,
    NTE_NO_KEY                             = 0x8009000D,
    NTE_NO_MEMORY                          = 0x8009000E,
    NTE_EXISTS                             = 0x8009000F,
    NTE_PERM                               = 0x80090010,
    NTE_NOT_FOUND                          = 0x80090011,
    NTE_DOUBLE_ENCRYPT                     = 0x80090012,
    NTE_BAD_PROVIDER                       = 0x80090013,
    NTE_BAD_PROV_TYPE                      = 0x80090014,
    NTE_BAD_PUBLIC_KEY                     = 0x80090015,
    NTE_BAD_KEYSET                         = 0x80090016,
    NTE_PROV_TYPE_NOT_DEF                  = 0x80090017,
    NTE_PROV_TYPE_ENTRY_BAD                = 0x80090018,
    NTE_KEYSET_NOT_DEF                     = 0x80090019,
    NTE_KEYSET_ENTRY_BAD                   = 0x8009001A,
    NTE_PROV_TYPE_NO_MATCH                 = 0x8009001B,
    NTE_SIGNATURE_FILE_BAD                 = 0x8009001C,
    NTE_PROVIDER_DLL_FAIL                  = 0x8009001D,
    NTE_PROV_DLL_NOT_FOUND                 = 0x8009001E,
    NTE_BAD_KEYSET_PARAM                   = 0x8009001F,
    NTE_FAIL                               = 0x80090020,
    NTE_SYS_ERR                            = 0x80090021
}


enum : uint {
    SEVERITY_SUCCESS = 0,
    SEVERITY_ERROR   = 1
}

enum : uint {
    FACILITY_NULL     =   0,
    FACILITY_RPC,
    FACILITY_DISPATCH,
    FACILITY_STORAGE,
    FACILITY_ITF,  // =   4
    FACILITY_WIN32    =   7,
    FACILITY_WINDOWS  =   8,
    FACILITY_CONTROL  =  10,
    FACILITY_NT_BIT   = 0x10000000
}

// C Macros

pure nothrow @nogc {
    bool SUCCEEDED(HRESULT Status) {
        return Status >= 0;
    }

    bool FAILED(HRESULT Status) {
        return Status < 0;
    }

    bool IS_ERROR(HRESULT Status) {
        return (Status >>> 31) == SEVERITY_ERROR;
    }

    ushort HRESULT_CODE(HRESULT r) {
        return cast(ushort) (r & 0xFFFF);
    }

    ushort SCODE_CODE(SCODE r) {
        return cast(ushort) (r & 0xFFFF);
    }

    ushort HRESULT_FACILITY(HRESULT r) {
        return cast(ushort) ((r>>16) & 0x1fff);
    }

    ushort SCODE_FACILITY(SCODE r) {
        return cast(ushort) ((r>>16) & 0x1fff);
    }

    ushort HRESULT_SEVERITY(HRESULT r) {
        return cast(ushort) ((r>>31) & 0x1);
    }

    ushort SCODE_SEVERITY(SCODE r) {
        return cast(ushort) ((r>>31) & 0x1);
    }

    HRESULT MAKE_HRESULT(bool s, uint f, uint c) {
        return (s << 31) | (f << 16) | c;
    }

    SCODE MAKE_SCODE(bool s, uint f, uint c) {
        return (s << 31) | (f << 16) | c;
    }

    SCODE GetScode(HRESULT hr) {
        return hr;
    }

    HRESULT ResultFromScode(SCODE c) {
        return c;
    }

    HRESULT HRESULT_FROM_NT(HRESULT x) {
        return x | FACILITY_NT_BIT;
    }

    HRESULT HRESULT_FROM_WIN32(HRESULT x) {
        return  x ? (x & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000 : 0;
    }

    HRESULT PropagateResult(HRESULT hrPrevious, SCODE scBase) {
        return scBase;
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            /**
 * Windows API header module
 *
 * Translated from MinGW Windows headers
 *
 * License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)
 * Source: $(DRUNTIMESRC src/core/sys/windows/_wingdi.d)
 */
module core.sys.windows.wingdi;
version (Windows):

version (ANSI) {} else version = Unicode;
pragma(lib, "gdi32");

// FIXME: clean up Windows version support

private import core.sys.windows.w32api, core.sys.windows.windef, core.sys.windows.winver;

// BITMAPINFOHEADER.biCompression
enum : DWORD {
    BI_RGB = 0,
    BI_RLE8,
    BI_RLE4,
    BI_BITFIELDS,
    BI_JPEG,
    BI_PNG
}

// ---
// COLORADJUSTMENT -- only for NT 3.1+, Win2000+
enum WORD
    CA_NEGATIVE   = 1,
    CA_LOG_FILTER = 2;

// COLORADJUSTMENT
enum : WORD  {
    ILLUMINANT_DEVICE_DEFAULT = 0,
    ILLUMINANT_A,
    ILLUMINANT_B,
    ILLUMINANT_C,
    ILLUMINANT_D50,
    ILLUMINANT_D55,
    ILLUMINANT_D65,
    ILLUMINANT_D75,
    ILLUMINANT_F2,
    ILLUMINANT_MAX_INDEX   = ILLUMINANT_F2,
    ILLUMINANT_TUNGSTEN    = ILLUMINANT_A,
    ILLUMINANT_DAYLIGHT    = ILLUMINANT_C,
    ILLUMINANT_FLUORESCENT = ILLUMINANT_F2,
    ILLUMINANT_NTSC        = ILLUMINANT_C
}

enum {
    RGB_GAMMA_MIN       = 2500,
    RGB_GAMMA_MAX       = 65000,
    REFERENCE_WHITE_MIN = 6000,
    REFERENCE_WHITE_MAX = 10000,
    REFERENCE_BLACK_MIN = 0,
    REFERENCE_BLACK_MAX = 4000,
    COLOR_ADJ_MIN       = -100,
    COLOR_ADJ_MAX       = 100,
}
//---

/* FIXME: move to core.sys.windows.winuser ? */
// DrawIconEx()
enum : UINT {
    DI_MASK        = 1,
    DI_IMAGE       = 2,
    DI_NORMAL      = 3,
    DI_COMPAT      = 4,
    DI_DEFAULTSIZE = 8
}

// DOCINFO
enum : DWORD {
    DI_APPBANDING = 1,
    DI_ROPS_READ_DESTINATION = 2,
}

// ENHMETAHEADER
enum : DWORD {
    EMR_HEADER = 1,
    EMR_POLYBEZIER,
    EMR_POLYGON,
    EMR_POLYLINE,
    EMR_POLYBEZIERTO,
    EMR_POLYLINETO,
    EMR_POLYPOLYLINE,
    EMR_POLYPOLYGON,
    EMR_SETWINDOWEXTEX,
    EMR_SETWINDOWORGEX,
    EMR_SETVIEWPORTEXTEX,
    EMR_SETVIEWPORTORGEX,
    EMR_SETBRUSHORGEX,
    EMR_EOF,
    EMR_SETPIXELV,
    EMR_SETMAPPERFLAGS,
    EMR_SETMAPMODE,
    EMR_SETBKMODE,
    EMR_SETPOLYFILLMODE,
    EMR_SETROP2,
    EMR_SETSTRETCHBLTMODE,
    EMR_SETTEXTALIGN,
    EMR_SETCOLORADJUSTMENT,
    EMR_SETTEXTCOLOR,
    EMR_SETBKCOLOR,
    EMR_OFFSETCLIPRGN,
    EMR_MOVETOEX,
    EMR_SETMETARGN,
    EMR_EXCLUDECLIPRECT,
    EMR_INTERSECTCLIPRECT,
    EMR_SCALEVIEWPORTEXTEX,
    EMR_SCALEWINDOWEXTEX,
    EMR_SAVEDC,
    EMR_RESTOREDC,
    EMR_SETWORLDTRANSFORM,
    EMR_MODIFYWORLDTRANSFORM,
    EMR_SELECTOBJECT,
    EMR_CREATEPEN,
    EMR_CREATEBRUSHINDIRECT,
    EMR_DELETEOBJECT,
    EMR_ANGLEARC,
    EMR_ELLIPSE,
    EMR_RECTANGLE,
    EMR_ROUNDRECT,
    EMR_ARC,
    EMR_CHORD,
    EMR_PIE,
    EMR_SELECTPALETTE,
    EMR_CREATEPALETTE,
    EMR_SETPALETTEENTRIES,
    EMR_RESIZEPALETTE,
    EMR_REALIZEPALETTE,
    EMR_EXTFLOODFILL,
    EMR_LINETO,
    EMR_ARCTO,
    EMR_POLYDRAW,
    EMR_SETARCDIRECTION,
    EMR_SETMITERLIMIT,
    EMR_BEGINPATH,
    EMR_ENDPATH,
    EMR_CLOSEFIGURE,
    EMR_FILLPATH,
    EMR_STROKEANDFILLPATH,
    EMR_STROKEPATH,
    EMR_FLATTENPATH,
    EMR_WIDENPATH,
    EMR_SELECTCLIPPATH,
    EMR_ABORTPATH, // 68
    // reserved 69
    EMR_GDICOMMENT = 70,
    EMR_FILLRGN,
    EMR_FRAMERGN,
    EMR_INVERTRGN,
    EMR_PAINTRGN,
    EMR_EXTSELECTCLIPRGN,
    EMR_BITBLT,
    EMR_STRETCHBLT,
    EMR_MASKBLT,
    EMR_PLGBLT,
    EMR_SETDIBITSTODEVICE,
    EMR_STRETCHDIBITS,
    EMR_EXTCREATEFONTINDIRECTW,
    EMR_EXTTEXTOUTA,
    EMR_EXTTEXTOUTW,
    EMR_POLYBEZIER16,
    EMR_POLYGON16,
    EMR_POLYLINE16,
    EMR_POLYBEZIERTO16,
    EMR_POLYLINETO16,
    EMR_POLYPOLYLINE16,
    EMR_POLYPOLYGON16,
    EMR_POLYDRAW16,
    EMR_CREATEMONOBRUSH,
    EMR_CREATEDIBPATTERNBRUSHPT,
    EMR_EXTCREATEPEN,
    EMR_POLYTEXTOUTA,
    EMR_POLYTEXTOUTW, // 97
    EMR_SETICMMODE,
    EMR_CREATECOLORSPACE,
    EMR_SETCOLORSPACE,
    EMR_DELETECOLORSPACE,
    EMR_GLSRECORD,
    EMR_GLSBOUNDEDRECORD,
    EMR_PIXELFORMAT, // = 104
    // reserved 105 - 110
    EMR_COLORCORRECTPALETTE = 111,
    EMR_SETICMPROFILEA,
    EMR_SETICMPROFILEW,
    EMR_ALPHABLEND,
    EMR_SETLAYOUT,
    EMR_TRANSPARENTBLT, // 116
    // reserved 117
    EMR_GRADIENTFILL = 118,
    // reserved 119, 120
    EMR_COLORMATCHTOTARGETW = 121,
    EMR_CREATECOLORSPACEW // 122
}

enum EMR_MIN = EMR_HEADER;

static if (_WIN32_WINNT >= 0x500) {
enum EMR_MAX = EMR_CREATECOLORSPACEW;
} else {
enum EMR_MAX = EMR_PIXELFORMAT;
}

// ENHMETAHEADER.dSignature, ENHMETAHEADER3.dSignature,
// EMRFORMAT.dSignature
enum : DWORD {
    ENHMETA_SIGNATURE = 1179469088,
    EPS_SIGNATURE     = 0x46535045
}

static if (_WIN32_WINNT >= 0x500) {
    // AddFontResourceEx()
    enum : DWORD {
        FR_PRIVATE  = 0x10,
        FR_NOT_ENUM = 0x20
    }
}

enum {
    META_SAVEDC                = 0x1E,
    META_REALIZEPALETTE        = 0x35,
    META_SETPALENTRIES         = 0x37,
    META_CREATEPALETTE         = 0xf7,
    META_SETBKMODE             = 0x102,
    META_SETMAPMODE            = 0x103,
    META_SETROP2               = 0x104,
    META_SETRELABS             = 0x105,
    META_SETPOLYFILLMODE       = 0x106,
    META_SETSTRETCHBLTMODE     = 0x107,
    META_SETTEXTCHAREXTRA      = 0x108,
    META_RESTOREDC             = 0x127,
    META_INVERTREGION          = 0x12A,
    META_PAINTREGION           = 0x12B,
    META_SELECTCLIPREGION      = 0x12C,
    META_SELECTOBJECT          = 0x12D,
    META_SETTEXTALIGN          = 0x12E,
    META_RESIZEPALETTE         = 0x139,
    META_DIBCREATEPATTERNBRUSH = 0x142,
    META_SETLAYOUT             = 0x149,
    META_DELETEOBJECT          = 0x1F0,
    META_CREATEPATTERNBRUSH    = 0x1F9,
    META_SETBKCOLOR            = 0x201,
    META_SETTEXTCOLOR          = 0x209,
    META_SETTEXTJUSTIFICATION  = 0x20A,
    META_SETWINDOWORG          = 0x20B,
    META_SETWINDOWEXT          = 0x20C,
    META_SETVIEWPORTORG        = 0x20D,
    META_SETVIEWPORTEXT        = 0x20E,
    META_OFFSETWINDOWORG       = 0x20F,
    META_OFFSETVIEWPORTORG     = 0x211,
    META_LINETO                = 0x213,
    META_MOVETO                = 0x214,
    META_OFFSETCLIPRGN         = 0x220,
    META_FILLREGION            = 0x228,
    META_SETMAPPERFLAGS        = 0x231,
    META_SELECTPALETTE         = 0x234,
    META_CREATEPENINDIRECT     = 0x2FA,
    META_CREATEFONTINDIRECT    = 0x2FB,
    META_CREATEBRUSHINDIRECT   = 0x2FC,
    META_POLYGON               = 0x324,
    META_POLYLINE              = 0x325,
    META_SCALEWINDOWEXT        = 0x410,
    META_SCALEVIEWPORTEXT      = 0x412,
    META_EXCLUDECLIPRECT       = 0x415,
    META_INTERSECTCLIPRECT     = 0x416,
    META_ELLIPSE               = 0x418,
    META_FLOODFILL             = 0x419,
    META_RECTANGLE             = 0x41B,
    META_SETPIXEL              = 0x41F,
    META_FRAMEREGION           = 0x429,
    META_ANIMATEPALETTE        = 0x436,
    META_TEXTOUT               = 0x521,
    META_POLYPOLYGON           = 0x538,
    META_EXTFLOODFILL          = 0x548,
    META_ROUNDRECT             = 0x61C,
    META_PATBLT                = 0x61D,
    META_ESCAPE                = 0x626,
    META_CREATEREGION          = 0x6FF,
    META_ARC                   = 0x817,
    META_PIE                   = 0x81A,
    META_CHORD                 = 0x830,
    META_BITBLT                = 0x922,
    META_DIBBITBLT             = 0x940,
    META_EXTTEXTOUT            = 0xA32,
    META_STRETCHBLT            = 0xB23,
    META_DIBSTRETCHBLT         = 0xB41,
    META_SETDIBTODEV           = 0xD33,
    META_STRETCHDIB            = 0xF43
}

// EMRPOLYDRAW
enum : BYTE {
    PT_CLOSEFIGURE = 1,
    PT_LINETO      = 2,
    PT_BEZIERTO    = 4,
    PT_MOVETO      = 6
}

// ----
// PIXELFORMATDESCRIPTOR.iPixelType
enum : BYTE {
    PFD_TYPE_RGBA       = 0,
    PFD_TYPE_COLORINDEX = 1
}

//deprecated {
// PIXELFORMATDESCRIPTOR.
enum byte
    PFD_MAIN_PLANE     = 0,
    PFD_OVERLAY_PLANE  = 1,
    PFD_UNDERLAY_PLANE = -1;
//}
// PIXELFORMATDESCRIPTOR.dwFlags
enum DWORD
    PFD_DOUBLEBUFFER          = 0x00000001,
    PFD_STEREO                = 0x00000002,
    PFD_DRAW_TO_WINDOW        = 0x00000004,
    PFD_DRAW_TO_BITMAP        = 0x00000008,
    PFD_SUPPORT_GDI           = 0x00000010,
    PFD_SUPPORT_OPENGL        = 0x00000020,
    PFD_GENERIC_FORMAT        = 0x00000040,
    PFD_NEED_PALETTE          = 0x00000080,
    PFD_NEED_SYSTEM_PALETTE   = 0x00000100,
    PFD_SWAP_EXCHANGE         = 0x00000200,
    PFD_SWAP_COPY             = 0x00000400,
    PFD_SWAP_LAYER_BUFFERS    = 0x00000800,
    PFD_GENERIC_ACCELERATED   = 0x00001000,
    PFD_SUPPORT_DIRECTDRAW    = 0x00002000,
    PFD_DIRECT3D_ACCELERATED  = 0x00004000,
    PFD_SUPPORT_COMPOSITION   = 0x00008000,
    /* PIXELFORMATDESCRIPTOR flags for use in ChoosePixelFormat only */
    PFD_DEPTH_DONTCARE        = 0x20000000,
    PFD_DOUBLEBUFFER_DONTCARE = 0x40000000,
    PFD_STEREO_DONTCARE       = 0x80000000;

// ----

enum DWORD
    BLACKNESS   = 0x000042,
    NOTSRCERASE = 0x1100A6,
    NOTSRCCOPY  = 0x330008,
    SRCERASE    = 0x440328,
    DSTINVERT   = 0x550009,
    PATINVERT   = 0x5A0049,
    SRCINVERT   = 0x660046,
    SRCAND      = 0x8800C6,
    MERGEPAINT  = 0xBB0226,
    MERGECOPY   = 0xC000CA,
    SRCCOPY     = 0xCC0020,
    SRCPAINT    = 0xEE0086,
    PATCOPY     = 0xF00021,
    PATPAINT    = 0xFB0A09,
    WHITENESS   = 0xFF0062;
static if (_WIN32_WINNT >= 0x500) {
enum DWORD
        NOMIRRORBITMAP = 0x80000000,
        CAPTUREBLT     = 0x40000000;
}

// GetROP2(), SetROP2()
enum : int {
    R2_BLACK       = 1,
    R2_NOTMERGEPEN = 2,
    R2_MASKNOTPEN  = 3,
    R2_NOTCOPYPEN  = 4,
    R2_MASKPENNOT  = 5,
    R2_NOT         = 6,
    R2_XORPEN      = 7,
    R2_NOTMASKPEN  = 8,
    R2_MASKPEN     = 9,
    R2_NOTXORPEN   = 10,
    R2_NOP         = 11,
    R2_MERGENOTPEN = 12,
    R2_COPYPEN     = 13,
    R2_MERGEPENNOT = 14,
    R2_MERGEPEN    = 15,
    R2_WHITE       = 16
}

enum R2_LAST = R2_WHITE;

// CheckColorsInGamut()
enum ubyte
    CM_IN_GAMUT     = 0,
    CM_OUT_OF_GAMUT = 255;

/* UpdateICMRegKey Constants               */
enum int
    ICM_ADDPROFILE = 1,
    ICM_DELETEPROFILE = 2,
    ICM_QUERYPROFILE = 3,
    ICM_SETDEFAULTPROFILE = 4,
    ICM_REGISTERICMATCHER = 5,
    ICM_UNREGISTERICMATCHER = 6,
    ICM_QUERYMATCH = 7;

enum : int {
    RGN_AND  = 1,
    RGN_OR   = 2,
    RGN_XOR  = 3,
    RGN_DIFF = 4,
    RGN_COPY = 5
}

enum RGN_MIN = RGN_AND;
enum RGN_MAX = RGN_COPY;

// Return values for CombineRgn()
enum {
    NULLREGION    = 1,
    SIMPLEREGION  = 2,
    COMPLEXREGION = 3
}

enum ERROR = 0;
alias ERROR RGN_ERROR;

// CreateDIBitmap()
enum DWORD CBM_INIT = 4;

// CreateDIBitmap()
enum : UINT {
    DIB_RGB_COLORS = 0,
    DIB_PAL_COLORS = 1
}

// ---
//  Values for LOGFONT and CreateFont()

// FIXME: For D, replace with lfFaceName.length()
enum LF_FACESIZE     = 32;
enum LF_FULLFACESIZE = 64;

// FIXME: Not needed for D, only EXTLOGFONT
enum ELF_VENDOR_SIZE = 4;

// ???
enum ELF_VERSION = 0;
enum ELF_CULTURE_LATIN = 0;

// LOGFONT.lfWeight
enum LONG
    FW_DONTCARE   = 0,
    FW_THIN       = 100,
    FW_EXTRALIGHT = 200,
    FW_ULTRALIGHT = FW_EXTRALIGHT,
    FW_LIGHT      = 300,
    FW_NORMAL     = 400,
    FW_REGULAR    = FW_NORMAL,
    FW_MEDIUM     = 500,
    FW_SEMIBOLD   = 600,
    FW_DEMIBOLD   = FW_SEMIBOLD,
    FW_BOLD       = 700,
    FW_EXTRABOLD  = 800,
    FW_ULTRABOLD  = FW_EXTRABOLD,
    FW_HEAVY      = 900,
    FW_BLACK      = FW_HEAVY;

// LOGFONT.lfCharSet
enum : DWORD {
    ANSI_CHARSET        = 0,
    DEFAULT_CHARSET     = 1,
    SYMBOL_CHARSET      = 2,
    MAC_CHARSET         = 77,
    SHIFTJIS_CHARSET    = 128,
    HANGEUL_CHARSET     = 129,
    HANGUL_CHARSET      = 129,
    JOHAB_CHARSET       = 130,
    GB2312_CHARSET      = 134,
    CHINESEBIG5_CHARSET = 136,
    GREEK_CHARSET       = 161,
    TURKISH_CHARSET     = 162,
    VIETNAMESE_CHARSET  = 163,
    HEBREW_CHARSET      = 177,
    ARABIC_CHARSET      = 178,
    BALTIC_CHARSET      = 186,
    RUSSIAN_CHARSET     = 204,
    THAI_CHARSET        = 222,
    EASTEUROPE_CHARSET  = 238,
    OEM_CHARSET         = 255
}

// LOGFONT.lfOutPrecision
enum : BYTE {
    OUT_DEFAULT_PRECIS = 0,
    OUT_STRING_PRECIS,
    OUT_CHARACTER_PRECIS,
    OUT_STROKE_PRECIS,
    OUT_TT_PRECIS,
    OUT_DEVICE_PRECIS,
    OUT_RASTER_PRECIS,
    OUT_TT_ONLY_PRECIS,
    OUT_OUTLINE_PRECIS,
    OUT_SCREEN_OUTLINE_PRECIS,
    OUT_PS_ONLY_PRECIS, // 10
}

// LOGFONT.lfClipPrecision
enum : BYTE  {
    CLIP_DEFAULT_PRECIS   = 0,
    CLIP_CHARACTER_PRECIS = 1,
    CLIP_STROKE_PRECIS    = 2,
    CLIP_MASK             = 15,
    CLIP_LH_ANGLES        = 16,
    CLIP_TT_ALWAYS        = 32,
    CLIP_DFA_DISABLE      = 64,
    CLIP_EMBEDDED         = 128
}

// LOGFONT.lfQuality
enum : BYTE {
    DEFAULT_QUALITY = 0,
    DRAFT_QUALITY,
    PROOF_QUALITY,
    NONANTIALIASED_QUALITY,
    ANTIALIASED_QUALITY
}

// LOGFONT.lfPitchAndFamily

enum BYTE
    DEFAULT_PITCH  = 0,
    FIXED_PITCH    = 1,
    VARIABLE_PITCH = 2,
    MONO_FONT      = 8,
    FF_DONTCARE    = 0,
    FF_ROMAN       = 16,
    FF_SWISS       = 32,
    FF_SCRIPT      = 64,
    FF_MODERN      = 48,
    FF_DECORATIVE  = 80;

// ----
// Enums for the PANOSE struct

enum PANOSE_COUNT=10;

enum {
    PAN_FAMILYTYPE_INDEX = 0,
    PAN_SERIFSTYLE_INDEX,
    PAN_WEIGHT_INDEX,
    PAN_PROPORTION_INDEX,
    PAN_CONTRAST_INDEX,
    PAN_STROKEVARIATION_INDEX,
    PAN_ARMSTYLE_INDEX,
    PAN_LETTERFORM_INDEX,
    PAN_MIDLINE_INDEX,
    PAN_XHEIGHT_INDEX
}

enum PAN_CULTURE_LATIN=0;

// NOTE: the first two values (PAN_ANY and PAN_NO_FIT) apply to all these enums!
enum : BYTE {
    PAN_ANY    = 0,
    PAN_NO_FIT = 1,
}

enum : BYTE {
    PAN_FAMILY_TEXT_DISPLAY = 2,
    PAN_FAMILY_SCRIPT,
    PAN_FAMILY_DECORATIVE,
    PAN_FAMILY_PICTORIAL
}
enum : BYTE {
    PAN_SERIF_COVE = 2,
    PAN_SERIF_OBTUSE_COVE,
    PAN_SERIF_SQUARE_COVE,
    PAN_SERIF_OBTUSE_SQUARE_COVE,
    PAN_SERIF_SQUARE,
    PAN_SERIF_THIN,
    PAN_SERIF_BONE,
    PAN_SERIF_EXAGGERATED,
    PAN_SERIF_TRIANGLE,
    PAN_SERIF_NORMAL_SANS,
    PAN_SERIF_OBTUSE_SANS,
    PAN_SERIF_PERP_SANS,
    PAN_SERIF_FLARED,
    PAN_SERIF_ROUNDED
}

enum : BYTE {
    PAN_WEIGHT_VERY_LIGHT = 2,
    PAN_WEIGHT_LIGHT,
    PAN_WEIGHT_THIN,
    PAN_WEIGHT_BOOK,
    PAN_WEIGHT_MEDIUM,
    PAN_WEIGHT_DEMI,
    PAN_WEIGHT_BOLD,
    PAN_WEIGHT_HEAVY,
    PAN_WEIGHT_BLACK,
    PAN_WEIGHT_NORD
}

enum : BYTE {
    PAN_PROP_OLD_STYLE = 2,
    PAN_PROP_MODERN,
    PAN_PROP_EVEN_WIDTH,
    PAN_PROP_EXPANDED,
    PAN_PROP_CONDENSED,
    PAN_PROP_VERY_EXPANDED,
    PAN_PROP_VERY_CONDENSED,
    PAN_PROP_MONOSPACED
}

enum : BYTE {
    PAN_CONTRAST_NONE = 2,
    PAN_CONTRAST_VERY_LOW,
    PAN_CONTRAST_LOW,
    PAN_CONTRAST_MEDIUM_LOW,
    PAN_CONTRAST_MEDIUM,
    PAN_CONTRAST_MEDIUM_HIGH,
    PAN_CONTRAST_HIGH,
    PAN_CONTRAST_VERY_HIGH
}

// PANOSE.bStrokeVariation
enum : BYTE {
    PAN_STROKE_GRADUAL_DIAG = 2,
    PAN_STROKE_GRADUAL_TRAN,
    PAN_STROKE_GRADUAL_VERT,
    PAN_STROKE_GRADUAL_HORZ,
    PAN_STROKE_RAPID_VERT,
    PAN_STROKE_RAPID_HORZ,
    PAN_STROKE_INSTANT_VERT
}

// PANOSE.bArmStyle
enum : BYTE {
    PAN_STRAIGHT_ARMS_HORZ = 2,
    PAN_STRAIGHT_ARMS_WEDGE,
    PAN_STRAIGHT_ARMS_VERT,
    PAN_STRAIGHT_ARMS_SINGLE_SERIF,
    PAN_STRAIGHT_ARMS_DOUBLE_SERIF,
    PAN_BENT_ARMS_HORZ,
    PAN_BENT_ARMS_WEDGE,
    PAN_BENT_ARMS_VERT,
    PAN_BENT_ARMS_SINGLE_SERIF,
    PAN_BENT_ARMS_DOUBLE_SERIF
}

// PANOSE.bLetterForm
enum : BYTE {
    PAN_LETT_NORMAL_CONTACT = 2,
    PAN_LETT_NORMAL_WEIGHTED,
    PAN_LETT_NORMAL_BOXED,
    PAN_LETT_NORMAL_FLATTENED,
    PAN_LETT_NORMAL_ROUNDED,
    PAN_LETT_NORMAL_OFF_CENTER,
    PAN_LETT_NORMAL_SQUARE,
    PAN_LETT_OBLIQUE_CONTACT,
    PAN_LETT_OBLIQUE_WEIGHTED,
    PAN_LETT_OBLIQUE_BOXED,
    PAN_LETT_OBLIQUE_FLATTENED,
    PAN_LETT_OBLIQUE_ROUNDED,
    PAN_LETT_OBLIQUE_OFF_CENTER,
    PAN_LETT_OBLIQUE_SQUARE
}

// PANOSE.bMidLine
enum : BYTE {
    PAN_MIDLINE_STANDARD_TRIMMED = 2,
    PAN_MIDLINE_STANDARD_POINTED,
    PAN_MIDLINE_STANDARD_SERIFED,
    PAN_MIDLINE_HIGH_TRIMMED,
    PAN_MIDLINE_HIGH_POINTED,
    PAN_MIDLINE_HIGH_SERIFED,
    PAN_MIDLINE_CONSTANT_TRIMMED,
    PAN_MIDLINE_CONSTANT_POINTED,
    PAN_MIDLINE_CONSTANT_SERIFED,
    PAN_MIDLINE_LOW_TRIMMED,
    PAN_MIDLINE_LOW_POINTED,
    PAN_MIDLINE_LOW_SERIFED
}

// PANOSE.bXHeight
enum : BYTE {
    PAN_XHEIGHT_CONSTANT_SMALL = 2,
    PAN_XHEIGHT_CONSTANT_STD,
    PAN_XHEIGHT_CONSTANT_LARGE,
    PAN_XHEIGHT_DUCKING_SMALL,
    PAN_XHEIGHT_DUCKING_STD,
    PAN_XHEIGHT_DUCKING_LARGE
}

// ----
// ???
enum FS_LATIN1      = 0x00000001;
enum FS_LATIN2      = 0x00000002;
enum FS_CYRILLIC    = 0x00000004;
enum FS_GREEK       = 0x00000008;
enum FS_TURKISH     = 0x00000010;
enum FS_HEBREW      = 0x00000020;
enum FS_ARABIC      = 0x00000040;
enum FS_BALTIC      = 0x00000080;
enum FS_VIETNAMESE  = 0x00000100;
enum FS_THAI        = 0x00010000;
enum FS_JISJAPAN    = 0x00020000;
enum FS_CHINESESIMP = 0x00040000;
enum FS_WANSUNG     = 0x00080000;
enum FS_CHINESETRAD = 0x00100000;
enum FS_JOHAB       = 0x00200000;
enum FS_SYMBOL      = 0x80000000;

// ----
// Poly Fill Mode
enum : int {
    ALTERNATE = 1,
    WINDING = 2
}
enum int POLYFILL_LAST = WINDING;

//---
// LOGBRUSH
enum : LONG {
    HS_HORIZONTAL = 0,
    HS_VERTICAL,
    HS_FDIAGONAL,
    HS_BDIAGONAL,
    HS_CROSS,
    HS_DIAGCROSS
}

//LOGBRUSH.lbStyle
enum : UINT {
    BS_SOLID = 0,
    BS_NULL  = 1,
    BS_HOLLOW = BS_NULL,
    BS_HATCHED,
    BS_PATTERN,
    BS_INDEXED,
    BS_DIBPATTERN,
    BS_DIBPATTERNPT,
    BS_PATTERN8X8,
    BS_DIBPATTERN8X8,
    BS_MONOPATTERN,
}
//-----
// EXTLOGPEN, ExtCreatePen()

// EXTLOGPEN.elpPenStyle
enum : DWORD {
    PS_SOLID       = 0,
    PS_DASH        = 1,
    PS_DOT         = 2,
    PS_DASHDOT     = 3,
    PS_DASHDOTDOT  = 4,
    PS_NULL        = 5,
    PS_INSIDEFRAME = 6,
    PS_USERSTYLE   = 7,
    PS_ALTERNATE   = 8,
    PS_STYLE_MASK  = 15,
}

enum : DWORD {
    PS_COSMETIC      = 0x00000000,
    PS_GEOMETRIC     = 0x00010000,
    PS_TYPE_MASK     = 0x000F0000,
}
enum : DWORD {
    PS_ENDCAP_ROUND  = 0x00000000,
    PS_ENDCAP_SQUARE = 0x00000100,
    PS_ENDCAP_FLAT   = 0x00000200,
    PS_ENDCAP_MASK   = 0x00000F00,
}
enum : DWORD {
    PS_JOIN_ROUND    = 0x00000000,
    PS_JOIN_BEVEL    = 0x00001000,
    PS_JOIN_MITER    = 0x00002000,
    PS_JOIN_MASK     = 0x0000F000,
}

// ---
// DeviceCapabilities()

enum : WORD {
    DC_FIELDS = 1,
    DC_PAPERS,
    DC_PAPERSIZE,
    DC_MINEXTENT,
    DC_MAXEXTENT,
    DC_BINS,
    DC_DUPLEX,
    DC_SIZE,
    DC_EXTRA,
    DC_VERSION,
    DC_DRIVER,
    DC_BINNAMES,
    DC_ENUMRESOLUTIONS,
    DC_FILEDEPENDENCIES,
    DC_TRUETYPE,
    DC_PAPERNAMES,
    DC_ORIENTATION,
    DC_COPIES,
    DC_BINADJUST,
    DC_EMF_COMPLIANT,
    DC_DATATYPE_PRODUCED,
    DC_COLLATE,
    DC_MANUFACTURER,
    DC_MODEL,
}

static if (_WIN32_WINNT >= 0x500) {
    enum {
        DC_PERSONALITY = 25,
        DC_PRINTRATE = 26,
        DC_PRINTRATEUNIT = 27,
        DC_PRINTERMEM = 28,
        DC_MEDIAREADY = 29,
        DC_STAPLE = 30,
        DC_PRINTRATEPPM = 31,
        DC_COLORDEVICE = 32,
        DC_NUP = 33,
        DC_MEDIATYPENAMES = 34,
        DC_MEDIATYPES = 35,
    }
    enum {
        PRINTRATEUNIT_PPM = 1,
        PRINTRATEUNIT_CPS = 2,
        PRINTRATEUNIT_LPM = 3,
        PRINTRATEUNIT_IPM = 4,
    }
}


// return from DC_TRUETYPE
enum DWORD
    DCTT_BITMAP           = 1,
    DCTT_DOWNLOAD         = 2,
    DCTT_SUBDEV           = 4,
    DCTT_DOWNLOAD_OUTLINE = 8;

// return from DC_BINADJUST
enum : DWORD {
    DCBA_FACEUPNONE     = 0x0000,
    DCBA_FACEUPCENTER   = 0x0001,
    DCBA_FACEUPLEFT     = 0x0002,
    DCBA_FACEUPRIGHT    = 0x0003,
    DCBA_FACEDOWNNONE   = 0x0100,
    DCBA_FACEDOWNCENTER = 0x0101,
    DCBA_FACEDOWNLEFT   = 0x0102,
    DCBA_FACEDOWNRIGHT  = 0x0103,
}
//---

enum FLOODFILLBORDER  = 0;
enum FLOODFILLSURFACE = 1;

// ExtTextOut()
enum UINT
    ETO_OPAQUE         = 0x0002,
    ETO_CLIPPED        = 0x0004,
    ETO_GLYPH_INDEX    = 0x0010,
    ETO_RTLREADING     = 0x0080,
    ETO_NUMERICSLOCAL  = 0x0400,
    ETO_NUMERICSLATIN  = 0x0800,
    ETO_IGNORELANGUAGE = 0x1000;
static if (_WIN32_WINNT >= 0x500) {
enum UINT
        ETO_PDY = 0x2000;
}

// GdiComment()
enum {
    GDICOMMENT_BEGINGROUP       = 0x00000002,
    GDICOMMENT_ENDGROUP         = 0x00000003,
    GDICOMMENT_UNICODE_STRING   = 0x00000040,
    GDICOMMENT_UNICODE_END      = 0x00000080,
    GDICOMMENT_MULTIFORMATS     = 0x40000004,
    GDICOMMENT_IDENTIFIER       = 0x43494447,
    GDICOMMENT_WINDOWS_METAFILE = 0x80000001,
}

// Get/SetArcDirection()
enum : int {
    AD_COUNTERCLOCKWISE = 1,
    AD_CLOCKWISE        = 2
}

enum RDH_RECTANGLES = 1;

// GCPRESULTS.lpClass
enum {
    GCPCLASS_LATIN  = 1,
    GCPCLASS_HEBREW = 2,
    GCPCLASS_ARABIC = 2,
    GCPCLASS_NEUTRAL,
    GCPCLASS_LOCALNUMBER,
    GCPCLASS_LATINNUMBER,
    GCPCLASS_LATINNUMERICTERMINATOR,
    GCPCLASS_LATINNUMERICSEPARATOR,
    GCPCLASS_NUMERICSEPARATOR, // = 8,
    GCPCLASS_POSTBOUNDRTL = 16,
    GCPCLASS_POSTBOUNDLTR = 32,
    GCPCLASS_PREBOUNDRTL  = 64,
    GCPCLASS_PREBOUNDLTR  = 128,
    GCPGLYPH_LINKAFTER    = 0x4000,
    GCPGLYPH_LINKBEFORE   = 0x8000
}

// GetBoundsRect(), SetBoundsRect()
enum UINT
    DCB_RESET      = 1,
    DCB_ACCUMULATE = 2,
    DCB_SET        = DCB_RESET | DCB_ACCUMULATE,
    DCB_ENABLE     = 4,
    DCB_DISABLE    = 8,
    DCB_DIRTY      = DCB_ACCUMULATE;

//---
// GetObjectType()
enum : DWORD {
    OBJ_PEN = 1,
    OBJ_BRUSH,
    OBJ_DC,
    OBJ_METADC,
    OBJ_PAL,
    OBJ_FONT,
    OBJ_BITMAP,
    OBJ_REGION,
    OBJ_METAFILE,
    OBJ_MEMDC,
    OBJ_EXTPEN,
    OBJ_ENHMETADC,
    OBJ_ENHMETAFILE,
    OBJ_COLORSPACE,
}

//---------------------
// Capabilities for GetDeviceCaps(dc, xxx)

enum : int {
    DRIVERVERSION   = 0,
    TECHNOLOGY      = 2,
    HORZSIZE        = 4,
    VERTSIZE        = 6,
    HORZRES         = 8,
    VERTRES         = 10,
    BITSPIXEL       = 12,
    PLANES          = 14,
    NUMBRUSHES      = 16,
    NUMPENS         = 18,
    NUMMARKERS      = 20,
    NUMFONTS        = 22,
    NUMCOLORS       = 24,
    PDEVICESIZE     = 26,
    CURVECAPS       = 28,
    LINECAPS        = 30,
    POLYGONALCAPS   = 32,
    TEXTCAPS        = 34,
    CLIPCAPS        = 36,
    RASTERCAPS      = 38,
    ASPECTX         = 40,
    ASPECTY         = 42,
    ASPECTXY        = 44,
    LOGPIXELSX      = 88,
    LOGPIXELSY      = 90,
    SIZEPALETTE     = 104,
    NUMRESERVED     = 106,
    COLORRES        = 108,
    PHYSICALWIDTH   = 110,
    PHYSICALHEIGHT  = 111,
    PHYSICALOFFSETX = 112,
    PHYSICALOFFSETY = 113,
    SCALINGFACTORX  = 114,
    SCALINGFACTORY  = 115,
    VREFRESH        = 116,
    DESKTOPVERTRES  = 117,
    DESKTOPHORZRES  = 118,
    BLTALIGNMENT    = 119
}
static if (_WIN32_WINNT >= 0x500) {
enum : int {
    SHADEBLENDCAPS  = 120,
    COLORMGMTCAPS   = 121,
}
}

// Return values for GetDeviceCaps(dc, TECHNOLOGY)
enum : int {
    DT_PLOTTER = 0,
    DT_RASDISPLAY,
    DT_RASPRINTER,
    DT_RASCAMERA,
    DT_CHARSTREAM,
    DT_METAFILE,
    DT_DISPFILE // = 6
}

// Return values for GetDeviceCaps(dc, RASTERCAPS)
enum int
    RC_NONE         = 0,
    RC_BITBLT       = 1,
    RC_BANDING      = 2,
    RC_SCALING      = 4,
    RC_BITMAP64     = 8,
    RC_GDI20_OUTPUT = 16,
    RC_GDI20_STATE  = 32,
    RC_SAVEBITMAP   = 64,
    RC_DI_BITMAP    = 128,
    RC_PALETTE      = 256,
    RC_DIBTODEV     = 512,
    RC_BIGFONT      = 1024,
    RC_STRETCHBLT   = 2048,
    RC_FLOODFILL    = 4096,
    RC_STRETCHDIB   = 8192,
    RC_OP_DX_OUTPUT = 0x4000,
    RC_DEVBITS      = 0x8000;

static if (_WIN32_WINNT >= 0x500) {
    /* Shading and blending caps */
enum SB_NONE = 0x00000000;
enum SB_CONST_ALPHA = 0x00000001;
enum SB_PIXEL_ALPHA = 0x00000002;
enum SB_PREMULT_ALPHA = 0x00000004;
enum SB_GRAD_RECT = 0x00000010;
enum SB_GRAD_TRI = 0x00000020;
    /* Color Management caps */
enum CM_NONE = 0x00000000;
enum CM_DEVICE_ICM = 0x00000001;
enum CM_GAMMA_RAMP = 0x00000002;
enum CM_CMYK_COLOR = 0x00000004;
}

// Return values for GetDeviceCaps(dc, CURVECAPS)
enum int
    CC_NONE       = 0,
    CC_CIRCLES    = 1,
    CC_PIE        = 2,
    CC_CHORD      = 4,
    CC_ELLIPSES   = 8,
    CC_WIDE       = 16,
    CC_STYLED     = 32,
    CC_WIDESTYLED = 64,
    CC_INTERIORS  = 128,
    CC_ROUNDRECT  = 256;

// Return values for GetDeviceCaps(dc, LINECAPS)

enum int
    LC_NONE       = 0,
    LC_POLYLINE   = 2,
    LC_MARKER     = 4,
    LC_POLYMARKER = 8,
    LC_WIDE       = 16,
    LC_STYLED     = 32,
    LC_WIDESTYLED = 64,
    LC_INTERIORS  = 128;

// Return values for GetDeviceCaps(dc, POLYGONALCAPS)

enum int
    PC_NONE        = 0,
    PC_POLYGON     = 1,
    PC_RECTANGLE   = 2,
    PC_WINDPOLYGON = 4,
    PC_TRAPEZOID   = 4,
    PC_SCANLINE    = 8,
    PC_WIDE        = 16,
    PC_STYLED      = 32,
    PC_WIDESTYLED  = 64,
    PC_INTERIORS   = 128,
    PC_POLYPOLYGON = 256,
    PC_PATHS       = 512;

/* Clipping Capabilities */
enum int CP_NONE = 0,
    CP_RECTANGLE = 1,
    CP_REGION = 2;

// Return values for GetDeviceCaps(dc, TEXTCAPS)

enum int
    TC_OP_CHARACTER = 1,
    TC_OP_STROKE    = 2,
    TC_CP_STROKE    = 4,
    TC_CR_90        = 8,
    TC_CR_ANY       = 16,
    TC_SF_X_YINDEP  = 32,
    TC_SA_DOUBLE    = 64,
    TC_SA_INTEGER   = 128,
    TC_SA_CONTIN    = 256,
    TC_EA_DOUBLE    = 512,
    TC_IA_ABLE      = 1024,
    TC_UA_ABLE      = 2048,
    TC_SO_ABLE      = 4096,
    TC_RA_ABLE      = 8192,
    TC_VA_ABLE      = 16384,
    TC_RESERVED     = 32768,
    TC_SCROLLBLT    = 65536;

// End GetDeviceCaps
//---------------------
// GetCharacterPlacement(), and GetFontLanguageInfo()
enum DWORD
    GCP_DBCS            = 1,
    GCP_REORDER         = 2,
    GCP_USEKERNING      = 8,
    GCP_GLYPHSHAPE      = 16,
    GCP_LIGATE          = 32,
    GCP_DIACRITIC       = 256,
    GCP_KASHIDA         = 1024,
    GCP_ERROR           = 0x8000,
    GCP_JUSTIFY         = 0x10000,
    GCP_CLASSIN         = 0x80000,
    GCP_MAXEXTENT       = 0x100000,
    GCP_JUSTIFYIN       = 0x200000,
    GCP_DISPLAYZWG      = 0x400000,
    GCP_SYMSWAPOFF      = 0x800000,
    GCP_NUMERICOVERRIDE = 0x1000000,
    GCP_NEUTRALOVERRIDE = 0x2000000,
    GCP_NUMERICSLATIN   = 0x4000000,
    GCP_NUMERICSLOCAL   = 0x8000000,
    // Only for GetFontLanguageInfo()
    FLI_GLYPHS          = 0x40000,
    FLI_MASK            = 0x103b;

// GetGlyphOutline()
enum : UINT {
    GGO_METRICS      = 0,
    GGO_BITMAP       = 1,
    GGO_NATIVE       = 2,
    GGO_BEZIER       = 3,
    GGO_GRAY2_BITMAP = 4,
    GGO_GRAY4_BITMAP = 5,
    GGO_GRAY8_BITMAP = 6,
    GGO_GLYPH_INDEX  = 128,
    GGO_UNHINTED     = 256
}

enum : int {
    GM_COMPATIBLE = 1,
    GM_ADVANCED
}
enum GM_LAST = GM_ADVANCED;

enum : int {
    MM_TEXT = 1,
    MM_LOMETRIC,
    MM_HIMETRIC,
    MM_LOENGLISH,
    MM_HIENGLISH,
    MM_TWIPS,
    MM_ISOTROPIC,
    MM_ANISOTROPIC,
}

enum int
    MM_MIN = MM_TEXT,
    MM_MAX = MM_ANISOTROPIC,
    MM_MAX_FIXEDSCALE = MM_TWIPS;

enum ABSOLUTE = 1;
enum RELATIVE = 2;

enum : BYTE {
    PC_RESERVED   = 1,
    PC_EXPLICIT   = 2,
    PC_NOCOLLAPSE = 4
}

/* FIXME: move to core.sys.windows.commctrl ? */
// ImageList
enum COLORREF
    CLR_NONE    = 0xffffffff,
    CLR_INVALID = CLR_NONE,
    CLR_DEFAULT = 0xff000000;

// RASTERIZER_STATUS.wFlags
enum short
    TT_AVAILABLE = 1,
    TT_ENABLED   = 2;

// GetStockObject()
enum : int {
    WHITE_BRUSH = 0,
    LTGRAY_BRUSH,
    GRAY_BRUSH,
    DKGRAY_BRUSH,
    BLACK_BRUSH,
    HOLLOW_BRUSH, // = 5
    NULL_BRUSH = HOLLOW_BRUSH,
    WHITE_PEN = 6,
    BLACK_PEN,
    NULL_PEN, // = 8
    OEM_FIXED_FONT = 10,
    ANSI_FIXED_FONT,
    ANSI_VAR_FONT,
    SYSTEM_FONT,
    DEVICE_DEFAULT_FONT,
    DEFAULT_PALETTE,
    SYSTEM_FIXED_FONT,
    DEFAULT_GUI_FONT = SYSTEM_FIXED_FONT + 1,
}
static if (_WIN32_WINNT >= 0x500) {
    enum : int {
        DC_BRUSH = DEFAULT_GUI_FONT + 1,
        DC_PEN,
    }
}

static if (_WIN32_WINNT >= 0x500) {
enum STOCK_LAST = DC_PEN;
} else {
enum STOCK_LAST = DEFAULT_GUI_FONT;
}

// Get/SetSystemPaletteUse()
enum : UINT {
    SYSPAL_ERROR    = 0,
    SYSPAL_STATIC   = 1,
    SYSPAL_NOSTATIC = 2,
    SYSPAL_NOSTATIC256 = 3,
}

// SetTextAlign()
enum UINT
    TA_TOP        = 0,
    TA_CENTER     = 6,
    TA_BOTTOM     = 8,
    TA_BASELINE   = 24,
    TA_LEFT       = 0,
    TA_RIGHT      = 2,
    TA_RTLREADING = 256,
    TA_NOUPDATECP = 0,
    TA_UPDATECP   = 1,
    TA_MASK       = TA_BASELINE+TA_CENTER+TA_UPDATECP+TA_RTLREADING,
    VTA_BASELINE  = TA_BASELINE,
    VTA_CENTER    = TA_CENTER,
    VTA_LEFT      = TA_BOTTOM,
    VTA_RIGHT     = TA_TOP,
    VTA_BOTTOM    = TA_RIGHT,
    VTA_TOP       = TA_LEFT;

// EMRMODIFYWORLDTRANSFORM.iMode
enum : DWORD {
    MWT_IDENTITY = 1,
    MWT_LEFTMULTIPLY,
    MWT_RIGHTMULTIPLY
}

enum DWORD
    MWT_MIN = MWT_IDENTITY,
    MWT_MAX = MWT_RIGHTMULTIPLY;

enum {
    TRANSPARENT = 1,
    OPAQUE      = 2
}

// Get/SetStretchMode()
enum : int {
    BLACKONWHITE = 1,
    WHITEONBLACK = 2,
    COLORONCOLOR = 3,
    HALFTONE     = 4,

    STRETCH_ANDSCANS    = 1,
    STRETCH_ORSCANS     = 2,
    STRETCH_DELETESCANS = 3,
    STRETCH_HALFTONE    = 4,

    MAXSTRETCHBLTMODE   = 4
}

// TranslateCharsetInfo()
enum : DWORD {
    TCI_SRCCHARSET  = 1,
    TCI_SRCCODEPAGE = 2,
    TCI_SRCFONTSIG  = 3,
    TCI_SRCLOCALE   = 0x1000,
}

// SetICMMode()
enum : int {
    ICM_OFF   = 1,
    ICM_ON    = 2,
    ICM_QUERY = 3,
    ICM_DONE_OUTSIDEDC = 4,
}

// ----
// Escape() Spooler Error Codes
enum : int {
    SP_NOTREPORTED = 0x4000,
    SP_ERROR       = -1,
    SP_APPABORT    = -2,
    SP_USERABORT   = -3,
    SP_OUTOFDISK   = -4,
    SP_OUTOFMEMORY = -5
}

// Escape(), ExtEscape()
// Most of the following are deprecated (Win16 only)
enum : int {
    NEWFRAME      = 1,
    ABORTDOC      = 2,
    NEXTBAND      = 3,
    SETCOLORTABLE = 4,
    GETCOLORTABLE = 5,
    FLUSHOUTPUT   = 6,
    DRAFTMODE     = 7,
    QUERYESCSUPPORT = 8,
    SETABORTPROC  = 9,
    STARTDOC      = 10,
    ENDDOC        = 11,
    GETPHYSPAGESIZE   = 12,
    GETPRINTINGOFFSET = 13,
    GETSCALINGFACTOR  = 14,
    MFCOMMENT         = 15,
    GETPENWIDTH       = 16,
    SETCOPYCOUNT      = 17,
    SELECTPAPERSOURCE = 18,
    DEVICEDATA        = 19,
    PASSTHROUGH       = 19,
    GETTECHNOLOGY     = 20,
    SETLINECAP = 21,
    SETLINEJOIN = 22,
    SETMITERLIMIT = 23,
    BANDINFO = 24,
    DRAWPATTERNRECT = 25,
    GETVECTORPENSIZE = 26,
    GETVECTORBRUSHSIZE = 27,
    ENABLEDUPLEX = 28,
    GETSETPAPERBINS = 29,
    GETSETPRINTORIENT = 30,
    ENUMPAPERBINS = 31,
    SETDIBSCALING = 32,
    EPSPRINTING = 33,
    ENUMPAPERMETRICS = 34,
    GETSETPAPERMETRICS = 35,
    POSTSCRIPT_DATA = 37,
    POSTSCRIPT_IGNORE = 38,
    MOUSETRAILS = 39,
    GETDEVICEUNITS = 42,
    GETEXTENDEDTEXTMETRICS = 256,
    GETEXTENTTABLE = 257,
    GETPAIRKERNTABLE = 258,
    GETTRACKKERNTABLE = 259,
    EXTTEXTOUT = 512,
    GETFACENAME = 513,
    DOWNLOADFACE = 514,
    ENABLERELATIVEWIDTHS = 768,
    ENABLEPAIRKERNING = 769,
    SETKERNTRACK = 770,
    SETALLJUSTVALUES = 771,
    SETCHARSET = 772,
    STRETCHBLT = 2048,
    METAFILE_DRIVER = 2049,
    GETSETSCREENPARAMS = 3072,
    QUERYDIBSUPPORT = 3073,
    BEGIN_PATH = 4096,
    CLIP_TO_PATH = 4097,
    END_PATH = 4098,
    EXT_DEVICE_CAPS = 4099,
    RESTORE_CTM = 4100,
    SAVE_CTM = 4101,
    SET_ARC_DIRECTION = 4102,
    SET_BACKGROUND_COLOR = 4103,
    SET_POLY_MODE = 4104,
    SET_SCREEN_ANGLE = 4105,
    SET_SPREAD = 4106,
    TRANSFORM_CTM = 4107,
    SET_CLIP_BOX = 4108,
    SET_BOUNDS = 4109,
    SET_MIRROR_MODE = 4110,
    OPENCHANNEL = 4110,
    DOWNLOADHEADER = 4111,
    CLOSECHANNEL = 4112,
    POSTSCRIPT_PASSTHROUGH  = 4115,
    ENCAPSULATED_POSTSCRIPT = 4116,
    POSTSCRIPT_IDENTIFY = 4117,
    POSTSCRIPT_INJECTION = 4118,
    CHECKJPEGFORMAT = 4119,
    CHECKPNGFORMAT = 4120,
    GET_PS_FEATURESETTING = 4121,
    SPCLPASSTHROUGH2 = 4568,
}

enum : int {
    PSIDENT_GDICENTRIC = 0,
    PSIDENT_PSCENTRIC = 1,
}

/*
 * Header structure for the input buffer to POSTSCRIPT_INJECTION escape
 */
struct PSINJECTDATA {
    DWORD DataBytes;
    WORD  InjectionPoint;
    WORD  PageNumber;
}
alias PSINJECTDATA* PPSINJECTDATA;

/* Constants for PSINJECTDATA.InjectionPoint field */
enum {
    PSINJECT_BEGINSTREAM = 1,
    PSINJECT_PSADOBE = 2,
    PSINJECT_PAGESATEND = 3,
    PSINJECT_PAGES = 4,
    PSINJECT_DOCNEEDEDRES = 5,
    PSINJECT_DOCSUPPLIEDRES = 6,
    PSINJECT_PAGEORDER = 7,
    PSINJECT_ORIENTATION = 8,
    PSINJECT_BOUNDINGBOX = 9,
    PSINJECT_DOCUMENTPROCESSCOLORS = 10,
    PSINJECT_COMMENTS = 11,
    PSINJECT_BEGINDEFAULTS = 12,
    PSINJECT_ENDDEFAULTS = 13,
    PSINJECT_BEGINPROLOG = 14,
    PSINJECT_ENDPROLOG = 15,
    PSINJECT_BEGINSETUP = 16,
    PSINJECT_ENDSETUP = 17,
    PSINJECT_TRAILER = 18,
    PSINJECT_EOF = 19,
    PSINJECT_ENDSTREAM = 20,
    PSINJECT_DOCUMENTPROCESSCOLORSATEND = 21,

    PSINJECT_PAGENUMBER = 100,
    PSINJECT_BEGINPAGESETUP = 101,
    PSINJECT_ENDPAGESETUP = 102,
    PSINJECT_PAGETRAILER = 103,
    PSINJECT_PLATECOLOR = 104,
    PSINJECT_SHOWPAGE = 105,
    PSINJECT_PAGEBBOX = 106,
    PSINJECT_ENDPAGECOMMENTS = 107,

    PSINJECT_VMSAVE = 200,
    PSINJECT_VMRESTORE = 201,
}

/* Parameter for GET_PS_FEATURESETTING escape */
enum {
    FEATURESETTING_NUP = 0,
    FEATURESETTING_OUTPUT = 1,
    FEATURESETTING_PSLEVEL = 2,
    FEATURESETTING_CUSTPAPER = 3,
    FEATURESETTING_MIRROR = 4,
    FEATURESETTING_NEGATIVE = 5,
    FEATURESETTING_PROTOCOL = 6,
}

enum {
    FEATURESETTING_PRIVATE_BEGIN = 0x1000,
    FEATURESETTING_PRIVATE_END = 0x1FFF,
}

/* Value returned for FEATURESETTING_PROTOCOL */
enum PSPROTOCOL_ASCII = 0;
enum PSPROTOCOL_BCP = 1;
enum PSPROTOCOL_TBCP = 2;
enum PSPROTOCOL_BINARY = 3;

// ----

enum WPARAM PR_JOBSTATUS = 0;

// ???
enum QDI_SETDIBITS   = 1;
enum QDI_GETDIBITS   = 2;
enum QDI_DIBTOSCREEN = 4;
enum QDI_STRETCHDIB  = 8;

enum ASPECT_FILTERING = 1;

// LOGCOLORSPACE.lcsCSType
enum : LCSCSTYPE {
    LCS_CALIBRATED_RGB = 0,
    LCS_DEVICE_RGB,
    LCS_DEVICE_CMYK
} /* What this for? */

// LOGCOLORSPACE.lcsIntent
enum : LCSGAMUTMATCH {
    LCS_GM_BUSINESS         = 1,
    LCS_GM_GRAPHICS         = 2,
    LCS_GM_IMAGES           = 4,
    LCS_GM_ABS_COLORIMETRIC = 8,
}

enum DWORD
    RASTER_FONTTYPE   = 1,
    DEVICE_FONTTYPE   = 2,
    TRUETYPE_FONTTYPE = 4;

// ---
// DEVMODE struct

// FIXME: Not needed for D (use .length instead)
enum CCHDEVICENAME = 32;
enum CCHFORMNAME   = 32;

// DEVMODE.dmSpecVersion
// current version of specification
enum WORD DM_SPECVERSION = 0x0401;

// DEVMODE.dmOrientation
enum : short {
    DMORIENT_PORTRAIT  = 1,
    DMORIENT_LANDSCAPE = 2
}

// DEVMODE.dmPaperSize
enum : short {
    DMPAPER_LETTER = 1,
    DMPAPER_LETTERSMALL,
    DMPAPER_TABLOID,
    DMPAPER_LEDGER,
    DMPAPER_LEGAL,
    DMPAPER_STATEMENT,
    DMPAPER_EXECUTIVE,
    DMPAPER_A3,
    DMPAPER_A4,
    DMPAPER_A4SMALL,
    DMPAPER_A5,
    DMPAPER_B4,
    DMPAPER_B5,
    DMPAPER_FOLIO,
    DMPAPER_QUARTO,
    DMPAPER_10X14,
    DMPAPER_11X17,
    DMPAPER_NOTE,
    DMPAPER_ENV_9,
    DMPAPER_ENV_10,
    DMPAPER_ENV_11,
    DMPAPER_ENV_12,
    DMPAPER_ENV_14,
    DMPAPER_CSHEET,
    DMPAPER_DSHEET,
    DMPAPER_ESHEET,
    DMPAPER_ENV_DL,
    DMPAPER_ENV_C5,
    DMPAPER_ENV_C3,
    DMPAPER_ENV_C4,
    DMPAPER_ENV_C6,
    DMPAPER_ENV_C65,
    DMPAPER_ENV_B4,
    DMPAPER_ENV_B5,
    DMPAPER_ENV_B6,
    DMPAPER_ENV_ITALY,
    DMPAPER_ENV_MONARCH,
    DMPAPER_ENV_PERSONAL,
    DMPAPER_FANFOLD_US,
    DMPAPER_FANFOLD_STD_GERMAN,
    DMPAPER_FANFOLD_LGL_GERMAN,
    DMPAPER_ISO_B4,
    DMPAPER_JAPANESE_POSTCARD,
    DMPAPER_9X11,
    DMPAPER_10X11,
    DMPAPER_15X11,
    DMPAPER_ENV_INVITE,
    DMPAPER_RESERVED_48,
    DMPAPER_RESERVED_49,
    DMPAPER_LETTER_EXTRA,
    DMPAPER_LEGAL_EXTRA,
    DMPAPER_TABLOID_EXTRA,
    DMPAPER_A4_EXTRA,
    DMPAPER_LETTER_TRANSVERSE,
    DMPAPER_A4_TRANSVERSE,
    DMPAPER_LETTER_EXTRA_TRANSVERSE,
    DMPAPER_A_PLUS,
    DMPAPER_B_PLUS,
    DMPAPER_LETTER_PLUS,
    DMPAPER_A4_PLUS,
    DMPAPER_A5_TRANSVERSE,
    DMPAPER_B5_TRANSVERSE,
    DMPAPER_A3_EXTRA,
    DMPAPER_A5_EXTRA,
    DMPAPER_B5_EXTRA,
    DMPAPER_A2,
    DMPAPER_A3_TRANSVERSE,
    DMPAPER_A3_EXTRA_TRANSVERSE // = 68
}
static if (_WIN32_WINNT >= 0x500) {
    enum : short {
        DMPAPER_DBL_JAPANESE_POSTCARD = 69,
        DMPAPER_A6,
        DMPAPER_JENV_KAKU2,
        DMPAPER_JENV_KAKU3,
        DMPAPER_JENV_CHOU3,
        DMPAPER_JENV_CHOU4,
        DMPAPER_LETTER_ROTATED,
        DMPAPER_A3_ROTATED,
        DMPAPER_A4_ROTATED,
        DMPAPER_A5_ROTATED,
        DMPAPER_B4_JIS_ROTATED,
        DMPAPER_B5_JIS_ROTATED,
        DMPAPER_JAPANESE_POSTCARD_ROTATED,
        DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED,
        DMPAPER_A6_ROTATED,
        DMPAPER_JENV_KAKU2_ROTATED,
        DMPAPER_JENV_KAKU3_ROTATED,
        DMPAPER_JENV_CHOU3_ROTATED,
        DMPAPER_JENV_CHOU4_ROTATED,
        DMPAPER_B6_JIS,
        DMPAPER_B6_JIS_ROTATED,
        DMPAPER_12X11,
        DMPAPER_JENV_YOU4,
        DMPAPER_JENV_YOU4_ROTATED,
        DMPAPER_P16K,
        DMPAPER_P32K,
        DMPAPER_P32KBIG,
        DMPAPER_PENV_1,
        DMPAPER_PENV_2,
        DMPAPER_PENV_3,
        DMPAPER_PENV_4,
        DMPAPER_PENV_5,
        DMPAPER_PENV_6,
        DMPAPER_PENV_7,
        DMPAPER_PENV_8,
        DMPAPER_PENV_9,
        DMPAPER_PENV_10,
        DMPAPER_P16K_ROTATED,
        DMPAPER_P32K_ROTATED,
        DMPAPER_P32KBIG_ROTATED,
        DMPAPER_PENV_1_ROTATED,
        DMPAPER_PENV_2_ROTATED,
        DMPAPER_PENV_3_ROTATED,
        DMPAPER_PENV_4_ROTATED,
        DMPAPER_PENV_5_ROTATED,
        DMPAPER_PENV_6_ROTATED,
        DMPAPER_PENV_7_ROTATED,
        DMPAPER_PENV_8_ROTATED,
        DMPAPER_PENV_9_ROTATED,
        DMPAPER_PENV_10_ROTATED // 118
    }
}

enum short DMPAPER_FIRST = DMPAPER_LETTER;

static if (_WIN32_WINNT >= 0x500) {
enum short DMPAPER_LAST = DMPAPER_PENV_10_ROTATED;
} else {
enum short DMPAPER_LAST = DMPAPER_A3_EXTRA_TRANSVERSE;
}

enum short DMPAPER_USER = 256;


// DEVMODE.dmDefaultSource
enum : short {
    DMBIN_ONLYONE = 1,
    DMBIN_UPPER   = 1,
    DMBIN_LOWER,
    DMBIN_MIDDLE,
    DMBIN_MANUAL,
    DMBIN_ENVELOPE,
    DMBIN_ENVMANUAL,
    DMBIN_AUTO,
    DMBIN_TRACTOR,
    DMBIN_SMALLFMT,
    DMBIN_LARGEFMT,
    DMBIN_LARGECAPACITY, // = 11
    DMBIN_CASSETTE   = 14,
    DMBIN_FORMSOURCE,
}
enum : short {
    DMBIN_FIRST = DMBIN_UPPER,
    DMBIN_LAST = DMBIN_FORMSOURCE,
    DMBIN_USER = 256,
}

// DEVMODE.dmPrintQuality
enum : short {
    DMRES_DRAFT  = -1,
    DMRES_LOW    = -2,
    DMRES_MEDIUM = -3,
    DMRES_HIGH   = -4
}

// DEVMODE.dmColor
enum : short {
    DMCOLOR_MONOCHROME = 1,
    DMCOLOR_COLOR      = 2
}

// DEVMODE.dmDuplex
enum : short {
    DMDUP_SIMPLEX    = 1,
    DMDUP_VERTICAL   = 2,
    DMDUP_HORIZONTAL = 3
}

// DEVMODE.dmTTOption
enum : short {
    DMTT_BITMAP = 1,
    DMTT_DOWNLOAD,
    DMTT_SUBDEV,
    DMTT_DOWNLOAD_OUTLINE
}

// DEVMODE.dmCollate
enum : short {
    DMCOLLATE_FALSE = 0,
    DMCOLLATE_TRUE
}

static if (_WIN32_WINNT >= 0x501) {
    /* DEVMODE dmDisplayOrientation specifiations */
    enum : short {
        DMDO_DEFAULT = 0,
        DMDO_90 = 1,
        DMDO_180 = 2,
        DMDO_270 = 3,
    }

    /* DEVMODE dmDisplayFixedOutput specifiations */
    enum : short {
        DMDFO_DEFAULT = 0,
        DMDFO_STRETCH = 1,
        DMDFO_CENTER = 2,
    }
}


/* FIXME: this flags are deprecated ? */
// DEVMODE.dmDisplayFlags
enum DWORD
    DM_GRAYSCALE  = 1,
    DM_INTERLACED = 2;

enum DWORD
    DMDISPLAYFLAGS_TEXTMODE = 0x00000004;

/* dmNup , multiple logical page per physical page options */
enum DWORD
    DMNUP_SYSTEM = 1,
    DMNUP_ONEUP = 2;

// DEVMODE.dmFields
enum DWORD
    DM_ORIENTATION        = 0x00000001,
    DM_PAPERSIZE          = 0x00000002,
    DM_PAPERLENGTH        = 0x00000004,
    DM_PAPERWIDTH         = 0x00000008,
    DM_SCALE              = 0x00000010;
static if (_WIN32_WINNT >= 0x500) {
enum DWORD
        DM_POSITION       = 0x00000020,
        DM_NUP            = 0x00000040;
}
static if (_WIN32_WINNT >= 0x501) {
enum DWORD
        DM_DISPLAYORIENTATION = 0x00000080;
}
enum DWORD
    DM_COPIES             = 0x00000100,
    DM_DEFAULTSOURCE      = 0x00000200,
    DM_PRINTQUALITY       = 0x00000400,
    DM_COLOR              = 0x00000800,
    DM_DUPLEX             = 0x00001000,
    DM_YRESOLUTION        = 0x00002000,
    DM_TTOPTION           = 0x00004000,
    DM_COLLATE            = 0x00008000,
    DM_FORMNAME           = 0x00010000,
    DM_LOGPIXELS          = 0x00020000,
    DM_BITSPERPEL         = 0x00040000,
    DM_PELSWIDTH          = 0x00080000,
    DM_PELSHEIGHT         = 0x00100000,
    DM_DISPLAYFLAGS       = 0x00200000,
    DM_DISPLAYFREQUENCY   = 0x00400000,
    DM_ICMMETHOD          = 0x00800000,
    DM_ICMINTENT          = 0x01000000,
    DM_MEDIATYPE          = 0x02000000,
    DM_DITHERTYPE         = 0x04000000,
    DM_PANNINGWIDTH       = 0x08000000,
    DM_PANNINGHEIGHT      = 0x10000000;
static if (_WIN32_WINNT >= 0x501) {
enum DWORD
        DM_DISPLAYFIXEDOUTPUT = 0x20000000;
}

// DEVMO