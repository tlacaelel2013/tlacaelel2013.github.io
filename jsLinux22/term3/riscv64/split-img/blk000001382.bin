ype 15>) (? <type 31>, ? <type -19>)
checksum E101E373922A2440510D10765DD27330636BE2AC
v3;
package macho
pkgpath debug/macho
import bytes bytes "bytes"
import zlib compress/zlib "compress/zlib"
import dwarf debug/dwarf "debug/dwarf"
import binary encoding/binary "encoding/binary"
import fmt fmt "fmt"
import io io "io"
import os os "os"
import strconv strconv "strconv"
import strings strings "strings"
init macho debug..z2fmacho..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import zlib compress..z2fzlib..import dwarf debug..z2fdwarf..import binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import path path..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 1 2 1 8 1 11 1 15 1 16 1 18 1 21 2 8 2 11 2 15 2 16 2 18 2 21 3 1 3 2 3 7 3 8 3 9 3 10 3 11 3 12 3 14 3 15 3 16 3 17 3 18 3 19 3 20 3 21 4 1 4 2 4 3 4 6 4 7 4 8 4 9 4 10 4 11 4 12 4 14 4 15 4 16 4 17 4 18 4 19 4 20 4 21 5 6 5 7 5 8 5 9 5 10 5 11 5 12 5 13 5 14 5 15 5 16 5 17 5 18 5 19 5 20 5 21 6 8 6 11 6 14 6 15 6 16 6 17 6 18 6 21 7 8 7 9 7 10 7 11 7 12 7 14 7 15 7 16 7 17 7 18 7 19 7 20 7 21 9 8 9 11 9 15 9 16 9 18 9 19 9 20 11 8 11 15 11 16 11 18 12 8 12 9 12 10 12 11 12 15 12 16 12 18 12 19 12 20 13 8 13 11 13 15 13 16 13 18 13 21 14 8 14 15 14 16 14 17 14 18 14 21 15 8 15 16 17 8 17 15 17 16 18 8 18 15 18 16 19 8 19 15 19 16 19 18 20 8 20 15 20 16 20 18 20 19
types 169 39 105 25 28 28 31 27 33 78 738 32 84 26 291 112 29 29 29 31 27 118 120 122 121 27 30 144 31 31 35 144 31 31 35 28 28 31 28 109 116 132 68 21 432 19 44 18 102 85 20 30 43 18 159 46 254 22 21 21 19 19 18 19 32 90 19 19 976 39 37 84 19 151 56 44 173 19 162 121 19 38 67 22 123 90 120 21 34 19 21 19 144 48 21 252 19 227 45 34 41 113 23 42 108 41 21 537 206 1035 21 228 46 162 21 803 48 154 44 270 21 43 73 21 644 23 23 23 23 24 427 35 36 21 44 122 135 105 41 101 101 247 323 143 50 66 93 22 21 369 97 36 51 32 74 32 95 213 26 233 173 87 204 204 204 102 63 22 122 82
type 1 "Cpu" <type -7>
 func (i <type 1>) String () <type -16>
 func (i <type 1>) GoString () <type -16>
type 2 "Dylib" <type 39>
type 3 "DylibCmd" <type 40>
type 4 "Dysymtab" <type 41>
type 5 "DysymtabCmd" <type 43>
type 6 "FatArch" <type 45>
type 7 "FatArchHeader" <type 47>
type 8 "FatFile" <type 48>
 func (ff <esc:0x9> <type 52>) Close () <type -19>
type 9 "File" <type 53>
 func (f <esc:0x9> <type 46>) Close () <type -19>
 func (f <esc:0x9> <type 46>) .debug/macho.parseSymtab (symdat <type 56>, strtab <esc:0x1> <type 56>, cmddat <type 56>, hdr <esc:0x1> <type 62>, offset <type -4>) (? <type 60>, ? <type -19>)
 func (f <esc:0x9> <type 46>) .debug/macho.pushSection (sh <type 59>, r <type 63>) <type -19>
 func (f <esc:0x32> <type 46>) Segment (name <esc:0x1> <type -16>) <type 65>
 func (f <esc:0x32> <type 46>) Section (name <esc:0x1> <type -16>) <type 59>
 func (f <esc:0x9> <type 46>) DWARF () (? <type 66>, ? <type -19>)
 func (f <esc:0x9> <type 46>) ImportedSymbols () (? <type 125>, ? <type -19>)
 func (f <esc:0x9> <type 46>) ImportedLibraries () (? <type 125>, ? <type -19>)
type 10 "FileHeader" <type 135>
type 11 "FormatError" <type 136>
 func (e <esc:0x2a> <type 44>) Error () <type -16>
type 12 "Load" <type 137>
type 13 "LoadBytes" <type 56>
 func (b <esc:0x12> <type 13>) Raw () ($ret5 <type 56>) <inl:195>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/debug/macho/file.go:42
  { //42
   $ret5 = b //42
   return //42
  } //0
type 14 "LoadCmd" <type -7>
 func (i <type 14>) String () <type -16>
 func (i <type 14>) GoString () <type -16>
type 15 "Nlist32" <type 138>
type 16 "Nlist64" <type 139>
type 17 "Regs386" <type 140>
type 18 "RegsAMD64" <type 141>
type 19 "Reloc" <type 142>
type 20 "RelocTypeARM" <type -11>
 func (r <type 20>) GoString () <type -16>
 func (i <type 20>) String () <type -16>
type 21 "RelocTypeARM64" <type -11>
 func (r <type 21>) GoString () <type -16>
 func (i <type 21>) String () <type -16>
type 22 "RelocTypeGeneric" <type -11>
 func (r <type 22>) GoString () <type -16>
 func (i <type 22>) String () <type -16>
type 23 "RelocTypeX86_64" <type -11>
 func (r <type 23>) GoString () <type -16>
 func (i <type 23>) String () <type -16>
type 24 "Rpath" <type 143>
type 25 "RpathCmd" <type 144>
type 26 "Section" <type 145>
 func (s <esc:0x9> <type 59>) Data () (? <type 56>, ? <type -19>)
 func (s <esc:0x9> <type 59>) Open () <type 150>
type 27 "Section32" <type 156>
type 28 "Section64" <type 158>
type 29 "SectionHeader" <type 159>
type 30 "Segment" <type 160>
 func (s <esc:0x9> <type 65>) Data () (? <type 56>, ? <type -19>)
 func (s <esc:0x9> <type 65>) Open () <type 150>
type 31 "Segment32" <type 161>
type 32 "Segment64" <type 162>
type 33 "SegmentHeader" <type 163>
type 34 "Symbol" <type 164>
type 35 "Symtab" <type 165>
type 36 "SymtabCmd" <type 167>
type 37 "Thread" <type 168>
type 38 "Type" <type -7>
 func (t <type 38>) String () <type -16>
 func (t <type 38>) GoString () <type -16>
type 39 struct { ? <type 13>; Name <type -16>; Time <type -7>; CurrentVersion <type -7>; CompatVersion <type -7>; }
type 40 struct { Cmd <type 14>; Len <type -7>; Name <type -7>; Time <type -7>; CurrentVersion <type -7>; CompatVersion <type -7>; }
type 41 struct { ? <type 13>; ? <type 5>; IndirectSyms <type 42>; }
type 42 [] <type -7>
type 43 struct { Cmd <type 14>; Len <type -7>; Ilocalsym <type -7>; Nlocalsym <type -7>; Iextdefsym <type -7>; Nextdefsym <type -7>; Iundefsym <type -7>; Nundefsym <type -7>; Tocoffset <type -7>; Ntoc <type -7>; Modtaboff <type -7>; Nmodtab <type -7>; Extrefsymoff <type -7>; Nextrefsyms <type -7>; Indirectsymoff <type -7>; Nindirectsyms <type -7>; Extreloff <type -7>; Nextrel <type -7>; Locreloff <type -7>; Nlocrel <type -7>; }
type 44 *<type 11>
type 45 struct { ? <type 7>; ? <type 46>; }
type 46 *<type 9>
type 47 struct { Cpu <type 1>; SubCpu <type -7>; Offset <type -7>; Size <type -7>; Align <type -7>; }
type 48 struct { Magic <type -7>; Arches <type 49>; .debug/macho.closer <type 50>; }
type 49 [] <type 6>
type 50 "io.Closer" <type 51>
type 51 interface { Close () <type -19>; }
type 52 *<type 8>
type 53 struct { ? <type 10>; ByteOrder <type 54>; Loads <type 57>; Sections <type 58>; Symtab <type 60>; Dysymtab <type 61>; .debug/macho.closer <type 50>; }
type 54 "encoding/binary.ByteOrder" <type 55>
type 55 interface { PutUint16 (? <type 56>, ? <type -6>); PutUint32 (? <type 56>, ? <type -7>); PutUint64 (? <type 56>, ? <type -8>); String () <type -16>; Uint16 (? <type 56>) <type -6>; Uint32 (? <type 56>) <type -7>; Uint64 (? <type 56>) <type -8>; }
type 56 [] <type -20>
type 57 [] <type 12>
type 58 [] <type 59>
type 59 *<type 26>
type 60 *<type 35>
type 61 *<type 4>
type 62 *<type 36>
type 63 "io.ReaderAt" <type 64>
type 64 interface { ReadAt (p <type 56>, off <type -4>) (n <type -11>, err <type -19>); }
type 65 *<type 30>
type 66 *<type 67>
type 67 "debug/dwarf.Data" <type 129>
 func (d <esc:0x1> <type 66>) .debug/dwarf.offsetToUnit (off <type 68>) <type -11>
 func (d <type 66>) .debug/dwarf.sigToType (sig <type -8>) (? <type 69>, ? <type -19>)
 func (d <type 66>) .debug/dwarf.parseTypes (name <type -16>, types <type 56>) <type -19>
 func (d <type 66>) .debug/dwarf.readType (name <type -16>, r <type 74>, off <type 68>, typeCache <type 87>, typedefs <type 88>) (? <type 69>, ? <type -19>)
 func (d <type 66>) AddTypes (name <type -16>, types <type 56>) <type -19>
 func (d <type 66>) .debug/dwarf.parseUnits () (? <type 93>, ? <type -19>)
 func (d <type 66>) Reader () <type 105>
 func (d <type 66>) Type (off <type 68>) (? <type 69>, ? <type -19>)
 func (d <type 66>) LineReader (cu <type 76>) (? <type 113>, ? <type -19>)
 func (d <type 66>) Ranges (e <esc:0x1> <type 76>) (? <type 127>, ? <type -19>)
 func (d <type 66>) .debug/dwarf.parseAbbrev (off <type -8>, vers <type -11>) (? <type 97>, ? <type -19>)
type 68 "debug/dwarf.Offset" <type -7>
type 69 "debug/dwarf.Type" <type 70>
type 70 interface { Common () <type 71>; Size () <type -4>; String () <type -16>; }
type 71 *<type 72>
type 72 "debug/dwarf.CommonType" <type 73>
 func (c <esc:0x1> <type 71>) Size () <type -4>
 func (c <esc:0x12> <type 71>) Common () ($ret51 <type 71>)
type 73 struct { ByteSize <type -4>; Name <type -16>; }
type 74 ".debug/dwarf.typeReader" <type 75>
type 75 interface { AddressSize () <type -11>; Next () (? <type 76>, ? <type -19>); Seek (? <type 68>); .debug/dwarf.clone () <type 74>; .debug/dwarf.offset () <type 68>; }
type 76 *<type 77>
type 77 "debug/dwarf.Entry" <type 84>
 func (e <esc:0x22> <type 76>) AttrField (a <type 78>) <type 79>
 func (e <esc:0x32> <type 76>) Val (a <type 78>) <type 82>
type 78 "debug/dwarf.Attr" <type -7>
 func (a <type 78>) GoString () <type -16>
 func (i <type 78>) String () <type -16>
type 79 *<type 80>
type 80 "debug/dwarf.Field" <type 81>
type 81 struct { Attr <type 78>; Val <type 82>; Class <type 83>; }
type 82 interface { }
type 83 "debug/dwarf.Class" <type -11>
 func (i <type 83>) GoString () <type -16>
 func (i <type 83>) String () <type -16>
type 84 struct { Offset <type 68>; Tag <type 85>; Children <type -15>; Field <type 86>; }
type 85 "debug/dwarf.Tag" <type -7>
 func (i <type 85>) String () <type -16>
 func (t <type 85>) GoString () <type -16>
type 86 [] <type 80>
type 87 map [<type 68>] <type 69>
type 88 *<type 89>
type 89 [] <type 90>
type 90 *<type 91>
type 91 "debug/dwarf.TypedefType" <type 92>
 func (t <esc:0x9> <type 90>) Size () <type -4>
 func (t <esc:0x22> <type 90>) String () <type -16>
type 92 struct { ? <type 72>; Type <type 69>; }
type 93 [] <type 94>
type 94 ".debug/dwarf.unit" <type 96>
 func (u <esc:0x1> <type 95>) .debug/dwarf.addrsize () <type -11>
 func (u <esc:0x1> <type 95>) .debug/dwarf.dwarf64 () (? <type -15>, ? <type -15>)
 func (u <esc:0x1> <type 95>) .debug/dwarf.version () <type -11>
type 95 *<type 94>
type 96 struct { .debug/dwarf.base <type 68>; .debug/dwarf.off <type 68>; .debug/dwarf.data <type 56>; .debug/dwarf.atable <type 97>; .debug/dwarf.asize <type -11>; .debug/dwarf.vers <type -11>; .debug/dwarf.is64 <type -15>; }
type 97 ".debug/dwarf.abbrevTable" <type 98>
type 98 map [<type -7>] <type 99>
type 99 ".debug/dwarf.abbrev" <type 100>
type 100 struct { .debug/dwarf.tag <type 85>; .debug/dwarf.children <type -15>; .debug/dwarf.field <type 101>; }
type 101 [] <type 102>
type 102 ".debug/dwarf.afield" <type 103>
type 103 struct { .debug/dwarf.attr <type 78>; .debug/dwarf.fmt <type 104>; .debug/dwarf.class <type 83>; }
type 104 ".debug/dwarf.format" <type -7>
type 105 *<type 106>
type 106 "debug/dwarf.Reader" <type 107>
 func (r <esc:0x10a> <type 105>) SeekPC (pc <type -8>) (? <type 76>, ? <type -19>)
 func (r <esc:0x1> <type 105>) .debug/dwarf.offset () <type 68>
 func (r <esc:0x9> <type 105>) SkipChildren ()
 func (r <esc:0x9> <type 105>) .debug/dwarf.clone () <type 74>
 func (r <esc:0x10a> <type 105>) Next () (? <type 76>, ? <type -19>)
 func (r <esc:0x9> <type 105>) .debug/dwarf.maybeNextUnit ()
 func (r <esc:0x9> <type 105>) Seek (off <type 68>)
 func (r <esc:0x1> <type 105>) AddressSize () <type -11>
type 107 struct { .debug/dwarf.b <type 108>; .debug/dwarf.d <type 66>; .debug/dwarf.err <type -19>; .debug/dwarf.unit <type -11>; .debug/dwarf.lastChildren <type -15>; .debug/dwarf.lastSibling <type 68>; }
type 108 ".debug/dwarf.buf" <type 110>
 func (b <esc:0x9> <type 109>) .debug/dwarf.uint8 () <type -5>
 func (b <esc:0x9> <type 109>) .debug/dwarf.entry (atab <esc:0x1> <type 97>, ubase <type 68>) <type 76>
 func (b <esc:0x9> <type 109>) .debug/dwarf.uint64 () <type -8>
 func (b <esc:0x1> <type 109>) .debug/dwarf.uint () <type -8>
 func (b <esc:0x9> <type 109>) .debug/dwarf.skip (n <type -11>)
 func (b <esc:0x9> <type 109>) .debug/dwarf.string () <type -16>
 func (b <esc:0x9> <type 109>) .debug/dwarf.error (s <type -16>)
 func (b <esc:0x2a> <type 109>) .debug/dwarf.bytes (n <type -11>) <type 56>
 func (b <esc:0x9> <type 109>) .debug/dwarf.uint16 () <type -6>
 func (b <esc:0x9> <type 109>) .debug/dwarf.uint32 () <type -7>
 func (b <esc:0x1> <type 109>) .debug/dwarf.varint () (c <type -8>, bits <type -12>)
 func (b <esc:0x1> <type 109>) .debug/dwarf.int () <type -4>
 func (b <esc:0x9> <type 109>) .debug/dwarf.addr () <type -8>
 func (b <esc:0x9> <type 109>) .debug/dwarf.unitLength () (length <type 68>, dwarf64 <type -15>)
type 109 *<type 108>
type 110 struct { .debug/dwarf.dwarf <type 66>; .debug/dwarf.order <type 54>; .debug/dwarf.format <type 111>; .debug/dwarf.name <type -16>; .debug/dwarf.off <type 68>; .debug/dwarf.data <type 56>; .debug/dwarf.err <type -19>; }
type 111 ".debug/dwarf.dataFormat" <type 112>
type 112 interface { .debug/dwarf.addrsize () <type -11>; .debug/dwarf.dwarf64 () (dwarf64 <type -15>, isKnown <type -15>); .debug/dwarf.version () <type -11>; }
type 113 *<type 114>
type 114 "debug/dwarf.LineReader" <type 123>
 func (r <esc:0x9> <type 113>) .debug/dwarf.resetState ()
 func (r <esc:0x9> <type 113>) Reset ()
 func (r <esc:0x9> <type 113>) Seek (pos <type 115>)
 func (r <esc:0x1> <type 113>) .debug/dwarf.advancePC (opAdvance <type -11>)
 func (r <esc:0x9> <type 113>) .debug/dwarf.step (entry <esc:0x1> <type 122>) <type -15>
 func (r <esc:0x22> <type 113>) Tell () <type 115>
 func (r <esc:0x2a> <type 113>) Next (entry <esc:0x1> <type 122>) <type -19>
 func (r <esc:0x2a> <type 113>) SeekPC (pc <type -8>, entry <esc:0x1> <type 122>) <type -19>
 func (r <esc:0x9> <type 113>) .debug/dwarf.updateFile ()
 func (r <esc:0x10a> <type 113>) .debug/dwarf.readFileEntry () (? <type -15>, ? <type -19>)
 func (r <esc:0x2a> <type 113>) .debug/dwarf.readHeader () <type -19>
type 115 "debug/dwarf.LineReaderPos" <type 116>
type 116 struct { .debug/dwarf.off <type 68>; .debug/dwarf.numFileEntries <type -11>; .debug/dwarf.state <type 117>; .debug/dwarf.fileIndex <type -11>; }
type 117 "debug/dwarf.LineEntry" <type 118>
type 118 struct { Address <type -8>; OpIndex <type -11>; File <type 119>; Line <type -11>; Column <type -11>; IsStmt <type -15>; BasicBlock <type -15>; PrologueEnd <type -15>; EpilogueBegin <type -15>; ISA <type -11>; Discriminator <type -11>; EndSequence <type -15>; }
type 119 *<type 120>
type 120 "debug/dwarf.LineFile" <type 121>
type 121 struct { Name <type -16>; Mtime <type -8>; Length <type -11>; }
type 122 *<type 117>
type 123 struct { .debug/dwarf.buf <type 108>; .debug/dwarf.section <type 56>; .debug/dwarf.version <type -6>; .debug/dwarf.minInstructionLength <type -11>; .debug/dwarf.maxOpsPerInstruction <type -11>; .debug/dwarf.defaultIsStmt <type -15>; .debug/dwarf.lineBase <type -11>; .debug/dwarf.lineRange <type -11>; .debug/dwarf.opcodeBase <type -11>; .debug/dwarf.opcodeLengths <type 124>; .debug/dwarf.directories <type 125>; .debug/dwarf.fileEntries <type 126>; .debug/dwarf.programOffset <type 68>; .debug/dwarf.endOffset <type 68>; .debug/dwarf.initialFileEntries <type -11>; .debug/dwarf.state <type 117>; .debug/dwarf.fileIndex <type -11>; }
type 124 [] <type -11>
type 125 [] <type -16>
type 126 [] <type 119>
type 127 [] <type 128>
type 128 [2 ] <type -8>
type 129 struct { .debug/dwarf.abbrev <type 56>; .debug/dwarf.aranges <type 56>; .debug/dwarf.frame <type 56>; .debug/dwarf.info <type 56>; .debug/dwarf.line <type 56>; .debug/dwarf.pubnames <type 56>; .debug/dwarf.ranges <type 56>; .debug/dwarf.str <type 56>; .debug/dwarf.abbrevCache <type 130>; .debug/dwarf.order <type 54>; .debug/dwarf.typeCache <type 87>; .debug/dwarf.typeSigs <type 131>; .debug/dwarf.unit <type 93>; }
type 130 map [<type -8>] <type 97>
type 131 map [<type -8>] <type 132>
type 132 *<type 133>
type 133 ".debug/dwarf.typeUnit" <type 134>
type 134 struct { ? <type 94>; .debug/dwarf.toff <type 68>; .debug/dwarf.name <type -16>; .debug/dwarf.cache <type 69>; }
type 135 struct { Magic <type -7>; Cpu <type 1>; SubCpu <type -7>; Type <type 38>; Ncmd <type -7>; Cmdsz <type -7>; Flags <type -7>; }
type 136 struct { .debug/macho.off <type -4>; .debug/macho.msg <type -16>; .debug/macho.val <type 82>; }
type 137 interface { Raw () <type 56>; }
type 138 struct { Name <type -7>; Type <type -5>; Sect <type -5>; Desc <type -6>; Value <type -7>; }
type 139 struct { Name <type -7>; Type <type -5>; Sect <type -5>; Desc <type -6>; Value <type -8>; }
type 140 struct { AX <type -7>; BX <type -7>; CX <type -7>; DX <type -7>; DI <type -7>; SI <type -7>; BP <type -7>; SP <type -7>; SS <type -7>; FLAGS <type -7>; IP <type -7>; CS <type -7>; DS <type -7>; ES <type -7>; FS <type -7>; GS <type -7>; }
type 141 struct { AX <type -8>; BX <type -8>; CX <type -8>; DX <type -8>; DI <type -8>; SI <type -8>; BP <type -8>; SP <type -8>; R8 <type -8>; R9 <type -8>; R10 <type -8>; R11 <type -8>; R12 <type -8>; R13 <type -8>; R14 <type -8>; R15 <type -8>; IP <type -8>; FLAGS <type -8>; CS <type -8>; FS <type -8>; GS <type -8>; }
type 142 struct { Addr <type -7>; Value <type -7>; Type <type -5>; Len <type -5>; Pcrel <type -15>; Extern <type -15>; Scattered <type -15>; }
type 143 struct { ? <type 13>; Path <type -16>; }
type 144 struct { Cmd <type 14>; Len <type -7>; Path <type -7>; }
type 145 struct { ? <type 29>; Relocs <type 146>; ? <type 63>; .debug/macho.sr <type 147>; }
type 146 [] <type 19>
type 147 *<type 148>
type 148 "io.SectionReader" <type 149>
 func (s <esc:0x1> <type 147>) Size () <type -4>
 func (s <esc:0x1> <type 147>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (s <esc:0x9> <type 147>) ReadAt (p <type 56>, off <type -4>) (n <type -11>, err <type -19>)
 func (s <esc:0x9> <type 147>) Read (p <type 56>) (n <type -11>, err <type -19>)
type 149 struct { .io.r <type 63>; .io.base <type -4>; .io.off <type -4>; .io.limit <type -4>; }
type 150 "io.ReadSeeker" <type 151>
type 151 interface { ? <type 152>; ? <type 154>; }
type 152 "io.Reader" <type 153>
type 153 interface { Read (p <type 56>) (n <type -11>, err <type -19>); }
type 154 "io.Seeker" <type 155>
type 155 interface { Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>); }
type 156 struct { Name <type 157>; Seg <type 157>; Addr <type -7>; Size <type -7>; Offset <type -7>; Align <type -7>; Reloff <type -7>; Nreloc <type -7>; Flags <type -7>; Reserve1 <type -7>; Reserve2 <type -7>; }
type 157 [16 ] <type -20>
type 158 struct { Name <type 157>; Seg <type 157>; Addr <type -8>; Size <type -8>; Offset <type -7>; Align <type -7>; Reloff <type -7>; Nreloc <type -7>; Flags <type -7>; Reserve1 <type -7>; Reserve2 <type -7>; Reserve3 <type -7>; }
type 159 struct { Name <type -16>; Seg <type -16>; Addr <type -8>; Size <type -8>; Offset <type -7>; Align <type -7>; Reloff <type -7>; Nreloc <type -7>; Flags <type -7>; }
type 160 struct { ? <type 13>; ? <type 33>; ? <type 63>; .debug/macho.sr <type 147>; }
type 161 struct { Cmd <type 14>; Len <type -7>; Name <type 157>; Addr <type -7>; Memsz <type -7>; Offset <type -7>; Filesz <type -7>; Maxprot <type -7>; Prot <type -7>; Nsect <type -7>; Flag <type -7>; }
type 162 struct { Cmd <type 14>; Len <type -7>; Name <type 157>; Addr <type -8>; Memsz <type -8>; Offset <type -8>; Filesz <type -8>; Maxprot <type -7>; Prot <type -7>; Nsect <type -7>; Flag <type -7>; }
type 163 struct { Cmd <type 14>; Len <type -7>; Name <type -16>; Addr <type -8>; Memsz <type -8>; Offset <type -8>; Filesz <type -8>; Maxprot <type -7>; Prot <type -7>; Nsect <type -7>; Flag <type -7>; }
type 164 struct { Name <type -16>; Type <type -5>; Sect <type -5>; Desc <type -6>; Value <type -8>; }
type 165 struct { ? <type 13>; ? <type 36>; Syms <type 166>; }
type 166 [] <type 34>
type 167 struct { Cmd <type 14>; Len <type -7>; Symoff <type -7>; Nsyms <type -7>; Stroff <type -7>; Strsize <type -7>; }
type 168 struct { Cmd <type 14>; Len <type -7>; Type <type -7>; Data <type 42>; }
const ARM64_RELOC_ADDEND <type 21> = 10 
const ARM64_RELOC_BRANCH26 <type 21> = 2 
const ARM64_RELOC_GOT_LOAD_PAGE21 <type 21> = 5 
const ARM64_RELOC_GOT_LOAD_PAGEOFF12 <type 21> = 6 
const ARM64_RELOC_PAGE21 <type 21> = 3 
const ARM64_RELOC_PAGEOFF12 <type 21> = 4 
const ARM64_RELOC_POINTER_TO_GOT <type 21> = 7 
const ARM64_RELOC_SUBTRACTOR <type 21> = 1 
const ARM64_RELOC_TLVP_LOAD_PAGE21 <type 21> = 8 
const ARM64_RELOC_TLVP_LOAD_PAGEOFF12 <type 21> = 9 
const ARM64_RELOC_UNSIGNED <type 21> = 0 
const ARM_RELOC_BR24 <type 20> = 5 
const ARM_RELOC_HALF <type 20> = 8 
const ARM_RELOC_HALF_SECTDIFF <type 20> = 9 
const ARM_RELOC_LOCAL_SECTDIFF <type 20> = 3 
const ARM_RELOC_PAIR <type 20> = 1 
const ARM_RELOC_PB_LA_PTR <type 20> = 4 
const ARM_RELOC_SECTDIFF <type 20> = 2 
const ARM_RELOC_VANILLA <type 20> = 0 
const ARM_THUMB_32BIT_BRANCH <type 20> = 7 
const ARM_THUMB_RELOC_BR22 <type 20> = 6 
const Cpu386 <type 1> = 7 
const CpuAmd64 <type 1> = 16777223 
const CpuArm <type 1> = 12 
const CpuArm64 <type 1> = 16777228 
const CpuPpc <type 1> = 18 
const CpuPpc64 <type 1> = 16777234 
var ErrNotFat <type 44>
const FlagAllModsBound <type -7> = 4096 
const FlagAllowStackExecution <type -7> = 131072 
const FlagAppExtensionSafe <type -7> = 33554432 
const FlagBindAtLoad <type -7> = 8 
const FlagBindsToWeak <type -7> = 65536 
const FlagCanonical <type -7> = 16384 
const FlagDeadStrippableDylib <type -7> = 4194304 
const FlagDyldLink <type -7> = 4 
const FlagForceFlat <type -7> = 256 
const FlagHasTLVDescriptors <type -7> = 8388608 
const FlagIncrLink <type -7> = 2 
const FlagLazyInit <type -7> = 64 
const FlagNoFixPrebinding <type -7> = 1024 
const FlagNoHeapExecution <type -7> = 16777216 
const FlagNoMultiDefs <type -7> = 512 
const FlagNoReexportedDylibs <type -7> = 1048576 
const FlagNoUndefs <type -7> = 1 
const FlagPIE <type -7> = 2097152 
const FlagPrebindable <type -7> = 2048 
const FlagPrebound <type -7> = 16 
const FlagRootSafe <type -7> = 262144 
const FlagSetuidSafe <type -7> = 524288 
const FlagSplitSegs <type -7> = 32 
const FlagSubsectionsViaSymbols <type -7> = 8192 
const FlagTwoLevel <type -7> = 128 
const FlagWeakDefines <type -7> = 32768 
const GENERIC_RELOC_LOCAL_SECTDIFF <type 22> = 4 
const GENERIC_RELOC_PAIR <type 22> = 1 
const GENERIC_RELOC_PB_LA_PTR <type 22> = 3 
const GENERIC_RELOC_SECTDIFF <type 22> = 2 
const GENERIC_RELOC_TLV <type 22> = 5 
const GENERIC_RELOC_VANILLA <type 22> = 0 
const LoadCmdDylib <type 14> = 12 
const LoadCmdDylinker <type 14> = 15 
const LoadCmdDysymtab <type 14> = 11 
const LoadCmdRpath <type 14> = 2147483676 
const LoadCmdSegment <type 14> = 1 
const LoadCmdSegment64 <type 14> = 25 
const LoadCmdSymtab <type 14> = 2 
const LoadCmdThread <type 14> = 4 
const LoadCmdUnixThread <type 14> = 5 
const Magic32 <type -7> = 4277009102 
const Magic64 <type -7> = 4277009103 
const MagicFat <type -7> = 3405691582 
func NewFatFile (r <type 63>) (? <type 52>, ? <type -19>)
func NewFile (r <type 63>) (? <type 46>, ? <type -19>)
func Open (name <type -16>) (? <type 46>, ? <type -19>)
func OpenFat (name <type -16>) (? <type 52>, ? <type -19>)
const TypeBundle <type 38> = 8 
const TypeDylib <type 38> = 6 
const TypeExec <type 38> = 2 
const TypeObj <type 38> = 1 
const X86_64_RELOC_BRANCH <type 23> = 2 
const X86_64_RELOC_GOT <type 23> = 4 
const X86_64_RELOC_GOT_LOAD <type 23> = 3 
const X86_64_RELOC_SIGNED <type 23> = 1 
const X86_64_RELOC_SIGNED_1 <type 23> = 6 
const X86_64_RELOC_SIGNED_2 <type 23> = 7 
const X86_64_RELOC_SIGNED_4 <type 23> = 8 
const X86_64_RELOC_SUBTRACTOR <type 23> = 5 
const X86_64_RELOC_TLV <type 23> = 9 
const X86_64_RELOC_UNSIGNED <type 23> = 0 
checksum 1C3AEAA7CB6281A4BECFF16F347E58A3FE08C3FF
v3;
package pe
pkgpath debug/pe
import bytes bytes "bytes"
import zlib compress/zlib "compress/zlib"
import dwarf debug/dwarf "debug/dwarf"
import binary encoding/binary "encoding/binary"
import fmt fmt "fmt"
import io io "io"
import os os "os"
import strconv strconv "strconv"
import strings strings "strings"
init pe debug..z2fpe..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import zlib compress..z2fzlib..import dwarf debug..z2fdwarf..import binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import path path..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 1 2 1 8 1 11 1 15 1 16 1 18 1 21 2 8 2 11 2 15 2 16 2 18 2 21 3 1 3 2 3 7 3 8 3 9 3 10 3 11 3 12 3 14 3 15 3 16 3 17 3 18 3 19 3 20 3 21 4 1 4 2 4 3 4 6 4 7 4 8 4 9 4 10 4 11 4 12 4 14 4 15 4 16 4 17 4 18 4 19 4 20 4 21 5 6 5 7 5 8 5 9 5 10 5 11 5 12 5 13 5 14 5 15 5 16 5 17 5 18 5 19 5 20 5 21 6 8 6 11 6 14 6 15 6 16 6 17 6 18 6 21 7 8 7 9 7 10 7 11 7 12 7 14 7 15 7 16 7 17 7 18 7 19 7 20 7 21 9 8 9 11 9 15 9 16 9 18 9 19 9 20 11 8 11 15 11 16 11 18 12 8 12 9 12 10 12 11 12 15 12 16 12 18 12 19 12 20 13 8 13 11 13 15 13 16 13 18 13 21 14 8 14 15 14 16 14 17 14 18 14 21 15 8 15 16 17 8 17 15 17 16 18 8 18 15 18 16 19 8 19 15 19 16 19 18 20 8 20 15 20 16 20 18 20 19
types 125 15 125 33 374 31 313 36 37 37 26 144 35 142 117 28 147 23 18 61 170 22 21 19 21 19 20 30 43 18 19 972 39 37 84 19 151 56 22 44 173 19 162 121 19 38 67 123 90 120 21 34 19 21 19 144 48 21 252 19 227 45 34 40 111 21 40 106 40 19 527 204 1019 19 226 46 254 44 161 19 785 46 152 42 268 19 41 72 19 638 22 22 21 21 23 424 34 34 19 42 121 210 20 19 165 34 91 882 24 860 90 91 21 21 369 98 36 51 32 74 32 95 273 291 20 119
type 1 "COFFSymbol" <type 15>
 func (sym <esc:0x1> <type 17>) FullName (st <esc:0x1> <type 13>) (? <type -16>, ? <type -19>)
type 2 "DataDirectory" <type 18>
type 3 "File" <type 19>
 func (f <esc:0x9> <type 28>) Close () <type -19>
 func (f <esc:0x32> <type 28>) Section (name <esc:0x1> <type -16>) <type 22>
 func (f <esc:0x9> <type 28>) DWARF () (? <type 29>, ? <type -19>)
 func (f <esc:0x9> <type 28>) ImportedSymbols () (? <type 90>, ? <type -19>)
 func (f <esc:0x1> <type 28>) ImportedLibraries () (? <type 90>, ? <type -19>)
type 4 "FileHeader" <type 100>
type 5 "FormatError" <type 101>
 func (e <esc:0x1> <type 102>) Error () ($ret17 <type -16>) <inl:211>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/debug/pe/file.go:449
  { //450
   $ret17 = "unknown error" //450
   return //450
  } //0
type 6 "ImportDirectory" <type 103>
type 7 "OptionalHeader32" <type 106>
type 8 "OptionalHeader64" <type 108>
type 9 "Reloc" <type 109>
type 10 "Section" <type 110>
 func (s <esc:0x9> <type 22>) Data () (? <type 37>, ? <type -19>)
 func (s <esc:0x9> <type 22>) Open () <type 115>
type 11 "SectionHeader" <type 121>
type 12 "SectionHeader32" <type 122>
 func (sh <esc:0x1> <type 123>) .debug/pe.fullName (st <esc:0x1> <type 13>) (? <type -16>, ? <type -19>)
type 13 "StringTable" <type 37>
 func (st <esc:0x1> <type 13>) String (start <type -7>) (? <type -16>, ? <type -19>)
type 14 "Symbol" <type 124>
type 15 struct { Name <type 16>; Value <type -7>; SectionNumber <type -2>; Type <type -6>; StorageClass <type -5>; NumberOfAuxSymbols <type -5>; }
type 16 [8 ] <type -5>
type 17 *<type 1>
type 18 struct { VirtualAddress <type -7>; Size <type -7>; }
type 19 struct { ? <type 4>; OptionalHeader <type 20>; Sections <type 21>; Symbols <type 23>; COFFSymbols <type 25>; StringTable <type 13>; .debug/pe.closer <type 26>; }
type 20 interface { }
type 21 [] <type 22>
type 22 *<type 10>
type 23 [] <type 24>
type 24 *<type 14>
type 25 [] <type 1>
type 26 "io.Closer" <type 27>
type 27 interface { Close () <type -19>; }
type 28 *<type 3>
type 29 *<type 30>
type 30 "debug/dwarf.Data" <type 94>
 func (d <esc:0x1> <type 29>) .debug/dwarf.offsetToUnit (off <type 31>) <type -11>
 func (d <type 29>) .debug/dwarf.sigToType (sig <type -8>) (? <type 32>, ? <type -19>)
 func (d <type 29>) .debug/dwarf.parseTypes (name <type -16>, types <type 37>) <type -19>
 func (d <type 29>) .debug/dwarf.readType (name <type -16>, r <type 38>, off <type 31>, typeCache <type 50>, typedefs <type 51>) (? <type 32>, ? <type -19>)
 func (d <type 29>) AddTypes (name <type -16>, types <type 37>) <type -19>
 func (d <type 29>) .debug/dwarf.parseUnits () (? <type 56>, ? <type -19>)
 func (d <type 29>) Reader () <type 68>
 func (d <type 29>) Type (off <type 31>) (? <type 32>, ? <type -19>)
 func (d <type 29>) LineReader (cu <type 40>) (? <type 78>, ? <type -19>)
 func (d <type 29>) Ranges (e <esc:0x1> <type 40>) (? <type 92>, ? <type -19>)
 func (d <type 29>) .debug/dwarf.parseAbbrev (off <type -8>, vers <type -11>) (? <type 60>, ? <type -19>)
type 31 "debug/dwarf.Offset" <type -7>
type 32 "debug/dwarf.Type" <type 33>
type 33 interface { Common () <type 34>; Size () <type -4>; String () <type -16>; }
type 34 *<type 35>
type 35 "debug/dwarf.CommonType" <type 36>
 func (c <esc:0x1> <type 34>) Size () <type -4>
 func (c <esc:0x12> <type 34>) Common () ($ret51 <type 34>)
type 36 struct { ByteSize <type -4>; Name <type -16>; }
type 37 [] <type -20>
type 38 ".debug/dwarf.typeReader" <type 39>
type 39 interface { AddressSize () <type -11>; Next () (? <type 40>, ? <type -19>); Seek (? <type 31>); .debug/dwarf.clone () <type 38>; .debug/dwarf.offset () <type 31>; }
type 40 *<type 41>
type 41 "debug/dwarf.Entry" <type 47>
 func (e <esc:0x22> <type 40>) AttrField (a <type 42>) <type 43>
 func (e <esc:0x32> <type 40>) Val (a <type 42>) <type 20>
type 42 "debug/dwarf.Attr" <type -7>
 func (a <type 42>) GoString () <type -16>
 func (i <type 42>) String () <type -16>
type 43 *<type 44>
type 44 "debug/dwarf.Field" <type 45>
type 45 struct { Attr <type 42>; Val <type 20>; Class <type 46>; }
type 46 "debug/dwarf.Class" <type -11>
 func (i <type 46>) GoString () <type -16>
 func (i <type 46>) String () <type -16>
type 47 struct { Offset <type 31>; Tag <type 48>; Children <type -15>; Field <type 49>; }
type 48 "debug/dwarf.Tag" <type -7>
 func (i <type 48>) String () <type -16>
 func (t <type 48>) GoString () <type -16>
type 49 [] <type 44>
type 50 map [<type 31>] <type 32>
type 51 *<type 52>
type 52 [] <type 53>
type 53 *<type 54>
type 54 "debug/dwarf.TypedefType" <type 55>
 func (t <esc:0x9> <type 53>) Size () <type -4>
 func (t <esc:0x22> <type 53>) String () <type -16>
type 55 struct { ? <type 35>; Type <type 32>; }
type 56 [] <type 57>
type 57 ".debug/dwarf.unit" <type 59>
 func (u <esc:0x1> <type 58>) .debug/dwarf.addrsize () <type -11>
 func (u <esc:0x1> <type 58>) .debug/dwarf.dwarf64 () (? <type -15>, ? <type -15>)
 func (u <esc:0x1> <type 58>) .debug/dwarf.version () <type -11>
type 58 *<type 57>
type 59 struct { .debug/dwarf.base <type 31>; .debug/dwarf.off <type 31>; .debug/dwarf.data <type 37>; .debug/dwarf.atable <type 60>; .debug/dwarf.asize <type -11>; .debug/dwarf.vers <type -11>; .debug/dwarf.is64 <type -15>; }
type 60 ".debug/dwarf.abbrevTable" <type 61>
type 61 map [<type -7>] <type 62>
type 62 ".debug/dwarf.abbrev" <type 63>
type 63 struct { .debug/dwarf.tag <type 48>; .debug/dwarf.children <type -15>; .debug/dwarf.field <type 64>; }
type 64 [] <type 65>
type 65 ".debug/dwarf.afield" <type 66>
type 66 struct { .debug/dwarf.attr <type 42>; .debug/dwarf.fmt <type 67>; .debug/dwarf.class <type 46>; }
type 67 ".debug/dwarf.format" <type -7>
type 68 *<type 69>
type 69 "debug/dwarf.Reader" <type 70>
 func (r <esc:0x10a> <type 68>) SeekPC (pc <type -8>) (? <type 40>, ? <type -19>)
 func (r <esc:0x1> <type 68>) .debug/dwarf.offset () <type 31>
 func (r <esc:0x9> <type 68>) SkipChildren ()
 func (r <esc:0x9> <type 68>) .debug/dwarf.clone () <type 38>
 func (r <esc:0x10a> <type 68>) Next () (? <type 40>, ? <type -19>)
 func (r <esc:0x9> <type 68>) .debug/dwarf.maybeNextUnit ()
 func (r <esc:0x9> <type 68>) Seek (off <type 31>)
 func (r <esc:0x1> <type 68>) AddressSize () <type -11>
type 70 struct { .debug/dwarf.b <type 71>; .debug/dwarf.d <type 29>; .debug/dwarf.err <type -19>; .debug/dwarf.unit <type -11>; .debug/dwarf.lastChildren <type -15>; .debug/dwarf.lastSibling <type 31>; }
type 71 ".debug/dwarf.buf" <type 73>
 func (b <esc:0x9> <type 72>) .debug/dwarf.uint8 () <type -5>
 func (b <esc:0x9> <type 72>) .debug/dwarf.entry (atab <esc:0x1> <type 60>, ubase <type 31>) <type 40>
 func (b <esc:0x9> <type 72>) .debug/dwarf.uint64 () <type -8>
 func (b <esc:0x1> <type 72>) .debug/dwarf.uint () <type -8>
 func (b <esc:0x9> <type 72>) .debug/dwarf.skip (n <type -11>)
 func (b <esc:0x9> <type 72>) .debug/dwarf.string () <type -16>
 func (b <esc:0x9> <type 72>) .debug/dwarf.error (s <type -16>)
 func (b <esc:0x2a> <type 72>) .debug/dwarf.bytes (n <type -11>) <type 37>
 func (b <esc:0x9> <type 72>) .debug/dwarf.uint16 () <type -6>
 func (b <esc:0x9> <type 72>) .debug/dwarf.uint32 () <type -7>
 func (b <esc:0x1> <type 72>) .debug/dwarf.varint () (c <type -8>, bits <type -12>)
 func (b <esc:0x1> <type 72>) .debug/dwarf.int () <type -4>
 func (b <esc:0x9> <type 72>) .debug/dwarf.addr () <type -8>
 func (b <esc:0x9> <type 72>) .debug/dwarf.unitLength () (length <type 31>, dwarf64 <type -15>)
type 72 *<type 71>
type 73 struct { .debug/dwarf.dwarf <type 29>; .debug/dwarf.order <type 74>; .debug/dwarf.format <type 76>; .debug/dwarf.name <type -16>; .debug/dwarf.off <type 31>; .debug/dwarf.data <type 37>; .debug/dwarf.err <type -19>; }
type 74 "encoding/binary.ByteOrder" <type 75>
type 75 interface { PutUint16 (? <type 37>, ? <type -6>); PutUint32 (? <type 37>, ? <type -7>); PutUint64 (? <type 37>, ? <type -8>); String () <type -16>; Uint16 (? <type 37>) <type -6>; Uint32 (? <type 37>) <type -7>; Uint64 (? <type 37>) <type -8>; }
type 76 ".debug/dwarf.dataFormat" <type 77>
type 77 interface { .debug/dwarf.addrsize () <type -11>; .debug/dwarf.dwarf64 () (dwarf64 <type -15>, isKnown <type -15>); .debug/dwarf.version () <type -11>; }
type 78 *<type 79>
type 79 "debug/dwarf.LineReader" <type 88>
 func (r <esc:0x9> <type 78>) .debug/dwarf.resetState ()
 func (r <esc:0x9> <type 78>) Reset ()
 func (r <esc:0x9> <type 78>) Seek (pos <type 80>)
 func (r <esc:0x1> <type 78>) .debug/dwarf.advancePC (opAdvance <type -11>)
 func (r <esc:0x9> <type 78>) .debug/dwarf.step (entry <esc:0x1> <type 87>) <type -15>
 func (r <esc:0x22> <type 78>) Tell () <type 80>
 func (r <esc:0x2a> <type 78>) Next (entry <esc:0x1> <type 87>) <type -19>
 func (r <esc:0x2a> <type 78>) SeekPC (pc <type -8>, entry <esc:0x1> <type 87>) <type -19>
 func (r <esc:0x9> <type 78>) .debug/dwarf.updateFile ()
 func (r <esc:0x10a> <type 78>) .debug/dwarf.readFileEntry () (? <type -15>, ? <type -19>)
 func (r <esc:0x2a> <type 78>) .debug/dwarf.readHeader () <type -19>
type 80 "debug/dwarf.LineReaderPos" <type 81>
type 81 struct { .debug/dwarf.off <type 31>; .debug/dwarf.numFileEntries <type -11>; .debug/dwarf.state <type 82>; .debug/dwarf.fileIndex <type -11>; }
type 82 "debug/dwarf.LineEntry" <type 83>
type 83 struct { Address <type -8>; OpIndex <type -11>; File <type 84>; Line <type -11>; Column <type -11>; IsStmt <type -15>; BasicBlock <type -15>; PrologueEnd <type -15>; EpilogueBegin <type -15>; ISA <type -11>; Discriminator <type -11>; EndSequence <type -15>; }
type 84 *<type 85>
type 85 "debug/dwarf.LineFile" <type 86>
type 86 struct { Name <type -16>; Mtime <type -8>; Length <type -11>; }
type 87 *<type 82>
type 88 struct { .debug/dwarf.buf <type 71>; .debug/dwarf.section <type 37>; .debug/dwarf.version <type -6>; .debug/dwarf.minInstructionLength <type -11>; .debug/dwarf.maxOpsPerInstruction <type -11>; .debug/dwarf.defaultIsStmt <type -15>; .debug/dwarf.lineBase <type -11>; .debug/dwarf.lineRange <type -11>; .debug/dwarf.opcodeBase <type -11>; .debug/dwarf.opcodeLengths <type 89>; .debug/dwarf.directories <type 90>; .debug/dwarf.fileEntries <type 91>; .debug/dwarf.programOffset <type 31>; .debug/dwarf.endOffset <type 31>; .debug/dwarf.initialFileEntries <type -11>; .debug/dwarf.state <type 82>; .debug/dwarf.fileIndex <type -11>; }
type 89 [] <type -11>
type 90 [] <type -16>
type 91 [] <type 84>
type 92 [] <type 93>
type 93 [2 ] <type -8>
type 94 struct { .debug/dwarf.abbrev <type 37>; .debug/dwarf.aranges <type 37>; .debug/dwarf.frame <type 37>; .debug/dwarf.info <type 37>; .debug/dwarf.line <type 37>; .debug/dwarf.pubnames <type 37>; .debug/dwarf.ranges <type 37>; .debug/dwarf.str <type 37>; .debug/dwarf.abbrevCache <type 95>; .debug/dwarf.order <type 74>; .debug/dwarf.typeCache <type 50>; .debug/dwarf.typeSigs <type 96>; .debug/dwarf.unit <type 56>; }
type 95 map [<type -8>] <type 60>
type 96 map [<type -8>] <type 97>
type 97 *<type 98>
type 98 ".debug/dwarf.typeUnit" <type 99>
type 99 struct { ? <type 57>; .debug/dwarf.toff <type 31>; .debug/dwarf.name <type -16>; .debug/dwarf.cache <type 32>; }
type 100 struct { Machine <type -6>; NumberOfSections <type -6>; TimeDateStamp <type -7>; PointerToSymbolTable <type -7>; NumberOfSymbols <type -7>; SizeOfOptionalHeader <type -6>; Characteristics <type -6>; }
type 101 struct { }
type 102 *<type 5>
type 103 struct { OriginalFirstThunk <type -7>; TimeDateStamp <type -7>; ForwarderChain <type -7>; Name <type -7>; FirstThunk <type -7>; .debug/pe.dll <type -16>; }
type 104 "io.ReaderAt" <type 105>
type 105 interface { ReadAt (p <type 37>, off <type -4>) (n <type -11>, err <type -19>); }
type 106 struct { Magic <type -6>; MajorLinkerVersion <type -5>; MinorLinkerVersion <type -5>; SizeOfCode <type -7>; SizeOfInitializedData <type -7>; SizeOfUninitializedData <type -7>; AddressOfEntryPoint <type -7>; BaseOfCode <type -7>; BaseOfData <type -7>; ImageBase <type -7>; SectionAlignment <type -7>; FileAlignment <type -7>; MajorOperatingSystemVersion <type -6>; MinorOperatingSystemVersion <type -6>; MajorImageVersion <type -6>; MinorImageVersion <type -6>; MajorSubsystemVersion <type -6>; MinorSubsystemVersion <type -6>; Win32VersionValue <type -7>; SizeOfImage <type -7>; SizeOfHeaders <type -7>; CheckSum <type -7>; Subsystem <type -6>; DllCharacteristics <type -6>; SizeOfStackReserve <type -7>; SizeOfStackCommit <type -7>; SizeOfHeapReserve <type -7>; SizeOfHeapCommit <type -7>; LoaderFlags <type -7>; NumberOfRvaAndSizes <type -7>; DataDirectory <type 107>; }
type 107 [16 ] <type 2>
type 108 struct { Magic <type -6>; MajorLinkerVersion <type -5>; MinorLinkerVersion <type -5>; SizeOfCode <type -7>; SizeOfInitializedData <type -7>; SizeOfUninitializedData <type -7>; AddressOfEntryPoint <type -7>; BaseOfCode <type -7>; ImageBase <type -8>; SectionAlignment <type -7>; FileAlignment <type -7>; MajorOperatingSystemVersion <type -6>; MinorOperatingSystemVersion <type -6>; MajorImageVersion <type -6>; MinorImageVersion <type -6>; MajorSubsystemVersion <type -6>; MinorSubsystemVersion <type -6>; Win32VersionValue <type -7>; SizeOfImage <type -7>; SizeOfHeaders <type -7>; CheckSum <type -7>; Subsystem <type -6>; DllCharacteristics <type -6>; SizeOfStackReserve <type -8>; SizeOfStackCommit <type -8>; SizeOfHeapReserve <type -8>; SizeOfHeapCommit <type -8>; LoaderFlags <type -7>; NumberOfRvaAndSizes <type -7>; DataDirectory <type 107>; }
type 109 struct { VirtualAddress <type -7>; SymbolTableIndex <type -7>; Type <type -6>; }
type 110 struct { ? <type 11>; Relocs <type 111>; ? <type 104>; .debug/pe.sr <type 112>; }
type 111 [] <type 9>
type 112 *<type 113>
type 113 "io.SectionReader" <type 114>
 func (s <esc:0x1> <type 112>) Size () <type -4>
 func (s <esc:0x1> <type 112>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (s <esc:0x9> <type 112>) ReadAt (p <type 37>, off <type -4>) (n <type -11>, err <type -19>)
 func (s <esc:0x9> <type 112>) Read (p <type 37>) (n <type -11>, err <type -19>)
type 114 struct { .io.r <type 104>; .io.base <type -4>; .io.off <type -4>; .io.limit <type -4>; }
type 115 "io.ReadSeeker" <type 116>
type 116 interface { ? <type 117>; ? <type 119>; }
type 117 "io.Reader" <type 118>
type 118 interface { Read (p <type 37>) (n <type -11>, err <type -19>); }
type 119 "io.Seeker" <type 120>
type 120 interface { Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>); }
type 121 struct { Name <type -16>; VirtualSize <type -7>; VirtualAddress <type -7>; Size <type -7>; Offset <type -7>; PointerToRelocations <type -7>; PointerToLineNumbers <type -7>; NumberOfRelocations <type -6>; NumberOfLineNumbers <type -6>; Characteristics <type -7>; }
type 122 struct { Name <type 16>; VirtualSize <type -7>; VirtualAddress <type -7>; SizeOfRawData <type -7>; PointerToRawData <type -7>; PointerToRelocations <type -7>; PointerToLineNumbers <type -7>; NumberOfRelocations <type -6>; NumberOfLineNumbers <type -6>; Characteristics <type -7>; }
type 123 *<type 12>
type 124 struct { Name <type -16>; Value <type -7>; SectionNumber <type -2>; Type <type -6>; StorageClass <type -5>; }
const COFFSymbolSize = 18 
const IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 7 
const IMAGE_DIRECTORY_ENTRY_BASERELOC = 5 
const IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11 
const IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 14 
const IMAGE_DIRECTORY_ENTRY_DEBUG = 6 
const IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 13 
const IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3 
const IMAGE_DIRECTORY_ENTRY_EXPORT = 0 
const IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8 
const IMAGE_DIRECTORY_ENTRY_IAT = 12 
const IMAGE_DIRECTORY_ENTRY_IMPORT = 1 
const IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10 
const IMAGE_DIRECTORY_ENTRY_RESOURCE = 2 
const IMAGE_DIRECTORY_ENTRY_SECURITY = 4 
const IMAGE_DIRECTORY_ENTRY_TLS = 9 
const IMAGE_FILE_MACHINE_AM33 = 467 
const IMAGE_FILE_MACHINE_AMD64 = 34404 
const IMAGE_FILE_MACHINE_ARM = 448 
const IMAGE_FILE_MACHINE_ARM64 = 43620 
const IMAGE_FILE_MACHINE_ARMNT = 452 
const IMAGE_FILE_MACHINE_EBC = 3772 
const IMAGE_FILE_MACHINE_I386 = 332 
const IMAGE_FILE_MACHINE_IA64 = 512 
const IMAGE_FILE_MACHINE_M32R = 36929 
const IMAGE_FILE_MACHINE_MIPS16 = 614 
const IMAGE_FILE_MACHINE_MIPSFPU = 870 
const IMAGE_FILE_MACHINE_MIPSFPU16 = 1126 
const IMAGE_FILE_MACHINE_POWERPC = 496 
const IMAGE_FILE_MACHINE_POWERPCFP = 497 
const IMAGE_FILE_MACHINE_R4000 = 358 
const IMAGE_FILE_MACHINE_SH3 = 418 
const IMAGE_FILE_MACHINE_SH3DSP = 419 
const IMAGE_FILE_MACHINE_SH4 = 422 
const IMAGE_FILE_MACHINE_SH5 = 424 
const IMAGE_FILE_MACHINE_THUMB = 450 
const IMAGE_FILE_MACHINE_UNKNOWN = 0 
const IMAGE_FILE_MACHINE_WCEMIPSV2 = 361 
func NewFile (r <type 104>) (? <type 28>, ? <type -19>)
func Open (name <type -16>) (? <type 28>, ? <type -19>)
checksum B1222F0D04614F3883316179DA85F76BEB78FE3F
v3;
package plan9obj
pkgpath debug/plan9obj
import binary encoding/binary "encoding/binary"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import os os "os"
init binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 2 0 5 0 7 0 8 0 9 0 10 0 11 0 14 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1 13 1 14 3 2 3 5 3 8 3 9 3 11 3 12 3 13 5 2 5 8 5 9 5 11 6 2 6 3 6 4 6 5 6 8 6 9 6 11 6 12 6 13 7 2 7 8 7 9 7 10 7 11 7 14 8 2 8 9 10 2 10 8 10 9 11 2 11 8 11 9 12 2 12 8 12 9 12 11 13 2 13 8 13 9 13 11 13 12
types 29 6 218 30 139 33 23 82 19 17 29 43 18 20 130 32 90 22 74 19 363 96 34 48 30 73 30 94 70 70
type 1 "File" <type 6>
 func (f <esc:0x9> <type 11>) Close () <type -19>
 func (f <esc:0x9> <type 11>) Symbols () (? <type 12>, ? <type -19>)
 func (f <esc:0x32> <type 11>) Section (name <esc:0x1> <type -16>) <type 8>
type 2 "FileHeader" <type 13>
type 3 "Section" <type 17>
 func (s <esc:0x9> <type 8>) Data () (? <type 16>, ? <type -19>)
 func (s <esc:0x9> <type 8>) Open () <type 21>
type 4 "SectionHeader" <type 27>
type 5 "Sym" <type 28>
type 6 struct { ? <type 2>; Sections <type 7>; .debug/plan9obj.closer <type 9>; }
type 7 [] <type 8>
type 8 *<type 3>
type 9 "io.Closer" <type 10>
type 10 interface { Close () <type -19>; }
type 11 *<type 1>
type 12 [] <type 5>
type 13 struct { Magic <type -7>; Bss <type -7>; Entry <type -8>; PtrSize <type -11>; LoadAddress <type -8>; HdrSize <type -8>; }
type 14 "io.ReaderAt" <type 15>
type 15 interface { ReadAt (p <type 16>, off <type -4>) (n <type -11>, err <type -19>); }
type 16 [] <type -20>
type 17 struct { ? <type 4>; ? <type 14>; .debug/plan9obj.sr <type 18>; }
type 18 *<type 19>
type 19 "io.SectionReader" <type 20>
 func (s <esc:0x1> <type 18>) Size () <type -4>
 func (s <esc:0x1> <type 18>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (s <esc:0x9> <type 18>) ReadAt (p <type 16>, off <type -4>) (n <type -11>, err <type -19>)
 func (s <esc:0x9> <type 18>) Read (p <type 16>) (n <type -11>, err <type -19>)
type 20 struct { .io.r <type 14>; .io.base <type -4>; .io.off <type -4>; .io.limit <type -4>; }
type 21 "io.ReadSeeker" <type 22>
type 22 interface { ? <type 23>; ? <type 25>; }
type 23 "io.Reader" <type 24>
type 24 interface { Read (p <type 16>) (n <type -11>, err <type -19>); }
type 25 "io.Seeker" <type 26>
type 26 interface { Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>); }
type 27 struct { Name <type -16>; Size <type -7>; Offset <type -7>; }
type 28 struct { Value <type -8>; Type <type -21>; Name <type -16>; }
const Magic386 = 491 
const Magic64 = 32768 
const MagicAMD64 = 35479 
const MagicARM = 1607 
func NewFile (r <type 14>) (? <type 11>, ? <type -19>)
func Open (name <type -16>) (? <type 11>, ? <type -19>)
checksum 31B5325090A8A419D231ACE51888023831AD29AE
v3;
package encoding
pkgpath encoding
types 10 5 34 36 32 34 71 21 65 69 63
type 1 "BinaryMarshaler" <type 5>
type 2 "BinaryUnmarshaler" <type 7>
type 3 "TextMarshaler" <type 8>
type 4 "TextUnmarshaler" <type 9>
type 5 interface { MarshalBinary () (data <type 6>, err <type -19>); }
type 6 [] <type -20>
type 7 interface { UnmarshalBinary (data <type 6>) <type -19>; }
type 8 interface { MarshalText () (text <type 6>, err <type -19>); }
type 9 interface { UnmarshalText (text <type 6>) <type -19>; }
checksum 69B50712F75237E0B09815CA7E763EF2C28F72ED
v3;
package ascii85
pkgpath encoding/ascii85
import io io "io"
import strconv strconv "strconv"
init cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import
init_graph 1 0 1 2 1 3 1 5 2 0 2 3 4 0 4 2 4 3 5 0 5 2 5 3
types 11 2 76 21 28 71 28 72 33 45 29 43
type 1 "CorruptInputError" <type -4>
 func (e <type 1>) Error () <type -16>
type 2 [] <type -20>
type 3 "io.Reader" <type 4>
type 4 interface { Read (p <type 2>) (n <type -11>, err <type -19>); }
type 5 "io.Writer" <type 6>
type 6 interface { Write (p <type 2>) (n <type -11>, err <type -19>); }
type 7 "io.WriteCloser" <type 8>
type 8 interface { ? <type 5>; ? <type 9>; }
type 9 "io.Closer" <type 10>
type 10 interface { Close () <type -19>; }
func Decode (dst <esc:0x1> <type 2>, src <esc:0x1> <type 2>, flush <type -15>) (ndst <type -11>, nsrc <type -11>, err <type -19>)
func Encode (dst <esc:0x1> <type 2>, src <esc:0x1> <type 2>) <type -11>
func MaxEncodedLen (n <type -11>) <type -11>
func NewDecoder (r <type 3>) <type 3>
func NewEncoder (w <type 5>) <type 7>
checksum 3FA8E14A30980498F7B4A4F0E7BB6A64E2A4DD15
v3;
package asn1
pkgpath encoding/asn1
import errors errors "errors"
import fmt fmt "fmt"
import math math "math"
import big math/big "math/big"
import reflect reflect "reflect"
import strconv strconv "strconv"
import strings strings "strings"
import time time "time"
import utf8 unicode/utf8 "unicode/utf8"
init asn1 encoding..z2fasn1..import bytes bytes..import binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import big math..z2fbig..import rand math..z2frand..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 1 4 1 7 1 12 1 13 1 15 1 18 2 4 2 7 2 11 2 12 2 13 2 14 2 15 2 18 3 4 3 5 3 6 3 7 3 10 3 11 3 12 3 13 3 14 3 15 3 16 3 17 3 18 5 4 5 7 5 12 5 13 5 15 5 16 5 17 7 4 7 12 7 13 7 15 8 1 8 2 8 3 8 4 8 5 8 6 8 7 8 9 8 10 8 11 8 12 8 13 8 14 8 15 8 16 8 17 8 18 9 4 9 12 9 13 9 15 10 4 10 5 10 6 10 7 10 12 10 13 10 15 10 16 10 17 11 4 11 12 11 13 11 14 11 15 11 18 12 4 12 13 14 4 14 12 14 13 15 4 15 12 15 13 16 4 16 12 16 13 16 15 17 4 17 12 17 13 17 15 17 16
types 15 9 140 31 25 161 30 28 84 80 57 22 22 22 114 35
type 1 "BitString" <type 9>
 func (b <esc:0x1> <type 1>) At (i <type -11>) <type -11>
 func (b <esc:0x12> <type 1>) RightAlign () <type 10>
type 2 "Enumerated" <type -11>
type 3 "Flag" <type -15>
type 4 "ObjectIdentifier" <type 12>
 func (oi <esc:0x1> <type 4>) Equal (other <esc:0x1> <type 4>) <type -15>
 func (oi <esc:0x1> <type 4>) String () <type -16>
type 5 "RawContent" <type 10>
type 6 "RawValue" <type 13>
type 7 "StructuralError" <type 14>
 func (e <esc:0x1> <type 7>) Error () <type -16>
type 8 "SyntaxError" <type 14>
 func (e <esc:0x1> <type 8>) Error () <type -16>
type 9 struct { Bytes <type 10>; BitLength <type -11>; }
type 10 [] <type -20>
type 11 interface { }
type 12 [] <type -11>
type 13 struct { Class <type -11>; Tag <type -11>; IsCompound <type -15>; Bytes <type 10>; FullBytes <type 10>; }
type 14 struct { Msg <type -16>; }
const ClassApplication = 1 
const ClassContextSpecific = 2 
const ClassPrivate = 3 
const ClassUniversal = 0 
func Marshal (val <type 11>) (? <type 10>, ? <type -19>)
func MarshalWithParams (val <type 11>, params <type -16>) (? <type 10>, ? <type -19>)
var NullBytes <type 10>
var NullRawValue <type 6>
const TagBitString = 3 
const TagBoolean = 1 
const TagEnum = 10 
const TagGeneralString = 27 
const TagGeneralizedTime = 24 
const TagIA5String = 22 
const TagInteger = 2 
const TagNull = 5 
const TagNumericString = 18 
const TagOID = 6 
const TagOctetString = 4 
const TagPrintableString = 19 
const TagSequence = 16 
const TagSet = 17 
const TagT61String = 20 
const TagUTCTime = 23 
const TagUTF8String = 12 
func Unmarshal (b <type 10>, val <type 11>) (rest <type 10>, err <type -19>)
func UnmarshalWithParams (b <type 10>, val <type 11>, params <type -16>) (rest <type 10>, err <type -19>)
checksum C8B655987721D20C5DE9A6C0C573B68A4DFB3CF2
v3;
package base32
pkgpath encoding/base32
import bytes bytes "bytes"
import io io "io"
import strconv strconv "strconv"
import strings strings "strings"
init base32 encoding..z2fbase32..import bytes bytes..import cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 1 2 1 3 1 4 1 5 1 7 1 8 3 2 3 4 3 5 3 7 4 2 4 5 6 2 6 4 6 5 7 2 7 4 7 5
types 16 3 76 760 126 24 25 17 21 28 71 30 73 35 48 30 43
type 1 "CorruptInputError" <type -4>
 func (e <type 1>) Error () <type -16>
type 2 "Encoding" <type 3>
 func (enc <type 2>) WithPadding (padding <type -21>) <type 6>
 func (enc <esc:0x1> <type 6>) Encode (dst <esc:0x1> <type 7>, src <esc:0x1> <type 7>)
 func (enc <esc:0x1> <type 6>) EncodeToString (src <esc:0x1> <type 7>) <type -16>
 func (enc <esc:0x1> <type 6>) EncodedLen (n <type -11>) <type -11>
 func (enc <esc:0x1> <type 6>) .encoding/base32.decode (dst <esc:0x1> <type 7>, src <esc:0x1> <type 7>) (n <type -11>, end <type -15>, err <type -19>)
 func (enc <esc:0x1> <type 6>) Decode (dst <esc:0x1> <type 7>, src <esc:0x1> <type 7>) (n <type -11>, err <type -19>)
 func (enc <esc:0x1> <type 6>) DecodeString (s <esc:0x1> <type -16>) (? <type 7>, ? <type -19>)
 func (enc <esc:0x1> <type 6>) DecodedLen (n <type -11>) <type -11>
type 3 struct { .encoding/base32.encode <type 4>; .encoding/base32.decodeMap <type 5>; .encoding/base32.padChar <type -21>; }
type 4 [32 ] <type -20>
type 5 [256 ] <type -20>
type 6 *<type 2>
type 7 [] <type -20>
type 8 "io.Reader" <type 9>
type 9 interface { Read (p <type 7>) (n <type -11>, err <type -19>); }
type 10 "io.Writer" <type 11>
type 11 interface { Write (p <type 7>) (n <type -11>, err <type -19>); }
type 12 "io.WriteCloser" <type 13>
type 13 interface { ? <type 10>; ? <type 14>; }
type 14 "io.Closer" <type 15>
type 15 interface { Close () <type -19>; }
var HexEncoding <type 6>
func NewDecoder (enc <type 6>, r <type 8>) <type 8>
func NewEncoder (enc <type 6>, w <type 10>) <type 12>
func NewEncoding (encoder <esc:0x1> <type -16>) <type 6>
const NoPadding <type -21> = -1 
var StdEncoding <type 6>
const StdPadding <type -21> = 61' 
checksum 2BDAABBC73AFDA2B255D81D0EA094BCDBB48AA7A
v3;
package base64
pkgpath encoding/base64
import binary encoding/binary "encoding/binary"
import io io "io"
import strconv strconv "strconv"
init base64 encoding..z2fbase64..import binary encoding..z2fbinary..import cpu internal..z2fcpu..import io io..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 3 2 3 5 3 6 3 8 4 2 4 5 4 6 4 7 4 8 4 9 5 2 5 6 7 2 7 5 7 6 8 2 8 5 8 6
types 16 3 76 1046 162 24 25 17 21 28 71 30 73 35 48 30 43
type 1 "CorruptInputError" <type -4>
 func (e <type 1>) Error () <type -16>
type 2 "Encoding" <type 3>
 func (enc <type 2>) WithPadding (padding <type -21>) <type 6>
 func (enc <type 2>) Strict () <type 6>
 func (enc <esc:0x1> <type 6>) Encode (dst <esc:0x1> <type 7>, src <esc:0x1> <type 7>)
 func (enc <esc:0x1> <type 6>) EncodeToString (src <esc:0x1> <type 7>) <type -16>
 func (enc <esc:0x1> <type 6>) EncodedLen (n <type -11>) <type -11>
 func (enc <esc:0x1> <type 6>) .encoding/base64.decodeQuantum (dst <esc:0x1> <type 7>, src <esc:0x1> <type 7>, si <type -11>) (nsi <type -11>, n <type -11>, err <type -19>)
 func (enc <esc:0x1> <type 6>) DecodeString (s <esc:0x1> <type -16>) (? <type 7>, ? <type -19>)
 func (enc <esc:0x1> <type 6>) Decode (dst <esc:0x1> <type 7>, src <esc:0x1> <type 7>) (n <type -11>, err <type -19>)
 func (enc <esc:0x1> <type 6>) .encoding/base64.decode32 (src <esc:0x1> <type 7>) (dn <type -7>, ok <type -15>)
 func (enc <esc:0x1> <type 6>) .encoding/base64.decode64 (src <esc:0x1> <type 7>) (dn <type -8>, ok <type -15>)
 func (enc <esc:0x1> <type 6>) DecodedLen (n <type -11>) <type -11>
type 3 struct { .encoding/base64.encode <type 4>; .encoding/base64.decodeMap <type 5>; .encoding/base64.padChar <type -21>; .encoding/base64.strict <type -15>; }
type 4 [64 ] <type -20>
type 5 [256 ] <type -20>
type 6 *<type 2>
type 7 [] <type -20>
type 8 "io.Reader" <type 9>
type 9 interface { Read (p <type 7>) (n <type -11>, err <type -19>); }
type 10 "io.Writer" <type 11>
type 11 interface { Write (p <type 7>) (n <type -11>, err <type -19>); }
type 12 "io.WriteCloser" <type 13>
type 13 interface { ? <type 10>; ? <type 14>; }
type 14 "io.Closer" <type 15>
type 15 interface { Close () <type -19>; }
func NewDecoder (enc <type 6>, r <type 8>) <type 8>
func NewEncoder (enc <type 6>, w <type 10>) <type 12>
func NewEncoding (encoder <esc:0x1> <type -16>) <type 6>
const NoPadding <type -21> = -1 
var RawStdEncoding <type 6>
var RawURLEncoding <type 6>
var StdEncoding <type 6>
const StdPadding <type -21> = 61' 
var URLEncoding <type 6>
checksum FD0166721CD760EEE15BF9C44F64FA6F58E324CB
v3;
package binary
pkgpath encoding/binary
import errors errors "errors"
import io io "io"
import math math "math"
import reflect reflect "reflect"
init binary encoding..z2fbinary..import cpu internal..z2fcpu..import io io..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 2 1 2 4 2 5 2 7 3 1 3 4 3 5 3 6 3 7 3 8 4 1 4 5 6 1 6 4 6 5 7 1 7 4 7 5
types 14 2 28 1052 21 18 247 1053 28 71 21 34 64 30 73
type 1 "ByteOrder" <type 5>
type 2 ".encoding/binary.bigEndian" <type 4>
 func (? <esc:0x1> <type 2>) Uint16 (b <esc:0x1> <type 3>) <type -6>
 func (? <esc:0x1> <type 2>) PutUint16 (b <esc:0x1> <type 3>, v <type -6>)
 func (? <esc:0x1> <type 2>) Uint32 (b <esc:0x1> <type 3>) <type -7>
 func (? <esc:0x1> <type 2>) PutUint32 (b <esc:0x1> <type 3>, v <type -7>)
 func (? <esc:0x1> <type 2>) Uint64 (b <esc:0x1> <type 3>) <type -8>
 func (? <esc:0x1> <type 2>) PutUint64 (b <esc:0x1> <type 3>, v <type -8>)
 func (? <esc:0x1> <type 2>) String () ($ret8 <type -16>) <inl:215>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/encoding/binary/binary.go:141
  { //141
   $ret8 = "BigEndian" //141
   return //141
  } //0
 func (? <esc:0x1> <type 2>) GoString () ($ret9 <type -16>) <inl:222>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/encoding/binary/binary.go:143
  { //143
   $ret9 = "binary.BigEndian" //143
   return //143
  } //0
type 3 [] <type -20>
type 4 struct { }
type 5 interface { PutUint16 (? <type 3>, ? <type -6>); PutUint32 (? <type 3>, ? <type -7>); PutUint64 (? <type 3>, ? <type -8>); String () <type -16>; Uint16 (? <type 3>) <type -6>; Uint32 (? <type 3>) <type -7>; Uint64 (? <type 3>) <type -8>; }
type 6 ".encoding/binary.littleEndian" <type 4>
 func (? <esc:0x1> <type 6>) Uint16 (b <esc:0x1> <type 3>) <type -6>
 func (? <esc:0x1> <type 6>) PutUint16 (b <esc:0x1> <type 3>, v <type -6>)
 func (? <esc:0x1> <type 6>) Uint32 (b <esc:0x1> <type 3>) <type -7>
 func (? <esc:0x1> <type 6>) PutUint32 (b <esc:0x1> <type 3>, v <type -7>)
 func (? <esc:0x1> <type 6>) Uint64 (b <esc:0x1> <type 3>) <type -8>
 func (? <esc:0x1> <type 6>) PutUint64 (b <esc:0x1> <type 3>, v <type -8>)
 func (? <esc:0x1> <type 6>) String () ($ret3 <type -16>) <inl:214>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/encoding/binary/binary.go:93
  { //93
   $ret3 = "LittleEndian" //93
   return //93
  } //0
 func (? <esc:0x1> <type 6>) GoString () ($ret4 <type -16>) <inl:221>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/encoding/binary/binary.go:95
  { //95
   $ret4 = "binary.LittleEndian" //95
   return //95
  } //0
type 7 "io.Reader" <type 8>
type 8 interface { Read (p <type 3>) (n <type -11>, err <type -19>); }
type 9 interface { }
type 10 "io.ByteReader" <type 11>
type 11 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 12 "io.Writer" <type 13>
type 13 interface { Write (p <type 3>) (n <type -11>, err <type -19>); }
var BigEndian <type 2>
var LittleEndian <type 6>
const MaxVarintLen16 = 3 
const MaxVarintLen32 = 5 
const MaxVarintLen64 = 10 
func PutUvarint (buf <esc:0x1> <type 3>, x <type -8>) <type -11>
func PutVarint (buf <esc:0x1> <type 3>, x <type -4>) <type -11>
func Read (r <type 7>, order <type 1>, data <type 9>) <type -19>
func ReadUvarint (r <type 10>) (? <type -8>, ? <type -19>)
func ReadVarint (r <type 10>) (? <type -4>, ? <type -19>)
func Size (v <type 9>) <type -11>
func Uvarint (buf <esc:0x1> <type 3>) (? <type -8>, ? <type -11>)
func Varint (buf <esc:0x1> <type 3>) (? <type -4>, ? <type -11>)
func Write (w <type 12>, order <type 1>, data <type 9>) <type -19>
checksum 0A02AC08ADA083237E11BB133F803FD91BAFF8BF
v3;
package csv
pkgpath encoding/csv
import bufio bufio "bufio"
import bytes bytes "bytes"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import strings strings "strings"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
init csv encoding..z2fcsv..import bufio bufio..import bytes bytes..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 1 2 1 4 1 7 1 10 1 11 1 13 1 16 2 4 2 7 2 10 2 11 2 13 2 16 3 4 3 5 3 6 3 7 3 8 3 9 3 10 3 11 3 12 3 13 3 14 3 15 3 16 5 4 5 7 5 10 5 11 5 13 5 14 5 15 7 4 7 10 7 11 7 13 8 4 8 5 8 6 8 7 8 10 8 11 8 13 8 14 8 15 9 4 9 10 9 11 9 12 9 13 9 16 10 4 10 11 12 4 12 10 12 11 13 4 13 10 13 11 14 4 14 10 14 11 14 13 15 4 15 10 15 11 15 13 15 14
types 24 4 80 373 375 28 71 21 17 28 72 18 93 18 393 19 1427 185 22 22 21 84 19 712 104
type 1 "ParseError" <type 11>
 func (e <esc:0x9> <type 12>) Error () <type -16>
type 2 "Reader" <type 13>
 func (r <esc:0x1aa> <type 7>) Read () (record <type 18>, err <type -19>)
 func (r <esc:0x18a> <type 7>) ReadAll () (records <type 19>, err <type -19>)
 func (r <esc:0x1aa> <type 7>) .encoding/csv.readLine () (? <type 6>, ? <type -19>)
 func (r <esc:0x18a> <type 7>) .encoding/csv.readRecord (dst <esc:0x12> <type 18>) (? <type 18>, ? <type -19>)
type 3 "Writer" <type 20>
 func (w <esc:0x3a> <type 10>) Write (record <esc:0x1> <type 18>) <type -19>
 func (w <esc:0x9> <type 10>) Flush ()
 func (w <esc:0x3a> <type 10>) Error () <type -19>
 func (w <esc:0x3a> <type 10>) WriteAll (records <esc:0x1> <type 19>) <type -19>
 func (w <esc:0x1> <type 10>) .encoding/csv.fieldNeedsQuotes (field <esc:0x1> <type -16>) <type -15>
type 4 "io.Reader" <type 5>
type 5 interface { Read (p <type 6>) (n <type -11>, err <type -19>); }
type 6 [] <type -20>
type 7 *<type 2>
type 8 "io.Writer" <type 9>
type 9 interface { Write (p <type 6>) (n <type -11>, err <type -19>); }
type 10 *<type 3>
type 11 struct { StartLine <type -11>; Line <type -11>; Column <type -11>; Err <type -19>; }
type 12 *<type 1>
type 13 struct { Comma <type -21>; Comment <type -21>; FieldsPerRecord <type -11>; LazyQuotes <type -15>; TrimLeadingSpace <type -15>; ReuseRecord <type -15>; TrailingComma <type -15>; .encoding/csv.r <type 14>; .encoding/csv.numLine <type -11>; .encoding/csv.rawBuffer <type 6>; .encoding/csv.recordBuffer <type 6>; .encoding/csv.fieldIndexes <type 17>; .encoding/csv.lastRecord <type 18>; }
type 14 *<type 15>
type 15 "bufio.Reader" <type 16>
 func (b <esc:0x9> <type 14>) .bufio.writeBuf (w <type 8>) (? <type -4>, ? <type -19>)
 func (b <esc:0x10a> <type 14>) WriteTo (w <type 8>) (n <type -4>, err <type -19>)
 func (b <esc:0x10a> <type 14>) ReadString (delim <type -20>) (? <type -16>, ? <type -19>)
 func (b <esc:0x82a> <type 14>) ReadLine () (line <type 6>, isPrefix <type -15>, err <type -19>)
 func (b <esc:0x1> <type 14>) Size () <type -11>
 func (b <esc:0x9> <type 14>) Reset (r <type 4>)
 func (b <esc:0x9> <type 14>) .bufio.fill ()
 func (b <esc:0x1> <type 14>) UnreadByte () <type -19>
 func (b <esc:0x80a> <type 14>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x1> <type 14>) .bufio.reset (buf <type 6>, r <type 4>)
 func (b <esc:0x22> <type 14>) .bufio.readErr () <type -19>
 func (b <esc:0x1> <type 14>) UnreadRune () <type -19>
 func (b <esc:0x12a> <type 14>) ReadSlice (delim <type -20>) (line <type 6>, err <type -19>)
 func (b <esc:0x12a> <type 14>) Peek (n <type -11>) (? <type 6>, ? <type -19>)
 func (b <esc:0x10a> <type 14>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x10a> <type 14>) Discard (n <type -11>) (discarded <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 14>) Read (p <type 6>) (n <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 14>) ReadBytes (delim <type -20>) (? <type 6>, ? <type -19>)
 func (b <esc:0x1> <type 14>) Buffered () <type -11>
type 16 struct { .bufio.buf <type 6>; .bufio.rd <type 4>; .bufio.r <type -11>; .bufio.w <type -11>; .bufio.err <type -19>; .bufio.lastByte <type -11>; .bufio.lastRuneSize <type -11>; }
type 17 [] <type -11>
type 18 [] <type -16>
type 19 [] <type 18>
type 20 struct { Comma <type -21>; UseCRLF <type -15>; .encoding/csv.w <type 21>; }
type 21 *<type 22>
type 22 "bufio.Writer" <type 23>
 func (b <esc:0x10a> <type 21>) WriteRune (r <type -21>) (size <type -11>, err <type -19>)
 func (b <esc:0x2a> <type 21>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x10a> <type 21>) Write (p <type 6>) (nn <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 21>) ReadFrom (r <type 4>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 21>) Buffered () <type -11>
 func (b <esc:0x10a> <type 21>) WriteString (s <esc:0x1> <type -16>) (? <type -11>, ? <type -19>)
 func (b <esc:0x1> <type 21>) Available () <type -11>
 func (b <esc:0x2a> <type 21>) Flush () <type -19>
 func (b <esc:0x1> <type 21>) Reset (w <type 8>)
 func (b <esc:0x1> <type 21>) Size () <type -11>
type 23 struct { .bufio.err <type -19>; .bufio.buf <type 6>; .bufio.n <type -11>; .bufio.wr <type 8>; }
var ErrBareQuote <type -19>
var ErrFieldCount <type -19>
var ErrQuote <type -19>
var ErrTrailingComma <type -19>
func NewReader (r <type 4>) <type 7>
func NewWriter (w <type 8>) <type 10>
checksum 58C561D7B5F294FE682C374A2BC0AAA6AECF0CDC
v3;
package gob
pkgpath encoding/gob
import bufio bufio "bufio"
import encoding encoding "encoding"
import binary encoding/binary "encoding/binary"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import math math "math"
import bits math/bits "math/bits"
import os os "os"
import reflect reflect "reflect"
import sync sync "sync"
import atomic sync/atomic "sync/atomic"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
indirectimport unsafe unsafe
init gob encoding..z2fgob..import bufio bufio..import bytes bytes..import binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 1 2 1 5 1 8 1 11 1 12 1 14 1 17 2 5 2 8 2 11 2 12 2 14 2 17 3 5 3 8 3 10 3 11 3 12 3 13 3 14 3 17 4 5 4 6 4 7 4 8 4 9 4 10 4 11 4 12 4 13 4 14 4 15 4 16 4 17 6 5 6 8 6 11 6 12 6 14 6 15 6 16 8 5 8 11 8 12 8 14 9 5 9 6 9 7 9 8 9 11 9 12 9 14 9 15 9 16 10 5 10 11 10 12 10 13 10 14 10 17 11 5 11 12 13 5 13 11 13 12 14 5 14 11 14 12 15 5 15 11 15 12 15 14 16 5 16 11 16 12 16 14 16 15
types 131 6 376 3888 2054 31 31 48 199 40 210 34 18 314 89 19 64 30 73 22 440 19 82 33 19 109 167 19 265 62 19 249 46 19 195 48 21 19 43 19 261 60 19 209 31 34 33 972 78 40 145 215 22 34 75 35 106 3920 19 2084 21 36 145 20 35 13 355 47 46 20 19 274 100 24 22 21 22 19 184 64 80 280 33 19 19 44 85 21 43 141 40 52 19 19 284 140 18 44 86 19 48 256 36 20 35 34 246 23 32 75 21 281 21 45 144 42 55 209 19 21 390 84 26 25 21 46 52 23 46 52 59 65
type 1 "CommonType" <type 6>
 func (t <esc:0x1> <type 11>) .encoding/gob.id () <type 7>
 func (t <esc:0x1> <type 11>) .encoding/gob.setId (id <type 7>)
 func (t <esc:0x22> <type 11>) .encoding/gob.string () <type -16>
 func (t <esc:0x22> <type 11>) .encoding/gob.safeString (seen <esc:0x1> <type 10>) <type -16>
 func (t <esc:0x22> <type 11>) .encoding/gob.name () <type -16>
type 2 "Decoder" <type 12>
 func (dec <type 95>) .encoding/gob.newDecoderState (buf <type 20>) <type 92>
 func (dec <esc:0x9> <type 95>) .encoding/gob.freeDecoderState (d <type 92>)
 func (dec <type 95>) .encoding/gob.decodeSingle (engine <esc:0x9> <type 83>, value <type 56>)
 func (dec <type 95>) .encoding/gob.decodeStruct (engine <esc:0x9> <type 83>, value <type 56>)
 func (dec <type 95>) .encoding/gob.ignoreStruct (engine <esc:0x9> <type 83>)
 func (dec <type 95>) .encoding/gob.ignoreSingle (engine <esc:0x9> <type 83>)
 func (dec <esc:0x1> <type 95>) .encoding/gob.decodeArrayHelper (state <type 92>, value <type 56>, elemOp <type 89>, length <type -11>, ovfl <type -19>, helper <esc:0x1> <type 96>)
 func (dec <esc:0x1> <type 95>) .encoding/gob.decodeArray (state <type 92>, value <type 56>, elemOp <type 89>, length <type -11>, ovfl <type -19>, helper <esc:0x1> <type 96>)
 func (dec <esc:0x1> <type 95>) .encoding/gob.decodeMap (mtyp <type 45>, state <type 92>, value <type 56>, keyOp <type 89>, elemOp <type 89>, ovfl <type -19>)
 func (dec <esc:0x1> <type 95>) .encoding/gob.ignoreArrayHelper (state <type 92>, elemOp <type 89>, length <type -11>)
 func (dec <esc:0x1> <type 95>) .encoding/gob.ignoreArray (state <type 92>, elemOp <type 89>, length <type -11>)
 func (dec <esc:0x1> <type 95>) .encoding/gob.ignoreMap (state <type 92>, keyOp <type 89>, elemOp <type 89>)
 func (dec <esc:0x1> <type 95>) .encoding/gob.decodeSlice (state <type 92>, value <type 56>, elemOp <type 89>, ovfl <type -19>, helper <esc:0x1> <type 96>)
 func (dec <esc:0x1> <type 95>) .encoding/gob.ignoreSlice (state <type 92>, elemOp <type 89>)
 func (dec <type 95>) .encoding/gob.decodeInterface (ityp <type 45>, state <esc:0x9> <type 92>, value <type 56>)
 func (dec <type 95>) .encoding/gob.ignoreInterface (state <esc:0x1> <type 92>)
 func (dec <esc:0x1> <type 95>) .encoding/gob.decodeGobDecoder (ut <esc:0x1> <type 98>, state <esc:0x9> <type 92>, value <type 56>)
 func (dec <esc:0x1> <type 95>) .encoding/gob.ignoreGobDecoder (state <esc:0x1> <type 92>)
 func (dec <type 95>) .encoding/gob.decOpFor (wireId <type 7>, rt <type 45>, name <esc:0x1> <type -16>, inProgress <esc:0x1> <type 101>) <type 102>
 func (dec <type 95>) .encoding/gob.decIgnoreOpFor (wireId <type 7>, inProgress <esc:0x1> <type 103>) <type 102>
 func (dec <esc:0x1> <type 95>) .encoding/gob.gobDecodeOpFor (ut <type 98>) <type 102>
 func (dec <esc:0x1> <type 95>) .encoding/gob.compatibleType (fr <type 45>, fw <type 7>, inProgress <esc:0x1> <type 104>) <type -15>
 func (dec <esc:0x52> <type 95>) .encoding/gob.typeString (remoteId <type 7>) <type -16>
 func (dec <type 95>) .encoding/gob.compileSingle (remoteId <type 7>, ut <esc:0x9> <type 98>) (engine <type 83>, err <type -19>)
 func (dec <type 95>) .encoding/gob.compileIgnoreSingle (remoteId <type 7>) <type 83>
 func (dec <type 95>) .encoding/gob.compileDec (remoteId <type 7>, ut <esc:0x9> <type 98>) (engine <type 83>, err <type -19>)
 func (dec <type 95>) .encoding/gob.getDecEnginePtr (remoteId <type 7>, ut <esc:0x9> <type 98>) (enginePtr <type 82>, err <type -19>)
 func (dec <type 95>) .encoding/gob.getIgnoreEnginePtr (wireId <type 7>) (enginePtr <type 82>, err <type -19>)
 func (dec <type 95>) .encoding/gob.decodeValue (wireId <type 7>, value <type 56>)
 func (dec <type 95>) .encoding/gob.decodeIgnoredValue (wireId <type 7>)
 func (dec <type 95>) .encoding/gob.recvType (id <type 7>)
 func (dec <esc:0x9> <type 95>) .encoding/gob.recvMessage () <type -15>
 func (dec <esc:0x9> <type 95>) .encoding/gob.readMessage (nbytes <type -11>)
 func (dec <type 95>) .encoding/gob.nextInt () <type -4>
 func (dec <type 95>) .encoding/gob.nextUint () <type -8>
 func (dec <type 95>) .encoding/gob.decodeTypeSequence (isInterface <type -15>) <type 7>
 func (dec <type 95>) Decode (e <type 73>) <type -19>
 func (dec <type 95>) DecodeValue (v <type 56>) <type -19>
type 3 "Encoder" <type 105>
 func (enc <type 117>) .encoding/gob.newEncoderState (b <type 118>) <type 109>
 func (enc <esc:0x9> <type 117>) .encoding/gob.freeEncoderState (e <type 109>)
 func (enc <type 117>) .encoding/gob.encodeSingle (b <type 118>, engine <esc:0x9> <type 123>, value <type 56>)
 func (enc <type 117>) .encoding/gob.encodeStruct (b <type 118>, engine <esc:0x9> <type 123>, value <type 56>)
 func (enc <type 117>) .encoding/gob.encodeArray (b <type 118>, value <type 56>, op <esc:0x1> <type 114>, elemIndir <type -11>, length <type -11>, helper <esc:0x1> <type 127>)
 func (enc <type 117>) .encoding/gob.encodeMap (b <type 118>, mv <esc:0x9> <type 56>, keyOp <esc:0x1> <type 114>, elemOp <esc:0x1> <type 114>, keyIndir <type -11>, elemIndir <type -11>)
 func (enc <type 117>) .encoding/gob.encodeInterface (b <type 118>, iv <type 56>)
 func (enc <type 117>) .encoding/gob.encodeGobEncoder (b <type 118>, ut <esc:0x1> <type 98>, v <type 56>)
 func (enc <type 117>) .encoding/gob.encode (b <type 118>, value <type 56>, ut <esc:0x9> <type 98>)
 func (enc <esc:0x32> <type 117>) .encoding/gob.writer () <type 107>
 func (enc <esc:0x9> <type 117>) .encoding/gob.pushWriter (w <type 107>)
 func (enc <esc:0x1> <type 117>) .encoding/gob.popWriter ()
 func (enc <esc:0x1> <type 117>) .encoding/gob.setError (err <type -19>)
 func (enc <esc:0x9> <type 117>) .encoding/gob.writeMessage (w <type 107>, b <type 118>)
 func (enc <type 117>) .encoding/gob.sendActualType (w <type 107>, state <esc:0x9> <type 109>, ut <esc:0x9> <type 98>, actual <type 45>) (sent <type -15>)
 func (enc <type 117>) .encoding/gob.sendType (w <type 107>, state <esc:0x9> <type 109>, origt <type 45>) (sent <type -15>)
 func (enc <type 117>) Encode (e <type 73>) <type -19>
 func (enc <type 117>) .encoding/gob.sendTypeDescriptor (w <type 107>, state <esc:0x9> <type 109>, ut <esc:0x9> <type 98>)
 func (enc <esc:0x1> <type 117>) .encoding/gob.sendTypeId (state <esc:0x9> <type 109>, ut <esc:0x1> <type 98>)
 func (enc <type 117>) EncodeValue (value <type 56>) <type -19>
type 4 "GobDecoder" <type 129>
type 5 "GobEncoder" <type 130>
type 6 struct { Name <type -16>; Id <type 7>; }
type 7 ".encoding/gob.typeId" <type -3>
 func (t <type 7>) .encoding/gob.gobType () <type 8>
 func (t <type 7>) .encoding/gob.string () <type -16>
 func (t <type 7>) .encoding/gob.name () <type -16>
type 8 ".encoding/gob.gobType" <type 9>
type 9 interface { .encoding/gob.id () <type 7>; .encoding/gob.name () <type -16>; .encoding/gob.safeString (seen <type 10>) <type -16>; .encoding/gob.setId (id <type 7>); .encoding/gob.string () <type -16>; }
type 10 map [<type 7>] <type -15>
type 11 *<type 1>
type 12 struct { .encoding/gob.mutex <type 13>; .encoding/gob.r <type 16>; .encoding/gob.buf <type 19>; .encoding/gob.wireType <type 22>; .encoding/gob.decoderCache <type 44>; .encoding/gob.ignorerCache <type 81>; .encoding/gob.freeList <type 92>; .encoding/gob.countBuf <type 18>; .encoding/gob.err <type -19>; }
type 13 "sync.Mutex" <type 15>
 func (m <type 14>) Lock ()
 func (m <type 14>) Unlock ()
type 14 *<type 13>
type 15 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 16 "io.Reader" <type 17>
type 17 interface { Read (p <type 18>) (n <type -11>, err <type -19>); }
type 18 [] <type -20>
type 19 ".encoding/gob.decBuffer" <type 21>
 func (d <esc:0x1> <type 20>) Read (p <esc:0x1> <type 18>) (? <type -11>, ? <type -19>)
 func (d <esc:0x1> <type 20>) Drop (n <type -11>)
 func (d <esc:0x1> <type 20>) Size (n <type -11>)
 func (d <esc:0x1> <type 20>) ReadByte () (? <type -20>, ? <type -19>)
 func (d <esc:0x1> <type 20>) Len () <type -11>
 func (d <esc:0x22> <type 20>) Bytes () <type 18>
 func (d <esc:0x1> <type 20>) Reset ()
type 20 *<type 19>
type 21 struct { .encoding/gob.data <type 18>; .encoding/gob.offset <type -11>; }
type 22 map [<type 7>] <type 23>
type 23 *<type 24>
type 24 ".encoding/gob.wireType" <type 25>
 func (w <esc:0x32> <type 23>) .encoding/gob.string () <type -16>
type 25 struct { ArrayT <type 26>; SliceT <type 29>; StructT <type 32>; MapT <type 38>; GobEncoderT <type 41>; BinaryMarshalerT <type 41>; TextMarshalerT <type 41>; }
type 26 *<type 27>
type 27 ".encoding/gob.arrayType" <type 28>
 func (a <type 26>) .encoding/gob.init (elem <type 8>, len <type -11>)
 func (a <esc:0x2a> <type 26>) .encoding/gob.safeString (seen <type 10>) <type -16>
 func (a <esc:0x2a> <type 26>) .encoding/gob.string () <type -16>
type 28 struct { ? <type 1>; Elem <type 7>; Len <type -11>; }
type 29 *<type 30>
type 30 ".encoding/gob.sliceType" <type 31>
 func (s <type 29>) .encoding/gob.init (elem <type 8>)
 func (s <esc:0x22> <type 29>) .encoding/gob.safeString (seen <type 10>) <type -16>
 func (s <esc:0x22> <type 29>) .encoding/gob.string () <type -16>
type 31 struct { ? <type 1>; Elem <type 7>; }
type 32 *<type 33>
type 33 ".encoding/gob.structType" <type 34>
 func (s <esc:0x2a> <type 32>) .encoding/gob.safeString (seen <type 10>) <type -16>
 func (s <esc:0x2a> <type 32>) .encoding/gob.string () <type -16>
type 34 struct { ? <type 1>; Field <type 35>; }
type 35 [] <type 36>
type 36 *<type 37>
type 37 ".encoding/gob.fieldType" <type 6>
type 38 *<type 39>
type 39 ".encoding/gob.mapType" <type 40>
 func (m <type 38>) .encoding/gob.init (key <type 8>, elem <type 8>)
 func (m <esc:0x22> <type 38>) .encoding/gob.safeString (seen <type 10>) <type -16>
 func (m <esc:0x22> <type 38>) .encoding/gob.string () <type -16>
type 40 struct { ? <type 1>; Key <type 7>; Elem <type 7>; }
type 41 *<type 42>
type 42 ".encoding/gob.gobEncoderType" <type 43>
 func (g <esc:0x22> <type 41>) .encoding/gob.safeString (seen <esc:0x1> <type 10>) <type -16>
 func (g <esc:0x22> <type 41>) .encoding/gob.string () <type -16>
type 43 struct { ? <type 1>; }
type 44 map [<type 45>] <type 81>
type 45 "reflect.Type" <type 46>
type 46 interface { Align () <type -11>; AssignableTo (u <type 45>) <type -15>; Bits () <type -11>; ChanDir () <type 47>; Comparable () <type -15>; ConvertibleTo (u <type 45>) <type -15>; Elem () <type 45>; Field (i <type -11>) <type 48>; FieldAlign () <type -11>; FieldByIndex (index <type 51>) <type 48>; FieldByName (name <type -16>) (? <type 48>, ? <type -15>); FieldByNameFunc (match <type 52>) (? <type 48>, ? <type -15>); Implements (u <type 45>) <type -15>; In (i <type -11>) <type 45>; IsVariadic () <type -15>; Key () <type 45>; Kind () <type 53>; Len () <type -11>; Method (? <type -11>) <type 54>; MethodByName (? <type -16>) (? <type 54>, ? <type -15>); Name () <type -16>; NumField () <type -11>; NumIn () <type -11>; NumMethod () <type -11>; NumOut () <type -11>; Out (i <type -11>) <type 45>; PkgPath () <type -16>; Size () <type -13>; String () <type -16>; .reflect.common () <type 57>; .reflect.rawString () <type -16>; .reflect.uncommon () <type 69>; }
type 47 "reflect.ChanDir" <type -11>
 func (d <type 47>) String () <type -16>
type 48 "reflect.StructField" <type 49>
type 49 struct { Name <type -16>; PkgPath <type -16>; Type <type 45>; Tag <type 50>; Offset <type -13>; Index <type 51>; Anonymous <type -15>; }
type 50 "reflect.StructTag" <type -16>
 func (tag <esc:0x12> <type 50>) Lookup (key <esc:0x1> <type -16>) (value <type -16>, ok <type -15>)
 func (tag <esc:0x12> <type 50>) Get (key <esc:0x1> <type -16>) <type -16>
type 51 [] <type -11>
type 52 (? <type -16>) <type -15>
type 53 "reflect.Kind" <type -12>
 func (k <type 53>) String () <type -16>
type 54 "reflect.Method" <type 55>
type 55 struct { Name <type -16>; PkgPath <type -16>; Type <type 45>; Func <type 56>; Index <type -11>; }
type 56 "reflect.Value" <type 79>
 func (v <type 56>) Convert (t <type 45>) <type 56>
 func (v <type 56>) .reflect.assignTo (context <esc:0x1> <type -16>, dst <type 57>, target <type 63>) <type 56>
 func (v <esc:0x12> <type 56>) UnsafeAddr () <type -13>
 func (v <esc:0x1> <type 56>) Uint () <type -8>
 func (v <esc:0x9> <type 56>) TrySend (x <type 56>) <type -15>
 func (v <type 56>) String () <type -16>
 func (v <esc:0x1> <type 56>) IsNil () <type -15>
 func (v <esc:0x1> <type 56>) InterfaceData () <type 72>
 func (v <esc:0x1> <type 56>) SetInt (x <type -4>)
 func (v <type 56>) Len () <type -11>
 func (v <esc:0x1> <type 56>) SetPointer (x <type 63>)
 func (v <esc:0x1> <type 56>) Int () <type -4>
 func (v <esc:0x1> <type 56>) SetLen (n <type -11>)
 func (v <esc:0x12> <type 56>) Index (i <type -11>) <type 56>
 func (v <esc:0x1> <type 56>) SetFloat (x <type -10>)
 func (v <esc:0x1> <type 56>) SetCap (n <type -11>)
 func (v <esc:0x9> <type 56>) SetMapIndex (key <type 56>, val <type 56>)
 func (v <esc:0x1a> <type 56>) Elem () <type 56>
 func (v <type 56>) Type () <type 45>
 func (v <esc:0x9> <type 56>) NumMethod () <type -11>
 func (v <esc:0x1> <type 56>) IsValid () <type -15>
 func (v <type 56>) Set (x <type 56>)
 func (v <esc:0x1> <type 56>) CanAddr () <type -15>
 func (v <type 56>) FieldByName (name <esc:0x1> <type -16>) <type 56>
 func (v <esc:0x12> <type 56>) Field (i <type -11>) <type 56>
 func (v <esc:0x1> <type 56>) OverflowComplex (x <type -18>) <type -15>
 func (v <esc:0x1> <type 56>) Float () <type -10>
 func (v <esc:0x1> <type 56>) Kind () <type 53>
 func (v <esc:0x1> <type 56>) SetString (x <type -16>)
 func (v <esc:0x12> <type 56>) .reflect.pointer () <type 63>
 func (v <type 56>) Interface () (i <type 73>)
 func (v <esc:0x9> <type 56>) MapKeys () <type 74>
 func (v <esc:0x9> <type 56>) .reflect.send (x <type 56>, nb <type -15>) (selected <type -15>)
 func (v <type 56>) Addr () <type 56>
 func (v <type 56>) TryRecv () (x <type 56>, ok <type -15>)
 func (v <esc:0x1> <type 56>) Bool () <type -15>
 func (v <esc:0x1a> <type 56>) Method (i <type -11>) <type 56>
 func (v <type 56>) Call (in <esc:0x9> <type 74>) <type 74>
 func (v <type 56>) Close ()
 func (v <esc:0x2a> <type 56>) .reflect.runes () <type 75>
 func (v <esc:0x9> <type 56>) SetBytes (x <type 18>)
 func (v <esc:0x1> <type 56>) CanSet () <type -15>
 func (v <esc:0x1> <type 56>) CanInterface () <type -15>
 func (v <esc:0x9> <type 56>) MapIndex (key <type 56>) <type 56>
 func (v <esc:0x2a> <type 56>) Bytes () <type 18>
 func (v <type 56>) Slice (i <type -11>, j <type -11>) <type 56>
 func (v <type 56>) Cap () <type -11>
 func (v <esc:0x1a> <type 56>) FieldByIndex (index <esc:0x1> <type 51>) <type 56>
 func (v <type 56>) CallSlice (in <esc:0x9> <type 74>) <type 74>
 func (v <esc:0x1> <type 56>) Complex () <type -18>
 func (v <type 56>) MapRange () <type 76>
 func (v <esc:0x1a> <type 56>) MethodByName (name <esc:0x1> <type -16>) <type 56>
 func (v <esc:0x1> <type 56>) NumField () <type -11>
 func (v <esc:0x1> <type 56>) OverflowInt (x <type -4>) <type -15>
 func (v <esc:0x12> <type 56>) Pointer () <type -13>
 func (v <esc:0x1> <type 56>) OverflowFloat (x <type -10>) <type -15>
 func (v <esc:0x9> <type 56>) .reflect.setRunes (x <type 75>)
 func (v <esc:0x1> <type 56>) OverflowUint (x <type -8>) <type -15>
 func (v <type 56>) .reflect.recv (nb <type -15>) (val <type 56>, ok <type -15>)
 func (v <type 56>) Recv () (x <type 56>, ok <type -15>)
 func (v <type 56>) FieldByNameFunc (match <esc:0x1> <type 52>) <type 56>
 func (v <type 56>) .reflect.call (op <esc:0x1> <type -16>, in <esc:0x9> <type 74>) <type 74>
 func (v <esc:0x9> <type 56>) Send (x <type 56>)
 func (v <esc:0x1> <type 56>) SetComplex (x <type -18>)
 func (v <esc:0x1> <type 56>) SetBool (x <type -15>)
 func (v <type 56>) Slice3 (i <type -11>, j <type -11>, k <type -11>) <type 56>
 func (v <esc:0x1> <type 56>) SetUint (x <type -8>)
type 57 *<type 58>
type 58 ".reflect.rtype" <type 65>
 func (t <esc:0x1> <type 57>) Comparable () <type -15>
 func (t <esc:0x9> <type 57>) AssignableTo (u <esc:0x9> <type 45>) <type -15>
 func (t <esc:0x4a> <type 57>) MethodByName (name <esc:0x1> <type -16>) (m <type 54>, ok <type -15>)
 func (t <type 57>) FieldByIndex (index <esc:0x1> <type 51>) <type 48>
 func (t <esc:0x9> <type 57>) ConvertibleTo (u <esc:0x9> <type 45>) <type -15>
 func (t <esc:0x1> <type 57>) .reflect.pointers () <type -15>
 func (t <esc:0x32> <type 57>) .reflect.rawString () <type -16>
 func (t <esc:0x4a> <type 57>) Method (i <type -11>) (m <type 54>)
 func (t <esc:0x9> <type 57>) Out (i <type -11>) <type 45>
 func (t <esc:0x9> <type 57>) NumMethod () <type -11>
 func (t <type 57>) FieldByName (name <esc:0x1> <type -16>) (? <type 48>, ? <type -15>)
 func (t <esc:0x1> <type 57>) Align () <type -11>
 func (t <esc:0x1> <type 57>) Kind () <type 53>
 func (t <esc:0x9> <type 57>) Elem () <type 45>
 func (t <esc:0x1> <type 57>) FieldAlign () <type -11>
 func (t <esc:0x1> <type 57>) Size () <type -13>
 func (t <esc:0x42> <type 57>) Name () <type -16>
 func (t <esc:0x1> <type 57>) Bits () <type -11>
 func (t <esc:0x9> <type 57>) .reflect.exportedMethods () <type 59>
 func (t <esc:0x1> <type 57>) String () <type -16>
 func (t <esc:0x12> <type 57>) .reflect.common () ($ret23 <type 57>)
 func (t <esc:0x9> <type 57>) In (i <type -11>) <type 45>
 func (t <esc:0x1> <type 57>) Len () <type -11>
 func (t <esc:0x1> <type 57>) NumField () <type -11>
 func (t <esc:0x42> <type 57>) PkgPath () <type -16>
 func (t <esc:0x1> <type 57>) ChanDir () <type 47>
 func (t <type 57>) .reflect.ptrTo () <type 57>
 func (t <esc:0x1> <type 57>) NumIn () <type -11>
 func (t <esc:0x1> <type 57>) IsVariadic () <type -15>
 func (t <type 57>) FieldByNameFunc (match <esc:0x1> <type 52>) (? <type 48>, ? <type -15>)
 func (t <esc:0x4a> <type 57>) Field (i <type -11>) <type 48>
 func (t <esc:0x9> <type 57>) Key () <type 45>
 func (t <esc:0x9> <type 57>) Implements (u <type 45>) <type -15>
 func (t <esc:0x1> <type 57>) NumOut () <type -11>
type 59 [] <type 60>
type 60 ".reflect.method" <type 61>
type 61 struct { .reflect.name <type 62>; .reflect.pkgPath <type 62>; .reflect.mtyp <type 57>; .reflect.typ <type 57>; .reflect.tfn <type 63>; }
type 62 *<type -16>
type 63 "unsafe.Pointer" <type 64>
type 64 *any
type 65 struct { .reflect.size <type -13>; .reflect.ptrdata <type -13>; .reflect.hash <type -7>; .reflect.kind <type -5>; .reflect.align <type -1>; .reflect.fieldAlign <type -5>; .reflect._ <type -5>; .reflect.hashfn <type 66>; .reflect.equalfn <type 67>; .reflect.gcdata <type 68>; .reflect.string <type 62>; ? <type 69>; .reflect.ptrToThis <type 57>; }
type 66 (? <type 63>, ? <type -13>) <type -13>
type 67 (? <type 63>, ? <type 63>) <type -15>
type 68 *<type -20>
type 69 *<type 70>
type 70 ".reflect.uncommonType" <type 71>
 func (t <esc:0x32> <type 69>) Name () <type -16>
 func (t <esc:0x32> <type 69>) PkgPath () <type -16>
 func (t <type 69>) .reflect.exportedMethods () <type 59>
 func (t <esc:0x12> <type 69>) .reflect.uncommon () ($ret11 <type 69>)
type 71 struct { .reflect.name <type 62>; .reflect.pkgPath <type 62>; .reflect.methods <type 59>; }
type 72 [2 ] <type -13>
type 73 interface { }
type 74 [] <type 56>
type 75 [] <type -21>
type 76 *<type 77>
type 77 "reflect.MapIter" <type 78>
 func (it <esc:0x9> <type 76>) Value () <type 56>
 func (it <esc:0x1> <type 76>) Next () <type -15>
 func (it <esc:0x9> <type 76>) Key () <type 56>
type 78 struct { .reflect.m <type 56>; .reflect.it <type 63>; }
type 79 struct { .reflect.typ <type 57>; .reflect.ptr <type 63>; ? <type 80>; }
type 80 ".reflect.flag" <type -13>
 func (f <type 80>) .reflect.mustBeAssignable ()
 func (f <type 80>) .reflect.mustBeExported ()
 func (f <type 80>) .reflect.mustBe (expected <type 53>)
 func (f <type 80>) .reflect.ro () <type 80>
 func (f <type 80>) .reflect.kind () <type 53>
type 81 map [<type 7>] <type 82>
type 82 *<type 83>
type 83 *<type 84>
type 84 ".encoding/gob.decEngine" <type 85>
type 85 struct { .encoding/gob.instr <type 86>; .encoding/gob.numInstr <type -11>; }
type 86 [] <type 87>
type 87 ".encoding/gob.decInstr" <type 88>
type 88 struct { .encoding/gob.op <type 89>; .encoding/gob.field <type -11>; .encoding/gob.index <type 51>; .encoding/gob.ovfl <type -19>; }
type 89 ".encoding/gob.decOp" <type 90>
type 90 (i <type 91>, state <type 92>, v <type 56>)
type 91 *<type 87>
type 92 *<type 93>
type 93 ".encoding/gob.decoderState" <type 94>
 func (state <esc:0x1> <type 92>) .encoding/gob.decodeUint () (x <type -8>)
 func (state <esc:0x1> <type 92>) .encoding/gob.decodeInt () <type -4>
 func (state <esc:0x1> <type 92>) .encoding/gob.getLength () (? <type -11>, ? <type -15>)
type 94 struct { .encoding/gob.dec <type 95>; .encoding/gob.b <type 20>; .encoding/gob.fieldnum <type -11>; .encoding/gob.next <type 92>; }
type 95 *<type 2>
type 96 ".encoding/gob.decHelper" <type 97>
type 97 (state <type 92>, v <type 56>, length <type -11>, ovfl <type -19>) <type -15>
type 98 *<type 99>
type 99 ".encoding/gob.userTypeInfo" <type 100>
type 100 struct { .encoding/gob.user <type 45>; .encoding/gob.base <type 45>; .encoding/gob.indir <type -11>; .encoding/gob.externalEnc <type -11>; .encoding/gob.externalDec <type -11>; .encoding/gob.encIndir <type -1>; .encoding/gob.decIndir <type -1>; }
type 101 map [<type 45>] <type 102>
type 102 *<type 89>
type 103 map [<type 7>] <type 102>
type 104 map [<type 45>] <type 7>
type 105 struct { .encoding/gob.mutex <type 13>; .encoding/gob.w <type 106>; .encoding/gob.sent <type 104>; .encoding/gob.countState <type 109>; .encoding/gob.freeList <type 109>; .encoding/gob.byteBuf <type 119>; .encoding/gob.err <type -19>; }
type 106 [] <type 107>
type 107 "io.Writer" <type 108>
type 108 interface { Write (p <type 18>) (n <type -11>, err <type -19>); }
type 109 *<type 110>
type 110 ".encoding/gob.encoderState" <type 116>
 func (state <esc:0x9> <type 109>) .encoding/gob.encodeUint (x <type -8>)
 func (state <esc:0x9> <type 109>) .encoding/gob.encodeInt (i <type -4>)
 func (state <esc:0x9> <type 109>) .encoding/gob.update (instr <esc:0x1> <type 111>)
type 111 *<type 112>
type 112 ".encoding/gob.encInstr" <type 113>
type 113 struct { .encoding/gob.op <type 114>; .encoding/gob.field <type -11>; .encoding/gob.index <type 51>; .encoding/gob.indir <type -11>; }
type 114 ".encoding/gob.encOp" <type 115>
type 115 (i <type 111>, state <type 109>, v <type 56>)
type 116 struct { .encoding/gob.enc <type 117>; .encoding/gob.b <type 118>; .encoding/gob.sendZero <type -15>; .encoding/gob.fieldnum <type -11>; .encoding/gob.buf <type 122>; .encoding/gob.next <type 109>; }
type 117 *<type 3>
type 118 *<type 119>
type 119 ".encoding/gob.encBuffer" <type 120>
 func (e <esc:0x9> <type 118>) WriteByte (c <type -20>)
 func (e <esc:0x9> <type 118>) Write (p <esc:0x1> <type 18>) (? <type -11>, ? <type -19>)
 func (e <esc:0x9> <type 118>) WriteString (s <esc:0x1> <type -16>)
 func (e <esc:0x1> <type 118>) Len () <type -11>
 func (e <esc:0x22> <type 118>) Bytes () <type 18>
 func (e <type 118>) Reset ()
type 120 struct { .encoding/gob.data <type 18>; .encoding/gob.scratch <type 121>; }
type 121 [64 ] <type -20>
type 122 [9 ] <type -20>
type 123 *<type 124>
type 124 ".encoding/gob.encEngine" <type 125>
type 125 struct { .encoding/gob.instr <type 126>; }
type 126 [] <type 112>
type 127 ".encoding/gob.encHelper" <type 128>
type 128 (state <type 109>, v <type 56>) <type -15>
type 129 interface { GobDecode (? <type 18>) <type -19>; }
type 130 interface { GobEncode () (? <type 18>, ? <type -19>); }
func NewDecoder (r <type 16>) <type 95>
func NewEncoder (w <type 107>) <type 117>
func Register (value <type 73>)
func RegisterName (name <type -16>, value <type 73>)
checksum 917BB7D7C20CF07AC96A5C603A4A9F65CAFD8CAF
v3;
package hex
pkgpath encoding/hex
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import strings strings "strings"
init hex encoding..z2fhex..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1 13 1 14 3 2 3 5 3 8 3 9 3 11 3 12 3 13 5 2 5 8 5 9 5 11 6 2 6 3 6 4 6 5 6 8 6 9 6 11 6 12 6 13 7 2 7 8 7 9 7 10 7 11 7 14 8 2 8 9 10 2 10 8 10 9 11 2 11 8 11 9 12 2 12 8 12 9 12 11 13 2 13 8 13 9 13 11 13 12
types 11 2 76 21 28 72 33 45 28 42 29 72
type 1 "InvalidByteError" <type -20>
 func (e <type 1>) Error () <type -16>
type 2 [] <type -20>
type 3 "io.Writer" <type 4>
type 4 interface { Write (p <type 2>) (n <type -11>, err <type -19>); }
type 5 "io.WriteCloser" <type 6>
type 6 interface { ? <type 3>; ? <type 7>; }
type 7 "io.Closer" <type 8>
type 8 interface { Close () <type -19>; }
type 9 "io.Reader" <type 10>
type 10 interface { Read (p <type 2>) (n <type -11>, err <type -19>); }
func Decode (dst <esc:0x1> <type 2>, src <esc:0x1> <type 2>) (? <type -11>, ? <type -19>)
func DecodeString (s <esc:0x1> <type -16>) (? <type 2>, ? <type -19>)
func DecodedLen (x <type -11>) <type -11>
func Dump (data <type 2>) <type -16>
func Dumper (w <type 3>) <type 5>
func Encode (dst <esc:0x1> <type 2>, src <esc:0x1> <type 2>) <type -11>
func EncodeToString (src <esc:0x1> <type 2>) <type -16>
func EncodedLen (n <type -11>) <type -11>
var ErrLength <type -19>
func NewDecoder (r <type 9>) <type 9>
func NewEncoder (w <type 3>) <type 3>
checksum D76172A55F78A50B200B12FED79754EAD689D4C3
v3;
package json
pkgpath encoding/json
import bytes bytes "bytes"
import encoding encoding "encoding"
import base64 encoding/base64 "encoding/base64"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import math math "math"
import reflect reflect "reflect"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import unicode unicode "unicode"
import utf16 unicode/utf16 "unicode/utf16"
import utf8 unicode/utf8 "unicode/utf8"
indirectimport unsafe unsafe
init json encoding..z2fjson..import bytes bytes..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 1 5 1 8 1 11 1 12 1 14 1 17 2 3 2 5 2 8 2 10 2 11 2 12 2 13 2 14 2 17 3 5 3 8 3 10 3 11 3 12 3 13 3 14 3 17 4 5 4 6 4 7 4 8 4 9 4 10 4 11 4 12 4 13 4 14 4 15 4 16 4 17 6 5 6 8 6 11 6 12 6 14 6 15 6 16 8 5 8 11 8 12 8 14 9 5 9 6 9 7 9 8 9 11 9 12 9 14 9 15 9 16 10 5 10 11 10 12 10 13 10 14 10 17 11 5 11 12 13 5 13 11 13 12 14 5 14 11 14 12 15 5 15 11 15 12 15 14 16 5 16 11 16 12 16 14 16 15
types 94 17 972 313 235 86 91 29 84 436 185 83 26 90 89 32 91 92 19 1810 22 30 74 30 73 91 34 309 1331 19 22 3920 33 972 78 40 145 215 22 34 75 35 106 19 2084 21 36 145 20 35 13 355 47 46 20 19 274 100 24 21 22 19 184 64 80 280 21 35 309 394 19 184 47 55 18 231 18 33 18 35 18 66 51 18 18 68 19 68 19 108 19 62 19 52 19
type 1 "Decoder" <type 26>
 func (dec <esc:0x1> <type 73>) UseNumber ()
 func (dec <esc:0x1> <type 73>) DisallowUnknownFields ()
 func (dec <type 73>) Decode (v <type 29>) <type -19>
 func (dec <esc:0x9> <type 73>) Buffered () <type 22>
 func (dec <type 73>) .encoding/json.readValue () (? <type -11>, ? <type -19>)
 func (dec <esc:0x9> <type 73>) .encoding/json.refill () <type -19>
 func (dec <esc:0x9> <type 73>) .encoding/json.tokenPrepareForDecode () <type -19>
 func (dec <esc:0x1> <type 73>) .encoding/json.tokenValueAllowed () <type -15>
 func (dec <esc:0x1> <type 73>) .encoding/json.tokenValueEnd ()
 func (dec <type 73>) Token () (? <type 11>, ? <type -19>)
 func (dec <esc:0x1> <type 73>) .encoding/json.tokenError (c <type -20>) (? <type 11>, ? <type -19>)
 func (dec <esc:0x9> <type 73>) More () <type -15>
 func (dec <esc:0x9> <type 73>) .encoding/json.peek () (? <type -20>, ? <type -19>)
 func (dec <esc:0x1> <type 73>) .encoding/json.offset () <type -4>
type 2 "Delim" <type -21>
 func (d <type 2>) String () ($ret117 <type -16>) <inl:227>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/encoding/json/stream.go:349
  { //350
   $ret117 = $convert(<type -16>, d) //350
   return //350
  } //0
type 3 "Encoder" <type 74>
 func (enc <esc:0x2a> <type 75>) Encode (v <type 29>) <type -19>
 func (enc <esc:0x1> <type 75>) SetIndent (prefix <type -16>, indent <type -16>)
 func (enc <esc:0x1> <type 75>) SetEscapeHTML (on <type -15>)
type 4 "InvalidUTF8Error" <type 76>
 func (e <esc:0x1> <type 77>) Error () <type -16>
type 5 "InvalidUnmarshalError" <type 78>
 func (e <esc:0x9> <type 79>) Error () <type -16>
type 6 "Marshaler" <type 80>
type 7 "MarshalerError" <type 81>
 func (e <esc:0x9> <type 82>) Error () <type -16>
type 8 "Number" <type -16>
 func (n <esc:0x12> <type 8>) String () ($ret5 <type -16>) <inl:225>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/encoding/json/decode.go:190
  { //190
   $ret5 = $convert(<type -16>, n) //190
   return //190
  } //0
 func (n <type 8>) Float64 () (? <type -10>, ? <type -19>)
 func (n <type 8>) Int64 () (? <type -4>, ? <type -19>)
type 9 "RawMessage" <type 19>
 func (m <esc:0x12> <type 9>) MarshalJSON () (? <type 19>, ? <type -19>)
 func (m <esc:0x9> <type 83>) UnmarshalJSON (data <esc:0x1> <type 19>) <type -19>
type 10 "SyntaxError" <type 84>
 func (e <esc:0x22> <type 85>) Error () <type -16>
type 11 "Token" <type 29>
type 12 "UnmarshalFieldError" <type 86>
 func (e <esc:0x9> <type 87>) Error () <type -16>
type 13 "UnmarshalTypeError" <type 88>
 func (e <esc:0x9> <type 89>) Error () <type -16>
type 14 "Unmarshaler" <type 90>
type 15 "UnsupportedTypeError" <type 78>
 func (e <esc:0x9> <type 91>) Error () <type -16>
type 16 "UnsupportedValueError" <type 92>
 func (e <esc:0x1> <type 93>) Error () <type -16>
type 17 *<type 18>
type 18 "bytes.Buffer" <type 24>
 func (b <esc:0x22> <type 17>) .bytes.readSlice (delim <type -20>) (line <type 19>, err <type -19>)
 func (b <esc:0x1> <type 17>) ReadBytes (delim <type -20>) (line <type 19>, err <type -19>)
 func (b <esc:0x1> <type 17>) UnreadByte () <type -19>
 func (b <esc:0x1> <type 17>) UnreadRune () <type -19>
 func (b <esc:0x1> <type 17>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x1> <type 17>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x9> <type 17>) WriteTo (w <type 20>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 17>) Read (p <esc:0x1> <type 19>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 17>) Truncate (n <type -11>)
 func (b <esc:0x1> <type 17>) .bytes.tryGrowByReslice (n <type -11>) (? <type -11>, ? <type -15>)
 func (b <esc:0x1> <type 17>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x22> <type 17>) Bytes () <type 19>
 func (b <esc:0x1> <type 17>) String () <type -16>
 func (b <esc:0x1> <type 17>) Cap () <type -11>
 func (b <esc:0x1> <type 17>) Len () <type -11>
 func (b <esc:0x1> <type 17>) WriteRune (r <type -21>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 17>) .bytes.empty () <type -15>
 func (b <esc:0x1> <type 17>) Reset ()
 func (b <esc:0x22> <type 17>) Next (n <type -11>) <type 19>
 func (b <esc:0x1> <type 17>) .bytes.grow (n <type -11>) <type -11>
 func (b <esc:0x1> <type 17>) Grow (n <type -11>)
 func (b <esc:0x1> <type 17>) Write (p <esc:0x1> <type 19>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 17>) ReadString (delim <type -20>) (line <type -16>, err <type -19>)
 func (b <esc:0x1> <type 17>) WriteString (s <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (b <esc:0x9> <type 17>) ReadFrom (r <type 22>) (n <type -4>, err <type -19>)
type 19 [] <type -20>
type 20 "io.Writer" <type 21>
type 21 interface { Write (p <type 19>) (n <type -11>, err <type -19>); }
type 22 "io.Reader" <type 23>
type 23 interface { Read (p <type 19>) (n <type -11>, err <type -19>); }
type 24 struct { .bytes.buf <type 19>; .bytes.off <type -11>; .bytes.lastRead <type 25>; }
type 25 ".bytes.readOp" <type -1>
type 26 struct { .encoding/json.r <type 22>; .encoding/json.buf <type 19>; .encoding/json.d <type 27>; .encoding/json.scanp <type -11>; .encoding/json.scanned <type -4>; .encoding/json.scan <type 68>; .encoding/json.err <type -19>; .encoding/json.tokenState <type -11>; .encoding/json.tokenStack <type 37>; }
type 27 ".encoding/json.decodeState" <type 67>
 func (d <type 28>) .encoding/json.unmarshal (v <type 29>) <type -19>
 func (d <esc:0x1> <type 28>) .encoding/json.readIndex () <type -11>
 func (d <esc:0x12> <type 28>) .encoding/json.init (data <type 19>) <type 28>
 func (d <esc:0x9> <type 28>) .encoding/json.saveError (err <type -19>)
 func (d <esc:0x9> <type 28>) .encoding/json.addErrorContext (err <esc:0x12> <type -19>) <type -19>
 func (d <type 28>) .encoding/json.skip ()
 func (d <type 28>) .encoding/json.scanNext ()
 func (d <type 28>) .encoding/json.scanWhile (op <type -11>)
 func (d <type 28>) .encoding/json.value (v <type 30>) <type -19>
 func (d <type 28>) .encoding/json.valueQuoted () <type 29>
 func (d <type 28>) .encoding/json.array (v <type 30>) <type -19>
 func (d <type 28>) .encoding/json.object (v <type 30>) <type -19>
 func (d <esc:0x1> <type 28>) .encoding/json.convertNumber (s <type -16>) (? <type 29>, ? <type -19>)
 func (d <esc:0x9> <type 28>) .encoding/json.literalStore (item <type 19>, v <type 30>, fromQuoted <type -15>) <type -19>
 func (d <type 28>) .encoding/json.valueInterface () (val <type 29>)
 func (d <type 28>) .encoding/json.arrayInterface () <type 65>
 func (d <type 28>) .encoding/json.objectInterface () <type 66>
 func (d <type 28>) .encoding/json.literalInterface () <type 29>
type 28 *<type 27>
type 29 interface { }
type 30 "reflect.Value" <type 63>
 func (v <type 30>) Convert (t <type 31>) <type 30>
 func (v <type 30>) .reflect.assignTo (context <esc:0x1> <type -16>, dst <type 42>, target <type 48>) <type 30>
 func (v <esc:0x12> <type 30>) UnsafeAddr () <type -13>
 func (v <esc:0x1> <type 30>) Uint () <type -8>
 func (v <esc:0x9> <type 30>) TrySend (x <type 30>) <type -15>
 func (v <type 30>) String () <type -16>
 func (v <esc:0x1> <type 30>) IsNil () <type -15>
 func (v <esc:0x1> <type 30>) InterfaceData () <type 57>
 func (v <esc:0x1> <type 30>) SetInt (x <type -4>)
 func (v <type 30>) Len () <type -11>
 func (v <esc:0x1> <type 30>) SetPointer (x <type 48>)
 func (v <esc:0x1> <type 30>) Int () <type -4>
 func (v <esc:0x1> <type 30>) SetLen (n <type -11>)
 func (v <esc:0x12> <type 30>) Index (i <type -11>) <type 30>
 func (v <esc:0x1> <type 30>) SetFloat (x <type -10>)
 func (v <esc:0x1> <type 30>) SetCap (n <type -11>)
 func (v <esc:0x9> <type 30>) SetMapIndex (key <type 30>, val <type 30>)
 func (v <esc:0x1a> <type 30>) Elem () <type 30>
 func (v <type 30>) Type () <type 31>
 func (v <esc:0x9> <type 30>) NumMethod () <type -11>
 func (v <esc:0x1> <type 30>) IsValid () <type -15>
 func (v <type 30>) Set (x <type 30>)
 func (v <esc:0x1> <type 30>) CanAddr () <type -15>
 func (v <type 30>) FieldByName (name <esc:0x1> <type -16>) <type 30>
 func (v <esc:0x12> <type 30>) Field (i <type -11>) <type 30>
 func (v <esc:0x1> <type 30>) OverflowComplex (x <type -18>) <type -15>
 func (v <esc:0x1> <type 30>) Float () <type -10>
 func (v <esc:0x1> <type 30>) Kind () <type 39>
 func (v <esc:0x1> <type 30>) SetString (x <type -16>)
 func (v <esc:0x12> <type 30>) .reflect.pointer () <type 48>
 func (v <type 30>) Interface () (i <type 29>)
 func (v <esc:0x9> <type 30>) MapKeys () <type 58>
 func (v <esc:0x9> <type 30>) .reflect.send (x <type 30>, nb <type -15>) (selected <type -15>)
 func (v <type 30>) Addr () <type 30>
 func (v <type 30>) TryRecv () (x <type 30>, ok <type -15>)
 func (v <esc:0x1> <type 30>) Bool () <type -15>
 func (v <esc:0x1a> <type 30>) Method (i <type -11>) <type 30>
 func (v <type 30>) Call (in <esc:0x9> <type 58>) <type 58>
 func (v <type 30>) Close ()
 func (v <esc:0x2a> <type 30>) .reflect.runes () <type 59>
 func (v <esc:0x9> <type 30>) SetBytes (x <type 19>)
 func (v <esc:0x1> <type 30>) CanSet () <type -15>
 func (v <esc:0x1> <type 30>) CanInterface () <type -15>
 func (v <esc:0x9> <type 30>) MapIndex (key <type 30>) <type 30>
 func (v <esc:0x2a> <type 30>) Bytes () <type 19>
 func (v <type 30>) Slice (i <type -11>, j <type -11>) <type 30>
 func (v <type 30>) Cap () <type -11>
 func (v <esc:0x1a> <type 30>) FieldByIndex (index <esc:0x1> <type 37>) <type 30>
 func (v <type 30>) CallSlice (in <esc:0x9> <type 58>) <type 58>
 func (v <esc:0x1> <type 30>) Complex () <type -18>
 func (v <type 30>) MapRange () <type 60>
 func (v <esc:0x1a> <type 30>) MethodByName (name <esc:0x1> <type -16>) <type 30>
 func (v <esc:0x1> <type 30>) NumField () <type -11>
 func (v <esc:0x1> <type 30>) OverflowInt (x <type -4>) <type -15>
 func (v <esc:0x12> <type 30>) Pointer () <type -13>
 func (v <esc:0x1> <type 30>) OverflowFloat (x <type -10>) <type -15>
 func (v <esc:0x9> <type 30>) .reflect.setRunes (x <type 59>)
 func (v <esc:0x1> <type 30>) OverflowUint (x <type -8>) <type -15>
 func (v <type 30>) .reflect.recv (nb <type -15>) (val <type 30>, ok <type -15>)
 func (v <type 30>) Recv () (x <type 30>, ok <type -15>)
 func (v <type 30>) FieldByNameFunc (match <esc:0x1> <type 38>) <type 30>
 func (v <type 30>) .reflect.call (op <esc:0x1> <type -16>, in <esc:0x9> <type 58>) <type 58>
 func (v <esc:0x9> <type 30>) Send (x <type 30>)
 func (v <esc:0x1> <type 30>) SetComplex (x <type -18>)
 func (v <esc:0x1> <type 30>) SetBool (x <type -15>)
 func (v <type 30>) Slice3 (i <type -11>, j <type -11>, k <type -11>) <type 30>
 func (v <esc:0x1> <type 30>) SetUint (x <type -8>)
type 31 "reflect.Type" <type 32>
type 32 interface { Align () <type -11>; AssignableTo (u <type 31>) <type -15>; Bits () <type -11>; ChanDir () <type 33>; Comparable () <type -15>; ConvertibleTo (u <type 31>) <type -15>; Elem () <type 31>; Field (i <type -11>) <type 34>; FieldAlign () <type -11>; FieldByIndex (index <type 37>) <type 34>; FieldByName (name <type -16>) (? <type 34>, ? <type -15>); FieldByNameFunc (match <type 38>) (? <type 34>, ? <type -15>); Implements (u <type 31>) <type -15>; In (i <type -11>) <type 31>; IsVariadic () <type -15>; Key () <type 31>; Kind () <type 39>; Len () <type -11>; Method (? <type -11>) <type 40>; MethodByName (? <type -16>) (? <type 40>, ? <type -15>); Name () <type -16>; NumField () <type -11>; NumIn () <type -11>; NumMethod () <type -11>; NumOut () <type -11>; Out (i <type -11>) <type 31>; PkgPath () <type -16>; Size () <type -13>; String () <type -16>; .reflect.common () <type 42>; .reflect.rawString () <type -16>; .reflect.uncommon () <type 54>; }
type 33 "reflect.ChanDir" <type -11>
 func (d <type 33>) String () <type -16>
type 34 "reflect.StructField" <type 35>
type 35 struct { Name <type -16>; PkgPath <type -16>; Type <type 31>; Tag <type 36>; Offset <type -13>; Index <type 37>; Anonymous <type -15>; }
type 36 "reflect.StructTag" <type -16>
 func (tag <esc:0x12> <type 36>) Lookup (key <esc:0x1> <type -16>) (value <type -16>, ok <type -15>)
 func (tag <esc:0x12> <type 36>) Get (key <esc:0x1> <type -16>) <type -16>
type 37 [] <type -11>
type 38 (? <type -16>) <type -15>
type 39 "reflect.Kind" <type -12>
 func (k <type 39>) String () <type -16>
type 40 "reflect.Method" <type 41>
type 41 struct { Name <type -16>; PkgPath <type -16>; Type <type 31>; Func <type 30>; Index <type -11>; }
type 42 *<type 43>
type 43 ".reflect.rtype" <type 50>
 func (t <esc:0x1> <type 42>) Comparable () <type -15>
 func (t <esc:0x9> <type 42>) AssignableTo (u <esc:0x9> <type 31>) <type -15>
 func (t <esc:0x4a> <type 42>) MethodByName (name <esc:0x1> <type -16>) (m <type 40>, ok <type -15>)
 func (t <type 42>) FieldByIndex (index <esc:0x1> <type 37>) <type 34>
 func (t <esc:0x9> <type 42>) ConvertibleTo (u <esc:0x9> <type 31>) <type -15>
 func (t <esc:0x1> <type 42>) .reflect.pointers () <type -15>
 func (t <esc:0x32> <type 42>) .reflect.rawString () <type -16>
 func (t <esc:0x4a> <type 42>) Method (i <type -11>) (m <type 40>)
 func (t <esc:0x9> <type 42>) Out (i <type -11>) <type 31>
 func (t <esc:0x9> <type 42>) NumMethod () <type -11>
 func (t <type 42>) FieldByName (name <esc:0x1> <type -16>) (? <type 34>, ? <type -15>)
 func (t <esc:0x1> <type 42>) Align () <type -11>
 func (t <esc:0x1> <type 42>) Kind () <type 39>
 func (t <esc:0x9> <type 42>) Elem () <type 31>
 func (t <esc:0x1> <type 42>) FieldAlign () <type -11>
 func (t <esc:0x1> <type 42>) Size () <type -13>
 func (t <esc:0x42> <type 42>) Name () <type -16>
 func (t <esc:0x1> <type 42>) Bits () <type -11>
 func (t <esc:0x9> <type 42>) .reflect.exportedMethods () <type 44>
 func (t <esc:0x1> <type 42>) String () <type -16>
 func (t <esc:0x12> <type 42>) .reflect.common () ($ret23 <type 42>)
 func (t <esc:0x9> <type 42>) In (i <type -11>) <type 31>
 func (t <esc:0x1> <type 42>) Len () <type -11>
 func (t <esc:0x1> <type 42>) NumField () <type -11>
 func (t <esc:0x42> <type 42>) PkgPath () <type -16>
 func (t <esc:0x1> <type 42>) ChanDir () <type 33>
 func (t <type 42>) .reflect.ptrTo () <type 42>
 func (t <esc:0x1> <type 42>) NumIn () <type -11>
 func (t <esc:0x1> <type 42>) IsVariadic () <type -15>
 func (t <type 42>) FieldByNameFunc (match <esc:0x1> <type 38>) (? <type 34>, ? <type -15>)
 func (t <esc:0x4a> <type 42>) Field (i <type -11>) <type 34>
 func (t <esc:0x9> <type 42>) Key () <type 31>
 func (t <esc:0x9> <type 42>) Implements (u <type 31>) <type -15>
 func (t <esc:0x1> <type 42>) NumOut () <type -11>
type 44 [] <type 45>
type 45 ".reflect.method" <type 46>
type 46 struct { .reflect.name <type 47>; .reflect.pkgPath <type 47>; .reflect.mtyp <type 42>; .reflect.typ <type 42>; .reflect.tfn <type 48>; }
type 47 *<type -16>
type 48 "unsafe.Pointer" <type 49>
type 49 *any
type 50 struct { .reflect.size <type -13>; .reflect.ptrdata <type -13>; .reflect.hash <type -7>; .reflect.kind <type -5>; .reflect.align <type -1>; .reflect.fieldAlign <type -5>; .reflect._ <type -5>; .reflect.hashfn <type 51>; .reflect.equalfn <type 52>; .reflect.gcdata <type 53>; .reflect.string <type 47>; ? <type 54>; .reflect.ptrToThis <type 42>; }
type 51 (? <type 48>, ? <type -13>) <type -13>
type 52 (? <type 48>, ? <type 48>) <type -15>
type 53 *<type -20>
type 54 *<type 55>
type 55 ".reflect.uncommonType" <type 56>
 func (t <esc:0x32> <type 54>) Name () <type -16>
 func (t <esc:0x32> <type 54>) PkgPath () <type -16>
 func (t <type 54>) .reflect.exportedMethods () <type 44>
 func (t <esc:0x12> <type 54>) .reflect.uncommon () ($ret11 <type 54>)
type 56 struct { .reflect.name <type 47>; .reflect.pkgPath <type 47>; .reflect.methods <type 44>; }
type 57 [2 ] <type -13>
type 58 [] <type 30>
type 59 [] <type -21>
type 60 *<type 61>
type 61 "reflect.MapIter" <type 62>
 func (it <esc:0x9> <type 60>) Value () <type 30>
 func (it <esc:0x1> <type 60>) Next () <type -15>
 func (it <esc:0x9> <type 60>) Key () <type 30>
type 62 struct { .reflect.m <type 30>; .reflect.it <type 48>; }
type 63 struct { .reflect.typ <type 42>; .reflect.ptr <type 48>; ? <type 64>; }
type 64 ".reflect.flag" <type -13>
 func (f <type 64>) .reflect.mustBeAssignable ()
 func (f <type 64>) .reflect.mustBeExported ()
 func (f <type 64>) .reflect.mustBe (expected <type 39>)
 func (f <type 64>) .reflect.ro () <type 64>
 func (f <type 64>) .reflect.kind () <type 39>
type 65 [] <type 29>
type 66 map [<type -16>] <type 29>
type 67 struct { .encoding/json.data <type 19>; .encoding/json.off <type -11>; .encoding/json.opcode <type -11>; .encoding/json.scan <type 68>; .encoding/json.errorContext <type 72>; .encoding/json.savedError <type -19>; .encoding/json.useNumber <type -15>; .encoding/json.disallowUnknownFields <type -15>; }
type 68 ".encoding/json.scanner" <type 70>
 func (s <esc:0x1> <type 69>) .encoding/json.reset ()
 func (s <type 69>) .encoding/json.eof () <type -11>
 func (s <esc:0x9> <type 69>) .encoding/json.pushParseState (p <type -11>)
 func (s <esc:0x1> <type 69>) .encoding/json.popParseState ()
 func (s <esc:0x1> <type 69>) .encoding/json.error (c <type -20>, context <esc:0x1> <type -16>) <type -11>
type 69 *<type 68>
type 70 struct { .encoding/json.step <type 71>; .encoding/json.endTop <type -15>; .encoding/json.parseState <type 37>; .encoding/json.err <type -19>; .encoding/json.bytes <type -4>; }
type 71 (? <type 69>, ? <type -20>) <type -11>
type 72 struct { Struct <type 31>; Field <type -16>; }
type 73 *<type 1>
type 74 struct { .encoding/json.w <type 20>; .encoding/json.err <type -19>; .encoding/json.escapeHTML <type -15>; .encoding/json.indentBuf <type 17>; .encoding/json.indentPrefix <type -16>; .encoding/json.indentValue <type -16>; }
type 75 *<type 3>
type 76 struct { S <type -16>; }
type 77 *<type 4>
type 78 struct { Type <type 31>; }
type 79 *<type 5>
type 80 interface { MarshalJSON () (? <type 19>, ? <type -19>); }
type 81 struct { Type <type 31>; Err <type -19>; }
type 82 *<type 7>
type 83 *<type 9>
type 84 struct { .encoding/json.msg <type -16>; Offset <type -4>; }
type 85 *<type 10>
type 86 struct { Key <type -16>; Type <type 31>; Field <type 34>; }
type 87 *<type 12>
type 88 struct { Value <type -16>; Type <type 31>; Offset <type -4>; Struct <type -16>; Field <type -16>; }
type 89 *<type 13>
type 90 interface { UnmarshalJSON (? <type 19>) <type -19>; }
type 91 *<type 15>
type 92 struct { Value <type 30>; Str <type -16>; }
type 93 *<type 16>
func Compact (dst <esc:0x1> <type 17>, src <esc:0x1> <type 19>) <type -19>
func HTMLEscape (dst <esc:0x1> <type 17>, src <esc:0x1> <type 19>)
func Indent (dst <esc:0x1> <type 17>, src <esc:0x1> <type 19>, prefix <esc:0x1> <type -16>, indent <esc:0x1> <type -16>) <type -19>
func Marshal (v <type 29>) (? <type 19>, ? <type -19>)
func MarshalIndent (v <type 29>, prefix <esc:0x1> <type -16>, indent <esc:0x1> <type -16>) (? <type 19>, ? <type -19>)
func NewDecoder (r <type 22>) <type 73>
func NewEncoder (w <type 20>) <type 75>
func Unmarshal (data <type 19>, v <type 29>) <type -19>
func Valid (data <esc:0x1> <type 19>) <type -15>
checksum 01DA7E2BAC0DB526FE0D4969769C01771B397BEB
v3;
package pem
pkgpath encoding/pem
import bytes bytes "bytes"
import base64 encoding/base64 "encoding/base64"
import errors errors "errors"
import io io "io"
import sort sort "sort"
import strings strings "strings"
init pem encoding..z2fpem..import bytes bytes..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import cpu internal..z2fcpu..import io io..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 1 4 1 5 1 7 1 8 1 10 1 11 2 3 2 4 2 5 2 6 2 7 2 8 2 9 2 10 2 11 3 4 3 5 3 6 3 7 3 8 3 9 3 10 3 11 5 4 5 7 5 8 5 10 6 4 6 7 6 8 6 9 6 10 6 11 7 4 7 8 9 4 9 7 9 8 10 4 10 7 10 8
types 8 2 24 69 35 21 17 28 72
type 1 "Block" <type 2>
type 2 struct { Type <type -16>; Headers <type 3>; Bytes <type 4>; }
type 3 map [<type -16>] <type -16>
type 4 [] <type -20>
type 5 *<type 1>
type 6 "io.Writer" <type 7>
type 7 interface { Write (p <type 4>) (n <type -11>, err <type -19>); }
func Decode (data <type 4>) (p <type 5>, rest <type 4>)
func Encode (out <type 6>, b <esc:0x9> <type 5>) <type -19>
func EncodeToMemory (b <esc:0x9> <type 5>) <type 4>
checksum 8661AECCA54781E1F4CDCF13AB4967576394E306
v3;
package xml
pkgpath encoding/xml
import bufio bufio "bufio"
import bytes bytes "bytes"
import encoding encoding "encoding"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import reflect reflect "reflect"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
indirectimport unsafe unsafe
init xml encoding..z2fxml..import bufio bufio..import bytes bytes..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 1 2 1 4 1 7 1 10 1 11 1 13 1 16 2 4 2 7 2 10 2 11 2 13 2 16 3 4 3 5 3 6 3 7 3 8 3 9 3 10 3 11 3 12 3 13 3 14 3 15 3 16 5 4 5 7 5 10 5 11 5 13 5 14 5 15 7 4 7 10 7 11 7 13 8 4 8 5 8 6 8 7 8 10 8 11 8 13 8 14 8 15 9 4 9 10 9 11 9 12 9 13 9 16 10 4 10 11 12 4 12 10 12 11 13 4 13 10 13 11 14 4 14 10 14 11 14 13 15 4 15 10 15 11 15 13 15 14
types 117 21 24 74 73 2733 75 349 31 30 34 26 79 130 84 85 26 33 329 33 37 93 53 22 601 22 36 74 30 73 34 64 1810 19 30 74 91 34 19 40 139 18 22 19 45 65 3920 33 972 78 40 145 215 22 34 75 35 106 19 2084 21 36 145 20 35 13 355 47 46 20 19 274 100 24 21 22 19 184 64 80 280 19 43 84 19 122 175 46 21 19 18 46 1414 19 43 71 400 19 715 106 18 22 36 77 83 56 55 53 21 53 20 110 20 61 79 68 36 20
type 1 "Attr" <type 21>
type 2 "CharData" <type 22>
 func (c <esc:0x1> <type 2>) Copy () <type 2>
type 3 "Comment" <type 22>
 func (c <esc:0x1> <type 3>) Copy () <type 3>
type 4 "Decoder" <type 23>
 func (d <type 40>) Decode (v <type 41>) <type -19>
 func (d <type 40>) DecodeElement (v <type 41>, start <esc:0x9> <type 42>) <type -19>
 func (d <type 40>) .encoding/xml.unmarshalInterface (val <type 18>, start <esc:0x9> <type 42>) <type -19>
 func (d <esc:0x2a> <type 40>) .encoding/xml.unmarshalTextInterface (val <type 43>) <type -19>
 func (d <esc:0x1> <type 40>) .encoding/xml.unmarshalAttr (val <type 45>, attr <type 1>) <type -19>
 func (d <type 40>) .encoding/xml.unmarshal (val <type 45>, start <esc:0x9> <type 42>) <type -19>
 func (d <type 40>) .encoding/xml.unmarshalPath (tinfo <esc:0x1> <type 80>, sv <type 45>, parents <esc:0x1> <type 24>, start <esc:0x9> <type 42>) (consumed <type -15>, err <type -19>)
 func (d <esc:0x2a> <type 40>) Skip () <type -19>
 func (d <esc:0x12a> <type 40>) Token () (? <type 15>, ? <type -19>)
 func (d <esc:0x9> <type 40>) .encoding/xml.translate (n <esc:0x1> <type 88>, isElementName <type -15>)
 func (d <esc:0x1> <type 40>) .encoding/xml.switchToReader (r <type 27>)
 func (d <esc:0x2a> <type 40>) .encoding/xml.push (kind <type -11>) <type 37>
 func (d <esc:0x2a> <type 40>) .encoding/xml.pop () <type 37>
 func (d <esc:0x9> <type 40>) .encoding/xml.pushEOF ()
 func (d <esc:0x9> <type 40>) .encoding/xml.popEOF () <type -15>
 func (d <esc:0x9> <type 40>) .encoding/xml.pushElement (name <type 10>)
 func (d <esc:0x9> <type 40>) .encoding/xml.pushNs (local <type -16>, url <type -16>, ok <type -15>)
 func (d <esc:0x1> <type 40>) .encoding/xml.syntaxError (msg <type -16>) <type -19>
 func (d <esc:0x9> <type 40>) .encoding/xml.popElement (t <esc:0x9> <type 89>) <type -15>
 func (d <esc:0x32> <type 40>) .encoding/xml.autoClose (t <esc:0x1> <type 15>) (? <type 15>, ? <type -15>)
 func (d <esc:0x12a> <type 40>) RawToken () (? <type 15>, ? <type -19>)
 func (d <esc:0x12a> <type 40>) .encoding/xml.rawToken () (? <type 15>, ? <type -19>)
 func (d <esc:0x2a> <type 40>) .encoding/xml.attrval () <type 22>
 func (d <esc:0x9> <type 40>) .encoding/xml.space ()
 func (d <esc:0x9> <type 40>) .encoding/xml.getc () (b <type -20>, ok <type -15>)
 func (d <esc:0x1> <type 40>) InputOffset () <type -4>
 func (d <esc:0x1> <type 40>) .encoding/xml.savedOffset () <type -11>
 func (d <esc:0x9> <type 40>) .encoding/xml.mustgetc () (b <type -20>, ok <type -15>)
 func (d <esc:0x1> <type 40>) .encoding/xml.ungetc (b <type -20>)
 func (d <esc:0x2a> <type 40>) .encoding/xml.text (quote <type -11>, cdata <type -15>) <type 22>
 func (d <esc:0x9> <type 40>) .encoding/xml.nsname () (name <type 10>, ok <type -15>)
 func (d <esc:0x9> <type 40>) .encoding/xml.name () (s <type -16>, ok <type -15>)
 func (d <esc:0x9> <type 40>) .encoding/xml.readName () (ok <type -15>)
type 5 "Directive" <type 22>
 func (d <esc:0x1> <type 5>) Copy () <type 5>
type 6 "Encoder" <type 90>
 func (enc <esc:0x1> <type 99>) Indent (prefix <type -16>, indent <type -16>)
 func (enc <type 99>) Encode (v <type 41>) <type -19>
 func (enc <type 99>) EncodeElement (v <type 41>, start <type 12>) <type -19>
 func (enc <type 99>) EncodeToken (t <type 15>) <type -19>
 func (enc <esc:0x3a> <type 99>) Flush () <type -19>
type 7 "EndElement" <type 101>
type 8 "Marshaler" <type 102>
type 9 "MarshalerAttr" <type 103>
type 10 "Name" <type 104>
type 11 "ProcInst" <type 105>
 func (p <esc:0x12> <type 11>) Copy () <type 11>
type 12 "StartElement" <type 106>
 func (e <esc:0x1a> <type 12>) Copy () <type 12>
 func (e <esc:0x12> <type 12>) End () <type 7>
type 13 "SyntaxError" <type 108>
 func (e <esc:0x1> <type 109>) Error () <type -16>
type 14 "TagPathError" <type 110>
 func (e <esc:0x9> <type 111>) Error () <type -16>
type 15 "Token" <type 41>
type 16 "TokenReader" <type 112>
type 17 "UnmarshalError" <type -16>
 func (e <esc:0x12> <type 17>) Error () ($ret31 <type -16>) <inl:223>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/encoding/xml/read.go:157
  { //157
   $ret31 = $convert(<type -16>, e) //157
   return //157
  } //0
type 18 "Unmarshaler" <type 113>
type 19 "UnmarshalerAttr" <type 114>
type 20 "UnsupportedTypeError" <type 115>
 func (e <esc:0x9> <type 116>) Error () <type -16>
type 21 struct { Name <type 10>; Value <type -16>; }
type 22 [] <type -20>
type 23 struct { Strict <type -15>; AutoClose <type 24>; Entity <type 25>; CharsetReader <type 26>; DefaultSpace <type -16>; .encoding/xml.r <type 29>; .encoding/xml.t <type 16>; .encoding/xml.buf <type 31>; .encoding/xml.saved <type 32>; .encoding/xml.stk <type 37>; .encoding/xml.free <type 37>; .encoding/xml.needClose <type -15>; .encoding/xml.toClose <type 10>; .encoding/xml.nextToken <type 15>; .encoding/xml.nextByte <type -11>; .encoding/xml.ns <type 25>; .encoding/xml.err <type -19>; .encoding/xml.line <type -11>; .encoding/xml.offset <type -4>; .encoding/xml.unmarshalDepth <type -11>; }
type 24 [] <type -16>
type 25 map [<type -16>] <type -16>
type 26 (charset <type -16>, input <type 27>) (? <type 27>, ? <type -19>)
type 27 "io.Reader" <type 28>
type 28 interface { Read (p <type 22>) (n <type -11>, err <type -19>); }
type 29 "io.ByteReader" <type 30>
type 30 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 31 "bytes.Buffer" <type 35>
 func (b <esc:0x22> <type 32>) .bytes.readSlice (delim <type -20>) (line <type 22>, err <type -19>)
 func (b <esc:0x1> <type 32>) ReadBytes (delim <type -20>) (line <type 22>, err <type -19>)
 func (b <esc:0x1> <type 32>) UnreadByte () <type -19>
 func (b <esc:0x1> <type 32>) UnreadRune () <type -19>
 func (b <esc:0x1> <type 32>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x1> <type 32>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x9> <type 32>) WriteTo (w <type 33>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 32>) Read (p <esc:0x1> <type 22>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 32>) Truncate (n <type -11>)
 func (b <esc:0x1> <type 32>) .bytes.tryGrowByReslice (n <type -11>) (? <type -11>, ? <type -15>)
 func (b <esc:0x1> <type 32>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x22> <type 32>) Bytes () <type 22>
 func (b <esc:0x1> <type 32>) String () <type -16>
 func (b <esc:0x1> <type 32>) Cap () <type -11>
 func (b <esc:0x1> <type 32>) Len () <type -11>
 func (b <esc:0x1> <type 32>) WriteRune (r <type -21>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 32>) .bytes.empty () <type -15>
 func (b <esc:0x1> <type 32>) Reset ()
 func (b <esc:0x22> <type 32>) Next (n <type -11>) <type 22>
 func (b <esc:0x1> <type 32>) .bytes.grow (n <type -11>) <type -11>
 func (b <esc:0x1> <type 32>) Grow (n <type -11>)
 func (b <esc:0x1> <type 32>) Write (p <esc:0x1> <type 22>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 32>) ReadString (delim <type -20>) (line <type -16>, err <type -19>)
 func (b <esc:0x1> <type 32>) WriteString (s <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (b <esc:0x9> <type 32>) ReadFrom (r <type 27>) (n <type -4>, err <type -19>)
type 32 *<type 31>
type 33 "io.Writer" <type 34>
type 34 interface { Write (p <type 22>) (n <type -11>, err <type -19>); }
type 35 struct { .bytes.buf <type 22>; .bytes.off <type -11>; .bytes.lastRead <type 36>; }
type 36 ".bytes.readOp" <type -1>
type 37 *<type 38>
type 38 ".encoding/xml.stack" <type 39>
type 39 struct { .encoding/xml.next <type 37>; .encoding/xml.kind <type -11>; .encoding/xml.name <type 10>; .encoding/xml.ok <type -15>; }
type 40 *<type 4>
type 41 interface { }
type 42 *<type 12>
type 43 "encoding.TextUnmarshaler" <type 44>
type 44 interface { UnmarshalText (text <type 22>) <type -19>; }
type 45 "reflect.Value" <type 78>
 func (v <type 45>) Convert (t <type 46>) <type 45>
 func (v <type 45>) .reflect.assignTo (context <esc:0x1> <type -16>, dst <type 57>, target <type 63>) <type 45>
 func (v <esc:0x12> <type 45>) UnsafeAddr () <type -13>
 func (v <esc:0x1> <type 45>) Uint () <type -8>
 func (v <esc:0x9> <type 45>) TrySend (x <type 45>) <type -15>
 func (v <type 45>) String () <type -16>
 func (v <esc:0x1> <type 45>) IsNil () <type -15>
 func (v <esc:0x1> <type 45>) InterfaceData () <type 72>
 func (v <esc:0x1> <type 45>) SetInt (x <type -4>)
 func (v <type 45>) Len () <type -11>
 func (v <esc:0x1> <type 45>) SetPointer (x <type 63>)
 func (v <esc:0x1> <type 45>) Int () <type -4>
 func (v <esc:0x1> <type 45>) SetLen (n <type -11>)
 func (v <esc:0x12> <type 45>) Index (i <type -11>) <type 45>
 func (v <esc:0x1> <type 45>) SetFloat (x <type -10>)
 func (v <esc:0x1> <type 45>) SetCap (n <type -11>)
 func (v <esc:0x9> <type 45>) SetMapIndex (key <type 45>, val <type 45>)
 func (v <esc:0x1a> <type 45>) Elem () <type 45>
 func (v <type 45>) Type () <type 46>
 func (v <esc:0x9> <type 45>) NumMethod () <type -11>
 func (v <esc:0x1> <type 45>) IsValid () <type -15>
 func (v <type 45>) Set (x <type 45>)
 func (v <esc:0x1> <type 45>) CanAddr () <type -15>
 func (v <type 45>) FieldByName (name <esc:0x1> <type -16>) <type 45>
 func (v <esc:0x12> <type 45>) Field (i <type -11>) <type 45>
 func (v <esc:0x1> <type 45>) OverflowComplex (x <type -18>) <type -15>
 func (v <esc:0x1> <type 45>) Float () <type -10>
 func (v <esc:0x1> <type 45>) Kind () <type 54>
 func (v <esc:0x1> <type 45>) SetString (x <type -16>)
 func (v <esc:0x12> <type 45>) .reflect.pointer () <type 63>
 func (v <type 45>) Interface () (i <type 41>)
 func (v <esc:0x9> <type 45>) MapKeys () <type 73>
 func (v <esc:0x9> <type 45>) .reflect.send (x <type 45>, nb <type -15>) (selected <type -15>)
 func (v <type 45>) Addr () <type 45>
 func (v <type 45>) TryRecv () (x <type 45>, ok <type -15>)
 func (v <esc:0x1> <type 45>) Bool () <type -15>
 func (v <esc:0x1a> <type 45>) Method (i <type -11>) <type 45>
 func (v <type 45>) Call (in <esc:0x9> <type 73>) <type 73>
 func (v <type 45>) Close ()
 func (v <esc:0x2a> <type 45>) .reflect.runes () <type 74>
 func (v <esc:0x9> <type 45>) SetBytes (x <type 22>)
 func (v <esc:0x1> <type 45>) CanSet () <type -15>
 func (v <esc:0x1> <type 45>) CanInterface () <type -15>
 func (v <esc:0x9> <type 45>) MapIndex (key <type 45>) <type 45>
 func (v <esc:0x2a> <type 45>) Bytes () <type 22>
 func (v <type 45>) Slice (i <type -11>, j <type -11>) <type 45>
 func (v <type 45>) Cap () <type -11>
 func (v <esc:0x1a> <type 45>) FieldByIndex (index <esc:0x1> <type 52>) <type 45>
 func (v <type 45>) CallSlice (in <esc:0x9> <type 73>) <type 73>
 func (v <esc:0x1> <type 45>) Complex () <type -18>
 func (v <type 45>) MapRange () <type 75>
 func (v <esc:0x1a> <type 45>) MethodByName (name <esc:0x1> <type -16>) <type 45>
 func (v <esc:0x1> <type 45>) NumField () <type -11>
 func (v <esc:0x1> <type 45>) OverflowInt (x <type -4>) <type -15>
 func (v <esc:0x12> <type 45>) Pointer () <type -13>
 func (v <esc:0x1> <type 45>) OverflowFloat (x <type -10>) <type -15>
 func (v <esc:0x9> <type 45>) .reflect.setRunes (x <type 74>)
 func (v <esc:0x1> <type 45>) OverflowUint (x <type -8>) <type -15>
 func (v <type 45>) .reflect.recv (nb <type -15>) (val <type 45>, ok <type -15>)
 func (v <type 45>) Recv () (x <type 45>, ok <type -15>)
 func (v <type 45>) FieldByNameFunc (match <esc:0x1> <type 53>) <type 45>
 func (v <type 45>) .reflect.call (op <esc:0x1> <type -16>, in <esc:0x9> <type 73>) <type 73>
 func (v <esc:0x9> <type 45>) Send (x <type 45>)
 func (v <esc:0x1> <type 45>) SetComplex (x <type -18>)
 func (v <esc:0x1> <type 45>) SetBool (x <type -15>)
 func (v <type 45>) Slice3 (i <type -11>, j <type -11>, k <type -11>) <type 45>
 func (v <esc:0x1> <type 45>) SetUint (x <type -8>)
type 46 "reflect.Type" <type 47>
type 47 interface { Align () <type -11>; AssignableTo (u <type 46>) <type -15>; Bits () <type -11>; ChanDir () <type 48>; Comparable () <type -15>; ConvertibleTo (u <type 46>) <type -15>; Elem () <type 46>; Field (i <type -11>) <type 49>; FieldAlign () <type -11>; FieldByIndex (index <type 52>) <type 49>; FieldByName (name <type -16>) (? <type 49>, ? <type -15>); FieldByNameFunc (match <type 53>) (? <type 49>, ? <type -15>); Implements (u <type 46>) <type -15>; In (i <type -11>) <type 46>; IsVariadic () <type -15>; Key () <type 46>; Kind () <type 54>; Len () <type -11>; Method (? <type -11>) <type 55>; MethodByName (? <type -16>) (? <type 55>, ? <type -15>); Name () <type -16>; NumField () <type -11>; NumIn () <type -11>; NumMethod () <type -11>; NumOut () <type -11>; Out (i <type -11>) <type 46>; PkgPath () <type -16>; Size () <type -13>; String () <type -16>; .reflect.common () <type 57>; .reflect.rawString () <type -16>; .reflect.uncommon () <type 69>; }
type 48 "reflect.ChanDir" <type -11>
 func (d <type 48>) String () <type -16>
type 49 "reflect.StructField" <type 50>
type 50 struct { Name <type -16>; PkgPath <type -16>; Type <type 46>; Tag <type 51>; Offset <type -13>; Index <type 52>; Anonymous <type -15>; }
type 51 "reflect.StructTag" <type -16>
 func (tag <esc:0x12> <type 51>) Lookup (key <esc:0x1> <type -16>) (value <type -16>, ok <type -15>)
 func (tag <esc:0x12> <type 51>) Get (key <esc:0x1> <type -16>) <type -16>
type 52 [] <type -11>
type 53 (? <type -16>) <type -15>
type 54 "reflect.Kind" <type -12>
 func (k <type 54>) String () <type -16>
type 55 "reflect.Method" <type 56>
type 56 struct { Name <type -16>; PkgPath <type -16>; Type <type 46>; Func <type 45>; Index <type -11>; }
type 57 *<type 58>
type 58 ".reflect.rtype" <type 65>
 func (t <esc:0x1> <type 57>) Comparable () <type -15>
 func (t <esc:0x9> <type 57>) AssignableTo (u <esc:0x9> <type 46>) <type -15>
 func (t <esc:0x4a> <type 57>) MethodByName (name <esc:0x1> <type -16>) (m <type 55>, ok <type -15>)
 func (t <type 57>) FieldByIndex (index <esc:0x1> <type 52>) <type 49>
 func (t <esc:0x9> <type 57>) ConvertibleTo (u <esc:0x9> <type 46>) <type -15>
 func (t <esc:0x1> <type 57>) .reflect.pointers () <type -15>
 func (t <esc:0x32> <type 57>) .reflect.rawString () <type -16>
 func (t <esc:0x4a> <type 57>) Method (i <type -11>) (m <type 55>)
 func (t <esc:0x9> <type 57>) Out (i <type -11>) <type 46>
 func (t <esc:0x9> <type 57>) NumMethod () <type -11>
 func (t <type 57>) FieldByName (name <esc:0x1> <type -16>) (? <type 49>, ? <type -15>)
 func (t <esc:0x1> <type 57>) Align () <type -11>
 func (t <esc:0x1> <type 57>) Kind () <type 54>
 func (t <esc:0x9> <type 57>) Elem () <type 46>
 func (t <esc:0x1> <type 57>) FieldAlign () <type -11>
 func (t <esc:0x1> <type 57>) Size () <type -13>
 func (t <esc:0x42> <type 57>) Name () <type -16>
 func (t <esc:0x1> <type 57>) Bits () <type -11>
 func (t <esc:0x9> <type 57>) .reflect.exportedMethods () <type 59>
 func (t <esc:0x1> <type 57>) String () <type -16>
 func (t <esc:0x12> <type 57>) .reflect.common () ($ret23 <type 57>)
 func (t <esc:0x9> <type 57>) In (i <type -11>) <type 46>
 func (t <esc:0x1> <type 57>) Len () <type -11>
 func (t <esc:0x1> <type 57>) NumField () <type -11>
 func (t <esc:0x42> <type 57>) PkgPath () <type -16>
 func (t <esc:0x1> <type 57>) ChanDir () <type 48>
 func (t <type 57>) .reflect.ptrTo () <type 57>
 func (t <esc:0x1> <type 57>) NumIn () <type -11>
 func (t <esc:0x1> <type 57>) IsVariadic () <type -15>
 func (t <type 57>) FieldByNameFunc (match <esc:0x1> <type 53>) (? <type 49>, ? <type -15>)
 func (t <esc:0x4a> <type 57>) Field (i <type -11>) <type 49>
 func (t <esc:0x9> <type 57>) Key () <type 46>
 func (t <esc:0x9> <type 57>) Implements (u <type 46>) <type -15>
 func (t <esc:0x1> <type 57>) NumOut () <type -11>
type 59 [] <type 60>
type 60 ".reflect.method" <type 61>
type 61 struct { .reflect.name <type 62>; .reflect.pkgPath <type 62>; .reflect.mtyp <type 57>; .reflect.typ <type 57>; .reflect.tfn <type 63>; }
type 62 *<type -16>
type 63 "unsafe.Pointer" <type 64>
type 64 *any
type 65 struct { .reflect.size <type -13>; .reflect.ptrdata <type -13>; .reflect.hash <type -7>; .reflect.kind <type -5>; .reflect.align <type -1>; .reflect.fieldAlign <type -5>; .reflect._ <type -5>; .reflect.hashfn <type 66>; .reflect.equalfn <type 67>; .reflect.gcdata <type 68>; .reflect.string <type 62>; ? <type 69>; .reflect.ptrToThis <type 57>; }
type 66 (? <type 63>, ? <type -13>) <type -13>
type 67 (? <type 63>, ? <type 63>) <type -15>
type 68 *<type -20>
type 69 *<type 70>
type 70 ".reflect.uncommonType" <type 71>
 func (t <esc:0x32> <type 69>) Name () <type -16>
 func (t <esc:0x32> <type 69>) PkgPath () <type -16>
 func (t <type 69>) .reflect.exportedMethods () <type 59>
 func (t <esc:0x12> <type 69>) .reflect.uncommon () ($ret11 <type 69>)
type 71 struct { .reflect.name <type 62>; .reflect.pkgPath <type 62>; .reflect.methods <type 59>; }
type 72 [2 ] <type -13>
type 73 [] <type 45>
type 74 [] <type -21>
type 75 *<type 76>
type 76 "reflect.MapIter" <type 77>
 func (it <esc:0x9> <type 75>) Value () <type 45>
 func (it <esc:0x1> <type 75>) Next () <type -15>
 func (it <esc:0x9> <type 75>) Key () <type 45>
type 77 struct { .reflect.m <type 45>; .reflect.it <type 63>; }
type 78 struct { .reflect.typ <type 57>; .reflect.ptr <type 63>; ? <type 79>; }
type 79 ".reflect.flag" <type -13>
 func (f <type 79>) .reflect.mustBeAssignable ()
 func (f <type 79>) .reflect.mustBeExported ()
 func (f <type 79>) .reflect.mustBe (expected <type 54>)
 func (f <type 79>) .reflect.ro () <type 79>
 func (f <type 79>) .reflect.kind () <type 54>
type 80 *<type 81>
type 81 ".encoding/xml.typeInfo" <type 82>
type 82 struct { .encoding/xml.xmlname <type 83>; .encoding/xml.fields <type 87>; }
type 83 *<type 84>
type 84 ".encoding/xml.fieldInfo" <type 85>
 func (finfo <esc:0x1> <type 83>) .encoding/xml.value (v <type 45>) <type 45>
type 85 struct { .encoding/xml.idx <type 52>; .encoding/xml.name <type -16>; .encoding/xml.xmlns <type -16>; .encoding/xml.flags <type 86>; .encoding/xml.parents <type 24>; }
type 86 ".encoding/xml.fieldFlags" <type -11>
type 87 [] <type 84>
type 88 *<type 10>
type 89 *<type 7>
type 90 struct { .encoding/xml.p <type 91>; }
type 91 ".encoding/xml.printer" <type 95>
 func (p <type 92>) .encoding/xml.createAttrPrefix (url <type -16>) <type -16>
 func (p <esc:0x1> <type 92>) .encoding/xml.deleteAttrPrefix (prefix <esc:0x1> <type -16>)
 func (p <esc:0x9> <type 92>) .encoding/xml.markPrefix ()
 func (p <esc:0x1> <type 92>) .encoding/xml.popPrefix ()
 func (p <type 92>) .encoding/xml.marshalValue (val <type 45>, finfo <esc:0x9> <type 83>, startTemplate <esc:0x9> <type 42>) <type -19>
 func (p <esc:0x1> <type 92>) .encoding/xml.marshalAttr (start <esc:0x9> <type 42>, name <type 10>, val <type 45>) <type -19>
 func (p <esc:0x9> <type 92>) .encoding/xml.marshalInterface (val <type 8>, start <type 12>) <type -19>
 func (p <type 92>) .encoding/xml.marshalTextInterface (val <type 93>, start <type 12>) <type -19>
 func (p <type 92>) .encoding/xml.writeStart (start <esc:0x9> <type 42>) <type -19>
 func (p <esc:0x9> <type 92>) .encoding/xml.writeEnd (name <type 10>) <type -19>
 func (p <esc:0x1> <type 92>) .encoding/xml.marshalSimple (typ <type 46>, val <type 45>) (? <type -16>, ? <type 22>, ? <type -19>)
 func (p <type 92>) .encoding/xml.marshalStruct (tinfo <esc:0x9> <type 80>, val <type 45>) <type -19>
 func (p <esc:0x3a> <type 92>) .encoding/xml.cachedWriteError () <type -19>
 func (p <esc:0x9> <type 92>) .encoding/xml.writeIndent (depthDelta <type -11>)
 func (p <esc:0x9> <type 92>) EscapeString (s <esc:0x1> <type -16>)
type 92 *<type 91>
type 93 "encoding.TextMarshaler" <type 94>
type 94 interface { MarshalText () (text <type 22>, err <type -19>); }
type 95 struct { ? <type 96>; .encoding/xml.encoder <type 99>; .encoding/xml.seq <type -11>; .encoding/xml.indent <type -16>; .encoding/xml.prefix <type -16>; .encoding/xml.depth <type -11>; .encoding/xml.indentedIn <type -15>; .encoding/xml.putNewline <type -15>; .encoding/xml.attrNS <type 25>; .encoding/xml.attrPrefix <type 25>; .encoding/xml.prefixes <type 24>; .encoding/xml.tags <type 100>; }
type 96 *<type 97>
type 97 "bufio.Writer" <type 98>
 func (b <esc:0x10a> <type 96>) WriteRune (r <type -21>) (size <type -11>, err <type -19>)
 func (b <esc:0x2a> <type 96>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x10a> <type 96>) Write (p <type 22>) (nn <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 96>) ReadFrom (r <type 27>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 96>) Buffered () <type -11>
 func (b <esc:0x10a> <type 96>) WriteString (s <esc:0x1> <type -16>) (? <type -11>, ? <type -19>)
 func (b <esc:0x1> <type 96>) Available () <type -11>
 func (b <esc:0x2a> <type 96>) Flush () <type -19>
 func (b <esc:0x1> <type 96>) Reset (w <type 33>)
 func (b <esc:0x1> <type 96>) Size () <type -11>
type 98 struct { .bufio.err <type -19>; .bufio.buf <type 22>; .bufio.n <type -11>; .bufio.wr <type 33>; }
type 99 *<type 6>
type 100 [] <type 10>
type 101 struct { Name <type 10>; }
type 102 interface { MarshalXML (e <type 99>, start <type 12>) <type -19>; }
type 103 interface { MarshalXMLAttr (name <type 10>) (? <type 1>, ? <type -19>); }
type 104 struct { Space <type -16>; Local <type -16>; }
type 105 struct { Target <type -16>; Inst <type 22>; }
type 106 struct { Name <type 10>; Attr <type 107>; }
type 107 [] <type 1>
type 108 struct { Msg <type -16>; Line <type -11>; }
type 109 *<type 13>
type 110 struct { Struct <type 46>; Field1 <type -16>; Tag1 <type -16>; Field2 <type -16>; Tag2 <type -16>; }
type 111 *<type 14>
type 112 interface { Token () (? <type 15>, ? <type -19>); }
type 113 interface { UnmarshalXML (d <type 40>, start <type 12>) <type -19>; }
type 114 interface { UnmarshalXMLAttr (attr <type 1>) <type -19>; }
type 115 struct { Type <type 46>; }
type 116 *<type 20>
func CopyToken (t <esc:0x1a> <type 15>) <type 15>
func Escape (w <type 33>, s <type 22>)
func EscapeText (w <type 33>, s <type 22>) <type -19>
var HTMLAutoClose <type 24>
var HTMLEntity <type 25>
const Header = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
func Marshal (v <type 41>) (? <type 22>, ? <type -19>)
func MarshalIndent (v <type 41>, prefix <type -16>, indent <type -16>) (? <type 22>, ? <type -19>)
func NewDecoder (r <type 27>) <type 40>
func NewEncoder (w <type 33>) <type 99>
func NewTokenDecoder (t <type 16>) <type 40>
func Unmarshal (data <type 22>, v <type 41>) <type -19>
checksum 9EE5A1C30161B35D3E1012A1C4AB2D6A46004A5D
v3;
package errors
pkgpath errors
types 1 1
func New (text <type -16>) <type -19>
checksum 9866572E7F787F516F651D2BFAB050886441BE8C
v3;
package expvar
pkgpath expvar
import json encoding/json "encoding/json"
import fmt fmt "fmt"
import log log "log"
import math math "math"
import http net/http "net/http"
import os os "os"
import runtime runtime "runtime"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import atomic sync/atomic "sync/atomic"
indirectimport asn1 encoding/asn1
indirectimport big math/big
indirectimport bufio bufio
indirectimport context context
indirectimport httptrace net/http/httptrace
indirectimport io io
indirectimport multipart mime/multipart
indirectimport net net
indirectimport pkix crypto/x509/pkix
indirectimport rand math/rand
indirectimport syscall syscall
indirectimport textproto net/textproto
indirectimport time time
indirectimport tls crypto/tls
indirectimport unsafe unsafe
indirectimport url net/url
indirectimport x509 crypto/x509
init expvar expvar..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import gzip compress..z2fgzip..import context context..import crypto crypto..import cipher crypto..z2fcipher..import des crypto..z2fdes..import dsa crypto..z2fdsa..import ecdsa crypto..z2fecdsa..import elliptic crypto..z2felliptic..import randutil crypto..z2finternal..z2frandutil..import md5 crypto..z2fmd5..import rand crypto..z2frand..import rsa crypto..z2frsa..import sha1 crypto..z2fsha1..import sha256 crypto..z2fsha256..import sha512 crypto..z2fsha512..import tls crypto..z2ftls..import x509 crypto..z2fx509..import pkix crypto..z2fx509..z2fpkix..import asn1 encoding..z2fasn1..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import hex encoding..z2fhex..import json encoding..z2fjson..import pem encoding..z2fpem..import fmt fmt..import crc32 hash..z2fcrc32..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import chacha20poly1305 internal..z2fx..z2fcrypto..z2fchacha20poly1305..import cryptobyte internal..z2fx..z2fcrypto..z2fcryptobyte..import chacha20 internal..z2fx..z2fcrypto..z2finternal..z2fchacha20..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import httpguts internal..z2fx..z2fnet..z2fhttp..z2fhttpguts..import httpproxy internal..z2fx..z2fnet..z2fhttp..z2fhttpproxy..import hpack internal..z2fx..z2fnet..z2fhttp2..z2fhpack..import idna internal..z2fx..z2fnet..z2fidna..import bidirule internal..z2fx..z2ftext..z2fsecure..z2fbidirule..import transform internal..z2fx..z2ftext..z2ftransform..import bidi internal..z2fx..z2ftext..z2funicode..z2fbidi..import norm internal..z2fx..z2ftext..z2funicode..z2fnorm..import io io..import ioutil io..z2fioutil..import log log..import big math..z2fbig..import rand math..z2frand..import mime mime..import multipart mime..z2fmultipart..import quotedprintable mime..z2fquotedprintable..import net net..import http net..z2fhttp..import internal net..z2fhttp..z2finternal..import textproto net..z2ftextproto..import os os..import path path..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 1 2 1 30 1 45 1 61 1 62 1 64 1 67 2 30 2 45 2 61 2 62 2 64 2 67 3 1 3 2 3 28 3 30 3 31 3 32 3 45 3 57 3 60 3 61 3 62 3 63 3 64 3 65 3 66 3 67 4 1 4 2 4 3 4 24 4 28 4 29 4 30 4 31 4 32 4 45 4 57 4 60 4 61 4 62 4 63 4 64 4 65 4 66 4 67 5 28 5 30 5 31 5 32 5 45 5 57 5 60 5 61 5 62 5 63 5 64 5 65 5 66 5 67 6 30 6 45 6 61 6 62 6 63 6 64 7 24 7 30 7 45 7 60 7 61 7 62 7 63 7 64 7 67 8 7 8 24 8 30 8 45 8 60 8 61 8 62 8 63 8 64 8 67 9 2 9 12 9 24 9 28 9 30 9 31 9 32 9 45 9 48 9 49 9 57 9 60 9 61 9 62 9 63 9 64 9 65 9 66 9 67 10 2 10 6 10 7 10 11 10 12 10 18 10 22 10 24 10 28 10 30 10 31 10 32 10 45 10 48 10 49 10 57 10 60 10 61 10 62 10 63 10 64 10 65 10 66 10 67 11 2 11 24 11 28 11 30 11 31 11 32 11 45 11 48 11 49 11 57 11 60 11 61 11 62 11 63 11 64 11 65 11 66 11 67 12 30 12 45 12 61 12 62 12 64 13 6 13 24 13 30 13 45 13 60 13 61 13 62 13 63 13 64 13 67 14 1 14 2 14 7 14 24 14 28 14 30 14 31 14 32 14 45 14 48 14 49 14 57 14 60 14 61 14 62 14 63 14 64 14 65 14 66 14 67 15 1 15 2 15 6 15 7 15 12 15 14 15 24 15 28 15 30 15 31 15 32 15 45 15 48 15 49 15 57 15 60 15 61 15 62 15 63 15 64 15 65 15 66 15 67 16 6 16 30 16 45 16 61 16 62 16 63 16 64 17 6 17 30 17 45 17 61 17 62 17 63 17 64 18 6 18 30 18 45 18 61 18 62 18 63 18 64 19 1 19 2 19 5 19 6 19 7 19 8 19 9 19 10 19 11 19 12 19 13 19 14 19 15 19 16 19 17 19 18 19 20 19 21 19 22 19 23 19 24 19 25 19 27 19 28 19 30 19 31 19 32 19 33 19 34 19 35 19 36 19 45 19 46 19 48 19 49 19 53 19 57 19 59 19 60 19 61 19 62 19 63 19 64 19 65 19 66 19 67 20 1 20 2 20 5 20 6 20 7 20 8 20 9 20 10 20 11 20 12 20 13 20 14 20 15 20 16 20 17 20 18 20 21 20 22 20 23 20 24 20 25 20 27 20 28 20 30 20 31 20 32 20 34 20 36 20 45 20 46 20 48 20 49 20 53 20 57 20 59 20 60 20 61 20 62 20 63 20 64 20 65 20 66 20 67 21 2 21 22 21 24 21 25 21 28 21 30 21 31 21 32 21 45 21 48 21 49 21 57 21 60 21 61 21 62 21 63 21 64 21 65 21 66 21 67 22 2 22 24 22 28 22 30 22 31 22 32 22 45 22 48 22 49 22 57 22 60 22 61 22 62 22 63 22 64 22 65 22 66 22 67 23 24 23 30 23 45 23 60 23 61 23 62 23 63 23 64 23 67 24 30 24 45 24 60 24 61 24 62 24 63 24 64 24 67 25 28 25 30 25 31 25 32 25 45 25 57 25 60 25 61 25 62 25 63 25 64 25 65 25 66 25 67 26 2 26 23 26 24 26 28 26 30 26 31 26 32 26 45 26 57 26 60 26 61 26 62 26 63 26 64 26 65 26 66 26 67 27 2 27 23 27 24 27 30 27 45 27 60 27 61 27 62 27 63 27 64 27 67 28 30 28 31 28 32 28 45 28 57 28 60 28 61 28 62 28 63 28 64 28 65 28 66 28 67 29 30 29 45 29 61 29 62 29 64 31 30 31 45 31 61 31 62 31 64 31 65 31 66 33 7 33 24 33 30 33 35 33 45 33 60 33 61 33 62 33 63 33 64 33 67 34 2 34 22 34 24 34 28 34 30 34 31 34 32 34 45 34 48 34 49 34 57 34 60 34 61 34 62 34 63 34 64 34 65 34 66 34 67 35 7 35 24 35 30 35 45 35 60 35 61 35 62 35 63 35 64 35 67 37 1 37 2 37 5 37 28 37 30 37 31 37 32 37 36 37 40 37 41 37 42 37 43 37 44 37 45 37 46 37 47 37 49 37 53 37 56 37 57 37 59 37 60 37 61 37 62 37 63 37 64 37 65 37 66 37 67 38 2 38 5 38 28 38 30 38 31 38 32 38 36 38 40 38 41 38 42 38 43 38 44 38 45 38 47 38 49 38 53 38 57 38 60 38 61 38 62 38 63 38 64 38 65 38 66 38 67 39 2 39 28 39 30 39 31 39 32 39 45 39 57 39 60 39 61 39 62 39 63 39 64 39 65 39 66 39 67 40 2 40 28 40 30 40 31 40 32 40 41 40 42 40 43 40 44 40 45 40 47 40 57 40 60 40 61 40 62 40 63 40 64 40 65 40 66 40 67 41 2 41 28 41 30 41 31 41 32 41 42 41 43 41 45 41 47 41 57 41 60 41 61 41 62 41 63 41 64 41 65 41 66 41 67 42 2 42 30 42 45 42 61 42 62 42 64 42 67 43 28 43 30 43 31 43 32 43 45 43 47 43 57 43 60 43 61 43 62 43 63 43 64 43 65 43 66 43 67 44 2 44 28 44 30 44 31 44 32 44 42 44 45 44 57 44 60 44 61 44 62 44 63 44 64 44 65 44 66 44 67 45 30 45 61 45 62 45 64 46 2 46 30 46 31 46 32 46 45 46 57 46 59 46 60 46 61 46 62 46 63 46 64 46 65 46 66 46 67 47 28 47 30 47 31 47 32 47 45 47 57 47 60 47 61 47 62 47 63 47 64 47 65 47 66 47 67 48 2 48 24 48 28 48 30 48 31 48 32 48 45 48 49 48 57 48 60 48 61 48 62 48 63 48 64 48 65 48 66 48 67 49 30 49 61 49 62 49 64 50 1 50 2 50 23 50 24 50 28 50 30 50 31 50 32 50 45 50 57 50 60 50 61 50 62 50 63 50 64 50 65 50 66 50 67 51 1 51 2 51 5 51 7 51 14 51 23 51 24 51 28 51 30 51 31 51 32 51 36 51 45 51 46 51 48 51 49 51 50 51 52 51 53 51 56 51 57 51 59 51 60 51 61 51 62 51 63 51 64 51 65 51 66 51 67 52 1 52 2 52 28 52 30 52 31 52 32 52 45 52 57 52 60 52 61 52 62 52 63 52 64 52 65 52 66 52 67 53 5 53 28 53 30 53 31 53 32 53 36 53 45 53 49 53 57 53 60 53 61 53 62 53 63 53 64 53 65 53 66 53 67 54 1 54 2 54 3 54 4 54 5 54 6 54 7 54 8 54 9 54 10 54 11 54 12 54 13 54 14 54 15 54 16 54 17 54 18 54 19 54 20 54 21 54 22 54 23 54 24 54 25 54 27 54 28 54 29 54 30 54 31 54 32 54 33 54 34 54 35 54 36 54 37 54 38 54 39 54 40 54 41 54 42 54 43 54 44 54 45 54 46 54 47 54 48 54 49 54 50 54 51 54 52 54 53 54 55 54 56 54 57 54 58 54 59 54 60 54 61 54 62 54 63 54 64 54 65 54 66 54 67 55 1 55 2 55 28 55 30 55 31 55 32 55 45 55 57 55 60 55 61 55 62 55 63 55 64 55 65 55 66 55 67 56 1 56 2 56 5 56 28 56 30 56 31 56 32 56 36 56 45 56 46 56 49 56 53 56 57 56 59 56 60 56 61 56 62 56 63 56 64 56 65 56 66 56 67 57 30 57 31 57 32 57 45 57 61 57 62 57 64 57 65 57 66 58 30 58 45 58 61 58 62 58 64 58 67 59 30 59 31 59 32 59 45 59 57 59 60 59 61 59 62 59 63 59 64 59 65 59 66 59 67 60 30 60 61 60 62 60 63 60 64 60 67 61 30 61 62 63 30 63 61 63 62 64 30 64 61 64 62 65 30 65 61 65 62 65 64 66 30 66 61 66 62 66 64 66 65
types 266 8 191 123 192 29 501 154 24 20 39 18 21 22 37 61 44 130 1036 30 74 22 36 19 191 412 30 22 51 94 29 318 29 67 3310 19 73 356 19 525 165 21 31 91 21 36 112 19 75 83 25 11 55 316 35 22 22 52 36 22 51 74 21 488 19 34 197 37 91 19 43 50 40 53 24 24 38 40 50 1057 155 19 46 62 36 186 19 374 21 19 1766 155 30 73 21 56 112 19 5191 21 35 32 196 36 297 35 37 63 36 65 21 1042 38 23 134 39 66 41 58 72 4248 23 40 104 23 49 93 184 21 141 102 58 300 46 59 85 45 115 103 23 68 23 61 54 162 59 21 48 167 21 497 22 122 37 23 46 22 21 89 36 1182 98 362 21 21 269 43 23 22 23 21 818 363 194 21 220 113 23 21 223 50 94 43 24 58 36 23 42 74 21 235 46 21 2228 42 78 34 91 32 95 32 44 21 117 146 38 144 28 20 21 504 21 97 54 37 23 21 424 315 37 292 21 1458 188 23 21 90 249 40 23 472 36 50 41 21 515 311 41 19 52 93 469 21 53 113 93 21 65 124 21 46 36 21 528 20 40 37 14 224 21 34 43 151 19 19 42 45
type 1 "Float" <type 9>
 func (v <type 10>) Value () <type -10>
 func (v <type 10>) String () <type -16>
 func (v <type 10>) Add (delta <type -10>)
 func (v <type 10>) Set (value <type -10>)
type 2 "Func" <type 11>
 func (f <esc:0x22> <type 2>) Value () <type 12>
 func (f <esc:0x9> <type 2>) String () <type -16>
type 3 "Int" <type 236>
 func (v <type 237>) Value () <type -4>
 func (v <type 237>) String () <type -16>
 func (v <type 237>) Add (delta <type -4>)
 func (v <type 237>) Set (value <type -4>)
type 4 "KeyValue" <type 238>
type 5 "Map" <type 239>
 func (v <type 262>) String () <type -16>
 func (v <type 262>) Init () <type 262>
 func (v <type 262>) .expvar.addKey (key <type -16>)
 func (v <type 262>) Get (key <esc:0x1> <type -16>) <type 7>
 func (v <type 262>) Set (key <type -16>, av <type 7>)
 func (v <type 262>) Add (key <type -16>, delta <type -4>)
 func (v <type 262>) AddFloat (key <type -16>, delta <type -10>)
 func (v <type 262>) Delete (key <esc:0x1> <type -16>)
 func (v <type 262>) Do (f <esc:0x1> <type 8>)
type 6 "String" <type 264>
 func (v <type 263>) Value () <type -16>
 func (v <type 263>) String () <type -16>
 func (v <type 263>) Set (value <type -16>)
type 7 "Var" <type 265>
type 8 (? <type 4>)
type 9 struct { .expvar.f <type -8>; }
type 10 *<type 1>
type 11 () <type 12>
type 12 interface { }
type 13 "net/http.Handler" <type 14>
type 14 interface { ServeHTTP (? <type 15>, ? <type 191>); }
type 15 "net/http.ResponseWriter" <type 16>
type 16 interface { Header () <type 17>; Write (? <type 20>) (? <type -11>, ? <type -19>); WriteHeader (statusCode <type -11>); }
type 17 "net/http.Header" <type 53>
 func (h <esc:0x1> <type 17>) .net/http.writeSubset (w <type 18>, exclude <esc:0x1> <type 21>, trace <esc:0x1> <type 22>) <type -19>
 func (h <esc:0x1> <type 17>) .net/http.sortedKeyValues (exclude <esc:0x1> <type 21>) (kvs <type 185>, hs <type 188>)
 func (h <esc:0x1> <type 17>) Write (w <type 18>) <type -19>
 func (h <esc:0x1> <type 17>) Del (key <esc:0x1> <type -16>)
 func (h <esc:0x1> <type 17>) .net/http.has (key <esc:0x1> <type -16>) <type -15>
 func (h <esc:0x1> <type 17>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 17>) WriteSubset (w <type 18>, exclude <esc:0x1> <type 21>) <type -19>
 func (h <esc:0x1> <type 17>) .net/http.clone () <type 17>
 func (h <esc:0x1> <type 17>) .net/http.write (w <type 18>, trace <esc:0x1> <type 22>) <type -19>
 func (h <esc:0x1> <type 17>) .net/http.get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 17>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x9> <type 17>) Add (key <type -16>, value <type -16>)
type 18 "io.Writer" <type 19>
type 19 interface { Write (p <type 20>) (n <type -11>, err <type -19>); }
type 20 [] <type -20>
type 21 map [<type -16>] <type -15>
type 22 *<type 23>
type 23 "net/http/httptrace.ClientTrace" <type 24>
 func (t <type 22>) .net/http/httptrace.compose (old <type 22>)
 func (t <esc:0x1> <type 22>) .net/http/httptrace.hasNetHooks () <type -15>
type 24 struct { GetConn <type 25>; GotConn <type 26>; PutIdleConn <type 49>; GotFirstResponseByte <type 50>; Got100Continue <type 50>; Got1xxResponse <type 51>; DNSStart <type 55>; DNSDone <type 58>; ConnectStart <type 81>; ConnectDone <type 82>; TLSHandshakeStart <type 50>; TLSHandshakeDone <type 83>; WroteHeaderField <type 181>; WroteHeaders <type 50>; Wait100Continue <type 50>; WroteRequest <type 182>; }
type 25 (hostPort <type -16>)
type 26 (? <type 27>)
type 27 "net/http/httptrace.GotConnInfo" <type 28>
type 28 struct { Conn <type 29>; Reused <type -15>; WasIdle <type -15>; IdleTime <type 36>; }
type 29 "net.Conn" <type 30>
type 30 interface { Close () <type -19>; LocalAddr () <type 31>; Read (b <type 20>) (n <type -11>, err <type -19>); RemoteAddr () <type 31>; SetDeadline (t <type 33>) <type -19>; SetReadDeadline (t <type 33>) <type -19>; SetWriteDeadline (t <type 33>) <type -19>; Write (b <type 20>) (n <type -11>, err <type -19>); }
type 31 "net.Addr" <type 32>
type 32 interface { Network () <type -16>; String () <type -16>; }
type 33 "time.Time" <type 48>
 func (t <esc:0x1> <type 34>) .time.sec () <type -4>
 func (t <type 33>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 33>
 func (t <esc:0x1> <type 33>) .time.date (full <type -15>) (year <type -11>, month <type 35>, day <type -11>, yday <type -11>)
 func (t <esc:0x1> <type 33>) MarshalJSON () (? <type 20>, ? <type -19>)
 func (t <esc:0x1> <type 34>) .time.stripMono ()
 func (t <esc:0x1> <type 33>) MarshalText () (? <type 20>, ? <type -19>)
 func (t <esc:0x1> <type 34>) .time.mono () <type -4>
 func (t <esc:0x1> <type 33>) Sub (u <esc:0x1> <type 33>) <type 36>
 func (t <esc:0x32> <type 33>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x12> <type 33>) UTC () <type 33>
 func (t <esc:0x1> <type 33>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 33>) In (loc <type 37>) <type 33>
 func (t <esc:0x1> <type 33>) Equal (u <esc:0x1> <type 33>) <type -15>
 func (t <esc:0x1> <type 33>) IsZero () <type -15>
 func (t <esc:0x12> <type 33>) Local () <type 33>
 func (t <esc:0x1> <type 33>) YearDay () <type -11>
 func (t <esc:0x1> <type 33>) Unix () <type -4>
 func (t <esc:0x1> <type 33>) Weekday () <type 47>
 func (t <esc:0x1> <type 33>) Date () (year <type -11>, month <type 35>, day <type -11>)
 func (t <esc:0x1> <type 34>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 33>) MarshalBinary () (? <type 20>, ? <type -19>)
 func (t <esc:0x1> <type 33>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 33>) Day () <type -11>
 func (t <esc:0x1> <type 34>) GobDecode (data <esc:0x1> <type 20>) <type -19>
 func (t <esc:0x1> <type 33>) After (u <esc:0x1> <type 33>) <type -15>
 func (t <esc:0x1> <type 33>) UnixNano () <type -4>
 func (t <esc:0x1> <type 34>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 33>) Minute () <type -11>
 func (t <esc:0x1> <type 33>) AppendFormat (b <esc:0x12> <type 20>, layout <esc:0x1> <type -16>) <type 20>
 func (t <esc:0x12> <type 33>) Truncate (d <type 36>) <type 33>
 func (t <esc:0x12> <type 33>) Add (d <type 36>) <type 33>
 func (t <esc:0x1> <type 33>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 33>) String () <type -16>
 func (t <esc:0x12> <type 33>) Round (d <type 36>) <type 33>
 func (t <esc:0x1> <type 34>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 33>) Before (u <esc:0x1> <type 33>) <type -15>
 func (t <esc:0x32> <type 33>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 34>) .time.setLoc (loc <type 37>)
 func (t <esc:0x1> <type 34>) UnmarshalText (data <esc:0x1> <type 20>) <type -19>
 func (t <esc:0x1> <type 34>) UnmarshalBinary (data <esc:0x1> <type 20>) <type -19>
 func (t <esc:0x1> <type 33>) Hour () <type -11>
 func (t <esc:0x1> <type 33>) .time.abs () <type -8>
 func (t <esc:0x1> <type 33>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 33>) Year () <type -11>
 func (t <esc:0x1> <type 34>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 34>) UnmarshalJSON (data <esc:0x1> <type 20>) <type -19>
 func (t <esc:0x1> <type 33>) Second () <type -11>
 func (t <esc:0x1> <type 33>) Month () <type 35>
 func (t <esc:0x12> <type 33>) Location () <type 37>
 func (t <esc:0x1> <type 33>) GobEncode () (? <type 20>, ? <type -19>)
type 34 *<type 33>
type 35 "time.Month" <type -11>
 func (m <type 35>) String () <type -16>
type 36 "time.Duration" <type -4>
 func (d <type 36>) String () <type -16>
 func (d <type 36>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 36>) Seconds () <type -10>
 func (d <type 36>) Minutes () <type -10>
 func (d <type 36>) Hours () <type -10>
 func (d <type 36>) Truncate (m <type 36>) <type 36>
 func (d <type 36>) Round (m <type 36>) <type 36>
type 37 *<type 38>
type 38 "time.Location" <type 39>
 func (l <esc:0x12> <type 37>) .time.get () <type 37>
 func (l <esc:0x22> <type 37>) String () <type -16>
 func (l <esc:0x32> <type 37>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 37>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 37>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 37>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 39 struct { .time.name <type -16>; .time.zone <type 40>; .time.tx <type 43>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 46>; }
type 40 [] <type 41>
type 41 ".time.zone" <type 42>
type 42 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 43 [] <type 44>
type 44 ".time.zoneTrans" <type 45>
type 45 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 46 *<type 41>
type 47 "time.Weekday" <type -11>
 func (d <type 47>) String () <type -16>
type 48 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 37>; }
type 49 (err <type -19>)
type 50 ()
type 51 (code <type -11>, header <type 52>) <type -19>
type 52 "net/textproto.MIMEHeader" <type 53>
 func (h <esc:0x1> <type 52>) Del (key <esc:0x1> <type -16>)
 func (h <esc:0x1> <type 52>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 52>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x9> <type 52>) Add (key <type -16>, value <type -16>)
type 53 map [<type -16>] <type 54>
type 54 [] <type -16>
type 55 (? <type 56>)
type 56 "net/http/httptrace.DNSStartInfo" <type 57>
type 57 struct { Host <type -16>; }
type 58 (? <type 59>)
type 59 "net/http/httptrace.DNSDoneInfo" <type 60>
type 60 struct { Addrs <type 61>; Err <type -19>; Coalesced <type -15>; }
type 61 [] <type 62>
type 62 "net.IPAddr" <type 77>
 func (a <esc:0xa> <type 63>) .net.toLocal (net <esc:0x1> <type -16>) <type 64>
 func (a <esc:0x1> <type 63>) .net.sockaddr (family <type -11>) (? <type 66>, ? <type -19>)
 func (a <esc:0x1> <type 63>) .net.family () <type -11>
 func (a <esc:0x12> <type 63>) .net.opAddr () <type 31>
 func (a <esc:0x1> <type 63>) .net.isWildcard () <type -15>
 func (a <esc:0x1> <type 63>) String () <type -16>
 func (a <esc:0x1> <type 63>) Network () ($ret189 <type -16>)
type 63 *<type 62>
type 64 ".net.sockaddr" <type 65>
type 65 interface { ? <type 31>; .net.family () <type -11>; .net.isWildcard () <type -15>; .net.sockaddr (family <type -11>) (? <type 66>, ? <type -19>); .net.toLocal (net <type -16>) <type 64>; }
type 66 "syscall.Sockaddr" <type 67>
type 67 interface { .syscall.sockaddr () (ptr <type 68>, len <type 75>, err <type -19>); }
type 68 *<type 69>
type 69 "syscall.RawSockaddrAny" <type 70>
type 70 struct { Addr <type 71>; Pad <type 74>; }
type 71 "syscall.RawSockaddr" <type 72>
type 72 struct { Family <type -6>; Data <type 73>; }
type 73 [14 ] <type -1>
type 74 [96 ] <type -1>
type 75 "syscall.Socklen_t" <type 76>
type 76 ".syscall._socklen_t" <type -7>
type 77 struct { IP <type 78>; Zone <type -16>; }
type 78 "net.IP" <type 20>
 func (ip <esc:0x1> <type 78>) IsLinkLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 78>) IsInterfaceLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 78>) IsUnspecified () <type -15>
 func (ip <esc:0x1> <type 78>) Equal (x <esc:0x1> <type 78>) <type -15>
 func (ip <esc:0x1> <type 78>) Mask (mask <esc:0x1> <type 79>) <type 78>
 func (ip <esc:0x1> <type 80>) UnmarshalText (text <esc:0x1> <type 20>) <type -19>
 func (ip <esc:0x1> <type 78>) IsGlobalUnicast () <type -15>
 func (ip <esc:0x1> <type 78>) IsLinkLocalUnicast () <type -15>
 func (ip <esc:0x1> <type 78>) MarshalText () (? <type 20>, ? <type -19>)
 func (ip <esc:0x1> <type 78>) String () <type -16>
 func (ip <esc:0x1> <type 78>) DefaultMask () <type 79>
 func (ip <esc:0x1> <type 78>) .net.matchAddrFamily (x <esc:0x1> <type 78>) <type -15>
 func (ip <esc:0x12> <type 78>) To4 () <type 78>
 func (ip <esc:0x12> <type 78>) To16 () <type 78>
 func (ip <esc:0x1> <type 78>) IsLoopback () <type -15>
 func (ip <esc:0x1> <type 78>) IsMulticast () <type -15>
type 79 "net.IPMask" <type 20>
 func (m <esc:0x1> <type 79>) Size () (ones <type -11>, bits <type -11>)
 func (m <esc:0x1> <type 79>) String () <type -16>
type 80 *<type 78>
type 81 (network <type -16>, addr <type -16>)
type 82 (network <type -16>, addr <type -16>, err <type -19>)
type 83 (? <type 84>, ? <type -19>)
type 84 "crypto/tls.ConnectionState" <type 86>
 func (cs <esc:0x1b2> <type 85>) ExportKeyingMaterial (label <type -16>, context <type 20>, length <type -11>) (? <type 20>, ? <type -19>)
type 85 *<type 84>
type 86 struct { Version <type -6>; HandshakeComplete <type -15>; DidResume <type -15>; CipherSuite <type -6>; NegotiatedProtocol <type -16>; NegotiatedProtocolIsMutual <type -15>; ServerName <type -16>; PeerCertificates <type 87>; VerifiedChains <type 155>; SignedCertificateTimestamps <type 150>; OCSPResponse <type 20>; .crypto/tls.ekm <type 180>; TLSUnique <type 20>; }
type 87 [] <type 88>
type 88 *<type 89>
type 89 "crypto/x509.Certificate" <type 159>
 func (c <esc:0x9> <type 88>) CheckSignature (algo <type 90>, signed <type 20>, signature <type 20>) <type -19>
 func (c <esc:0x9> <type 88>) CheckSignatureFrom (parent <esc:0x9> <type 88>) <type -19>
 func (c <esc:0x32> <type 88>) .crypto/x509.getSANExtension () <type 20>
 func (c <esc:0x9> <type 88>) CreateCRL (rand <type 91>, priv <type 12>, revokedCerts <esc:0x9> <type 93>, now <type 33>, expiry <type 33>) (crlBytes <type 20>, err <type -19>)
 func (c <esc:0x9> <type 88>) .crypto/x509.commonNameAsHostname () <type -15>
 func (c <esc:0x9> <type 88>) CheckCRLSignature (crl <esc:0x9> <type 127>) <type -19>
 func (c <type 88>) .crypto/x509.isValid (certType <type -11>, currentChain <esc:0x9> <type 87>, opts <esc:0x1> <type 145>) <type -19>
 func (c <esc:0x1> <type 88>) .crypto/x509.systemVerify (opts <esc:0x1> <type 145>) (chains <type 155>, err <type -19>)
 func (c <esc:0x12> <type 88>) .crypto/x509.checkNameConstraints (count <esc:0x1> <type 156>, maxConstraintComparisons <type -11>, nameType <type -16>, name <type -16>, parsedName <type 12>, match <esc:0x9> <type 157>, permitted <type 12>, excluded <type 12>) <type -19>
 func (c <type 88>) Verify (opts <type 146>) (chains <type 155>, err <type -19>)
 func (c <type 88>) .crypto/x509.buildChains (cache <esc:0x1> <type 158>, currentChain <esc:0x9> <type 87>, sigChecks <esc:0x1> <type 156>, opts <esc:0x9> <type 145>) (chains <type 155>, err <type -19>)
 func (c <esc:0x1a> <type 88>) VerifyHostname (h <type -16>) <type -19>
 func (c <esc:0x1> <type 88>) .crypto/x509.hasSANExtension () <type -15>
 func (c <esc:0x1> <type 88>) .crypto/x509.hasNameConstraints () <type -15>
 func (c <esc:0x1> <type 88>) Equal (other <esc:0x1> <type 88>) <type -15>
type 90 "crypto/x509.SignatureAlgorithm" <type -11>
 func (algo <type 90>) String () <type -16>
 func (algo <type 90>) .crypto/x509.isRSAPSS () <type -15>
type 91 "io.Reader" <type 92>
type 92 interface { Read (p <type 20>) (n <type -11>, err <type -19>); }
type 93 [] <type 94>
type 94 "crypto/x509/pkix.RevokedCertificate" <type 95>
type 95 struct { SerialNumber <type 96>; RevocationTime <type 33>; Extensions <type 123> "asn1:\"optional\""; }
type 96 *<type 97>
type 97 "math/big.Int" <type 118>
 func (x <esc:0x1> <type 96>) Append (buf <esc:0x12> <type 20>, base <type -11>) <type 20>
 func (x <esc:0x1> <type 96>) GobEncode () (? <type 20>, ? <type -19>)
 func (x <esc:0x1> <type 96>) MarshalText () (text <type 20>, err <type -19>)
 func (x <esc:0x9> <type 96>) ProbablyPrime (n <type -11>) <type -15>
 func (z <esc:0x1a> <type 96>) SetInt64 (x <type -4>) <type 96>
 func (z <esc:0x1a> <type 96>) ModSqrt (x <esc:0x9> <type 96>, p <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) Rsh (x <esc:0x1> <type 96>, n <type -12>) <type 96>
 func (x <esc:0x1> <type 96>) Int64 () <type -4>
 func (z <esc:0x1a> <type 96>) SetUint64 (x <type -8>) <type 96>
 func (x <esc:0x1> <type 96>) MarshalJSON () (? <type 20>, ? <type -19>)
 func (z <esc:0x1a> <type 96>) SetBytes (buf <esc:0x1> <type 20>) <type 96>
 func (z <esc:0x1a> <type 96>) .math/big.modSqrtTonelliShanks (x <esc:0x9> <type 96>, p <type 96>) <type 96>
 func (x <esc:0x22> <type 96>) Bits () <type 98>
 func (z <esc:0x1a> <type 96>) Add (x <esc:0x1> <type 96>, y <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) .math/big.modSqrt3Mod4Prime (x <esc:0x9> <type 96>, p <esc:0x1> <type 96>) <type 96>
 func (x <esc:0x1> <type 96>) Format (s <type 100>, ch <type -21>)
 func (z <esc:0x1a> <type 96>) ModInverse (g <esc:0x1> <type 96>, n <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) Set (x <esc:0x1> <type 96>) <type 96>
 func (x <esc:0x1> <type 96>) String () <type -16>
 func (z <esc:0x9> <type 96>) Scan (s <type 102>, ch <type -21>) <type -19>
 func (x <esc:0x1> <type 96>) Text (base <type -11>) <type -16>
 func (x <esc:0x1> <type 96>) IsInt64 () <type -15>
 func (x <esc:0x1> <type 96>) Cmp (y <esc:0x1> <type 96>) (r <type -11>)
 func (z <esc:0x1a> <type 96>) Quo (x <esc:0x1> <type 96>, y <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) Exp (x <esc:0x9> <type 96>, y <esc:0x1> <type 96>, m <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) Not (x <esc:0x1> <type 96>) <type 96>
 func (x <esc:0x1> <type 96>) Bytes () <type 20>
 func (z <esc:0x12> <type 96>) SetBits (abs <type 98>) <type 96>
 func (z <esc:0x1a> <type 96>) MulRange (a <type -4>, b <type -4>) <type 96>
 func (x <esc:0x1> <type 96>) Sign () <type -11>
 func (z <esc:0x1a> <type 96>) Abs (x <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) Neg (x <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x9> <type 96>) UnmarshalText (text <type 20>) <type -19>
 func (z <esc:0x1a> <type 96>) QuoRem (x <esc:0x1> <type 96>, y <esc:0x1> <type 96>, r <esc:0x8a> <type 96>) (? <type 96>, ? <type 96>)
 func (z <esc:0x9> <type 96>) UnmarshalJSON (text <type 20>) <type -19>
 func (z <esc:0x9> <type 96>) GobDecode (buf <esc:0x1> <type 20>) <type -19>
 func (z <esc:0x1a> <type 96>) .math/big.scan (r <type 105>, base <type -11>) (? <type 96>, ? <type -11>, ? <type -19>)
 func (z <esc:0x1a> <type 96>) SetString (s <type -16>, base <type -11>) (? <type 96>, ? <type -15>)
 func (z <esc:0x1a> <type 96>) Mul (x <esc:0x1> <type 96>, y <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) Mod (x <esc:0x1> <type 96>, y <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) .math/big.setFromScanner (r <type 105>, base <type -11>) (? <type 96>, ? <type -15>)
 func (z <esc:0x1a> <type 96>) And (x <esc:0x1> <type 96>, y <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) Sub (x <esc:0x1> <type 96>, y <esc:0x1> <type 96>) <type 96>
 func (x <esc:0x1> <type 96>) CmpAbs (y <esc:0x1> <type 96>) <type -11>
 func (z <esc:0x1a> <type 96>) Div (x <esc:0x1> <type 96>, y <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) Rem (x <esc:0x1> <type 96>, y <esc:0x1> <type 96>) <type 96>
 func (x <esc:0x1> <type 96>) IsUint64 () <type -15>
 func (z <esc:0x1a> <type 96>) DivMod (x <esc:0x1> <type 96>, y <esc:0x1> <type 96>, m <esc:0x8a> <type 96>) (? <type 96>, ? <type 96>)
 func (z <esc:0x1a> <type 96>) Binomial (n <type -4>, k <type -4>) <type 96>
 func (x <esc:0x1> <type 96>) Uint64 () <type -8>
 func (x <esc:0x1> <type 96>) BitLen () <type -11>
 func (z <esc:0x1a> <type 96>) GCD (x <esc:0x9> <type 96>, y <esc:0x9> <type 96>, a <esc:0x1> <type 96>, b <esc:0x1> <type 96>) <type 96>
 func (x <esc:0x1> <type 96>) Bit (i <type -11>) <type -12>
 func (z <esc:0x1a> <type 96>) Or (x <esc:0x1> <type 96>, y <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x12> <type 96>) .math/big.lehmerGCD (x <esc:0x1> <type 96>, y <esc:0x9> <type 96>, a <esc:0x1> <type 96>, b <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) Rand (rnd <esc:0x9> <type 109>, n <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) Xor (x <esc:0x1> <type 96>, y <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) Sqrt (x <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) .math/big.modSqrt5Mod8Prime (x <esc:0x1> <type 96>, p <esc:0x1> <type 96>) <type 96>
 func (z <esc:0x1a> <type 96>) Lsh (x <esc:0x1> <type 96>, n <type -12>) <type 96>
 func (z <esc:0x1a> <type 96>) SetBit (x <esc:0x1> <type 96>, i <type -11>, b <type -12>) <type 96>
 func (z <esc:0x1a> <type 96>) AndNot (x <esc:0x1> <type 96>, y <esc:0x1> <type 96>) <type 96>
type 98 [] <type 99>
type 99 "math/big.Word" <type -12>
type 100 "fmt.State" <type 101>
type 101 interface { Flag (c <type -11>) <type -15>; Precision () (prec <type -11>, ok <type -15>); Width () (wid <type -11>, ok <type -15>); Write (b <type 20>) (n <type -11>, err <type -19>); }
type 102 "fmt.ScanState" <type 103>
type 103 interface { Read (buf <type 20>) (n <type -11>, err <type -19>); ReadRune () (r <type -21>, size <type -11>, err <type -19>); SkipSpace (); Token (skipSpace <type -15>, f <type 104>) (token <type 20>, err <type -19>); UnreadRune () <type -19>; Width () (wid <type -11>, ok <type -15>); }
type 104 (? <type -21>) <type -15>
type 105 "io.ByteScanner" <type 106>
type 106 interface { ? <type 107>; UnreadByte () <type -19>; }
type 107 "io.ByteReader" <type 108>
type 108 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 109 *<type 110>
type 110 "math/rand.Rand" <type 113>
 func (r <esc:0x9> <type 109>) Uint32 () <type -7>
 func (r <esc:0x9> <type 109>) Shuffle (n <type -11>, swap <esc:0x1> <type 111>)
 func (r <esc:0x9> <type 109>) Int31 () <type -3>
 func (r <type 109>) Read (p <esc:0x1> <type 20>) (n <type -11>, err <type -19>)
 func (r <esc:0x9> <type 109>) Float32 () <type -9>
 func (r <esc:0x9> <type 109>) Perm (n <type -11>) <type 112>
 func (r <esc:0x9> <type 109>) Uint64 () <type -8>
 func (r <esc:0x9> <type 109>) .math/rand.int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 109>) Seed (seed <type -4>)
 func (r <esc:0x9> <type 109>) Float64 () <type -10>
 func (r <esc:0x9> <type 109>) Int63 () <type -4>
 func (r <esc:0x9> <type 109>) NormFloat64 () <type -10>
 func (r <esc:0x9> <type 109>) ExpFloat64 () <type -10>
 func (r <esc:0x9> <type 109>) Int63n (n <type -4>) <type -4>
 func (r <esc:0x9> <type 109>) Int () <type -11>
 func (r <esc:0x9> <type 109>) Intn (n <type -11>) <type -11>
 func (r <esc:0x9> <type 109>) Int31n (n <type -3>) <type -3>
type 111 (i <type -11>, j <type -11>)
type 112 [] <type -11>
type 113 struct { .math/rand.src <type 114>; .math/rand.s64 <type 116>; .math/rand.readVal <type -4>; .math/rand.readPos <type -1>; }
type 114 "math/rand.Source" <type 115>
type 115 interface { Int63 () <type -4>; Seed (seed <type -4>); }
type 116 "math/rand.Source64" <type 117>
type 117 interface { ? <type 114>; Uint64 () <type -8>; }
type 118 struct { .math/big.neg <type -15>; .math/big.abs <type 119>; }
type 119 ".math/big.nat" <type 98>
 func (x <esc:0x1> <type 119>) .math/big.modW (d <type 99>) (r <type 99>)
 func (z <esc:0x12> <type 119>) .math/big.xor (x <esc:0x1> <type 119>, y <esc:0x1> <type 119>) <type 119>
 func (z <esc:0x1> <type 119>) .math/big.bytes (buf <esc:0x1> <type 20>) (i <type -11>)
 func (z <esc:0x12> <type 119>) .math/big.or (x <esc:0x1> <type 119>, y <esc:0x1> <type 119>) <type 119>
 func (z <esc:0x12> <type 119>) .math/big.andNot (x <esc:0x1> <type 119>, y <esc:0x1> <type 119>) <type 119>
 func (z <type 119>) .math/big.mul (x <esc:0x1> <type 119>, y <esc:0x1> <type 119>) <type 119>
 func (z <esc:0x12> <type 119>) .math/big.mulAddWW (x <esc:0x1> <type 119>, y <type 99>, r <type 99>) <type 119>
 func (z <type 119>) .math/big.expNN (x <type 119>, y <esc:0x1> <type 119>, m <esc:0x1> <type 119>) <type 119>
 func (x <esc:0x1> <type 119>) .math/big.bit (i <type -12>) <type -12>
 func (x <esc:0x1> <type 119>) .math/big.trailingZeroBits () <type -12>
 func (z <type 119>) .math/big.sqr (x <esc:0x1> <type 119>) <type 119>
 func (z <esc:0x12> <type 119>) .math/big.norm () <type 119>
 func (x <esc:0x1> <type 119>) .math/big.utoa (base <type -11>) <type 20>
 func (z <esc:0x12> <type 119>) .math/big.setBit (x <esc:0x1> <type 119>, i <type -12>, b <type -12>) <type 119>
 func (z <type 119>) .math/big.expNNWindowed (x <type 119>, y <esc:0x1> <type 119>, m <esc:0x1> <type 119>) <type 119>
 func (z <esc:0x12> <type 119>) .math/big.shr (x <esc:0x1> <type 119>, s <type -12>) <type 119>
 func (z <type 119>) .math/big.expWW (x <type 99>, y <type 99>) <type 119>
 func (z <esc:0x12> <type 119>) .math/big.montgomery (x <esc:0x1> <type 119>, y <esc:0x1> <type 119>, m <esc:0x1> <type 119>, k <type 99>, n <type -11>) <type 119>
 func (q <esc:0x1> <type 119>) .math/big.convertWords (s <esc:0x1> <type 20>, b <type 99>, ndigits <type -11>, bb <type 99>, table <esc:0x1> <type 120>)
 func (z <type 119>) .math/big.add (x <esc:0x1> <type 119>, y <esc:0x1> <type 119>) <type 119>
 func (z <esc:0x12> <type 119>) .math/big.expNNMontgomery (x <esc:0x1> <type 119>, y <esc:0x1> <type 119>, m <esc:0x1> <type 119>) <type 119>
 func (z <esc:0x12> <type 119>) .math/big.scan (r <type 105>, base <type -11>, fracOk <type -15>) (res <type 119>, b <type -11>, count <type -11>, err <type -19>)
 func (n <esc:0x1> <type 119>) .math/big.probablyPrimeMillerRabin (reps <type -11>, force2 <type -15>) <type -15>
 func (z <esc:0x12> <type 119>) .math/big.setBytes (buf <esc:0x1> <type 20>) <type 119>
 func (z <esc:0x12> <type 119>) .math/big.random (rand <esc:0x9> <type 109>, limit <esc:0x1> <type 119>, n <type -11>) <type 119>
 func (z <esc:0x12> <type 119>) .math/big.set (x <esc:0x1> <type 119>) <type 119>
 func (z <esc:0x12> <type 119>) .math/big.make (n <type -11>) <type 119>
 func (z <type 119>) .math/big.mulRange (a <type -8>, b <type -8>) <type 119>
 func (x <esc:0x1> <type 119>) .math/big.bitLen () <type -11>
 func (z <esc:0x12> <type 119>) .math/big.divLarge (u <esc:0x82> <type 119>, uIn <esc:0x1> <type 119>, vIn <esc:0x1> <type 119>) (q <type 119>, r <type 119>)
 func (z <esc:0x12> <type 119>) .math/big.shl (x <esc:0x1> <type 119>, s <type -12>) <type 119>
 func (x <esc:0x1> <type 119>) .math/big.cmp (y <esc:0x1> <type 119>) (r <type -11>)
 func (z <esc:0x12> <type 119>) .math/big.sub (x <esc:0x1> <type 119>, y <esc:0x1> <type 119>) <type 119>
 func (x <esc:0x1> <type 119>) .math/big.sticky (i <type -12>) <type -12>
 func (z <type 119>) .math/big.sqrt (x <esc:0x1> <type 119>) <type 119>
 func (n <type 119>) .math/big.probablyPrimeLucas () <type -15>
 func (z <esc:0x12> <type 119>) .math/big.setWord (x <type 99>) <type 119>
 func (z <esc:0x12> <type 119>) .math/big.divW (x <esc:0x1> <type 119>, y <type 99>) (q <type 119>, r <type 99>)
 func (x <esc:0x1> <type 119>) .math/big.itoa (neg <type -15>, base <type -11>) <type 20>
 func (z <esc:0x1> <type 119>) .math/big.clear ()
 func (z <esc:0x12> <type 119>) .math/big.div (z2 <esc:0x82> <type 119>, u <esc:0x1> <type 119>, v <esc:0x1> <type 119>) (q <type 119>, r <type 119>)
 func (z <esc:0x12> <type 119>) .math/big.and (x <esc:0x1> <type 119>, y <esc:0x1> <type 119>) <type 119>
 func (z <esc:0x12> <type 119>) .math/big.setUint64 (x <type -8>) <type 119>
type 120 [] <type 121>
type 121 ".math/big.divisor" <type 122>
type 122 struct { .math/big.bbb <type 119>; .math/big.nbits <type -11>; .math/big.ndigits <type -11>; }
type 123 [] <type 124>
type 124 "crypto/x509/pkix.Extension" <type 125>
type 125 struct { Id <type 126>; Critical <type -15> "asn1:\"optional\""; Value <type 20>; }
type 126 "encoding/asn1.ObjectIdentifier" <type 112>
 func (oi <esc:0x1> <type 126>) String () <type -16>
 func (oi <esc:0x1> <type 126>) Equal (other <esc:0x1> <type 126>) <type -15>
type 127 *<type 128>
type 128 "crypto/x509/pkix.CertificateList" <type 129>
 func (certList <esc:0x1> <type 127>) HasExpired (now <esc:0x1> <type 33>) <type -15>
type 129 struct { TBSCertList <type 130>; SignatureAlgorithm <type 133>; SignatureValue <type 143>; }
type 130 "crypto/x509/pkix.TBSCertificateList" <type 131>
type 131 struct { Raw <type 132>; Version <type -11> "asn1:\"optional,default:0\""; Signature <type 133>; Issuer <type 137>; ThisUpdate <type 33>; NextUpdate <type 33> "asn1:\"optional\""; RevokedCertificates <type 93> "asn1:\"optional\""; Extensions <type 123> "asn1:\"tag:0,optional,explicit\""; }
type 132 "encoding/asn1.RawContent" <type 20>
type 133 "crypto/x509/pkix.AlgorithmIdentifier" <type 134>
type 134 struct { Algorithm <type 126>; Parameters <type 135> "asn1:\"optional\""; }
type 135 "encoding/asn1.RawValue" <type 136>
type 136 struct { Class <type -11>; Tag <type -11>; IsCompound <type -15>; Bytes <type 20>; FullBytes <type 20>; }
type 137 "crypto/x509/pkix.RDNSequence" <type 138>
 func (r <esc:0x9> <type 137>) String () <type -16>
type 138 [] <type 139>
type 139 "crypto/x509/pkix.RelativeDistinguishedNameSET" <type 140>
type 140 [] <type 141>
type 141 "crypto/x509/pkix.AttributeTypeAndValue" <type 142>
type 142 struct { Type <type 126>; Value <type 12>; }
type 143 "encoding/asn1.BitString" <type 144>
 func (b <esc:0x12> <type 143>) RightAlign () <type 20>
 func (b <esc:0x1> <type 143>) At (i <type -11>) <type -11>
type 144 struct { Bytes <type 20>; BitLength <type -11>; }
type 145 *<type 146>
type 146 "crypto/x509.VerifyOptions" <type 147>
type 147 struct { DNSName <type -16>; Intermediates <type 148>; Roots <type 148>; CurrentTime <type 33>; KeyUsages <type 153>; MaxConstraintComparisions <type -11>; }
type 148 *<type 149>
type 149 "crypto/x509.CertPool" <type 151>
 func (s <esc:0x9> <type 148>) Subjects () <type 150>
 func (s <esc:0x9> <type 148>) AppendCertsFromPEM (pemCerts <type 20>) (ok <type -15>)
 func (s <esc:0x9> <type 148>) AddCert (cert <type 88>)
 func (s <esc:0x1> <type 148>) .crypto/x509.contains (cert <esc:0x1> <type 88>) <type -15>
 func (s <esc:0x1> <type 148>) .crypto/x509.findPotentialParents (cert <esc:0x1> <type 88>) <type 112>
 func (s <esc:0x9> <type 148>) .crypto/x509.copy () <type 148>
type 150 [] <type 20>
type 151 struct { .crypto/x509.bySubjectKeyId <type 152>; .crypto/x509.byName <type 152>; .crypto/x509.certs <type 87>; }
type 152 map [<type -16>] <type 112>
type 153 [] <type 154>
type 154 "crypto/x509.ExtKeyUsage" <type -11>
type 155 [] <type 87>
type 156 *<type -11>
type 157 (parsedName <type 12>, constraint <type 12>) (match <type -15>, err <type -19>)
type 158 map [<type 88>] <type 155>
type 159 struct { Raw <type 20>; RawTBSCertificate <type 20>; RawSubjectPublicKeyInfo <type 20>; RawSubject <type 20>; RawIssuer <type 20>; Signature <type 20>; SignatureAlgorithm <type 90>; PublicKeyAlgorithm <type 160>; PublicKey <type 12>; Version <type -11>; SerialNumber <type 96>; Issuer <type 161>; Subject <type 161>; NotBefore <type 33>; NotAfter <type 33>; KeyUsage <type 165>; Extensions <type 123>; ExtraExtensions <type 123>; UnhandledCriticalExtensions <type 166>; ExtKeyUsage <type 153>; UnknownExtKeyUsage <type 166>; BasicConstraintsValid <type -15>; IsCA <type -15>; MaxPathLen <type -11>; MaxPathLenZero <type -15>; SubjectKeyId <type 20>; AuthorityKeyId <type 20>; OCSPServer <type 54>; IssuingCertificateURL <type 54>; DNSNames <type 54>; EmailAddresses <type 54>; IPAddresses <type 167>; URIs <type 168>; PermittedDNSDomainsCritical <type -15>; PermittedDNSDomains <type 54>; ExcludedDNSDomains <type 54>; PermittedIPRanges <type 176>; ExcludedIPRanges <type 176>; PermittedEmailAddresses <type 54>; ExcludedEmailAddresses <type 54>; PermittedURIDomains <type 54>; ExcludedURIDomains <type 54>; CRLDistributionPoints <type 54>; PolicyIdentifiers <type 166>; }
type 160 "crypto/x509.PublicKeyAlgorithm" <type -11>
 func (algo <type 160>) String () <type -16>
type 161 "crypto/x509/pkix.Name" <type 164>
 func (n <esc:0x9> <type 162>) FillFromRDNSequence (rdns <esc:0x9> <type 163>)
 func (n <esc:0x1> <type 161>) .crypto/x509/pkix.appendRDNs (in <esc:0x1a> <type 137>, values <esc:0x9> <type 54>, oid <type 126>) <type 137>
 func (n <type 161>) ToRDNSequence () (ret <type 137>)
 func (n <type 161>) String () <type -16>
type 162 *<type 161>
type 163 *<type 137>
type 164 struct { Country <type 54>; Organization <type 54>; OrganizationalUnit <type 54>; Locality <type 54>; Province <type 54>; StreetAddress <type 54>; PostalCode <type 54>; SerialNumber <type -16>; CommonName <type -16>; Names <type 140>; ExtraNames <type 140>; }
type 165 "crypto/x509.KeyUsage" <type -11>
type 166 [] <type 126>
type 167 [] <type 78>
type 168 [] <type 169>
type 169 *<type 170>
type 170 "net/url.URL" <type 172>
 func (u <esc:0x1> <type 169>) .net/url.setPath (p <type -16>) <type -19>
 func (u <esc:0x22> <type 169>) Port () <type -16>
 func (u <esc:0x22> <type 169>) EscapedPath () <type -16>
 func (u <esc:0x22> <type 169>) Hostname () <type -16>
 func (u <esc:0x1> <type 169>) String () <type -16>
 func (u <esc:0x1> <type 169>) IsAbs () <type -15>
 func (u <esc:0x9> <type 169>) Parse (ref <type -16>) (? <type 169>, ? <type -19>)
 func (u <esc:0x22> <type 169>) RequestURI () <type -16>
 func (u <esc:0xa> <type 169>) ResolveReference (ref <esc:0xa> <type 169>) <type 169>
 func (u <esc:0x9> <type 169>) Query () <type 171>
 func (u <esc:0x1> <type 169>) MarshalBinary () (text <type 20>, err <type -19>)
 func (u <esc:0x1> <type 169>) UnmarshalBinary (text <esc:0x1> <type 20>) <type -19>
type 171 "net/url.Values" <type 53>
 func (v <esc:0x1> <type 171>) Get (key <esc:0x1> <type -16>) <type -16>
 func (v <esc:0x1> <type 171>) Set (key <type -16>, value <type -16>)
 func (v <esc:0x9> <type 171>) Add (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 171>) Del (key <esc:0x1> <type -16>)
 func (v <esc:0x1> <type 171>) Encode () <type -16>
type 172 struct { Scheme <type -16>; Opaque <type -16>; User <type 173>; Host <type -16>; Path <type -16>; RawPath <type -16>; ForceQuery <type -15>; RawQuery <type -16>; Fragment <type -16>; }
type 173 *<type 174>
type 174 "net/url.Userinfo" <type 175>
 func (u <esc:0x22> <type 173>) Username () <type -16>
 func (u <esc:0x22> <type 173>) String () <type -16>
 func (u <esc:0x22> <type 173>) Password () (? <type -16>, ? <type -15>)
type 175 struct { .net/url.username <type -16>; .net/url.password <type -16>; .net/url.passwordSet <type -15>; }
type 176 [] <type 177>
type 177 *<type 178>
type 178 "net.IPNet" <type 179>
 func (n <esc:0x1> <type 177>) Contains (ip <esc:0x1> <type 78>) <type -15>
 func (n <esc:0x1> <type 177>) Network () ($ret178 <type -16>)
 func (n <esc:0x1> <type 177>) String () <type -16>
type 179 struct { IP <type 78>; Mask <type 79>; }
type 180 (label <type -16>, context <type 20>, length <type -11>) (? <type 20>, ? <type -19>)
type 181 (key <type -16>, value <type 54>)
type 182 (? <type 183>)
type 183 "net/http/httptrace.WroteRequestInfo" <type 184>
type 184 struct { Err <type -19>; }
type 185 [] <type 186>
type 186 ".net/http.keyValues" <type 187>
type 187 struct { .net/http.key <type -16>; .net/http.values <type 54>; }
type 188 *<type 189>
type 189 ".net/http.headerSorter" <type 190>
 func (s <esc:0x1> <type 188>) Less (i <type -11>, j <type -11>) <type -15>
 func (s <esc:0x9> <type 188>) Swap (i <type -11>, j <type -11>)
 func (s <esc:0x1> <type 188>) Len () <type -11>
type 190 struct { .net/http.kvs <type 185>; }
type 191 *<type 192>
type 192 "net/http.Request" <type 229>
 func (r <esc:0x1> <type 191>) .net/http.requiresHTTP1 () <type -15>
 func (r <esc:0x1> <type 191>) .net/http.wantsHttp10KeepAlive () <type -15>
 func (r <esc:0x9> <type 191>) FormFile (key <esc:0x1> <type -16>) (? <type 193>, ? <type 201>, ? <type -19>)
 func (r <esc:0x1> <type 191>) .net/http.outgoingLength () <type -4>
 func (r <esc:0x1> <type 191>) .net/http.expectsContinue () <type -15>
 func (r <esc:0x9> <type 191>) PostFormValue (key <esc:0x1> <type -16>) <type -16>
 func (r <esc:0x1> <type 191>) .net/http.wantsClose () <type -15>
 func (r <esc:0x9> <type 191>) ParseMultipartForm (maxMemory <type -4>) <type -19>
 func (r <esc:0x9> <type 191>) ParseForm () <type -19>
 func (r <esc:0x1> <type 191>) BasicAuth () (username <type -16>, password <type -16>, ok <type -15>)
 func (r <esc:0x1> <type 191>) SetBasicAuth (username <esc:0x1> <type -16>, password <esc:0x1> <type -16>)
 func (r <esc:0x22> <type 191>) Context () <type 204>
 func (r <esc:0x9> <type 191>) .net/http.multipartReader (allowMixed <type -15>) (? <type 208>, ? <type -19>)
 func (r <esc:0x9> <type 191>) WithContext (ctx <type 204>) <type 191>
 func (r <esc:0x1> <type 191>) .net/http.isH2Upgrade () <type -15>
 func (r <esc:0x1> <type 191>) ProtoAtLeast (major <type -11>, minor <type -11>) <type -15>
 func (r <esc:0x1> <type 191>) UserAgent () <type -16>
 func (r <esc:0x1> <type 191>) .net/http.isReplayable () <type -15>
 func (r <esc:0x9> <type 191>) .net/http.closeBody ()
 func (r <esc:0x9> <type 191>) .net/http.write (w <type 18>, usingProxy <type -15>, extraHeaders <esc:0x1> <type 17>, waitForContinue <esc:0x1> <type 223>) (err <type -19>)
 func (r <esc:0x1> <type 191>) Referer () <type -16>
 func (r <esc:0x9> <type 191>) Write (w <type 18>) <type -19>
 func (r <esc:0x9> <type 191>) FormValue (key <esc:0x1> <type -16>) <type -16>
 func (r <esc:0x1> <type 191>) AddCookie (c <esc:0x9> <type 224>)
 func (r <esc:0x1> <type 191>) Cookies () <type 228>
 func (r <esc:0x1> <type 191>) Cookie (name <esc:0x1> <type -16>) (? <type 224>, ? <type -19>)
 func (r <esc:0x9> <type 191>) MultipartReader () (? <type 208>, ? <type -19>)
 func (r <esc:0x9> <type 191>) WriteProxy (w <type 18>) <type -19>
type 193 "mime/multipart.File" <type 194>
type 194 interface { ? <type 91>; ? <type 195>; ? <type 197>; ? <type 199>; }
type 195 "io.ReaderAt" <type 196>
type 196 interface { ReadAt (p <type 20>, off <type -4>) (n <type -11>, err <type -19>); }
type 197 "io.Seeker" <type 198>
type 198 interface { Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>); }
type 199 "io.Closer" <type 200>
type 200 interface { Close () <type -19>; }
type 201 *<type 202>
type 202 "mime/multipart.FileHeader" <type 203>
 func (fh <esc:0x9> <type 201>) Open () (? <type 193>, ? <type -19>)
type 203 struct { Filename <type -16>; Header <type 52>; Size <type -4>; .mime/multipart.content <type 20>; .mime/multipart.tmpfile <type -16>; }
type 204 "context.Context" <type 205>
type 205 interface { Deadline () (deadline <type 33>, ok <type -15>); Done () <type 206>; Err () <type -19>; Value (key <type 12>) <type 12>; }
type 206 chan <- <type 207>
type 207 struct { }
type 208 *<type 209>
type 209 "mime/multipart.Reader" <type 219>
 func (r <type 208>) ReadForm (maxMemory <type -4>) (? <type 210>, ? <type -19>)
 func (r <type 208>) .mime/multipart.readForm (maxMemory <type -4>) (_ <type 210>, err <type -19>)
 func (mr <esc:0x1> <type 208>) .mime/multipart.isBoundaryDelimiterLine (line <esc:0x1> <type 20>) (ret <type -15>)
 func (r <type 208>) NextPart () (? <type 215>, ? <type -19>)
 func (mr <esc:0x1> <type 208>) .mime/multipart.isFinalBoundary (line <esc:0x1> <type 20>) <type -15>
type 210 *<type 211>
type 211 "mime/multipart.Form" <type 212>
 func (f <esc:0x1> <type 210>) RemoveAll () <type -19>
type 212 struct { Value <type 53>; File <type 213>; }
type 213 map [<type -16>] <type 214>
type 214 [] <type 201>
type 215 *<type 216>
type 216 "mime/multipart.Part" <type 217>
 func (p <esc:0x1> <type 215>) FormName () <type -16>
 func (p <esc:0x1> <type 215>) FileName () <type -16>
 func (bp <esc:0x9> <type 215>) .mime/multipart.populateHeaders () <type -19>
 func (p <esc:0x1> <type 215>) .mime/multipart.parseContentDisposition ()
 func (p <esc:0x9> <type 215>) Read (d <type 20>) (n <type -11>, err <type -19>)
 func (p <type 215>) Close () <type -19>
type 217 struct { Header <type 52>; .mime/multipart.mr <type 208>; .mime/multipart.disposition <type -16>; .mime/multipart.dispositionParams <type 218>; .mime/multipart.r <type 91>; .mime/multipart.n <type -11>; .mime/multipart.total <type -4>; .mime/multipart.err <type -19>; .mime/multipart.readErr <type -19>; }
type 218 map [<type -16>] <type -16>
type 219 struct { .mime/multipart.bufReader <type 220>; .mime/multipart.currentPart <type 215>; .mime/multipart.partsRead <type -11>; .mime/multipart.nl <type 20>; .mime/multipart.nlDashBoundary <type 20>; .mime/multipart.dashBoundaryDash <type 20>; .mime/multipart.dashBoundary <type 20>; }
type 220 *<type 221>
type 221 "bufio.Reader" <type 222>
 func (b <esc:0x1> <type 220>) Size () <type -11>
 func (b <esc:0x82a> <type 220>) ReadLine () (line <type 20>, isPrefix <type -15>, err <type -19>)
 func (b <esc:0x10a> <type 220>) ReadString (delim <type -20>) (? <type -16>, ? <type -19>)
 func (b <esc:0x10a> <type 220>) WriteTo (w <type 18>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 220>) UnreadByte () <type -19>
 func (b <esc:0x9> <type 220>) .bufio.fill ()
 func (b <esc:0x1> <type 220>) UnreadRune () <type -19>
 func (b <esc:0x22> <type 220>) .bufio.readErr () <type -19>
 func (b <esc:0x12a> <type 220>) ReadSlice (delim <type -20>) (line <type 20>, err <type -19>)
 func (b <esc:0x12a> <type 220>) Peek (n <type -11>) (? <type 20>, ? <type -19>)
 func (b <esc:0x10a> <type 220>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x1> <type 220>) .bufio.reset (buf <type 20>, r <type 91>)
 func (b <esc:0x80a> <type 220>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x9> <type 220>) .bufio.writeBuf (w <type 18>) (? <type -4>, ? <type -19>)
 func (b <esc:0x9> <type 220>) Reset (r <type 91>)
 func (b <esc:0x10a> <type 220>) Read (p <type 20>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 220>) Buffered () <type -11>
 func (b <esc:0x10a> <type 220>) ReadBytes (delim <type -20>) (? <type 20>, ? <type -19>)
 func (b <esc:0x10a> <type 220>) Discard (n <type -11>) (discarded <type -11>, err <type -19>)
type 222 struct { .bufio.buf <type 20>; .bufio.rd <type 91>; .bufio.r <type -11>; .bufio.w <type -11>; .bufio.err <type -19>; .bufio.lastByte <type -11>; .bufio.lastRuneSize <type -11>; }
type 223 () <type -15>
type 224 *<type 225>
type 225 "net/http.Cookie" <type 226>
 func (c <esc:0x9> <type 224>) String () <type -16>
type 226 struct { Name <type -16>; Value <type -16>; Path <type -16>; Domain <type -16>; Expires <type 33>; RawExpires <type -16>; MaxAge <type -11>; Secure <type -15>; HttpOnly <type -15>; SameSite <type 227>; Raw <type -16>; Unparsed <type 54>; }
type 227 "net/http.SameSite" <type -11>
type 228 [] <type 224>
type 229 struct { Method <type -16>; URL <type 169>; Proto <type -16>; ProtoMajor <type -11>; ProtoMinor <type -11>; Header <type 17>; Body <type 230>; GetBody <type 232>; ContentLength <type -4>; TransferEncoding <type 54>; Close <type -15>; Host <type -16>; Form <type 171>; PostForm <type 171>; MultipartForm <type 210>; Trailer <type 17>; RemoteAddr <type -16>; RequestURI <type -16>; TLS <type 85>; Cancel <type 206>; Response <type 233>; .net/http.ctx <type 204>; }
type 230 "io.ReadCloser" <type 231>
type 231 interface { ? <type 91>; ? <type 199>; }
type 232 () (? <type 230>, ? <type -19>)
type 233 *<type 234>
type 234 "net/http.Response" <type 235>
 func (r <esc:0x1> <type 233>) .net/http.isProtocolSwitch () <type -15>
 func (r <esc:0x1> <type 233>) .net/http.bodyIsWritable () <type -15>
 func (r <esc:0x1> <type 233>) ProtoAtLeast (major <type -11>, minor <type -11>) <type -15>
 func (r <esc:0x9> <type 233>) Write (w <type 18>) <type -19>
 func (r <esc:0x9> <type 233>) Location () (? <type 169>, ? <type -19>)
 func (r <esc:0x9> <type 233>) .net/http.closeBody ()
 func (r <esc:0x1> <type 233>) Cookies () <type 228>
type 235 struct { Status <type -16>; StatusCode <type -11>; Proto <type -16>; ProtoMajor <type -11>; ProtoMinor <type -11>; Header <type 17>; Body <type 230>; ContentLength <type -4>; TransferEncoding <type 54>; Close <type -15>; Uncompressed <type -15>; Trailer <type 17>; Request <type 191>; TLS <type 85>; }
type 236 struct { .expvar.i <type -4>; }
type 237 *<type 3>
type 238 struct { Key <type -16>; Value <type 7>; }
type 239 struct { .expvar.m <type 240>; .expvar.keysMu <type 257>; .expvar.keys <type 54>; }
type 240 "sync.Map" <type 243>
 func (m <type 241>) .sync.dirtyLocked ()
 func (m <type 241>) .sync.missLocked ()
 func (m <type 241>) Range (f <esc:0x1> <type 242>)
 func (m <type 241>) Delete (key <esc:0x1> <type 12>)
 func (m <type 241>) LoadOrStore (key <type 12>, value <type 12>) (actual <type 12>, loaded <type -15>)
 func (m <type 241>) Store (key <type 12>, value <type 12>)
 func (m <type 241>) Load (key <esc:0x1> <type 12>) (value <type 12>, ok <type -15>)
type 241 *<type 240>
type 242 (key <type 12>, value <type 12>) <type -15>
type 243 struct { .sync.mu <type 244>; .sync.read <type 247>; .sync.dirty <type 250>; .sync.misses <type -11>; }
type 244 "sync.Mutex" <type 246>
 func (m <type 245>) Unlock ()
 func (m <type 245>) Lock ()
type 245 *<type 244>
type 246 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 247 "sync/atomic.Value" <type 249>
 func (v <type 248>) Load () (x <type 12>)
 func (v <type 248>) Store (x <type 12>)
type 248 *<type 247>
type 249 struct { .sync/atomic.v <type 12>; }
type 250 map [<type 12>] <type 251>
type 251 *<type 252>
type 252 ".sync.entry" <type 254>
 func (e <type 251>) .sync.tryExpungeLocked () (isExpunged <type -15>)
 func (e <type 251>) .sync.delete () (hadValue <type -15>)
 func (e <type 251>) .sync.tryLoadOrStore (i <type 12>) (actual <type 12>, loaded <type -15>, ok <type -15>)
 func (e <type 251>) .sync.storeLocked (i <type 253>)
 func (e <type 251>) .sync.unexpungeLocked () (wasExpunged <type -15>)
 func (e <type 251>) .sync.tryStore (i <type 253>) <type -15>
 func (e <type 251>) .sync.load () (value <type 12>, ok <type -15>)
type 253 *<type 12>
type 254 struct { .sync.p <type 255>; }
type 255 "unsafe.Pointer" <type 256>
type 256 *any
type 257 "sync.RWMutex" <type 261>
 func (rw <esc:0x12> <type 258>) RLocker () ($ret8 <type 259>)
 func (rw <type 258>) Unlock ()
 func (rw <type 258>) Lock ()
 func (rw <type 258>) RUnlock ()
 func (rw <type 258>) RLock ()
type 258 *<type 257>
type 259 "sync.Locker" <type 260>
type 260 interface { Lock (); Unlock (); }
type 261 struct { .sync.w <type 244>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 262 *<type 5>
type 263 *<type 6>
type 264 struct { .expvar.s <type 247>; }
type 265 interface { String () <type -16>; }
func Do (f <esc:0x1> <type 8>)
func Get (name <esc:0x1> <type -16>) <type 7>
func Handler () <type 13>
func NewFloat (name <type -16>) <type 10>
func NewInt (name <type -16>) <type 237>
func NewMap (name <type -16>) <type 262>
func NewString (name <type -16>) <type 263>
func Publish (name <type -16>, v <type 7>)
checksum DA1F7AC38322B1F9062AAA20EE3A43F7EA1F706D
v3;
package flag
pkgpath flag
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import os os "os"
import reflect reflect "reflect"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import time time "time"
init flag flag..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1 13 1 14 3 2 3 5 3 8 3 9 3 11 3 12 3 13 5 2 5 8 5 9 5 11 6 2 6 3 6 4 6 5 6 8 6 9 6 11 6 12 6 13 7 2 7 8 7 9 7 10 7 11 7 14 8 2 8 9 10 2 10 8 10 9 11 2 11 8 11 9 12 2 12 8 12 9 12 11 13 2 13 8 13 9 13 11 13 12
types 30 6 34 24 2951 26 25 21 19 17 344 18 91 207 11 35 18 30 74 22 22 20 19 20 19 20 20 21 22 52 75
type 1 "ErrorHandling" <type -11>
type 2 "Flag" <type 11>
type 3 "FlagSet" <type 12>
 func (f <esc:0x22> <type 8>) Output () <type 16>
 func (f <esc:0x22> <type 8>) Name () <type -16>
 func (f <esc:0x1> <type 8>) ErrorHandling () <type 1>
 func (f <esc:0x1> <type 8>) SetOutput (output <type 16>)
 func (f <esc:0x1> <type 8>) VisitAll (fn <esc:0x1> <type 19>)
 func (f <esc:0x1> <type 8>) Visit (fn <esc:0x1> <type 19>)
 func (f <esc:0x1> <type 8>) Lookup (name <esc:0x1> <type -16>) <type 15>
 func (f <esc:0x1> <type 8>) Set (name <type -16>, value <type -16>) <type -19>
 func (f <esc:0x9> <type 8>) PrintDefaults ()
 func (f <esc:0x9> <type 8>) .flag.defaultUsage ()
 func (f <esc:0x1> <type 8>) NFlag () <type -11>
 func (f <esc:0x32> <type 8>) Arg (i <type -11>) <type -16>
 func (f <esc:0x1> <type 8>) NArg () <type -11>
 func (f <esc:0x22> <type 8>) Args () <type 6>
 func (f <esc:0x9> <type 8>) BoolVar (p <type 7>, name <type -16>, value <type -15>, usage <type -16>)
 func (f <esc:0x9> <type 8>) Bool (name <type -16>, value <type -15>, usage <type -16>) <type 7>
 func (f <esc:0x9> <type 8>) IntVar (p <type 20>, name <type -16>, value <type -11>, usage <type -16>)
 func (f <esc:0x9> <type 8>) Int (name <type -16>, value <type -11>, usage <type -16>) <type 20>
 func (f <esc:0x9> <type 8>) Int64Var (p <type 21>, name <type -16>, value <type -4>, usage <type -16>)
 func (f <esc:0x9> <type 8>) Int64 (name <type -16>, value <type -4>, usage <type -16>) <type 21>
 func (f <esc:0x9> <type 8>) UintVar (p <type 22>, name <type -16>, value <type -12>, usage <type -16>)
 func (f <esc:0x9> <type 8>) Uint (name <type -16>, value <type -12>, usage <type -16>) <type 22>
 func (f <esc:0x9> <type 8>) Uint64Var (p <type 23>, name <type -16>, value <type -8>, usage <type -16>)
 func (f <esc:0x9> <type 8>) Uint64 (name <type -16>, value <type -8>, usage <type -16>) <type 23>
 func (f <esc:0x9> <type 8>) StringVar (p <type 24>, name <type -16>, value <type -16>, usage <type -16>)
 func (f <esc:0x9> <type 8>) String (name <type -16>, value <type -16>, usage <type -16>) <type 24>
 func (f <esc:0x9> <type 8>) Float64Var (p <type 25>, name <type -16>, value <type -10>, usage <type -16>)
 func (f <esc:0x9> <type 8>) Float64 (name <type -16>, value <type -10>, usage <type -16>) <type 25>
 func (f <esc:0x9> <type 8>) DurationVar (p <type 10>, name <type -16>, value <type 9>, usage <type -16>)
 func (f <esc:0x9> <type 8>) Duration (name <type -16>, value <type 9>, usage <type -16>) <type 10>
 func (f <esc:0x9> <type 8>) Var (value <type 5>, name <type -16>, usage <type -16>)
 func (f <esc:0x9> <type 8>) .flag.failf (format <esc:0x1> <type -16>, a <esc:0x9> ...<type 27>) <type -19>
 func (f <esc:0x9> <type 8>) .flag.usage ()
 func (f <esc:0x9> <type 8>) .flag.parseOne () (? <type -15>, ? <type -19>)
 func (f <esc:0x9> <type 8>) Parse (arguments <type 6>) <type -19>
 func (f <esc:0x1> <type 8>) Parsed () <type -15>
 func (f <esc:0x1> <type 8>) Init (name <type -16>, errorHandling <type 1>)
type 4 "Getter" <type 28>
type 5 "Value" <type 29>
type 6 [] <type -16>
type 7 *<type -15>
type 8 *<type 3>
type 9 "time.Duration" <type -4>
 func (d <type 9>) Round (m <type 9>) <type 9>
 func (d <type 9>) Truncate (m <type 9>) <type 9>
 func (d <type 9>) Hours () <type -10>
 func (d <type 9>) Minutes () <type -10>
 func (d <type 9>) Seconds () <type -10>
 func (d <type 9>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 9>) String () <type -16>
type 10 *<type 9>
type 11 struct { Name <type -16>; Usage <type -16>; Value <type 5>; DefValue <type -16>; }
type 12 struct { Usage <type 13>; .flag.name <type -16>; .flag.parsed <type -15>; .flag.actual <type 14>; .flag.formal <type 14>; .flag.args <type 6>; .flag.errorHandling <type 1>; .flag.output <type 16>; }
type 13 ()
type 14 map [<type -16>] <type 15>
type 15 *<type 2>
type 16 "io.Writer" <type 17>
type 17 interface { Write (p <type 18>) (n <type -11>, err <type -19>); }
type 18 [] <type -20>
type 19 (? <type 15>)
type 20 *<type -11>
type 21 *<type -4>
type 22 *<type -12>
type 23 *<type -8>
type 24 *<type -16>
type 25 *<type -10>
type 26 [] <type 27>
type 27 interface { }
type 28 interface { ? <type 5>; Get () <type 27>; }
type 29 interface { Set (? <type -16>) <type -19>; String () <type -16>; }
func Arg (i <type -11>) <type -16>
func Args () <type 6>
func Bool (name <type -16>, value <type -15>, usage <type -16>) <type 7>
func BoolVar (p <type 7>, name <type -16>, value <type -15>, usage <type -16>)
var CommandLine <type 8>
const ContinueOnError <type 1> = 0 
func Duration (name <type -16>, value <type 9>, usage <type -16>) <type 10>
func DurationVar (p <type 10>, name <type -16>, value <type 9>, usage <type -16>)
var ErrHelp <type -19>
const ExitOnError <type 1> = 1 
func Float64 (name <type -16>, value <type -10>, usage <type -16>) <type 25>
func Float64Var (p <type 25>, name <type -16>, value <type -10>, usage <type -16>)
func Int (name <type -16>, value <type -11>, usage <type -16>) <type 20>
func Int64 (name <type -16>, value <type -4>, usage <type -16>) <type 21>
func Int64Var (p <type 21>, name <type -16>, value <type -4>, usage <type -16>)
func IntVar (p <type 20>, name <type -16>, value <type -11>, usage <type -16>)
func Lookup (name <esc:0x1> <type -16>) <type 15>
func NArg () <type -11>
func NFlag () <type -11>
func NewFlagSet (name <type -16>, errorHandling <type 1>) <type 8>
const PanicOnError <type 1> = 2 
func Parse ()
func Parsed () <type -15>
func PrintDefaults ()
func Set (name <type -16>, value <type -16>) <type -19>
func String (name <type -16>, value <type -16>, usage <type -16>) <type 24>
func StringVar (p <type 24>, name <type -16>, value <type -16>, usage <type -16>)
func Uint (name <type -16>, value <type -12>, usage <type -16>) <type 22>
func Uint64 (name <type -16>, value <type -8>, usage <type -16>) <type 23>
func Uint64Var (p <type 23>, name <type -16>, value <type -8>, usage <type -16>)
func UintVar (p <type 22>, name <type -16>, value <type -12>, usage <type -16>)
func UnquoteUsage (flag <esc:0x122> <type 15>) (name <type -16>, usage <type -16>)
var Usage <type 13>
func Var (value <type 5>, name <type -16>, usage <type -16>)
func Visit (fn <esc:0x1> <type 19>)
func VisitAll (fn <esc:0x1> <type 19>)
checksum 320D91728F535176802CF90121463433B65B3E5D
v3;
package fmt
pkgpath fmt
import errors errors "errors"
import fmtsort internal/fmtsort "internal/fmtsort"
import io io "io"
import math math "math"
import os os "os"
import reflect reflect "reflect"
import strconv strconv "strconv"
import sync sync "sync"
import utf8 unicode/utf8 "unicode/utf8"
init fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 2 1 2 4 2 7 2 8 2 10 2 11 2 12 4 1 4 7 4 8 4 10 5 1 5 2 5 3 5 4 5 7 5 8 5 10 5 11 5 12 6 1 6 7 6 8 6 9 6 10 6 13 7 1 7 8 9 1 9 7 9 8 10 1 10 7 10 8 11 1 11 7 11 8 11 10 12 1 12 7 12 8 12 10 12 11
types 21 7 28 30 29 27 25 28 19 21 56 30 74 22 30 73 46 295 34 73 195 44
type 1 "Formatter" <type 9>
type 2 "GoStringer" <type 15>
type 3 "ScanState" <type 16>
type 4 "Scanner" <type 18>
type 5 "State" <type 19>
type 6 "Stringer" <type 20>
type 7 [] <type 8>
type 8 interface { }
type 9 interface { Format (f <type 5>, c <type -21>); }
type 10 "io.Writer" <type 11>
type 11 interface { Write (p <type 12>) (n <type -11>, err <type -19>); }
type 12 [] <type -20>
type 13 "io.Reader" <type 14>
type 14 interface { Read (p <type 12>) (n <type -11>, err <type -19>); }
type 15 interface { GoString () <type -16>; }
type 16 interface { Read (buf <type 12>) (n <type -11>, err <type -19>); ReadRune () (r <type -21>, size <type -11>, err <type -19>); SkipSpace (); Token (skipSpace <type -15>, f <type 17>) (token <type 12>, err <type -19>); UnreadRune () <type -19>; Width () (wid <type -11>, ok <type -15>); }
type 17 (? <type -21>) <type -15>
type 18 interface { Scan (state <type 3>, verb <type -21>) <type -19>; }
type 19 interface { Flag (c <type -11>) <type -15>; Precision () (prec <type -11>, ok <type -15>); Width () (wid <type -11>, ok <type -15>); Write (b <type 12>) (n <type -11>, err <type -19>); }
type 20 interface { String () <type -16>; }
func Errorf (format <esc:0x1> <type -16>, a <esc:0x9> ...<type 8>) <type -19>
func Fprint (w <type 10>, a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Fprintf (w <type 10>, format <esc:0x1> <type -16>, a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Fprintln (w <type 10>, a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Fscan (r <type 13>, a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Fscanf (r <type 13>, format <esc:0x1> <type -16>, a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Fscanln (r <type 13>, a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Print (a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Printf (format <esc:0x1> <type -16>, a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Println (a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Scan (a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Scanf (format <esc:0x1> <type -16>, a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Scanln (a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Sprint (a <esc:0x9> ...<type 8>) <type -16>
func Sprintf (format <esc:0x1> <type -16>, a <esc:0x9> ...<type 8>) <type -16>
func Sprintln (a <esc:0x9> ...<type 8>) <type -16>
func Sscan (str <type -16>, a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Sscanf (str <type -16>, format <esc:0x1> <type -16>, a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
func Sscanln (str <type -16>, a <esc:0x9> ...<type 8>) (n <type -11>, err <type -19>)
checksum 84F742C0DE5F2F4FCCD78CBD08CDD125825CF49E
v3;
package ast
pkgpath go/ast
import bytes bytes "bytes"
import fmt fmt "fmt"
import scanner go/scanner "go/scanner"
import token go/token "go/token"
import io io "io"
import os os "os"
import reflect reflect "reflect"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
indirectimport sync sync
indirectimport unsafe unsafe
init ast go..z2fast..import bytes bytes..import fmt fmt..import scanner go..z2fscanner..import token go..z2ftoken..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 1 5 1 8 1 12 1 13 1 15 1 18 2 5 2 6 2 7 2 8 2 9 2 11 2 12 2 13 2 14 2 15 2 16 2 17 2 18 3 1 3 2 3 4 3 5 3 6 3 7 3 8 3 9 3 10 3 11 3 12 3 13 3 14 3 15 3 16 3 17 3 18 4 2 4 5 4 6 4 7 4 8 4 9 4 11 4 12 4 13 4 14 4 15 4 16 4 17 4 18 6 5 6 8 6 12 6 13 6 15 6 16 6 17 8 5 8 12 8 13 8 15 9 5 9 6 9 7 9 8 9 12 9 13 9 15 9 16 9 17 10 5 10 6 10 7 10 8 10 9 10 11 10 12 10 13 10 14 10 15 10 16 10 17 10 18 11 5 11 12 11 13 11 14 11 15 11 18 12 5 12 13 14 5 14 12 14 13 15 5 15 12 15 13 16 5 16 12 16 13 16 15 17 5 17 12 17 13 17 15 17 16
types 268 71 323 324 321 321 321 322 324 323 324 323 325 29 323 325 125 180 370 331 26 327 328 327 328 26 327 123 33 182 122 28 326 327 326 327 326 325 430 325 329 30 329 328 332 331 330 326 31 26 73 78 125 328 328 329 218 329 331 327 328 26 327 26 329 329 333 327 333 328 328 29 67 76 18 82 21 264 18 49 18 18 18 73 18 76 18 71 21 18 69 19 18 106 19 84 19 85 19 84 19 54 20 37 23 20 36 23 111 20 57 36 20 53 20 55 20 62 20 57 33 20 105 22 20 56 4036 35 992 80 42 149 218 23 35 77 37 109 21 2140 23 38 151 21 37 14 362 49 49 21 21 282 104 25 23 23 23 23 21 191 67 84 289 75 23 20 171 22 20 23 20 20 20 99 20 32 76 21 628 35 139 21 96 21 1281 211 93 21 65 23 41 96 35 130 224 21 34 43 151 23 102 20 20 53 20 75 123 22 20 50 20 72 20 98 20 106 80 37 66 20 86 20 34 84 20 69 20 70 20 67 20 37 59 104 93 69 20 129 20 57 20 58 54 20 48 20 70 20 134 20 57 49 20 57 80 20 85 20 85 20 106 20 88 20 64 20 108 20 61
type 1 "ArrayType" <type 71>
 func (x <esc:0x1> <type 73>) Pos () <type 72>
 func (x <esc:0x9> <type 73>) End () <type 72>
 func (? <esc:0x1> <type 73>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:511
type 2 "AssignStmt" <type 74>
 func (s <esc:0x9> <type 77>) Pos () <type 72>
 func (s <esc:0x9> <type 77>) End () <type 72>
 func (? <esc:0x1> <type 77>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:802
type 3 "BadDecl" <type 78>
 func (d <esc:0x1> <type 79>) Pos () <type 72>
 func (d <esc:0x1> <type 79>) End () <type 72>
 func (? <esc:0x1> <type 79>) .go/ast.declNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:960
type 4 "BadExpr" <type 78>
 func (x <esc:0x1> <type 80>) Pos () <type 72>
 func (x <esc:0x1> <type 80>) End () <type 72>
 func (? <esc:0x1> <type 80>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:494
type 5 "BadStmt" <type 78>
 func (s <esc:0x1> <type 81>) Pos () <type 72>
 func (s <esc:0x1> <type 81>) End () <type 72>
 func (? <esc:0x1> <type 81>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:795
type 6 "BasicLit" <type 82>
 func (x <esc:0x1> <type 83>) Pos () <type 72>
 func (x <esc:0x1> <type 83>) End () <type 72>
 func (? <esc:0x1> <type 83>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:497
type 7 "BinaryExpr" <type 84>
 func (x <esc:0x9> <type 85>) Pos () <type 72>
 func (x <esc:0x9> <type 85>) End () <type 72>
 func (? <esc:0x1> <type 85>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:508
type 8 "BlockStmt" <type 86>
 func (s <esc:0x1> <type 88>) Pos () <type 72>
 func (s <esc:0x1> <type 88>) End () <type 72>
 func (? <esc:0x1> <type 88>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:807
type 9 "BranchStmt" <type 89>
 func (s <esc:0x1> <type 91>) Pos () <type 72>
 func (s <esc:0x1> <type 91>) End () <type 72>
 func (? <esc:0x1> <type 91>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:806
type 10 "CallExpr" <type 92>
 func (x <esc:0x9> <type 93>) Pos () <type 72>
 func (x <esc:0x1> <type 93>) End () <type 72>
 func (? <esc:0x1> <type 93>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:505
type 11 "CaseClause" <type 94>
 func (s <esc:0x1> <type 95>) Pos () <type 72>
 func (s <esc:0x9> <type 95>) End () <type 72>
 func (? <esc:0x1> <type 95>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:809
type 12 "ChanDir" <type -11>
type 13 "ChanType" <type 96>
 func (x <esc:0x1> <type 97>) Pos () <type 72>
 func (x <esc:0x9> <type 97>) End () <type 72>
 func (? <esc:0x1> <type 97>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:516
type 14 "CommClause" <type 98>
 func (s <esc:0x1> <type 99>) Pos () <type 72>
 func (s <esc:0x9> <type 99>) End () <type 72>
 func (? <esc:0x1> <type 99>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:812
type 15 "Comment" <type 100>
 func (c <esc:0x1> <type 101>) Pos () <type 72>
 func (c <esc:0x1> <type 101>) End () <type 72>
type 16 "CommentGroup" <type 102>
 func (g <esc:0x1> <type 104>) Pos () <type 72>
 func (g <esc:0x1> <type 104>) End () <type 72>
 func (g <esc:0x9> <type 104>) Text () <type -16>
type 17 "CommentMap" <type 105>
 func (cmap <esc:0x1> <type 17>) .go/ast.addComment (n <type 48>, c <type 104>)
 func (cmap <esc:0x9> <type 17>) Update (old <esc:0x1> <type 48>, new <type 48>) <type 48>
 func (cmap <type 17>) Filter (node <type 48>) <type 17>
 func (cmap <esc:0x1> <type 17>) Comments () <type 106>
 func (cmap <esc:0x1> <type 17>) String () <type -16>
type 18 "CompositeLit" <type 107>
 func (x <esc:0x9> <type 108>) Pos () <type 72>
 func (x <esc:0x1> <type 108>) End () <type 72>
 func (? <esc:0x1> <type 108>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:499
type 19 "Decl" <type 109>
type 20 "DeclStmt" <type 110>
 func (s <esc:0x9> <type 111>) Pos () <type 72>
 func (s <esc:0x9> <type 111>) End () <type 72>
 func (? <esc:0x1> <type 111>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:796
type 21 "DeferStmt" <type 112>
 func (s <esc:0x1> <type 113>) Pos () <type 72>
 func (s <esc:0x1> <type 113>) End () <type 72>
 func (? <esc:0x1> <type 113>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:804
type 22 "Ellipsis" <type 114>
 func (x <esc:0x1> <type 115>) Pos () <type 72>
 func (x <esc:0x9> <type 115>) End () <type 72>
 func (? <esc:0x1> <type 115>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:496
type 23 "EmptyStmt" <type 116>
 func (s <esc:0x1> <type 117>) Pos () <type 72>
 func (s <esc:0x1> <type 117>) End () <type 72>
 func (? <esc:0x1> <type 117>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:797
type 24 "Expr" <type 118>
type 25 "ExprStmt" <type 119>
 func (s <esc:0x9> <type 120>) Pos () <type 72>
 func (s <esc:0x9> <type 120>) End () <type 72>
 func (? <esc:0x1> <type 120>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:799
type 26 "Field" <type 121>
 func (f <esc:0x9> <type 123>) Pos () <type 72>
 func (f <esc:0x9> <type 123>) End () <type 72>
type 27 "FieldFilter" <type 124>
type 28 "FieldList" <type 162>
 func (f <esc:0x9> <type 164>) Pos () <type 72>
 func (f <esc:0x9> <type 164>) End () <type 72>
 func (f <esc:0x1> <type 164>) NumFields () <type -11>
type 29 "File" <type 165>
 func (f <esc:0x1> <type 170>) Pos () <type 72>
 func (f <esc:0x9> <type 170>) End () <type 72>
type 30 "Filter" <type 133>
type 31 "ForStmt" <type 172>
 func (s <esc:0x1> <type 173>) Pos () <type 72>
 func (s <esc:0x1> <type 173>) End () <type 72>
 func (? <esc:0x1> <type 173>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:814
type 32 "FuncDecl" <type 199>
 func (d <esc:0x9> <type 201>) Pos () <type 72>
 func (d <esc:0x9> <type 201>) End () <type 72>
 func (? <esc:0x1> <type 201>) .go/ast.declNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:962
type 33 "FuncLit" <type 202>
 func (x <esc:0x9> <type 203>) Pos () <type 72>
 func (x <esc:0x1> <type 203>) End () <type 72>
 func (? <esc:0x1> <type 203>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:498
type 34 "FuncType" <type 204>
 func (x <esc:0x9> <type 200>) Pos () <type 72>
 func (x <esc:0x9> <type 200>) End () <type 72>
 func (? <esc:0x1> <type 200>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:513
type 35 "GenDecl" <type 205>
 func (d <esc:0x1> <type 207>) Pos () <type 72>
 func (d <esc:0x9> <type 207>) End () <type 72>
 func (? <esc:0x1> <type 207>) .go/ast.declNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:961
type 36 "GoStmt" <type 208>
 func (s <esc:0x1> <type 209>) Pos () <type 72>
 func (s <esc:0x1> <type 209>) End () <type 72>
 func (? <esc:0x1> <type 209>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:803
type 37 "Ident" <type 210>
 func (x <esc:0x1> <type 90>) Pos () <type 72>
 func (x <esc:0x1> <type 90>) End () <type 72>
 func (? <esc:0x1> <type 90>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:495
 func (id <esc:0x1> <type 90>) IsExported () <type -15>
 func (id <esc:0x22> <type 90>) String () <type -16>
type 38 "IfStmt" <type 212>
 func (s <esc:0x1> <type 213>) Pos () <type 72>
 func (s <esc:0x9> <type 213>) End () <type 72>
 func (? <esc:0x1> <type 213>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:808
type 39 "ImportSpec" <type 214>
 func (s <esc:0x1> <type 169>) Pos () <type 72>
 func (s <esc:0x1> <type 169>) End () <type 72>
 func (? <esc:0x1> <type 169>) .go/ast.specNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:892
type 40 "Importer" <type 215>
type 41 "IncDecStmt" <type 217>
 func (s <esc:0x9> <type 218>) Pos () <type 72>
 func (s <esc:0x1> <type 218>) End () <type 72>
 func (? <esc:0x1> <type 218>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:801
type 42 "IndexExpr" <type 219>
 func (x <esc:0x9> <type 220>) Pos () <type 72>
 func (x <esc:0x1> <type 220>) End () <type 72>
 func (? <esc:0x1> <type 220>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:502
type 43 "InterfaceType" <type 222>
 func (x <esc:0x1> <type 223>) Pos () <type 72>
 func (x <esc:0x9> <type 223>) End () <type 72>
 func (? <esc:0x1> <type 223>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:514
type 44 "KeyValueExpr" <type 224>
 func (x <esc:0x9> <type 225>) Pos () <type 72>
 func (x <esc:0x9> <type 225>) End () <type 72>
 func (? <esc:0x1> <type 225>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:509
type 45 "LabeledStmt" <type 226>
 func (s <esc:0x1> <type 227>) Pos () <type 72>
 func (s <esc:0x9> <type 227>) End () <type 72>
 func (? <esc:0x1> <type 227>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:798
type 46 "MapType" <type 228>
 func (x <esc:0x1> <type 229>) Pos () <type 72>
 func (x <esc:0x9> <type 229>) End () <type 72>
 func (? <esc:0x1> <type 229>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:515
type 47 "MergeMode" <type -12>
type 48 "Node" <type 231>
type 49 "ObjKind" <type -11>
 func (kind <type 49>) String () <type -16>
type 50 "Object" <type 232>
 func (obj <esc:0x1> <type 211>) Pos () <type 72>
type 51 "Package" <type 233>
 func (p <esc:0x1> <type 171>) Pos () <type 72>
 func (p <esc:0x1> <type 171>) End () <type 72>
type 52 "ParenExpr" <type 234>
 func (x <esc:0x1> <type 235>) Pos () <type 72>
 func (x <esc:0x1> <type 235>) End () <type 72>
 func (? <esc:0x1> <type 235>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:500
type 53 "RangeStmt" <type 236>
 func (s <esc:0x1> <type 237>) Pos () <type 72>
 func (s <esc:0x1> <type 237>) End () <type 72>
 func (? <esc:0x1> <type 237>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:815
type 54 "ReturnStmt" <type 238>
 func (s <esc:0x1> <type 239>) Pos () <type 72>
 func (s <esc:0x9> <type 239>) End () <type 72>
 func (? <esc:0x1> <type 239>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:805
type 55 "Scope" <type 240>
 func (s <esc:0x1> <type 167>) Lookup (name <esc:0x1> <type -16>) <type 211>
 func (s <esc:0x1> <type 167>) Insert (obj <type 211>) (alt <type 211>)
 func (s <type 167>) String () <type -16>
type 56 "SelectStmt" <type 241>
 func (s <esc:0x1> <type 242>) Pos () <type 72>
 func (s <esc:0x1> <type 242>) End () <type 72>
 func (? <esc:0x1> <type 242>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:813
type 57 "SelectorExpr" <type 243>
 func (x <esc:0x9> <type 244>) Pos () <type 72>
 func (x <esc:0x1> <type 244>) End () <type 72>
 func (? <esc:0x1> <type 244>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:501
type 58 "SendStmt" <type 245>
 func (s <esc:0x9> <type 246>) Pos () <type 72>
 func (s <esc:0x9> <type 246>) End () <type 72>
 func (? <esc:0x1> <type 246>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:800
type 59 "SliceExpr" <type 247>
 func (x <esc:0x9> <type 248>) Pos () <type 72>
 func (x <esc:0x1> <type 248>) End () <type 72>
 func (? <esc:0x1> <type 248>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:503
type 60 "Spec" <type 249>
type 61 "StarExpr" <type 250>
 func (x <esc:0x1> <type 251>) Pos () <type 72>
 func (x <esc:0x9> <type 251>) End () <type 72>
 func (? <esc:0x1> <type 251>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:506
type 62 "Stmt" <type 252>
type 63 "StructType" <type 253>
 func (x <esc:0x1> <type 254>) Pos () <type 72>
 func (x <esc:0x9> <type 254>) End () <type 72>
 func (? <esc:0x1> <type 254>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:512
type 64 "SwitchStmt" <type 255>
 func (s <esc:0x1> <type 256>) Pos () <type 72>
 func (s <esc:0x1> <type 256>) End () <type 72>
 func (? <esc:0x1> <type 256>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:810
type 65 "TypeAssertExpr" <type 257>
 func (x <esc:0x9> <type 258>) Pos () <type 72>
 func (x <esc:0x1> <type 258>) End () <type 72>
 func (? <esc:0x1> <type 258>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:504
type 66 "TypeSpec" <type 259>
 func (s <esc:0x1> <type 260>) Pos () <type 72>
 func (s <esc:0x9> <type 260>) End () <type 72>
 func (? <esc:0x1> <type 260>) .go/ast.specNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:894
type 67 "TypeSwitchStmt" <type 261>
 func (s <esc:0x1> <type 262>) Pos () <type 72>
 func (s <esc:0x1> <type 262>) End () <type 72>
 func (? <esc:0x1> <type 262>) .go/ast.stmtNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:811
type 68 "UnaryExpr" <type 263>
 func (x <esc:0x1> <type 264>) Pos () <type 72>
 func (x <esc:0x9> <type 264>) End () <type 72>
 func (? <esc:0x1> <type 264>) .go/ast.exprNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:507
type 69 "ValueSpec" <type 265>
 func (s <esc:0x1> <type 266>) Pos () <type 72>
 func (s <esc:0x9> <type 266>) End () <type 72>
 func (? <esc:0x1> <type 266>) .go/ast.specNode () <inl:140>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/ast/ast.go:893
type 70 "Visitor" <type 267>
type 71 struct { Lbrack <type 72>; Len <type 24>; Elt <type 24>; }
type 72 "go/token.Pos" <type -11>
 func (p <type 72>) IsValid () <type -15>
type 73 *<type 1>
type 74 struct { Lhs <type 75>; TokPos <type 72>; Tok <type 76>; Rhs <type 75>; }
type 75 [] <type 24>
type 76 "go/token.Token" <type -11>
 func (tok <type 76>) IsKeyword () <type -15>
 func (tok <type 76>) IsOperator () <type -15>
 func (tok <type 76>) IsLiteral () <type -15>
 func (op <type 76>) Precedence () <type -11>
 func (tok <type 76>) String () <type -16>
type 77 *<type 2>
type 78 struct { From <type 72>; To <type 72>; }
type 79 *<type 3>
type 80 *<type 4>
type 81 *<type 5>
type 82 struct { ValuePos <type 72>; Kind <type 76>; Value <type -16>; }
type 83 *<type 6>
type 84 struct { X <type 24>; OpPos <type 72>; Op <type 76>; Y <type 24>; }
type 85 *<type 7>
type 86 struct { Lbrace <type 72>; List <type 87>; Rbrace <type 72>; }
type 87 [] <type 62>
type 88 *<type 8>
type 89 struct { TokPos <type 72>; Tok <type 76>; Label <type 90>; }
type 90 *<type 37>
type 91 *<type 9>
type 92 struct { Fun <type 24>; Lparen <type 72>; Args <type 75>; Ellipsis <type 72>; Rparen <type 72>; }
type 93 *<type 10>
type 94 struct { Case <type 72>; List <type 75>; Colon <type 72>; Body <type 87>; }
type 95 *<type 11>
type 96 struct { Begin <type 72>; Arrow <type 72>; Dir <type 12>; Value <type 24>; }
type 97 *<type 13>
type 98 struct { Case <type 72>; Comm <type 62>; Colon <type 72>; Body <type 87>; }
type 99 *<type 14>
type 100 struct { Slash <type 72>; Text <type -16>; }
type 101 *<type 15>
type 102 struct { List <type 103>; }
type 103 [] <type 101>
type 104 *<type 16>
type 105 map [<type 48>] <type 106>
type 106 [] <type 104>
type 107 struct { Type <type 24>; Lbrace <type 72>; Elts <type 75>; Rbrace <type 72>; Incomplete <type -15>; }
type 108 *<type 18>
type 109 interface { ? <type 48>; .go/ast.declNode (); }
type 110 struct { Decl <type 19>; }
type 111 *<type 20>
type 112 struct { Defer <type 72>; Call <type 93>; }
type 113 *<type 21>
type 114 struct { Ellipsis <type 72>; Elt <type 24>; }
type 115 *<type 22>
type 116 struct { Semicolon <type 72>; Implicit <type -15>; }
type 117 *<type 23>
type 118 interface { ? <type 48>; .go/ast.exprNode (); }
type 119 struct { X <type 24>; }
type 120 *<type 25>
type 121 struct { Doc <type 104>; Names <type 122>; Type <type 24>; Tag <type 83>; Comment <type 104>; }
type 122 [] <type 90>
type 123 *<type 26>
type 124 (name <type -16>, value <type 125>) <type -15>
type 125 "reflect.Value" <type 160>
 func (v <type 125>) Convert (t <type 126>) <type 125>
 func (v <type 125>) .reflect.assignTo (context <esc:0x1> <type -16>, dst <type 137>, target <type 143>) <type 125>
 func (v <esc:0x12> <type 125>) UnsafeAddr () <type -13>
 func (v <esc:0x1> <type 125>) Uint () <type -8>
 func (v <esc:0x9> <type 125>) TrySend (x <type 125>) <type -15>
 func (v <type 125>) String () <type -16>
 func (v <esc:0x1> <type 125>) IsNil () <type -15>
 func (v <esc:0x1> <type 125>) InterfaceData () <type 152>
 func (v <esc:0x1> <type 125>) SetInt (x <type -4>)
 func (v <type 125>) Len () <type -11>
 func (v <esc:0x1> <type 125>) SetPointer (x <type 143>)
 func (v <esc:0x1> <type 125>) Int () <type -4>
 func (v <esc:0x1> <type 125>) SetLen (n <type -11>)
 func (v <esc:0x12> <type 125>) Index (i <type -11>) <type 125>
 func (v <esc:0x1> <type 125>) SetFloat (x <type -10>)
 func (v <esc:0x1> <type 125>) SetCap (n <type -11>)
 func (v <esc:0x9> <type 125>) SetMapIndex (key <type 125>, val <type 125>)
 func (v <esc:0x1a> <type 125>) Elem () <type 125>
 func (v <type 125>) Type () <type 126>
 func (v <esc:0x9> <type 125>) NumMethod () <type -11>
 func (v <esc:0x1> <type 125>) IsValid () <type -15>
 func (v <type 125>) Set (x <type 125>)
 func (v <esc:0x1> <type 125>) CanAddr () <type -15>
 func (v <type 125>) FieldByName (name <esc:0x1> <type -16>) <type 125>
 func (v <esc:0x12> <type 125>) Field (i <type -11>) <type 125>
 func (v <esc:0x1> <type 125>) OverflowComplex (x <type -18>) <type -15>
 func (v <esc:0x1> <type 125>) Float () <type -10>
 func (v <esc:0x1> <type 125>) Kind () <type 134>
 func (v <esc:0x1> <type 125>) SetString (x <type -16>)
 func (v <esc:0x12> <type 125>) .reflect.pointer () <type 143>
 func (v <type 125>) Interface () (i <type 153>)
 func (v <esc:0x9> <type 125>) MapKeys () <type 154>
 func (v <esc:0x9> <type 125>) .reflect.send (x <type 125>, nb <type -15>) (selected <type -15>)
 func (v <type 125>) Addr () <type 125>
 func (v <type 125>) TryRecv () (x <type 125>, ok <type -15>)
 func (v <esc:0x1> <type 125>) Bool () <type -15>
 func (v <esc:0x1a> <type 125>) Method (i <type -11>) <type 125>
 func (v <type 125>) Call (in <esc:0x9> <type 154>) <type 154>
 func (v <type 125>) Close ()
 func (v <esc:0x2a> <type 125>) .reflect.runes () <type 155>
 func (v <esc:0x9> <type 125>) SetBytes (x <type 156>)
 func (v <esc:0x1> <type 125>) CanSet () <type -15>
 func (v <esc:0x1> <type 125>) CanInterface () <type -15>
 func (v <esc:0x9> <type 125>) MapIndex (key <type 125>) <type 125>
 func (v <esc:0x2a> <type 125>) Bytes () <type 156>
 func (v <type 125>) Slice (i <type -11>, j <type -11>) <type 125>
 func (v <type 125>) Cap () <type -11>
 func (v <esc:0x1a> <type 125>) FieldByIndex (index <esc:0x1> <type 132>) <type 125>
 func (v <type 125>) CallSlice (in <esc:0x9> <type 154>) <type 154>
 func (v <esc:0x1> <type 125>) Complex () <type -18>
 func (v <type 125>) MapRange () <type 157>
 func (v <esc:0x1a> <type 125>) MethodByName (name <esc:0x1> <type -16>) <type 125>
 func (v <esc:0x1> <type 125>) NumField () <type -11>
 func (v <esc:0x1> <type 125>) OverflowInt (x <type -4>) <type -15>
 func (v <esc:0x12> <type 125>) Pointer () <type -13>
 func (v <esc:0x1> <type 125>) OverflowFloat (x <type -10>) <type -15>
 func (v <esc:0x9> <type 125>) .reflect.setRunes (x <type 155>)
 func (v <esc:0x1> <type 125>) OverflowUint (x <type -8>) <type -15>
 func (v <type 125>) .reflect.recv (nb <type -15>) (val <type 125>, ok <type -15>)
 func (v <type 125>) Recv () (x <type 125>, ok <type -15>)
 func (v <type 125>) FieldByNameFunc (match <esc:0x1> <type 133>) <type 125>
 func (v <type 125>) .reflect.call (op <esc:0x1> <type -16>, in <esc:0x9> <type 154>) <type 154>
 func (v <esc:0x9> <type 125>) Send (x <type 125>)
 func (v <esc:0x1> <type 125>) SetComplex (x <type -18>)
 func (v <esc:0x1> <type 125>) SetBool (x <type -15>)
 func (v <type 125>) Slice3 (i <type -11>, j <type -11>, k <type -11>) <type 125>
 func (v <esc:0x1> <type 125>) SetUint (x <type -8>)
type 126 "reflect.Type" <type 127>
type 127 interface { Align () <type -11>; AssignableTo (u <type 126>) <type -15>; Bits () <type -11>; ChanDir () <type 128>; Comparable () <type -15>; ConvertibleTo (u <type 126>) <type -15>; Elem () <type 126>; Field (i <type -11>) <type 129>; FieldAlign () <type -11>; FieldByIndex (index <type 132>) <type 129>; FieldByName (name <type -16>) (? <type 129>, ? <type -15>); FieldByNameFunc (match <type 133>) (? <type 129>, ? <type -15>); Implements (u <type 126>) <type -15>; In (i <type -11>) <type 126>; IsVariadic () <type -15>; Key () <type 126>; Kind () <type 134>; Len () <type -11>; Method (? <type -11>) <type 135>; MethodByName (? <type -16>) (? <type 135>, ? <type -15>); Name () <type -16>; NumField () <type -11>; NumIn () <type -11>; NumMethod () <type -11>; NumOut () <type -11>; Out (i <type -11>) <type 126>; PkgPath () <type -16>; Size () <type -13>; String () <type -16>; .reflect.common () <type 137>; .reflect.rawString () <type -16>; .reflect.uncommon () <type 149>; }
type 128 "reflect.ChanDir" <type -11>
 func (d <type 128>) String () <type -16>
type 129 "reflect.StructField" <type 130>
type 130 struct { Name <type -16>; PkgPath <type -16>; Type <type 126>; Tag <type 131>; Offset <type -13>; Index <type 132>; Anonymous <type -15>; }
type 131 "reflect.StructTag" <type -16>
 func (tag <esc:0x12> <type 131>) Lookup (key <esc:0x1> <type -16>) (value <type -16>, ok <type -15>)
 func (tag <esc:0x12> <type 131>) Get (key <esc:0x1> <type -16>) <type -16>
type 132 [] <type -11>
type 133 (? <type -16>) <type -15>
type 134 "reflect.Kind" <type -12>
 func (k <type 134>) String () <type -16>
type 135 "reflect.Method" <type 136>
type 136 struct { Name <type -16>; PkgPath <type -16>; Type <type 126>; Func <type 125>; Index <type -11>; }
type 137 *<type 138>
type 138 ".reflect.rtype" <type 145>
 func (t <esc:0x1> <type 137>) Comparable () <type -15>
 func (t <esc:0x9> <type 137>) AssignableTo (u <esc:0x9> <type 126>) <type -15>
 func (t <esc:0x4a> <type 137>) MethodByName (name <esc:0x1> <type -16>) (m <type 135>, ok <type -15>)
 func (t <type 137>) FieldByIndex (index <esc:0x1> <type 132>) <type 129>
 func (t <esc:0x9> <type 137>) ConvertibleTo (u <esc:0x9> <type 126>) <type -15>
 func (t <esc:0x1> <type 137>) .reflect.pointers () <type -15>
 func (t <esc:0x32> <type 137>) .reflect.rawString () <type -16>
 func (t <esc:0x4a> <type 137>) Method (i <type -11>) (m <type 135>)
 func (t <esc:0x9> <type 137>) Out (i <type -11>) <type 126>
 func (t <esc:0x9> <type 137>) NumMethod () <type -11>
 func (t <type 137>) FieldByName (name <esc:0x1> <type -16>) (? <type 129>, ? <type -15>)
 func (t <esc:0x1> <type 137>) Align () <type -11>
 func (t <esc:0x1> <type 137>) Kind () <type 134>
 func (t <esc:0x9> <type 137>) Elem () <type 126>
 func (t <esc:0x1> <type 137>) FieldAlign () <type -11>
 func (t <esc:0x1> <type 137>) Size () <type -13>
 func (t <esc:0x42> <type 137>) Name () <type -16>
 func (t <esc:0x1> <type 137>) Bits () <type -11>
 func (t <esc:0x9> <type 137>) .reflect.exportedMethods () <type 139>
 func (t <esc:0x1> <type 137>) String () <type -16>
 func (t <esc:0x12> <type 137>) .reflect.common () ($ret23 <type 137>)
 func (t <esc:0x9> <type 137>) In (i <type -11>) <type 126>
 func (t <esc:0x1> <type 137>) Len () <type -11>
 func (t <esc:0x1> <type 137>) NumField () <type -11>
 func (t <esc:0x42> <type 137>) PkgPath () <type -16>
 func (t <esc:0x1> <type 137>) ChanDir () <type 128>
 func (t <type 137>) .reflect.ptrTo () <type 137>
 func (t <esc:0x1> <type 137>) NumIn () <type -11>
 func (t <esc:0x1> <type 137>) IsVariadic () <type -15>
 func (t <type 137>) FieldByNameFunc (match <esc:0x1> <type 133>) (? <type 129>, ? <type -15>)
 func (t <esc:0x4a> <type 137>) Field (i <type -11>) <type 129>
 func (t <esc:0x9> <type 137>) Key () <type 126>
 func (t <esc:0x9> <type 137>) Implements (u <type 126>) <type -15>
 func (t <esc:0x1> <type 137>) NumOut () <type -11>
type 139 [] <type 140>
type 140 ".reflect.method" <type 141>
type 141 struct { .reflect.name <type 142>; .reflect.pkgPath <type 142>; .reflect.mtyp <type 137>; .reflect.typ <type 137>; .reflect.tfn <type 143>; }
type 142 *<type -16>
type 143 "unsafe.Pointer" <type 144>
type 144 *any
type 145 struct { .reflect.size <type -13>; .reflect.ptrdata <type -13>; .reflect.hash <type -7>; .reflect.kind <type -5>; .reflect.align <type -1>; .reflect.fieldAlign <type -5>; .reflect._ <type -5>; .reflect.hashfn <type 146>; .reflect.equalfn <type 147>; .reflect.gcdata <type 148>; .reflect.string <type 142>; ? <type 149>; .reflect.ptrToThis <type 137>; }
type 146 (? <type 143>, ? <type -13>) <type -13>
type 147 (? <type 143>, ? <type 143>) <type -15>
type 148 *<type -20>
type 149 *<type 150>
type 150 ".reflect.uncommonType" <type 151>
 func (t <esc:0x32> <type 149>) Name () <type -16>
 func (t <esc:0x32> <type 149>) PkgPath () <type -16>
 func (t <type 149>) .reflect.exportedMethods () <type 139>
 func (t <esc:0x12> <type 149>) .reflect.uncommon () ($ret11 <type 149>)
type 151 struct { .reflect.name <type 142>; .reflect.pkgPath <type 142>; .reflect.methods <type 139>; }
type 152 [2 ] <type -13>
type 153 interface { }
type 154 [] <type 125>
type 155 [] <type -21>
type 156 [] <type -20>
type 157 *<type 158>
type 158 "reflect.MapIter" <type 159>
 func (it <esc:0x9> <type 157>) Value () <type 125>
 func (it <esc:0x1> <type 157>) Next () <type -15>
 func (it <esc:0x9> <type 157>) Key () <type 125>
type 159 struct { .reflect.m <type 125>; .reflect.it <type 143>; }
type 160 struct { .reflect.typ <type 137>; .reflect.ptr <type 143>; ? <type 161>; }
type 161 ".reflect.flag" <type -13>
 func (f <type 161>) .reflect.mustBeAssignable ()
 func (f <type 161>) .reflect.mustBeExported ()
 func (f <type 161>) .reflect.mustBe (expected <type 134>)
 func (f <type 161>) .reflect.ro () <type 161>
 func (f <type 161>) .reflect.kind () <type 134>
type 162 struct { Opening <type 72>; List <type 163>; Closing <type 72>; }
type 163 [] <type 123>
type 164 *<type 28>
type 165 struct { Doc <type 104>; Package <type 72>; Name <type 90>; Decls <type 166>; Scope <type 167>; Imports <type 168>; Unresolved <type 122>; Comments <type 106>; }
type 166 [] <type 19>
type 167 *<type 55>
type 168 [] <type 169>
type 169 *<type 39>
type 170 *<type 29>
type 171 *<type 51>
type 172 struct { For <type 72>; Init <type 62>; Cond <type 24>; Post <type 62>; Body <type 88>; }
type 173 *<type 31>
type 174 "io.Writer" <type 175>
type 175 interface { Write (p <type 156>) (n <type -11>, err <type -19>); }
type 176 *<type 177>
type 177 "go/token.FileSet" <type 192>
 func (s <type 176>) Read (decode <esc:0x22> <type 178>) <type -19>
 func (s <type 176>) PositionFor (p <type 72>, adjusted <type -15>) (pos <type 179>)
 func (s <type 176>) .go/token.file (p <type 72>) <type 182>
 func (s <type 176>) File (p <type 72>) (f <type 182>)
 func (s <type 176>) Iterate (f <esc:0x1> <type 191>)
 func (s <type 176>) Write (encode <esc:0x22> <type 178>) <type -19>
 func (s <type 176>) AddFile (filename <type -16>, base <type -11>, size <type -11>) <type 182>
 func (s <type 176>) Position (p <type 72>) (pos <type 179>)
 func (s <type 176>) Base () <type -11>
type 178 (? <type 153>) <type -19>
type 179 "go/token.Position" <type 181>
 func (pos <type 179>) String () <type -16>
 func (pos <esc:0x1> <type 180>) IsValid () <type -15>
type 180 *<type 179>
type 181 struct { Filename <type -16>; Offset <type -11>; Line <type -11>; Column <type -11>; }
type 182 *<type 183>
type 183 "go/token.File" <type 184>
 func (f <type 182>) Line (p <type 72>) <type -11>
 func (f <type 182>) .go/token.unpack (offset <type -11>, adjusted <type -15>) (filename <type -16>, line <type -11>, column <type -11>)
 func (f <esc:0x1> <type 182>) Pos (offset <type -11>) <type 72>
 func (f <type 182>) Position (p <type 72>) (pos <type 179>)
 func (f <esc:0x1> <type 182>) Base () <type -11>
 func (f <type 182>) AddLine (offset <type -11>)
 func (f <type 182>) SetLinesForContent (content <esc:0x1> <type 156>)
 func (f <type 182>) PositionFor (p <type 72>, adjusted <type -15>) (pos <type 179>)
 func (f <esc:0x22> <type 182>) Name () <type -16>
 func (f <esc:0x1> <type 182>) Size () <type -11>
 func (f <type 182>) .go/token.position (p <type 72>, adjusted <type -15>) (pos <type 179>)
 func (f <type 182>) AddLineColumnInfo (offset <type -11>, filename <type -16>, line <type -11>, column <type -11>)
 func (f <type 182>) LineCount () <type -11>
 func (f <type 182>) MergeLine (line <type -11>)
 func (f <type 182>) SetLines (lines <type 132>) <type -15>
 func (f <type 182>) LineStart (line <type -11>) <type 72>
 func (f <type 182>) AddLineInfo (offset <type -11>, filename <type -16>, line <type -11>)
 func (f <esc:0x1> <type 182>) Offset (p <type 72>) <type -11>
type 184 struct { .go/token.set <type 176>; .go/token.name <type -16>; .go/token.base <type -11>; .go/token.size <type -11>; .go/token.mutex <type 185>; .go/token.lines <type 132>; .go/token.infos <type 188>; }
type 185 "sync.Mutex" <type 187>
 func (m <type 186>) Lock ()
 func (m <type 186>) Unlock ()
type 186 *<type 185>
type 187 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 188 [] <type 189>
type 189 ".go/token.lineInfo" <type 190>
type 190 struct { Offset <type -11>; Filename <type -16>; Line <type -11>; Column <type -11>; }
type 191 (? <type 182>) <type -15>
type 192 struct { .go/token.mutex <type 193>; .go/token.base <type -11>; .go/token.files <type 198>; .go/token.last <type 182>; }
type 193 "sync.RWMutex" <type 197>
 func (rw <type 194>) RLock ()
 func (rw <type 194>) RUnlock ()
 func (rw <type 194>) Lock ()
 func (rw <type 194>) Unlock ()
 func (rw <esc:0x12> <type 194>) RLocker () ($ret8 <type 195>)
type 194 *<type 193>
type 195 "sync.Locker" <type 196>
type 196 interface { Lock (); Unlock (); }
type 197 struct { .sync.w <type 185>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 198 [] <type 182>
type 199 struct { Doc <type 104>; Recv <type 164>; Name <type 90>; Type <type 200>; Body <type 88>; }
type 200 *<type 34>
type 201 *<type 32>
type 202 struct { Type <type 200>; Body <type 88>; }
type 203 *<type 33>
type 204 struct { Func <type 72>; Params <type 164>; Results <type 164>; }
type 205 struct { Doc <type 104>; TokPos <type 72>; Tok <type 76>; Lparen <type 72>; Specs <type 206>; Rparen <type 72>; }
type 206 [] <type 60>
type 207 *<type 35>
type 208 struct { Go <type 72>; Call <type 93>; }
type 209 *<type 36>
type 210 struct { NamePos <type 72>; Name <type -16>; Obj <type 211>; }
type 211 *<type 50>
type 212 struct { If <type 72>; Init <type 62>; Cond <type 24>; Body <type 88>; Else <type 62>; }
type 213 *<type 38>
type 214 struct { Doc <type 104>; Name <type 90>; Path <type 83>; Comment <type 104>; EndPos <type 72>; }
type 215 (imports <type 216>, path <type -16>) (pkg <type 211>, err <type -19>)
type 216 map [<type -16>] <type 211>
type 217 struct { X <type 24>; TokPos <type 72>; Tok <type 76>; }
type 218 *<type 41>
type 219 struct { X <type 24>; Lbrack <type 72>; Index <type 24>; Rbrack <type 72>; }
type 220 *<type 42>
type 221 (? <type 48>) <type -15>
type 222 struct { Interface <type 72>; Methods <type 164>; Incomplete <type -15>; }
type 223 *<type 43>
type 224 struct { Key <type 24>; Colon <type 72>; Value <type 24>; }
type 225 *<type 44>
type 226 struct { Label <type 90>; Colon <type 72>; Stmt <type 62>; }
type 227 *<type 45>
type 228 struct { Map <type 72>; Key <type 24>; Value <type 24>; }
type 229 *<type 46>
type 230 map [<type -16>] <type 170>
type 231 interface { End () <type 72>; Pos () <type 72>; }
type 232 struct { Kind <type 49>; Name <type -16>; Decl <type 153>; Data <type 153>; Type <type 153>; }
type 233 struct { Name <type -16>; Scope <type 167>; Imports <type 216>; Files <type 230>; }
type 234 struct { Lparen <type 72>; X <type 24>; Rparen <type 72>; }
type 235 *<type 52>
type 236 struct { For <type 72>; Key <type 24>; Value <type 24>; TokPos <type 72>; Tok <type 76>; X <type 24>; Body <type 88>; }
type 237 *<type 53>
type 238 struct { Return <type 72>; Results <type 75>; }
type 239 *<type 54>
type 240 struct { Outer <type 167>; Objects <type 216>; }
type 241 struct { Select <type 72>; Body <type 88>; }
type 242 *<type 56>
type 243 struct { X <type 24>; Sel <type 90>; }
type 244 *<type 57>
type 245 struct { Chan <type 24>; Arrow <type 72>; Value <type 24>; }
type 246 *<type 58>
type 247 struct { X <type 24>; Lbrack <type 72>; Low <type 24>; High <type 24>; Max <type 24>; Slice3 <type -15>; Rbrack <type 72>; }
type 248 *<type 59>
type 249 interface { ? <type 48>; .go/ast.specNode (); }
type 250 struct { Star <type 72>; X <type 24>; }
type 251 *<type 61>
type 252 interface { ? <type 48>; .go/ast.stmtNode (); }
type 253 struct { Struct <type 72>; Fields <type 164>; Incomplete <type -15>; }
type 254 *<type 63>
type 255 struct { Switch <type 72>; Init <type 62>; Tag <type 24>; Body <type 88>; }
type 256 *<type 64>
type 257 struct { X <type 24>; Lparen <type 72>; Type <type 24>; Rparen <type 72>; }
type 258 *<type 65>
type 259 struct { Doc <type 104>; Name <type 90>; Assign <type 72>; Type <type 24>; Comment <type 104>; }
type 260 *<type 66>
type 261 struct { Switch <type 72>; Init <type 62>; Assign <type 62>; Body <type 88>; }
type 262 *<type 67>
type 263 struct { OpPos <type 72>; Op <type 76>; X <type 24>; }
type 264 *<type 68>
type 265 struct { Doc <type 104>; Names <type 122>; Type <type 24>; Values <type 75>; Comment <type 104>; }
type 266 *<type 69>
type 267 interface { Visit (node <type 48>) (w <type 70>); }
const Bad <type 49> = 0 
const Con <type 49> = 2 
func FileExports (src <esc:0x9> <type 170>) <type -15>
func FilterDecl (decl <esc:0x9> <type 19>, f <esc:0x1> <type 30>) <type -15>
func FilterFile (src <esc:0x9> <type 170>, f <esc:0x1> <type 30>) <type -15>
const FilterFuncDuplicates <type 47> = 1 
const FilterImportDuplicates <type 47> = 4 
func FilterPackage (pkg <esc:0x1> <type 171>, f <esc:0x1> <type 30>) <type -15>
const FilterUnassociatedComments <type 47> = 2 
func Fprint (w <type 174>, fset <type 176>, x <type 153>, f <type 27>) <type -19>
const Fun <type 49> = 5 
func Inspect (node <type 48>, f <type 221>)
func IsExported (name <esc:0x1> <type -16>) <type -15>
const Lbl <type 49> = 6 
func MergePackageFiles (pkg <esc:0xa> <type 171>, mode <type 47>) <type 170>
func NewCommentMap (fset <type 176>, node <type 48>, comments <esc:0x9> <type 106>) <type 17>
func NewIdent (name <type -16>) <type 90>
func NewObj (kind <type 49>, name <type -16>) <type 211>
func NewPackage (fset <type 176>, files <type 230>, importer <esc:0x9> <type 40>, universe <type 167>) (? <type 171>, ? <type -19>)
func NewScope (outer <type 167>) <type 167>
func NotNilFilter (_ <esc:0x1> <type -16>, v <esc:0x1> <type 125>) <type -15>
func PackageExports (pkg <esc:0x1> <type 171>) <type -15>
const Pkg <type 49> = 1 
func Print (fset <type 176>, x <type 153>) <type -19>
const RECV <type 12> = 2 
const SEND <type 12> = 1 
func SortImports (fset <type 176>, f <esc:0x9> <type 170>)
const Typ <type 49> = 3 
const Var <type 49> = 4 
func Walk (v <type 70>, node <type 48>)
checksum AEBAE0D89761317B7B7977A54A835C3C92654898
v3;
package build
pkgpath go/build
import bufio bufio "bufio"
import bytes bytes "bytes"
import errors errors "errors"
import fmt fmt "fmt"
import ast go/ast "go/ast"
import doc go/doc "go/doc"
import parser go/parser "go/parser"
import token go/token "go/token"
import goroot internal/goroot "internal/goroot"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import log log "log"
import os os "os"
import exec os/exec "os/exec"
import path path "path"
import filepath path/filepath "path/filepath"
import runtime runtime "runtime"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
indirectimport time time
init build go..z2fbuild..import bufio bufio..import bytes bytes..import context context..import fmt fmt..import ast go..z2fast..import doc go..z2fdoc..import parser go..z2fparser..import scanner go..z2fscanner..import token go..z2ftoken..import cpu internal..z2fcpu..import goroot internal..z2fgoroot..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import ioutil io..z2fioutil..import log log..import os os..import exec os..z2fexec..import path path..import filepath path..z2ffilepath..import reflect reflect..import regexp regexp..import syntax regexp..z2fsyntax..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import template text..z2ftemplate..import parse text..z2ftemplate..z2fparse..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 1 2 1 10 1 14 1 24 1 25 1 27 1 32 2 10 2 14 2 24 2 25 2 27 2 32 3 4 3 10 3 12 3 13 3 14 3 17 3 21 3 24 3 25 3 26 3 27 3 28 3 31 3 32 4 10 4 12 4 13 4 14 4 17 4 21 4 24 4 25 4 26 4 27 4 28 4 31 4 32 5 2 5 4 5 8 5 9 5 10 5 12 5 13 5 14 5 17 5 20 5 21 5 24 5 25 5 26 5 27 5 28 5 31 5 32 6 2 6 4 6 5 6 8 6 9 6 10 6 12 6 13 6 14 6 15 6 17 6 19 6 20 6 21 6 22 6 23 6 24 6 25 6 26 6 27 6 28 6 29 6 30 6 31 6 32 7 2 7 4 7 5 7 8 7 9 7 10 7 12 7 13 7 14 7 15 7 17 7 20 7 21 7 24 7 25 7 26 7 27 7 28 7 31 7 32 8 2 8 4 8 9 8 10 8 12 8 13 8 14 8 17 8 20 8 21 8 24 8 25 8 26 8 27 8 28 8 31 8 32 9 4 9 10 9 12 9 13 9 14 9 17 9 21 9 24 9 25 9 26 9 27 9 28 9 31 9 32 11 10 11 12 11 13 11 14 11 17 11 20 11 21 11 24 11 25 11 26 11 27 11 28 11 31 11 32 12 10 12 14 12 24 12 25 12 27 12 28 12 31 14 10 14 24 14 25 14 27 15 2 15 10 15 12 15 13 15 14 15 17 15 20 15 21 15 24 15 25 15 26 15 27 15 28 15 31 15 32 16 4 16 10 16 12 16 13 16 14 16 17 16 21 16 24 16 25 16 26 16 27 16 28 16 31 16 32 17 10 17 12 17 13 17 14 17 24 17 25 17 27 17 28 17 31 18 2 18 3 18 4 18 10 18 12 18 13 18 14 18 17 18 20 18 21 18 24 18 25 18 26 18 27 18 28 18 31 18 32 19 10 19 14 19 24 19 25 19 27 19 32 20 10 20 12 20 13 20 14 20 17 20 21 20 24 20 25 20 26 20 27 20 28 20 31 20 32 21 10 21 24 21 25 21 26 21 27 21 32 22 2 22 10 22 14 22 21 22 23 22 24 22 25 22 26 22 27 22 32 23 10 23 14 23 21 23 24 23 25 23 26 23 27 23 32 24 10 24 25 26 10 26 24 26 25 27 10 27 24 27 25 28 10 28 24 28 25 28 27 29 2 29 4 29 10 29 12 29 13 29 14 29 15 29 17 29 20 29 21 29 24 29 25 29 26 29 27 29 28 29 30 29 31 29 32 30 2 30 4 30 10 30 12 30 13 30 14 30 17 30 21 30 24 30 25 30 26 30 27 30 28 30 31 30 32 31 10 31 24 31 25 31 27 31 28
types 64 6 2169 31 90 79 81 369 21 39 34 37 74 53 21 32 141 3310 22 19 525 165 21 31 91 21 36 112 19 73 19 356 75 83 195 22 54 34 48 30 73 30 43 18 18 36 20 19 183 76 35 21 19 129 53 70 18 35 18 884 35 21 135 19 95
type 1 "Context" <type 6>
 func (ctxt <esc:0x32> <type 42>) .go/build.joinPath (elem ...<type -16>) <type -16>
 func (ctxt <esc:0x32> <type 42>) .go/build.splitPathList (s <type -16>) <type 7>
 func (ctxt <esc:0x1> <type 42>) .go/build.isAbsPath (path <type -16>) <type -15>
 func (ctxt <esc:0x1> <type 42>) .go/build.isDir (path <type -16>) <type -15>
 func (ctxt <esc:0x32> <type 42>) .go/build.hasSubdir (root <type -16>, dir <type -16>) (rel <type -16>, ok <type -15>)
 func (ctxt <esc:0x1b2> <type 42>) .go/build.readDir (path <type -16>) (? <type 13>, ? <type -19>)
 func (ctxt <esc:0x1b2> <type 42>) .go/build.openFile (path <type -16>) (? <type 36>, ? <type -19>)
 func (ctxt <esc:0x9> <type 42>) .go/build.isFile (path <type -16>) <type -15>
 func (ctxt <esc:0x9> <type 42>) .go/build.gopath () <type 7>
 func (ctxt <type 42>) SrcDirs () <type 7>
 func (ctxt <type 42>) ImportDir (dir <type -16>, mode <type 2>) (? <type 43>, ? <type -19>)
 func (ctxt <type 42>) Import (path <type -16>, srcDir <type -16>, mode <type 2>) (? <type 43>, ? <type -19>)
 func (ctxt <type 42>) .go/build.importGo (p <esc:0x1> <type 43>, path <type -16>, srcDir <type -16>, mode <type 2>, gopath <esc:0x9> <type 7>) <type -19>
 func (ctxt <esc:0x18a> <type 42>) MatchFile (dir <type -16>, name <type -16>) (match <type -15>, err <type -19>)
 func (ctxt <esc:0x6c0a> <type 42>) .go/build.matchFile (dir <type -16>, name <type -16>, allTags <esc:0x1> <type 44>, binaryOnly <esc:0x1> <type 45>) (match <type -15>, data <type 17>, filename <type -16>, err <type -19>)
 func (ctxt <esc:0x1> <type 42>) .go/build.shouldBuild (content <esc:0x1> <type 17>, allTags <esc:0x1> <type 44>, binaryOnly <esc:0x1> <type 45>) <type -15>
 func (ctxt <esc:0x1> <type 42>) .go/build.saveCgo (filename <type -16>, di <esc:0x9> <type 43>, cg <esc:0x9> <type 46>) <type -19>
 func (ctxt <esc:0x1> <type 42>) .go/build.makePathsAbsolute (args <esc:0x9> <type 7>, srcDir <type -16>)
 func (ctxt <esc:0x1> <type 42>) .go/build.match (name <type -16>, allTags <esc:0x1> <type 44>) <type -15>
 func (ctxt <esc:0x1> <type 42>) .go/build.goodOSArchFile (name <type -16>, allTags <esc:0x1> <type 44>) <type -15>
type 2 "ImportMode" <type -12>
type 3 "MultiplePackageError" <type 54>
 func (e <esc:0x9> <type 55>) Error () <type -16>
type 4 "NoGoError" <type 56>
 func (e <esc:0x1> <type 57>) Error () <type -16>
type 5 "Package" <type 58>
 func (p <esc:0x1> <type 43>) IsCommand () <type -15>
type 6 struct { GOARCH <type -16>; GOOS <type -16>; GOROOT <type -16>; GOPATH <type -16>; CgoEnabled <type -15>; UseAllFiles <type -15>; Compiler <type -16>; BuildTags <type 7>; ReleaseTags <type 7>; InstallSuffix <type -16>; JoinPath <type 8>; SplitPathList <type 9>; IsAbsPath <type 10>; IsDir <type 10>; HasSubdir <type 11>; ReadDir <type 12>; OpenFile <type 35>; }
type 7 [] <type -16>
type 8 (elem ...<type -16>) <type -16>
type 9 (list <type -16>) <type 7>
type 10 (path <type -16>) <type -15>
type 11 (root <type -16>, dir <type -16>) (rel <type -16>, ok <type -15>)
type 12 (dir <type -16>) (? <type 13>, ? <type -19>)
type 13 [] <type 14>
type 14 "os.FileInfo" <type 15>
type 15 interface { IsDir () <type -15>; ModTime () <type 16>; Mode () <type 33>; Name () <type -16>; Size () <type -4>; Sys () <type 34>; }
type 16 "time.Time" <type 32>
 func (t <esc:0x1> <type 16>) GobEncode () (? <type 17>, ? <type -19>)
 func (t <esc:0x12> <type 16>) Location () <type 18>
 func (t <esc:0x1> <type 16>) Month () <type 28>
 func (t <esc:0x1> <type 16>) Second () <type -11>
 func (t <esc:0x1> <type 29>) UnmarshalJSON (data <esc:0x1> <type 17>) <type -19>
 func (t <esc:0x1> <type 29>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 16>) Year () <type -11>
 func (t <esc:0x1> <type 16>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 16>) .time.abs () <type -8>
 func (t <esc:0x1> <type 16>) Hour () <type -11>
 func (t <esc:0x1> <type 29>) UnmarshalBinary (data <esc:0x1> <type 17>) <type -19>
 func (t <esc:0x1> <type 29>) UnmarshalText (data <esc:0x1> <type 17>) <type -19>
 func (t <esc:0x1> <type 29>) .time.setLoc (loc <type 18>)
 func (t <esc:0x32> <type 16>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 16>) Before (u <esc:0x1> <type 16>) <type -15>
 func (t <esc:0x1> <type 29>) .time.nsec () <type -3>
 func (t <esc:0x12> <type 16>) Round (d <type 30>) <type 16>
 func (t <esc:0x1> <type 16>) String () <type -16>
 func (t <esc:0x1> <type 16>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x12> <type 16>) Add (d <type 30>) <type 16>
 func (t <esc:0x12> <type 16>) Truncate (d <type 30>) <type 16>
 func (t <esc:0x1> <type 16>) Date () (year <type -11>, month <type 28>, day <type -11>)
 func (t <esc:0x1> <type 16>) Equal (u <esc:0x1> <type 16>) <type -15>
 func (t <esc:0x32> <type 16>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 16>) Sub (u <esc:0x1> <type 16>) <type 30>
 func (t <esc:0x1> <type 16>) MarshalBinary () (? <type 17>, ? <type -19>)
 func (t <esc:0x1> <type 16>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 29>) .time.mono () <type -4>
 func (t <esc:0x12> <type 16>) In (loc <type 18>) <type 16>
 func (t <esc:0x1> <type 16>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 16>) UTC () <type 16>
 func (t <esc:0x1> <type 29>) .time.stripMono ()
 func (t <esc:0x1> <type 16>) MarshalText () (? <type 17>, ? <type -19>)
 func (t <esc:0x1> <type 16>) Weekday () <type 31>
 func (t <esc:0x1> <type 16>) MarshalJSON () (? <type 17>, ? <type -19>)
 func (t <esc:0x1> <type 16>) .time.date (full <type -15>) (year <type -11>, month <type 28>, day <type -11>, yday <type -11>)
 func (t <type 16>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 16>
 func (t <esc:0x1> <type 29>) .time.sec () <type -4>
 func (t <esc:0x1> <type 16>) IsZero () <type -15>
 func (t <esc:0x12> <type 16>) Local () <type 16>
 func (t <esc:0x1> <type 16>) YearDay () <type -11>
 func (t <esc:0x1> <type 16>) Unix () <type -4>
 func (t <esc:0x1> <type 29>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 16>) Day () <type -11>
 func (t <esc:0x1> <type 29>) GobDecode (data <esc:0x1> <type 17>) <type -19>
 func (t <esc:0x1> <type 16>) After (u <esc:0x1> <type 16>) <type -15>
 func (t <esc:0x1> <type 16>) UnixNano () <type -4>
 func (t <esc:0x1> <type 29>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 16>) Minute () <type -11>
 func (t <esc:0x1> <type 16>) AppendFormat (b <esc:0x12> <type 17>, layout <esc:0x1> <type -16>) <type 17>
type 17 [] <type -20>
type 18 *<type 19>
type 19 "time.Location" <type 20>
 func (l <esc:0x1> <type 18>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 18>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 18>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 18>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 18>) String () <type -16>
 func (l <esc:0x12> <type 18>) .time.get () <type 18>
type 20 struct { .time.name <type -16>; .time.zone <type 21>; .time.tx <type 24>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 27>; }
type 21 [] <type 22>
type 22 ".time.zone" <type 23>
type 23 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 24 [] <type 25>
type 25 ".time.zoneTrans" <type 26>
type 26 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 27 *<type 22>
type 28 "time.Month" <type -11>
 func (m <type 28>) String () <type -16>
type 29 *<type 16>
type 30 "time.Duration" <type -4>
 func (d <type 30>) Round (m <type 30>) <type 30>
 func (d <type 30>) Truncate (m <type 30>) <type 30>
 func (d <type 30>) Hours () <type -10>
 func (d <type 30>) Minutes () <type -10>
 func (d <type 30>) Seconds () <type -10>
 func (d <type 30>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 30>) String () <type -16>
type 31 "time.Weekday" <type -11>
 func (d <type 31>) String () <type -16>
type 32 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 18>; }
type 33 "os.FileMode" <type -7>
 func (m <type 33>) Perm () <type 33>
 func (m <type 33>) IsDir () <type -15>
 func (m <type 33>) IsRegular () <type -15>
 func (m <type 33>) String () <type -16>
type 34 interface { }
type 35 (path <type -16>) (? <type 36>, ? <type -19>)
type 36 "io.ReadCloser" <type 37>
type 37 interface { ? <type 38>; ? <type 40>; }
type 38 "io.Reader" <type 39>
type 39 interface { Read (p <type 17>) (n <type -11>, err <type -19>); }
type 40 "io.Closer" <type 41>
type 41 interface { Close () <type -19>; }
type 42 *<type 1>
type 43 *<type 5>
type 44 map [<type -16>] <type -15>
type 45 *<type -15>
type 46 *<type 47>
type 47 "go/ast.CommentGroup" <type 49>
 func (g <esc:0x9> <type 46>) Text () <type -16>
 func (g <esc:0x1> <type 46>) End () <type 48>
 func (g <esc:0x1> <type 46>) Pos () <type 48>
type 48 "go/token.Pos" <type -11>
 func (p <type 48>) IsValid () <type -15>
type 49 struct { List <type 50>; }
type 50 [] <type 51>
type 51 *<type 52>
type 52 "go/ast.Comment" <type 53>
 func (c <esc:0x1> <type 51>) End () <type 48>
 func (c <esc:0x1> <type 51>) Pos () <type 48>
type 53 struct { Slash <type 48>; Text <type -16>; }
type 54 struct { Dir <type -16>; Packages <type 7>; Files <type 7>; }
type 55 *<type 3>
type 56 struct { Dir <type -16>; }
type 57 *<type 4>
type 58 struct { Dir <type -16>; Name <type -16>; ImportComment <type -16>; Doc <type -16>; ImportPath <type -16>; Root <type -16>; SrcRoot <type -16>; PkgRoot <type -16