k () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 16>) Month () <type 19>
 func (t <esc:0x12> <type 16>) Location () <type 20>
 func (t <esc:0x1> <type 16>) GobEncode () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 16>) Date () (year <type -11>, month <type 19>, day <type -11>)
 func (t <esc:0x1> <type 16>) Hour () <type -11>
 func (t <esc:0x1> <type 16>) .time.abs () <type -8>
 func (t <esc:0x1> <type 16>) IsZero () <type -15>
 func (t <esc:0x1> <type 16>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 16>) UTC () <type 16>
 func (t <esc:0x12> <type 16>) In (loc <type 20>) <type 16>
 func (t <esc:0x32> <type 16>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 16>) Sub (u <esc:0x1> <type 16>) <type 30>
 func (t <esc:0x1> <type 16>) Equal (u <esc:0x1> <type 16>) <type -15>
 func (t <esc:0x1> <type 18>) .time.mono () <type -4>
 func (t <esc:0x1> <type 16>) MarshalText () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 18>) .time.stripMono ()
 func (t <esc:0x1> <type 16>) MarshalJSON () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 16>) .time.date (full <type -15>) (year <type -11>, month <type 19>, day <type -11>, yday <type -11>)
 func (t <type 16>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 16>
 func (t <esc:0x1> <type 18>) .time.sec () <type -4>
 func (t <esc:0x12> <type 16>) Local () <type 16>
 func (t <esc:0x1> <type 18>) UnmarshalBinary (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 18>) UnmarshalText (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x12> <type 16>) Truncate (d <type 30>) <type 16>
 func (t <esc:0x1> <type 18>) .time.setLoc (loc <type 20>)
 func (t <esc:0x32> <type 16>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 16>) Before (u <esc:0x1> <type 16>) <type -15>
 func (t <esc:0x1> <type 18>) .time.nsec () <type -3>
 func (t <esc:0x12> <type 16>) Round (d <type 30>) <type 16>
 func (t <esc:0x1> <type 18>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 16>) Day () <type -11>
 func (t <esc:0x1> <type 18>) GobDecode (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 16>) UnixNano () <type -4>
 func (t <esc:0x1> <type 16>) After (u <esc:0x1> <type 16>) <type -15>
 func (t <esc:0x1> <type 16>) MarshalBinary () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 16>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 18>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 16>) Minute () <type -11>
 func (t <esc:0x1> <type 16>) AppendFormat (b <esc:0x12> <type 8>, layout <esc:0x1> <type -16>) <type 8>
 func (t <esc:0x12> <type 16>) Add (d <type 30>) <type 16>
 func (t <esc:0x1> <type 16>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 16>) String () <type -16>
type 17 "time.Weekday" <type -11>
 func (d <type 17>) String () <type -16>
type 18 *<type 16>
type 19 "time.Month" <type -11>
 func (m <type 19>) String () <type -16>
type 20 *<type 21>
type 21 "time.Location" <type 22>
 func (l <esc:0x12> <type 20>) .time.get () <type 20>
 func (l <esc:0x22> <type 20>) String () <type -16>
 func (l <esc:0x32> <type 20>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 20>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 20>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 20>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 22 struct { .time.name <type -16>; .time.zone <type 23>; .time.tx <type 26>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 29>; }
type 23 [] <type 24>
type 24 ".time.zone" <type 25>
type 25 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 26 [] <type 27>
type 27 ".time.zoneTrans" <type 28>
type 28 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 29 *<type 24>
type 30 "time.Duration" <type -4>
 func (d <type 30>) String () <type -16>
 func (d <type 30>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 30>) Seconds () <type -10>
 func (d <type 30>) Minutes () <type -10>
 func (d <type 30>) Hours () <type -10>
 func (d <type 30>) Truncate (m <type 30>) <type 30>
 func (d <type 30>) Round (m <type 30>) <type 30>
type 31 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 20>; }
type 32 "os.FileMode" <type -7>
 func (m <type 32>) Perm () <type 32>
 func (m <type 32>) IsDir () <type -15>
 func (m <type 32>) IsRegular () <type -15>
 func (m <type 32>) String () <type -16>
type 33 interface { }
type 34 [] <type 14>
type 35 "syscall.RawConn" <type 36>
type 36 interface { Control (f <type 37>) <type -19>; Read (f <type 38>) <type -19>; Write (f <type 38>) <type -19>; }
type 37 (? <type -13>)
type 38 (? <type -13>) <type -15>
type 39 struct { ? <type 40>; }
type 40 *<type 41>
type 41 ".os.file" <type 42>
 func (file <type 40>) .os.close () <type -19>
type 42 struct { .os.pfd <type 43>; .os.name <type -16>; .os.dirinfo <type 95>; .os.nonblock <type -15>; .os.stdoutOrErr <type -15>; }
type 43 "internal/poll.FD" <type 81>
 func (fd <type 44>) Accept () (? <type -11>, ? <type 45>, ? <type -16>, ? <type -19>)
 func (fd <type 44>) Pwrite (p <esc:0x1> <type 8>, off <type -4>) (? <type -11>, ? <type -19>)
 func (fd <type 44>) .internal/poll.writeUnlock ()
 func (fd <type 44>) Write (p <type 8>) (? <type -11>, ? <type -19>)
 func (fd <type 44>) ReadFrom (p <esc:0x1> <type 8>) (? <type -11>, ? <type 45>, ? <type -19>)
 func (fd <type 44>) .internal/poll.readLock () <type -19>
 func (fd <type 44>) Pread (p <esc:0x1> <type 8>, off <type -4>) (? <type -11>, ? <type -19>)
 func (fd <type 44>) Read (p <type 8>) (? <type -11>, ? <type -19>)
 func (fd <type 44>) Shutdown (how <type -11>) <type -19>
 func (fd <type 44>) Close () <type -19>
 func (fd <type 44>) .internal/poll.destroy () <type -19>
 func (fd <type 44>) Ftruncate (size <type -4>) <type -19>
 func (fd <type 44>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (fd <esc:0x1> <type 44>) Init (net <esc:0x1> <type -16>, pollable <type -15>) <type -19>
 func (fd <type 44>) Fsync () <type -19>
 func (fd <type 44>) .internal/poll.readUnlock ()
 func (fd <type 44>) Dup () (? <type -11>, ? <type -16>, ? <type -19>)
 func (fd <type 44>) Fchmod (mode <type -7>) <type -19>
 func (fd <type 44>) Fchdir () <type -19>
 func (fd <type 44>) SetsockoptInt (level <type -11>, name <type -11>, arg <type -11>) <type -19>
 func (fd <type 44>) WriteOnce (p <type 8>) (? <type -11>, ? <type -19>)
 func (fd <type 44>) SetsockoptIPMreq (level <type -11>, name <type -11>, mreq <esc:0x1> <type 56>) <type -19>
 func (fd <type 44>) Writev (v <esc:0x9> <type 60>) (? <type -4>, ? <type -19>)
 func (fd <type 44>) RawControl (f <esc:0x1> <type 37>) <type -19>
 func (fd <esc:0x1> <type 44>) WaitWrite () <type -19>
 func (fd <type 44>) SetsockoptIPMreqn (level <type -11>, name <type -11>, mreq <esc:0x1> <type 62>) <type -19>
 func (fd <type 44>) RawWrite (f <esc:0x1> <type 38>) <type -19>
 func (fd <type 44>) Fchown (uid <type -11>, gid <type -11>) <type -19>
 func (fd <type 44>) SetReadDeadline (t <esc:0x1> <type 16>) <type -19>
 func (fd <type 44>) SetsockoptLinger (level <type -11>, name <type -11>, l <esc:0x1> <type 65>) <type -19>
 func (fd <type 44>) SetsockoptIPv6Mreq (level <type -11>, name <type -11>, mreq <esc:0x1> <type 68>) <type -19>
 func (fd <type 44>) SetsockoptByte (level <type -11>, name <type -11>, arg <type -20>) <type -19>
 func (fd <type 44>) SetBlocking () <type -19>
 func (fd <type 44>) ReadDirent (buf <esc:0x1> <type 8>) (? <type -11>, ? <type -19>)
 func (fd <type 44>) .internal/poll.decref () <type -19>
 func (fd <type 44>) RawRead (f <esc:0x1> <type 38>) <type -19>
 func (fd <type 44>) SetDeadline (t <esc:0x1> <type 16>) <type -19>
 func (fd <type 44>) Fstat (s <esc:0x1> <type 72>) <type -19>
 func (fd <type 44>) ReadMsg (p <esc:0x1> <type 8>, oob <esc:0x1> <type 8>) (? <type -11>, ? <type -11>, ? <type -11>, ? <type 45>, ? <type -19>)
 func (fd <type 44>) .internal/poll.writeLock () <type -19>
 func (fd <type 44>) SetsockoptInet4Addr (level <type -11>, name <type -11>, arg <type 59>) <type -19>
 func (fd <esc:0x1> <type 44>) .internal/poll.eofError (n <type -11>, err <esc:0x12> <type -19>) <type -19>
 func (fd <type 44>) WriteTo (p <esc:0x1> <type 8>, sa <type 45>) (? <type -11>, ? <type -19>)
 func (fd <type 44>) SetWriteDeadline (t <esc:0x1> <type 16>) <type -19>
 func (fd <type 44>) .internal/poll.incref () <type -19>
 func (fd <type 44>) WriteMsg (p <esc:0x1> <type 8>, oob <esc:0x1> <type 8>, sa <type 45>) (? <type -11>, ? <type -11>, ? <type -19>)
type 44 *<type 43>
type 45 "syscall.Sockaddr" <type 46>
type 46 interface { .syscall.sockaddr () (ptr <type 47>, len <type 54>, err <type -19>); }
type 47 *<type 48>
type 48 "syscall.RawSockaddrAny" <type 49>
type 49 struct { Addr <type 50>; Pad <type 53>; }
type 50 "syscall.RawSockaddr" <type 51>
type 51 struct { Family <type -6>; Data <type 52>; }
type 52 [14 ] <type -1>
type 53 [96 ] <type -1>
type 54 "syscall.Socklen_t" <type 55>
type 55 ".syscall._socklen_t" <type -7>
type 56 *<type 57>
type 57 "syscall.IPMreq" <type 58>
type 58 struct { Multiaddr <type 59>; Interface <type 59>; }
type 59 [4 ] <type -20>
type 60 *<type 61>
type 61 [] <type 8>
type 62 *<type 63>
type 63 "syscall.IPMreqn" <type 64>
type 64 struct { Multiaddr <type 59>; Address <type 59>; Ifindex <type -3>; }
type 65 *<type 66>
type 66 "syscall.Linger" <type 67>
type 67 struct { Onoff <type -3>; Linger <type -3>; }
type 68 *<type 69>
type 69 "syscall.IPv6Mreq" <type 70>
type 70 struct { Multiaddr <type 71>; Interface <type -7>; }
type 71 [16 ] <type -20>
type 72 *<type 73>
type 73 "syscall.Stat_t" <type 74>
type 74 struct { Dev <type -8>; Ino <type -8>; Mode <type -7>; Nlink <type -7>; Uid <type -7>; Gid <type -7>; Rdev <type -8>; .syscall.__pad1 <type -8>; Size <type -4>; Blksize <type -3>; .syscall.__pad2 <type -3>; Blocks <type -4>; Atim <type 75>; Mtim <type 75>; Ctim <type 75>; .syscall.__glibc_reserved <type 80>; }
type 75 "syscall.Timespec" <type 77>
 func (ts <esc:0x1> <type 76>) Unix () (sec <type -4>, nsec <type -4>)
 func (ts <esc:0x1> <type 76>) Nano () <type -4>
type 76 *<type 75>
type 77 struct { Sec <type 78>; Nsec <type 79>; }
type 78 "syscall.Timespec_sec_t" <type -4>
type 79 "syscall.Timespec_nsec_t" <type -4>
type 80 [2 ] <type -3>
type 81 struct { .internal/poll.fdmu <type 82>; Sysfd <type -11>; .internal/poll.pd <type 85>; .internal/poll.iovecs <type 88>; .internal/poll.csema <type -7>; .internal/poll.isBlocking <type -7>; IsStream <type -15>; ZeroReadIsEOF <type -15>; .internal/poll.isFile <type -15>; }
type 82 ".internal/poll.fdMutex" <type 84>
 func (mu <type 83>) .internal/poll.incref () <type -15>
 func (mu <type 83>) .internal/poll.increfAndClose () <type -15>
 func (mu <type 83>) .internal/poll.decref () <type -15>
 func (mu <type 83>) .internal/poll.rwlock (read <type -15>) <type -15>
 func (mu <type 83>) .internal/poll.rwunlock (read <type -15>) <type -15>
type 83 *<type 82>
type 84 struct { .internal/poll.state <type -8>; .internal/poll.rsema <type -7>; .internal/poll.wsema <type -7>; }
type 85 ".internal/poll.pollDesc" <type 87>
 func (pd <esc:0x1> <type 86>) .internal/poll.init (fd <esc:0x1> <type 44>) <type -19>
 func (pd <esc:0x1> <type 86>) .internal/poll.evict ()
 func (pd <esc:0x1> <type 86>) .internal/poll.close ()
 func (pd <esc:0x1> <type 86>) .internal/poll.wait (mode <type -11>, isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 86>) .internal/poll.prepare (mode <type -11>, isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 86>) .internal/poll.pollable () <type -15>
 func (pd <esc:0x1> <type 86>) .internal/poll.prepareRead (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 86>) .internal/poll.waitWrite (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 86>) .internal/poll.prepareWrite (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 86>) .internal/poll.waitRead (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 86>) .internal/poll.waitCanceled (mode <type -11>)
type 86 *<type 85>
type 87 struct { .internal/poll.runtimeCtx <type -13>; }
type 88 *<type 89>
type 89 [] <type 90>
type 90 "syscall.Iovec" <type 92>
 func (iov <esc:0x1> <type 91>) SetLen (length <type -11>)
type 91 *<type 90>
type 92 struct { Base <type 93>; Len <type 94>; }
type 93 *<type -20>
type 94 "syscall.Iovec_len_t" <type -8>
type 95 *<type 96>
type 96 ".os.dirInfo" <type 97>
type 97 struct { .os.buf <type 8>; .os.dir <type 98>; }
type 98 *<type 99>
type 99 "syscall.DIR" <type 100>
type 100 ".syscall._DIR" <type 101>
type 101 struct { }
type 102 *<type 103>
type 103 "syscall.SysProcAttr" <type 104>
type 104 struct { Chroot <type -16>; Credential <type 105>; Ptrace <type -15>; Setsid <type -15>; Setpgid <type -15>; Setctty <type -15>; Noctty <type -15>; Ctty <type -11>; Foreground <type -15>; Pgid <type -11>; Pdeathsig <type 109>; Cloneflags <type -13>; Unshareflags <type -13>; UidMappings <type 110>; GidMappings <type 110>; GidMappingsEnableSetgroups <type -15>; AmbientCaps <type 113>; }
type 105 *<type 106>
type 106 "syscall.Credential" <type 107>
type 107 struct { Uid <type -7>; Gid <type -7>; Groups <type 108>; NoSetGroups <type -15>; }
type 108 [] <type -7>
type 109 "syscall.Signal" <type -11>
 func (s <type 109>) Signal ()
 func (s <type 109>) String () <type -16>
type 110 [] <type 111>
type 111 "syscall.SysProcIDMap" <type 112>
type 112 struct { ContainerID <type -11>; HostID <type -11>; Size <type -11>; }
type 113 [] <type -13>
type 114 *<type 115>
type 115 "os.Process" <type 130>
 func (p <esc:0x1> <type 114>) .os.blockUntilWaitable () (? <type -15>, ? <type -19>)
 func (p <type 114>) .os.wait () (ps <type 116>, err <type -19>)
 func (p <type 114>) .os.kill () <type -19>
 func (p <type 114>) Signal (sig <esc:0x1> <type 128>) <type -19>
 func (p <type 114>) Kill () <type -19>
 func (p <type 114>) .os.signal (sig <esc:0x1> <type 128>) <type -19>
 func (p <type 114>) Release () <type -19>
 func (p <type 114>) .os.done () <type -15>
 func (p <type 114>) .os.release () <type -19>
 func (p <type 114>) Wait () (? <type 116>, ? <type -19>)
 func (p <type 114>) .os.setDone ()
type 116 *<type 117>
type 117 "os.ProcessState" <type 118>
 func (p <esc:0x1> <type 116>) .os.systemTime () <type 30>
 func (p <esc:0x1> <type 116>) UserTime () <type 30>
 func (p <esc:0x1> <type 116>) .os.userTime () <type 30>
 func (p <esc:0x1> <type 116>) SystemTime () <type 30>
 func (p <esc:0x1> <type 116>) ExitCode () <type -11>
 func (p <esc:0x1> <type 116>) Exited () <type -15>
 func (p <esc:0x1> <type 116>) Success () <type -15>
 func (p <esc:0x1> <type 116>) Sys () <type 33>
 func (p <esc:0x22> <type 116>) .os.sysUsage () <type 33>
 func (p <esc:0x22> <type 116>) SysUsage () <type 33>
 func (p <esc:0x1> <type 116>) .os.exited () <type -15>
 func (p <esc:0x1> <type 116>) .os.success () <type -15>
 func (p <esc:0x1> <type 116>) .os.sys () <type 33>
 func (p <esc:0x1> <type 116>) Pid () <type -11>
 func (p <esc:0x1> <type 116>) String () <type -16>
type 118 struct { .os.pid <type -11>; .os.status <type 119>; .os.rusage <type 120>; }
type 119 "syscall.WaitStatus" <type -7>
 func (w <type 119>) TrapCause () <type -11>
 func (w <type 119>) StopSignal () <type 109>
 func (w <type 119>) Signal () <type 109>
 func (w <type 119>) CoreDump () <type -15>
 func (w <type 119>) ExitStatus () <type -11>
 func (w <type 119>) Continued () <type -15>
 func (w <type 119>) Stopped () <type -15>
 func (w <type 119>) Signaled () <type -15>
 func (w <type 119>) Exited () <type -15>
type 120 *<type 121>
type 121 "syscall.Rusage" <type 122>
type 122 struct { Utime <type 123>; Stime <type 123>; Maxrss <type -4>; Ixrss <type -4>; Idrss <type -4>; Isrss <type -4>; Minflt <type -4>; Majflt <type -4>; Nswap <type -4>; Inblock <type -4>; Oublock <type -4>; Msgsnd <type -4>; Msgrcv <type -4>; Nsignals <type -4>; Nvcsw <type -4>; Nivcsw <type -4>; }
type 123 "syscall.Timeval" <type 125>
 func (tv <esc:0x1> <type 124>) Unix () (sec <type -4>, nsec <type -4>)
 func (tv <esc:0x1> <type 124>) Nano () <type -4>
type 124 *<type 123>
type 125 struct { Sec <type 126>; Usec <type 127>; }
type 126 "syscall.Timeval_sec_t" <type -4>
type 127 "syscall.Timeval_usec_t" <type -4>
type 128 "os.Signal" <type 129>
type 129 interface { Signal (); String () <type -16>; }
type 130 struct { Pid <type -11>; .os.handle <type -13>; .os.isdone <type -7>; .os.sigMu <type 131>; }
type 131 "sync.RWMutex" <type 135>
 func (rw <esc:0x12> <type 132>) RLocker () ($ret8 <type 133>)
 func (rw <type 132>) Unlock ()
 func (rw <type 132>) Lock ()
 func (rw <type 132>) RUnlock ()
 func (rw <type 132>) RLock ()
type 132 *<type 131>
type 133 "sync.Locker" <type 134>
type 134 interface { Lock (); Unlock (); }
type 135 struct { .sync.w <type 136>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 136 "sync.Mutex" <type 138>
 func (m <type 137>) Lock ()
 func (m <type 137>) Unlock ()
type 137 *<type 136>
type 138 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 139 "context.Context" <type 140>
type 140 interface { Deadline () (deadline <type 16>, ok <type -15>); Done () <type 141>; Err () <type -19>; Value (key <type 33>) <type 33>; }
type 141 chan <- <type 101>
type 142 [] <type 143>
type 143 "io.Closer" <type 144>
type 144 interface { Close () <type -19>; }
type 145 [] <type 146>
type 146 () <type -19>
type 147 chan <type -19>
type 148 chan <type 101>
type 149 *<type 1>
type 150 "io.WriteCloser" <type 151>
type 151 interface { ? <type 9>; ? <type 143>; }
type 152 "io.ReadCloser" <type 153>
type 153 interface { ? <type 6>; ? <type 143>; }
type 154 struct { Name <type -16>; Err <type -19>; }
type 155 *<type 2>
type 156 struct { ? <type 116>; Stderr <type 8>; }
type 157 *<type 3>
func Command (name <type -16>, arg <esc:0x9> ...<type -16>) <type 149>
func CommandContext (ctx <type 139>, name <type -16>, arg <esc:0x9> ...<type -16>) <type 149>
var ErrNotFound <type -19>
func LookPath (file <type -16>) (? <type -16>, ? <type -19>)
checksum 7C1BE86E263F05103D50CE53C1B36624085E0472
v3;
package signal
pkgpath os/signal
import os os "os"
import sync sync "sync"
import syscall syscall "syscall"
init signal os..z2fsignal..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import syscall syscall..import time time..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 2 1 2 4 2 6 2 7 2 8 2 9 2 10 4 1 4 6 4 7 4 8 5 1 5 2 5 3 5 4 5 6 5 7 5 8 5 9 5 10 6 1 6 7 8 1 8 6 8 7 9 1 9 6 9 7 9 8 10 1 10 6 10 7 10 8 10 9
types 5 1 19 28 54 24
type 1 [] <type 2>
type 2 "os.Signal" <type 3>
type 3 interface { Signal (); String () <type -16>; }
type 4 chan -< <type 2>
func Ignore (sig <esc:0x1> ...<type 2>)
func Ignored (sig <esc:0x1> <type 2>) <type -15>
func Notify (c <type 4>, sig <esc:0x1> ...<type 2>)
func Reset (sig <esc:0x1> ...<type 2>)
func Stop (c <type 4>)
checksum AACCDA55415A3BDF1D7B42650E8A9D9E27061AD7
v3;
package pty
pkgpath os/signal/internal/pty
import fmt fmt "fmt"
import os os "os"
import syscall syscall "syscall"
import unsafe unsafe "unsafe"
indirectimport poll internal/poll
indirectimport time time
init fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 2 1 2 4 2 7 2 8 2 10 2 11 2 12 4 1 4 7 4 8 4 10 5 1 5 2 5 3 5 4 5 7 5 8 5 10 5 11 5 12 6 1 6 7 6 8 6 9 6 10 6 13 7 1 7 8 9 1 9 7 9 8 10 1 10 7 10 8 11 1 11 7 11 8 11 10 12 1 12 7 12 8 12 10 12 11
types 97 2 78 17 2758 30 139 3234 344 21 17 19 525 165 21 31 91 21 36 112 19 73 75 83 195 22 20 36 119 23 34 22 32 19 76 135 3600 19 37 91 19 43 50 40 53 24 24 38 40 19 35 61 24 19 20 19 36 78 19 35 54 19 37 61 25 19 35 320 157 19 50 43 44 23 280 368 19 115 940 19 57 19 21 93 19 50 20 40 19 32 56 19 32 34 19 81 161 18
type 1 "PtyError" <type 94>
 func (e <esc:0x9> <type 96>) Error () <type -16>
type 2 *<type 3>
type 3 "os.File" <type 31>
 func (f <esc:0x10a> <type 2>) Stat () (? <type 4>, ? <type -19>)
 func (f <esc:0x10a> <type 2>) .os.readdir (n <type -11>) (fi <type 25>, err <type -19>)
 func (f <esc:0x9> <type 2>) .os.seek (offset <type -4>, whence <type -11>) (ret <type -4>, err <type -19>)
 func (f <esc:0x9> <type 2>) .os.pwrite (b <esc:0x1> <type 8>, off <type -4>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 2>) .os.write (b <type 8>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 2>) SetDeadline (t <esc:0x1> <type 6>) <type -19>
 func (f <esc:0x10a> <type 2>) WriteString (s <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (f <esc:0x10a> <type 2>) ReadAt (b <esc:0x1> <type 8>, off <type -4>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 2>) SetWriteDeadline (t <esc:0x1> <type 6>) <type -19>
 func (f <esc:0x10a> <type 2>) Read (b <type 8>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 2>) .os.pread (b <esc:0x1> <type 8>, off <type -4>) (n <type -11>, err <type -19>)
 func (f <esc:0x10a> <type 2>) Seek (offset <type -4>, whence <type -11>) (ret <type -4>, err <type -19>)
 func (f <esc:0x10a> <type 2>) Write (b <type 8>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 2>) SetReadDeadline (t <esc:0x1> <type 6>) <type -19>
 func (f <esc:0x9> <type 2>) .os.setReadDeadline (t <esc:0x1> <type 6>) <type -19>
 func (f <esc:0x22> <type 2>) .os.wrapErr (op <type -16>, err <type -19>) <type -19>
 func (f <type 2>) SyscallConn () (? <type 26>, ? <type -19>)
 func (f <esc:0x10a> <type 2>) WriteAt (b <esc:0x1> <type 8>, off <type -4>) (n <type -11>, err <type -19>)
 func (file <esc:0x10a> <type 2>) .os.readdirnames (n <type -11>) (names <type 30>, err <type -19>)
 func (f <esc:0x2a> <type 2>) Chmod (mode <type 23>) <type -19>
 func (f <esc:0x10a> <type 2>) Readdirnames (n <type -11>) (names <type 30>, err <type -19>)
 func (f <esc:0x2a> <type 2>) .os.chmod (mode <type 23>) <type -19>
 func (f <esc:0x9> <type 2>) Close () <type -19>
 func (f <esc:0x10a> <type 2>) Readdir (n <type -11>) (? <type 25>, ? <type -19>)
 func (f <esc:0x2a> <type 2>) Chown (uid <type -11>, gid <type -11>) <type -19>
 func (f <esc:0x2a> <type 2>) Truncate (size <type -4>) <type -19>
 func (f <esc:0x32> <type 2>) Name () <type -16>
 func (f <esc:0x2a> <type 2>) Sync () <type -19>
 func (f <esc:0x9> <type 2>) .os.setDeadline (t <esc:0x1> <type 6>) <type -19>
 func (f <esc:0x2a> <type 2>) Chdir () <type -19>
 func (f <esc:0x9> <type 2>) .os.setWriteDeadline (t <esc:0x1> <type 6>) <type -19>
 func (f <esc:0x1> <type 2>) .os.checkValid (op <esc:0x1> <type -16>) <type -19>
 func (f <esc:0x9> <type 2>) Fd () <type -13>
 func (f <esc:0x9> <type 2>) .os.read (b <type 8>) (n <type -11>, err <type -19>)
type 4 "os.FileInfo" <type 5>
type 5 interface { IsDir () <type -15>; ModTime () <type 6>; Mode () <type 23>; Name () <type -16>; Size () <type -4>; Sys () <type 24>; }
type 6 "time.Time" <type 22>
 func (t <esc:0x1> <type 6>) String () <type -16>
 func (t <esc:0x1> <type 6>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x12> <type 6>) Add (d <type 7>) <type 6>
 func (t <esc:0x1> <type 6>) AppendFormat (b <esc:0x12> <type 8>, layout <esc:0x1> <type -16>) <type 8>
 func (t <esc:0x1> <type 6>) Minute () <type -11>
 func (t <esc:0x1> <type 9>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 6>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 6>) MarshalBinary () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 6>) After (u <esc:0x1> <type 6>) <type -15>
 func (t <esc:0x1> <type 6>) UnixNano () <type -4>
 func (t <esc:0x1> <type 9>) GobDecode (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 6>) Day () <type -11>
 func (t <esc:0x1> <type 9>) .time.unixSec () <type -4>
 func (t <esc:0x12> <type 6>) Round (d <type 7>) <type 6>
 func (t <esc:0x1> <type 9>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 6>) Before (u <esc:0x1> <type 6>) <type -15>
 func (t <esc:0x32> <type 6>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 9>) .time.setLoc (loc <type 10>)
 func (t <esc:0x12> <type 6>) Truncate (d <type 7>) <type 6>
 func (t <esc:0x1> <type 9>) UnmarshalText (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 9>) UnmarshalBinary (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 6>) Hour () <type -11>
 func (t <esc:0x1> <type 6>) .time.abs () <type -8>
 func (t <esc:0x1> <type 6>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x12> <type 6>) Location () <type 10>
 func (t <esc:0x1> <type 6>) Month () <type 20>
 func (t <esc:0x1> <type 6>) GobEncode () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 6>) Second () <type -11>
 func (t <esc:0x1> <type 9>) UnmarshalJSON (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 9>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 6>) Year () <type -11>
 func (t <esc:0x1> <type 6>) Date () (year <type -11>, month <type 20>, day <type -11>)
 func (t <esc:0x1> <type 6>) Weekday () <type 21>
 func (t <esc:0x1> <type 6>) Unix () <type -4>
 func (t <esc:0x1> <type 6>) YearDay () <type -11>
 func (t <esc:0x12> <type 6>) Local () <type 6>
 func (t <esc:0x1> <type 6>) IsZero () <type -15>
 func (t <esc:0x1> <type 6>) Equal (u <esc:0x1> <type 6>) <type -15>
 func (t <esc:0x12> <type 6>) In (loc <type 10>) <type 6>
 func (t <esc:0x1> <type 6>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 6>) UTC () <type 6>
 func (t <esc:0x32> <type 6>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 6>) Sub (u <esc:0x1> <type 6>) <type 7>
 func (t <esc:0x1> <type 9>) .time.mono () <type -4>
 func (t <esc:0x1> <type 6>) MarshalText () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 9>) .time.stripMono ()
 func (t <esc:0x1> <type 6>) MarshalJSON () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 6>) .time.date (full <type -15>) (year <type -11>, month <type 20>, day <type -11>, yday <type -11>)
 func (t <type 6>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 6>
 func (t <esc:0x1> <type 9>) .time.sec () <type -4>
type 7 "time.Duration" <type -4>
 func (d <type 7>) Round (m <type 7>) <type 7>
 func (d <type 7>) Truncate (m <type 7>) <type 7>
 func (d <type 7>) Hours () <type -10>
 func (d <type 7>) Minutes () <type -10>
 func (d <type 7>) Seconds () <type -10>
 func (d <type 7>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 7>) String () <type -16>
type 8 [] <type -20>
type 9 *<type 6>
type 10 *<type 11>
type 11 "time.Location" <type 12>
 func (l <esc:0x1> <type 10>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 10>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 10>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 10>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 10>) String () <type -16>
 func (l <esc:0x12> <type 10>) .time.get () <type 10>
type 12 struct { .time.name <type -16>; .time.zone <type 13>; .time.tx <type 16>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 19>; }
type 13 [] <type 14>
type 14 ".time.zone" <type 15>
type 15 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 16 [] <type 17>
type 17 ".time.zoneTrans" <type 18>
type 18 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 19 *<type 14>
type 20 "time.Month" <type -11>
 func (m <type 20>) String () <type -16>
type 21 "time.Weekday" <type -11>
 func (d <type 21>) String () <type -16>
type 22 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 10>; }
type 23 "os.FileMode" <type -7>
 func (m <type 23>) Perm () <type 23>
 func (m <type 23>) IsDir () <type -15>
 func (m <type 23>) IsRegular () <type -15>
 func (m <type 23>) String () <type -16>
type 24 interface { }
type 25 [] <type 4>
type 26 "syscall.RawConn" <type 27>
type 27 interface { Control (f <type 28>) <type -19>; Read (f <type 29>) <type -19>; Write (f <type 29>) <type -19>; }
type 28 (? <type -13>)
type 29 (? <type -13>) <type -15>
type 30 [] <type -16>
type 31 struct { ? <type 32>; }
type 32 *<type 33>
type 33 ".os.file" <type 34>
 func (file <type 32>) .os.close () <type -19>
type 34 struct { .os.pfd <type 35>; .os.name <type -16>; .os.dirinfo <type 87>; .os.nonblock <type -15>; .os.stdoutOrErr <type -15>; }
type 35 "internal/poll.FD" <type 73>
 func (fd <type 36>) Accept () (? <type -11>, ? <type 37>, ? <type -16>, ? <type -19>)
 func (fd <type 36>) Pwrite (p <esc:0x1> <type 8>, off <type -4>) (? <type -11>, ? <type -19>)
 func (fd <type 36>) .internal/poll.writeUnlock ()
 func (fd <type 36>) Write (p <type 8>) (? <type -11>, ? <type -19>)
 func (fd <type 36>) ReadFrom (p <esc:0x1> <type 8>) (? <type -11>, ? <type 37>, ? <type -19>)
 func (fd <type 36>) .internal/poll.readLock () <type -19>
 func (fd <type 36>) Pread (p <esc:0x1> <type 8>, off <type -4>) (? <type -11>, ? <type -19>)
 func (fd <type 36>) Read (p <type 8>) (? <type -11>, ? <type -19>)
 func (fd <type 36>) Shutdown (how <type -11>) <type -19>
 func (fd <type 36>) Close () <type -19>
 func (fd <type 36>) .internal/poll.destroy () <type -19>
 func (fd <type 36>) Ftruncate (size <type -4>) <type -19>
 func (fd <type 36>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (fd <esc:0x1> <type 36>) Init (net <esc:0x1> <type -16>, pollable <type -15>) <type -19>
 func (fd <type 36>) Fsync () <type -19>
 func (fd <type 36>) .internal/poll.readUnlock ()
 func (fd <type 36>) Dup () (? <type -11>, ? <type -16>, ? <type -19>)
 func (fd <type 36>) Fchmod (mode <type -7>) <type -19>
 func (fd <type 36>) Fchdir () <type -19>
 func (fd <type 36>) SetsockoptInt (level <type -11>, name <type -11>, arg <type -11>) <type -19>
 func (fd <type 36>) WriteOnce (p <type 8>) (? <type -11>, ? <type -19>)
 func (fd <type 36>) SetsockoptIPMreq (level <type -11>, name <type -11>, mreq <esc:0x1> <type 48>) <type -19>
 func (fd <type 36>) Writev (v <esc:0x9> <type 52>) (? <type -4>, ? <type -19>)
 func (fd <type 36>) RawControl (f <esc:0x1> <type 28>) <type -19>
 func (fd <esc:0x1> <type 36>) WaitWrite () <type -19>
 func (fd <type 36>) SetsockoptIPMreqn (level <type -11>, name <type -11>, mreq <esc:0x1> <type 54>) <type -19>
 func (fd <type 36>) RawWrite (f <esc:0x1> <type 29>) <type -19>
 func (fd <type 36>) Fchown (uid <type -11>, gid <type -11>) <type -19>
 func (fd <type 36>) SetReadDeadline (t <esc:0x1> <type 6>) <type -19>
 func (fd <type 36>) SetsockoptLinger (level <type -11>, name <type -11>, l <esc:0x1> <type 57>) <type -19>
 func (fd <type 36>) SetsockoptIPv6Mreq (level <type -11>, name <type -11>, mreq <esc:0x1> <type 60>) <type -19>
 func (fd <type 36>) SetsockoptByte (level <type -11>, name <type -11>, arg <type -20>) <type -19>
 func (fd <type 36>) SetBlocking () <type -19>
 func (fd <type 36>) ReadDirent (buf <esc:0x1> <type 8>) (? <type -11>, ? <type -19>)
 func (fd <type 36>) .internal/poll.decref () <type -19>
 func (fd <type 36>) RawRead (f <esc:0x1> <type 29>) <type -19>
 func (fd <type 36>) SetDeadline (t <esc:0x1> <type 6>) <type -19>
 func (fd <type 36>) Fstat (s <esc:0x1> <type 64>) <type -19>
 func (fd <type 36>) ReadMsg (p <esc:0x1> <type 8>, oob <esc:0x1> <type 8>) (? <type -11>, ? <type -11>, ? <type -11>, ? <type 37>, ? <type -19>)
 func (fd <type 36>) .internal/poll.writeLock () <type -19>
 func (fd <type 36>) SetsockoptInet4Addr (level <type -11>, name <type -11>, arg <type 51>) <type -19>
 func (fd <esc:0x1> <type 36>) .internal/poll.eofError (n <type -11>, err <esc:0x12> <type -19>) <type -19>
 func (fd <type 36>) WriteTo (p <esc:0x1> <type 8>, sa <type 37>) (? <type -11>, ? <type -19>)
 func (fd <type 36>) SetWriteDeadline (t <esc:0x1> <type 6>) <type -19>
 func (fd <type 36>) .internal/poll.incref () <type -19>
 func (fd <type 36>) WriteMsg (p <esc:0x1> <type 8>, oob <esc:0x1> <type 8>, sa <type 37>) (? <type -11>, ? <type -11>, ? <type -19>)
type 36 *<type 35>
type 37 "syscall.Sockaddr" <type 38>
type 38 interface { .syscall.sockaddr () (ptr <type 39>, len <type 46>, err <type -19>); }
type 39 *<type 40>
type 40 "syscall.RawSockaddrAny" <type 41>
type 41 struct { Addr <type 42>; Pad <type 45>; }
type 42 "syscall.RawSockaddr" <type 43>
type 43 struct { Family <type -6>; Data <type 44>; }
type 44 [14 ] <type -1>
type 45 [96 ] <type -1>
type 46 "syscall.Socklen_t" <type 47>
type 47 ".syscall._socklen_t" <type -7>
type 48 *<type 49>
type 49 "syscall.IPMreq" <type 50>
type 50 struct { Multiaddr <type 51>; Interface <type 51>; }
type 51 [4 ] <type -20>
type 52 *<type 53>
type 53 [] <type 8>
type 54 *<type 55>
type 55 "syscall.IPMreqn" <type 56>
type 56 struct { Multiaddr <type 51>; Address <type 51>; Ifindex <type -3>; }
type 57 *<type 58>
type 58 "syscall.Linger" <type 59>
type 59 struct { Onoff <type -3>; Linger <type -3>; }
type 60 *<type 61>
type 61 "syscall.IPv6Mreq" <type 62>
type 62 struct { Multiaddr <type 63>; Interface <type -7>; }
type 63 [16 ] <type -20>
type 64 *<type 65>
type 65 "syscall.Stat_t" <type 66>
type 66 struct { Dev <type -8>; Ino <type -8>; Mode <type -7>; Nlink <type -7>; Uid <type -7>; Gid <type -7>; Rdev <type -8>; .syscall.__pad1 <type -8>; Size <type -4>; Blksize <type -3>; .syscall.__pad2 <type -3>; Blocks <type -4>; Atim <type 67>; Mtim <type 67>; Ctim <type 67>; .syscall.__glibc_reserved <type 72>; }
type 67 "syscall.Timespec" <type 69>
 func (ts <esc:0x1> <type 68>) Unix () (sec <type -4>, nsec <type -4>)
 func (ts <esc:0x1> <type 68>) Nano () <type -4>
type 68 *<type 67>
type 69 struct { Sec <type 70>; Nsec <type 71>; }
type 70 "syscall.Timespec_sec_t" <type -4>
type 71 "syscall.Timespec_nsec_t" <type -4>
type 72 [2 ] <type -3>
type 73 struct { .internal/poll.fdmu <type 74>; Sysfd <type -11>; .internal/poll.pd <type 77>; .internal/poll.iovecs <type 80>; .internal/poll.csema <type -7>; .internal/poll.isBlocking <type -7>; IsStream <type -15>; ZeroReadIsEOF <type -15>; .internal/poll.isFile <type -15>; }
type 74 ".internal/poll.fdMutex" <type 76>
 func (mu <type 75>) .internal/poll.incref () <type -15>
 func (mu <type 75>) .internal/poll.increfAndClose () <type -15>
 func (mu <type 75>) .internal/poll.decref () <type -15>
 func (mu <type 75>) .internal/poll.rwlock (read <type -15>) <type -15>
 func (mu <type 75>) .internal/poll.rwunlock (read <type -15>) <type -15>
type 75 *<type 74>
type 76 struct { .internal/poll.state <type -8>; .internal/poll.rsema <type -7>; .internal/poll.wsema <type -7>; }
type 77 ".internal/poll.pollDesc" <type 79>
 func (pd <esc:0x1> <type 78>) .internal/poll.init (fd <esc:0x1> <type 36>) <type -19>
 func (pd <esc:0x1> <type 78>) .internal/poll.evict ()
 func (pd <esc:0x1> <type 78>) .internal/poll.close ()
 func (pd <esc:0x1> <type 78>) .internal/poll.wait (mode <type -11>, isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 78>) .internal/poll.prepare (mode <type -11>, isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 78>) .internal/poll.pollable () <type -15>
 func (pd <esc:0x1> <type 78>) .internal/poll.prepareRead (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 78>) .internal/poll.waitWrite (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 78>) .internal/poll.prepareWrite (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 78>) .internal/poll.waitRead (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 78>) .internal/poll.waitCanceled (mode <type -11>)
type 78 *<type 77>
type 79 struct { .internal/poll.runtimeCtx <type -13>; }
type 80 *<type 81>
type 81 [] <type 82>
type 82 "syscall.Iovec" <type 84>
 func (iov <esc:0x1> <type 83>) SetLen (length <type -11>)
type 83 *<type 82>
type 84 struct { Base <type 85>; Len <type 86>; }
type 85 *<type -20>
type 86 "syscall.Iovec_len_t" <type -8>
type 87 *<type 88>
type 88 ".os.dirInfo" <type 89>
type 89 struct { .os.buf <type 8>; .os.dir <type 90>; }
type 90 *<type 91>
type 91 "syscall.DIR" <type 92>
type 92 ".syscall._DIR" <type 93>
type 93 struct { }
type 94 struct { FuncName <type -16>; ErrorString <type -16>; Errno <type 95>; }
type 95 "syscall.Errno" <type -13>
 func (e <type 95>) Timeout () <type -15>
 func (e <type 95>) Temporary () <type -15>
 func (e <type 95>) Error () <type -16>
type 96 *<type 1>
func Open () (master <type 2>, slave <type -16>, err <type -19>)
checksum C5B94BC39A23B09C8998DBF594F16E4FB2495348
v3;
package user
pkgpath os/user
import fmt fmt "fmt"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import syscall syscall "syscall"
import unsafe unsafe "unsafe"
init user os..z2fuser..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1 13 1 14 3 2 3 5 3 8 3 9 3 11 3 12 3 13 5 2 5 8 5 9 5 11 6 2 6 3 6 4 6 5 6 8 6 9 6 11 6 12 6 13 7 2 7 8 7 9 7 10 7 11 7 14 8 2 8 9 10 2 10 8 10 9 11 2 11 8 11 9 12 2 12 8 12 9 12 11 13 2 13 8 13 9 13 11 13 12
types 12 7 24 87 89 86 78 93 17 51 17 109 22
type 1 "Group" <type 8>
type 2 "UnknownGroupError" <type -16>
 func (e <esc:0x1> <type 2>) Error () <type -16>
type 3 "UnknownGroupIdError" <type -16>
 func (e <esc:0x1> <type 3>) Error () <type -16>
type 4 "UnknownUserError" <type -16>
 func (e <esc:0x1> <type 4>) Error () <type -16>
type 5 "UnknownUserIdError" <type -11>
 func (e <type 5>) Error () <type -16>
type 6 "User" <type 10>
 func (u <esc:0x9> <type 7>) GroupIds () (? <type 11>, ? <type -19>)
type 7 *<type 6>
type 8 struct { Gid <type -16>; Name <type -16>; }
type 9 *<type 1>
type 10 struct { Uid <type -16>; Gid <type -16>; Username <type -16>; Name <type -16>; HomeDir <type -16>; }
type 11 [] <type -16>
func Current () (? <type 7>, ? <type -19>)
func Lookup (username <type -16>) (? <type 7>, ? <type -19>)
func LookupGroup (name <type -16>) (? <type 9>, ? <type -19>)
func LookupGroupId (gid <type -16>) (? <type 9>, ? <type -19>)
func LookupId (uid <type -16>) (? <type 7>, ? <type -19>)
checksum D75293BDBE72232166D6F7CD7903E84CBBE278A9
v3;
package path
pkgpath path
import errors errors "errors"
import strings strings "strings"
import utf8 unicode/utf8 "unicode/utf8"
init path path..import cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 2 1 2 3 2 4 2 5 3 1 3 4 5 1 5 3 5 4
types 2 1 21
type 1 [] <type -16>
func Base (path <esc:0x12> <type -16>) <type -16>
func Clean (path <esc:0x12> <type -16>) <type -16>
func Dir (path <esc:0x12> <type -16>) <type -16>
var ErrBadPattern <type -19>
func Ext (path <esc:0x12> <type -16>) <type -16>
func IsAbs (path <esc:0x1> <type -16>) <type -15>
func Join (elem <esc:0x22> ...<type -16>) <type -16>
func Match (pattern <esc:0x1> <type -16>, name <esc:0x1> <type -16>) (matched <type -15>, err <type -19>)
func Split (path <esc:0x92> <type -16>) (dir <type -16>, file <type -16>)
checksum D687315212FFE130D8CB624675FA878BD421285D
v3;
package filepath
pkgpath path/filepath
import errors errors "errors"
import os os "os"
import runtime runtime "runtime"
import sort sort "sort"
import strings strings "strings"
import syscall syscall "syscall"
import utf8 unicode/utf8 "unicode/utf8"
indirectimport time time
init filepath path..z2ffilepath..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 2 1 2 4 2 7 2 8 2 10 2 11 2 12 4 1 4 7 4 8 4 10 5 1 5 2 5 3 5 4 5 7 5 8 5 10 5 11 5 12 6 1 6 7 6 8 6 9 6 10 6 13 7 1 7 8 9 1 9 7 9 8 10 1 10 7 10 8 11 1 11 7 11 8 11 10 12 1 12 7 12 8 12 10 12 11
types 25 2 27 21 67 30 139 3234 344 21 17 19 525 165 21 31 91 21 36 112 19 73 75 83 195 22
type 1 "WalkFunc" <type 3>
type 2 [] <type -16>
type 3 (path <type -16>, info <type 4>, err <type -19>) <type -19>
type 4 "os.FileInfo" <type 5>
type 5 interface { IsDir () <type -15>; ModTime () <type 6>; Mode () <type 23>; Name () <type -16>; Size () <type -4>; Sys () <type 24>; }
type 6 "time.Time" <type 22>
 func (t <esc:0x1> <type 6>) String () <type -16>
 func (t <esc:0x1> <type 6>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x12> <type 6>) Add (d <type 7>) <type 6>
 func (t <esc:0x1> <type 6>) AppendFormat (b <esc:0x12> <type 8>, layout <esc:0x1> <type -16>) <type 8>
 func (t <esc:0x1> <type 6>) Minute () <type -11>
 func (t <esc:0x1> <type 9>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 6>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 6>) MarshalBinary () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 6>) After (u <esc:0x1> <type 6>) <type -15>
 func (t <esc:0x1> <type 6>) UnixNano () <type -4>
 func (t <esc:0x1> <type 9>) GobDecode (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 6>) Day () <type -11>
 func (t <esc:0x1> <type 9>) .time.unixSec () <type -4>
 func (t <esc:0x12> <type 6>) Round (d <type 7>) <type 6>
 func (t <esc:0x1> <type 9>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 6>) Before (u <esc:0x1> <type 6>) <type -15>
 func (t <esc:0x32> <type 6>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 9>) .time.setLoc (loc <type 10>)
 func (t <esc:0x12> <type 6>) Truncate (d <type 7>) <type 6>
 func (t <esc:0x1> <type 9>) UnmarshalText (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 9>) UnmarshalBinary (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 6>) Hour () <type -11>
 func (t <esc:0x1> <type 6>) .time.abs () <type -8>
 func (t <esc:0x1> <type 6>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x12> <type 6>) Location () <type 10>
 func (t <esc:0x1> <type 6>) Month () <type 20>
 func (t <esc:0x1> <type 6>) GobEncode () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 6>) Second () <type -11>
 func (t <esc:0x1> <type 9>) UnmarshalJSON (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 9>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 6>) Year () <type -11>
 func (t <esc:0x1> <type 6>) Date () (year <type -11>, month <type 20>, day <type -11>)
 func (t <esc:0x1> <type 6>) Weekday () <type 21>
 func (t <esc:0x1> <type 6>) Unix () <type -4>
 func (t <esc:0x1> <type 6>) YearDay () <type -11>
 func (t <esc:0x12> <type 6>) Local () <type 6>
 func (t <esc:0x1> <type 6>) IsZero () <type -15>
 func (t <esc:0x1> <type 6>) Equal (u <esc:0x1> <type 6>) <type -15>
 func (t <esc:0x12> <type 6>) In (loc <type 10>) <type 6>
 func (t <esc:0x1> <type 6>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 6>) UTC () <type 6>
 func (t <esc:0x32> <type 6>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 6>) Sub (u <esc:0x1> <type 6>) <type 7>
 func (t <esc:0x1> <type 9>) .time.mono () <type -4>
 func (t <esc:0x1> <type 6>) MarshalText () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 9>) .time.stripMono ()
 func (t <esc:0x1> <type 6>) MarshalJSON () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 6>) .time.date (full <type -15>) (year <type -11>, month <type 20>, day <type -11>, yday <type -11>)
 func (t <type 6>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 6>
 func (t <esc:0x1> <type 9>) .time.sec () <type -4>
type 7 "time.Duration" <type -4>
 func (d <type 7>) Round (m <type 7>) <type 7>
 func (d <type 7>) Truncate (m <type 7>) <type 7>
 func (d <type 7>) Hours () <type -10>
 func (d <type 7>) Minutes () <type -10>
 func (d <type 7>) Seconds () <type -10>
 func (d <type 7>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 7>) String () <type -16>
type 8 [] <type -20>
type 9 *<type 6>
type 10 *<type 11>
type 11 "time.Location" <type 12>
 func (l <esc:0x1> <type 10>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 10>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 10>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 10>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 10>) String () <type -16>
 func (l <esc:0x12> <type 10>) .time.get () <type 10>
type 12 struct { .time.name <type -16>; .time.zone <type 13>; .time.tx <type 16>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 19>; }
type 13 [] <type 14>
type 14 ".time.zone" <type 15>
type 15 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 16 [] <type 17>
type 17 ".time.zoneTrans" <type 18>
type 18 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 19 *<type 14>
type 20 "time.Month" <type -11>
 func (m <type 20>) String () <type -16>
type 21 "time.Weekday" <type -11>
 func (d <type 21>) String () <type -16>
type 22 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 10>; }
type 23 "os.FileMode" <type -7>
 func (m <type 23>) Perm () <type 23>
 func (m <type 23>) IsDir () <type -15>
 func (m <type 23>) IsRegular () <type -15>
 func (m <type 23>) String () <type -16>
type 24 interface { }
func Abs (path <esc:0x12> <type -16>) (? <type -16>, ? <type -19>)
func Base (path <esc:0x12> <type -16>) <type -16>
func Clean (path <esc:0x12> <type -16>) <type -16>
func Dir (path <esc:0x12> <type -16>) <type -16>
var ErrBadPattern <type -19>
func EvalSymlinks (path <type -16>) (? <type -16>, ? <type -19>)
func Ext (path <esc:0x12> <type -16>) <type -16>
func FromSlash (path <esc:0x12> <type -16>) <type -16>
func Glob (pattern <type -16>) (matches <type 2>, err <type -19>)
func HasPrefix (p <esc:0x1> <type -16>, prefix <esc:0x1> <type -16>) <type -15>
func IsAbs (path <esc:0x1> <type -16>) <type -15>
func Join (elem <esc:0x22> ...<type -16>) <type -16>
const ListSeparator = 58' 
func Match (pattern <esc:0x1> <type -16>, name <esc:0x1> <type -16>) (matched <type -15>, err <type -19>)
func Rel (basepath <esc:0x1> <type -16>, targpath <esc:0x12> <type -16>) (? <type -16>, ? <type -19>)
const Separator = 47' 
var SkipDir <type -19>
func Split (path <esc:0x92> <type -16>) (dir <type -16>, file <type -16>)
func SplitList (path <type -16>) <type 2>
func ToSlash (path <esc:0x12> <type -16>) <type -16>
func VolumeName (path <esc:0x12> <type -16>) <type -16>
func Walk (root <type -16>, walkFn <esc:0x2a> <type 1>) <type -19>
checksum 038B506A376247417463307789135B2447EE7D79
v3;
package reflect
pkgpath reflect
import math math "math"
import runtime runtime "runtime"
import strconv strconv "strconv"
import sync sync "sync"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
import unsafe unsafe "unsafe"
init reflect reflect..import cpu internal..z2fcpu..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 2 1 2 3 4 1 4 2 4 3 5 1 5 2 5 3
types 61 14 68 65 175 26 30 30 31 32 31 207 25 3911 81 21 22 35 13 19 112 201 35 19 38 110 2282 19 21 36 145 20 22 34 355 47 46 20 19 480 100 21 32 21 64 18 106 20 65 68 52 145 20 37 964 80 278 22 22 24 53 19
type 1 "ChanDir" <type -11>
 func (d <type 1>) String () <type -16>
type 2 "Kind" <type -12>
 func (k <type 2>) String () <type -16>
type 3 "MapIter" <type 43>
 func (it <esc:0x9> <type 44>) Key () <type 12>
 func (it <esc:0x9> <type 44>) Value () <type 12>
 func (it <esc:0x1> <type 44>) Next () <type -15>
type 4 "Method" <type 45>
type 5 "SelectCase" <type 47>
type 6 "SelectDir" <type -11>
type 7 "SliceHeader" <type 48>
type 8 "StringHeader" <type 49>
type 9 "StructField" <type 50>
type 10 "StructTag" <type -16>
 func (tag <esc:0x12> <type 10>) Get (key <esc:0x1> <type -16>) <type -16>
 func (tag <esc:0x12> <type 10>) Lookup (key <esc:0x1> <type -16>) (value <type -16>, ok <type -15>)
type 11 "Type" <type 53>
type 12 "Value" <type 54>
 func (v <esc:0x12> <type 12>) .reflect.pointer () <type 16>
 func (v <type 12>) Addr () <type 12>
 func (v <esc:0x1> <type 12>) Bool () <type -15>
 func (v <esc:0x2a> <type 12>) Bytes () <type 56>
 func (v <esc:0x2a> <type 12>) .reflect.runes () <type 57>
 func (v <esc:0x1> <type 12>) CanAddr () <type -15>
 func (v <esc:0x1> <type 12>) CanSet () <type -15>
 func (v <type 12>) Call (in <esc:0x9> <type 14>) <type 14>
 func (v <type 12>) CallSlice (in <esc:0x9> <type 14>) <type 14>
 func (v <type 12>) .reflect.call (op <esc:0x1> <type -16>, in <esc:0x9> <type 14>) <type 14>
 func (v <type 12>) Cap () <type -11>
 func (v <type 12>) Close ()
 func (v <esc:0x1> <type 12>) Complex () <type -18>
 func (v <esc:0x1a> <type 12>) Elem () <type 12>
 func (v <esc:0x12> <type 12>) Field (i <type -11>) <type 12>
 func (v <esc:0x1a> <type 12>) FieldByIndex (index <esc:0x1> <type 31>) <type 12>
 func (v <type 12>) FieldByName (name <esc:0x1> <type -16>) <type 12>
 func (v <type 12>) FieldByNameFunc (match <esc:0x1> <type 32>) <type 12>
 func (v <esc:0x1> <type 12>) Float () <type -10>
 func (v <esc:0x12> <type 12>) Index (i <type -11>) <type 12>
 func (v <esc:0x1> <type 12>) Int () <type -4>
 func (v <esc:0x1> <type 12>) CanInterface () <type -15>
 func (v <type 12>) Interface () (i <type 15>)
 func (v <esc:0x1> <type 12>) InterfaceData () <type 58>
 func (v <esc:0x1> <type 12>) IsNil () <type -15>
 func (v <esc:0x1> <type 12>) IsValid () <type -15>
 func (v <esc:0x1> <type 12>) Kind () <type 2>
 func (v <type 12>) Len () <type -11>
 func (v <esc:0x9> <type 12>) MapIndex (key <type 12>) <type 12>
 func (v <esc:0x9> <type 12>) MapKeys () <type 14>
 func (v <type 12>) MapRange () <type 44>
 func (v <esc:0x1a> <type 12>) Method (i <type -11>) <type 12>
 func (v <esc:0x9> <type 12>) NumMethod () <type -11>
 func (v <esc:0x1a> <type 12>) MethodByName (name <esc:0x1> <type -16>) <type 12>
 func (v <esc:0x1> <type 12>) NumField () <type -11>
 func (v <esc:0x1> <type 12>) OverflowComplex (x <type -18>) <type -15>
 func (v <esc:0x1> <type 12>) OverflowFloat (x <type -10>) <type -15>
 func (v <esc:0x1> <type 12>) OverflowInt (x <type -4>) <type -15>
 func (v <esc:0x1> <type 12>) OverflowUint (x <type -8>) <type -15>
 func (v <esc:0x12> <type 12>) Pointer () <type -13>
 func (v <type 12>) Recv () (x <type 12>, ok <type -15>)
 func (v <type 12>) .reflect.recv (nb <type -15>) (val <type 12>, ok <type -15>)
 func (v <esc:0x9> <type 12>) Send (x <type 12>)
 func (v <esc:0x9> <type 12>) .reflect.send (x <type 12>, nb <type -15>) (selected <type -15>)
 func (v <type 12>) Set (x <type 12>)
 func (v <esc:0x1> <type 12>) SetBool (x <type -15>)
 func (v <esc:0x9> <type 12>) SetBytes (x <type 56>)
 func (v <esc:0x9> <type 12>) .reflect.setRunes (x <type 57>)
 func (v <esc:0x1> <type 12>) SetComplex (x <type -18>)
 func (v <esc:0x1> <type 12>) SetFloat (x <type -10>)
 func (v <esc:0x1> <type 12>) SetInt (x <type -4>)
 func (v <esc:0x1> <type 12>) SetLen (n <type -11>)
 func (v <esc:0x1> <type 12>) SetCap (n <type -11>)
 func (v <esc:0x9> <type 12>) SetMapIndex (key <type 12>, val <type 12>)
 func (v <esc:0x1> <type 12>) SetUint (x <type -8>)
 func (v <esc:0x1> <type 12>) SetPointer (x <type 16>)
 func (v <esc:0x1> <type 12>) SetString (x <type -16>)
 func (v <type 12>) Slice (i <type -11>, j <type -11>) <type 12>
 func (v <type 12>) Slice3 (i <type -11>, j <type -11>, k <type -11>) <type 12>
 func (v <type 12>) String () <type -16>
 func (v <type 12>) TryRecv () (x <type 12>, ok <type -15>)
 func (v <esc:0x9> <type 12>) TrySend (x <type 12>) <type -15>
 func (v <type 12>) Type () <type 11>
 func (v <esc:0x1> <type 12>) Uint () <type -8>
 func (v <esc:0x12> <type 12>) UnsafeAddr () <type -13>
 func (v <type 12>) .reflect.assignTo (context <esc:0x1> <type -16>, dst <type 26>, target <type 16>) <type 12>
 func (v <type 12>) Convert (t <type 11>) <type 12>
type 13 "ValueError" <type 59>
 func (e <esc:0x1> <type 60>) Error () <type -16>
type 14 [] <type 12>
type 15 interface { }
type 16 "unsafe.Pointer" <type 17>
type 17 *any
type 18 *<type 19>
type 19 ".reflect.makeFuncImpl" <type 20>
 func (c <esc:0x3a> <type 18>) .reflect.call (in <type 14>) <type 14>
type 20 struct { .reflect.code <type -13>; .reflect.ffi_cif <type 16>; .reflect.ffi_fun <type 21>; .reflect.typ <type 22>; .reflect.fn <type 41>; .reflect.method <type -11>; .reflect.rcvr <type 12>; }
type 21 (? <type 16>, ? <type 16>)
type 22 *<type 23>
type 23 ".reflect.funcType" <type 24>
type 24 struct { ? <type 25>; .reflect.dotdotdot <type -15>; .reflect.in <type 40>; .reflect.out <type 40>; }
type 25 ".reflect.rtype" <type 33>
 func (t <esc:0x32> <type 26>) .reflect.rawString () <type -16>
 func (t <esc:0x1> <type 26>) String () <type -16>
 func (t <esc:0x1> <type 26>) Size () <type -13>
 func (t <esc:0x1> <type 26>) Bits () <type -11>
 func (t <esc:0x1> <type 26>) Align () <type -11>
 func (t <esc:0x1> <type 26>) FieldAlign () <type -11>
 func (t <esc:0x1> <type 26>) Kind () <type 2>
 func (t <esc:0x1> <type 26>) .reflect.pointers () <type -15>
 func (t <esc:0x12> <type 26>) .reflect.common () ($ret23 <type 26>) <inl:196>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/reflect/type.go:551
  { //551
   $ret23 = t //551
   return //551
  } //0
 func (t <esc:0x9> <type 26>) .reflect.exportedMethods () <type 27>
 func (t <esc:0x9> <type 26>) NumMethod () <type -11>
 func (t <esc:0x4a> <type 26>) Method (i <type -11>) (m <type 4>)
 func (t <esc:0x4a> <type 26>) MethodByName (name <esc:0x1> <type -16>) (m <type 4>, ok <type -15>)
 func (t <esc:0x42> <type 26>) PkgPath () <type -16>
 func (t <esc:0x42> <type 26>) Name () <type -16>
 func (t <esc:0x1> <type 26>) ChanDir () <type 1>
 func (t <esc:0x1> <type 26>) IsVariadic () <type -15>
 func (t <esc:0x9> <type 26>) Elem () <type 11>
 func (t <esc:0x4a> <type 26>) Field (i <type -11>) <type 9>
 func (t <type 26>) FieldByIndex (index <esc:0x1> <type 31>) <type 9>
 func (t <type 26>) FieldByName (name <esc:0x1> <type -16>) (? <type 9>, ? <type -15>)
 func (t <type 26>) FieldByNameFunc (match <esc:0x1> <type 32>) (? <type 9>, ? <type -15>)
 func (t <esc:0x9> <type 26>) In (i <type -11>) <type 11>
 func (t <esc:0x9> <type 26>) Key () <type 11>
 func (t <esc:0x1> <type 26>) Len () <type -11>
 func (t <esc:0x1> <type 26>) NumField () <type -11>
 func (t <esc:0x1> <type 26>) NumIn () <type -11>
 func (t <esc:0x1> <type 26>) NumOut () <type -11>
 func (t <esc:0x9> <type 26>) Out (i <type -11>) <type 11>
 func (t <type 26>) .reflect.ptrTo () <type 26>
 func (t <esc:0x9> <type 26>) Implements (u <type 11>) <type -15>
 func (t <esc:0x9> <type 26>) AssignableTo (u <esc:0x9> <type 11>) <type -15>
 func (t <esc:0x9> <type 26>) ConvertibleTo (u <esc:0x9> <type 11>) <type -15>
 func (t <esc:0x1> <type 26>) Comparable () <type -15>
type 26 *<type 25>
type 27 [] <type 28>
type 28 ".reflect.method" <type 29>
type 29 struct { .reflect.name <type 30>; .reflect.pkgPath <type 30>; .reflect.mtyp <type 26>; .reflect.typ <type 26>; .reflect.tfn <type 16>; }
type 30 *<type -16>
type 31 [] <type -11>
type 32 (? <type -16>) <type -15>
type 33 struct { .reflect.size <type -13>; .reflect.ptrdata <type -13>; .reflect.hash <type -7>; .reflect.kind <type -5>; .reflect.align <type -1>; .reflect.fieldAlign <type -5>; .reflect._ <type -5>; .reflect.hashfn <type 34>; .reflect.equalfn <type 35>; .reflect.gcdata <type 36>; .reflect.string <type 30>; ? <type 37>; .reflect.ptrToThis <type 26>; }
type 34 (? <type 16>, ? <type -13>) <type -13>
type 35 (? <type 16>, ? <type 16>) <type -15>
type 36 *<type -20>
type 37 *<type 38>
type 38 ".reflect.uncommonType" <type 39>
 func (t <esc:0x12> <type 37>) .reflect.uncommon () ($ret11 <type 37>) <inl:196>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/reflect/type.go:460
  { //461
   $ret11 = t //461
   return //461
  } //0
 func (t <esc:0x32> <type 37>) PkgPath () <type -16>
 func (t <esc:0x32> <type 37>) Name () <type -16>
 func (t <type 37>) .reflect.exportedMethods () <type 27>
type 39 struct { .reflect.name <type 30>; .reflect.pkgPath <type 30>; .reflect.methods <type 27>; }
type 40 [] <type 26>
type 41 (? <type 14>) <type 14>
type 42 [] <type 11>
type 43 struct { .reflect.m <type 12>; .reflect.it <type 16>; }
type 44 *<type 3>
type 45 struct { Name <type -16>; PkgPath <type -16>; Type <type 11>; Func <type 12>; Index <type -11>; }
type 46 [] <type 5>
type 47 struct { Dir <type 6>; Chan <type 12>; Send <type 12>; }
type 48 struct { Data <type -13>; Len <type -11>; Cap <type -11>; }
type 49 struct { Data <type -13>; Len <type -11>; }
type 50 struct { Name <type -16>; PkgPath <type -16>; Type <type 11>; Tag <type 10>; Offset <type -13>; Index <type 31>; Anonymous <type -15>; }
type 51 [] <type 9>
type 52 (i <type -11>, j <type -11>)
type 53 interface { Align () <type -11>; AssignableTo (u <type 11>) <type -15>; Bits () <type -11>; ChanDir () <type 1>; Comparable () <type -15>; ConvertibleTo (u <type 11>) <type -15>; Elem () <type 11>; Field (i <type -11>) <type 9>; FieldAlign () <type -11>; FieldByIndex (index <type 31>) <type 9>; FieldByName (name <type -16>) (? <type 9>, ? <type -15>); FieldByNameFunc (match <type 32>) (? <type 9>, ? <type -15>); Implements (u <type 11>) <type -15>; In (i <type -11>) <type 11>; IsVariadic () <type -15>; Key () <type 11>; Kind () <type 2>; Len () <type -11>; Method (? <type -11>) <type 4>; MethodByName (? <type -16>) (? <type 4>, ? <type -15>); Name () <type -16>; NumField () <type -11>; NumIn () <type -11>; NumMethod () <type -11>; NumOut () <type -11>; Out (i <type -11>) <type 11>; PkgPath () <type -16>; Size () <type -13>; String () <type -16>; .reflect.common () <type 26>; .reflect.rawString () <type -16>; .reflect.uncommon () <type 37>; }
type 54 struct { .reflect.typ <type 26>; .reflect.ptr <type 16>; ? <type 55>; }
type 55 ".reflect.flag" <type -13>
 func (f <type 55>) .reflect.kind () <type 2>
 func (f <type 55>) .reflect.ro () <type 55>
 func (f <type 55>) .reflect.mustBe (expected <type 2>)
 func (f <type 55>) .reflect.mustBeExported ()
 func (f <type 55>) .reflect.mustBeAssignable ()
type 56 [] <type -20>
type 57 [] <type -21>
type 58 [2 ] <type -13>
type 59 struct { Method <type -16>; Kind <type 2>; }
type 60 *<type 13>
func Append (s <type 12>, x <esc:0x9> ...<type 12>) <type 12>
func AppendSlice (s <type 12>, t <type 12>) <type 12>
const Array <type 2> = 17 
func ArrayOf (count <type -11>, elem <type 11>) <type 11>
const Bool <type 2> = 1 
const BothDir <type 1> = 3 
const Chan <type 2> = 18 
func ChanOf (dir <type 1>, t <type 11>) <type 11>
const Complex128 <type 2> = 16 
const Complex64 <type 2> = 15 
func Copy (dst <type 12>, src <type 12>) <type -11>
func DeepEqual (x <type 15>, y <type 15>) <type -15>
func FFICallbackGo (results <esc:0x1> <type 16>, params <esc:0x1> <type 16>, impl <esc:0x9> <type 18>)
const Float32 <type 2> = 13 
const Float64 <type 2> = 14 
const Func <type 2> = 19 
func FuncOf (in <esc:0x9> <type 42>, out <esc:0x9> <type 42>, variadic <type -15>) <type 11>
func Indirect (v <esc:0x1a> <type 12>) <type 12>
const Int <type 2> = 2 
const Int16 <type 2> = 4 
const Int32 <type 2> = 5 
const Int64 <type 2> = 6 
const Int8 <type 2> = 3 
const Interface <type 2> = 20 
const Invalid <type 2> = 0 
func MakeChan (typ <type 11>, buffer <type -11>) <type 12>
func MakeFunc (typ <type 11>, fn <type 41>) <type 12>
func MakeMap (typ <type 11>) <type 12>
func MakeMapWithSize (typ <type 11>, n <type -11>) <type 12>
func MakeSlice (typ <type 11>, len <type -11>, cap <type -11>) <type 12>
const Map <type 2> = 21 
func MapOf (key <type 11>, elem <type 11>) <type 11>
func New (typ <type 11>) <type 12>
func NewAt (typ <type 11>, p <esc:0x12> <type 16>) <type 12>
const Ptr <type 2> = 22 
func PtrTo (t <type 11>) <type 11>
const RecvDir <type 1> = 1 
func Select (cases <esc:0x9> <type 46>) (chosen <type -11>, recv <type 12>, recvOK <type -15>)
const SelectDefault <type 6> = 3 
const SelectRecv <type 6> = 2 
const SelectSend <type 6> = 1 
const SendDir <type 1> = 2 
const Slice <type 2> = 23 
func SliceOf (t <type 11>) <type 11>
const String <type 2> = 24 
const Struct <type 2> = 25 
func StructOf (fields <esc:0x9> <type 51>) <type 11>
func Swapper (slice <type 15>) <type 52>
func TypeOf (i <type 15>) <type 11>
const Uint <type 2> = 7 
const Uint16 <type 2> = 9 
const Uint32 <type 2> = 10 
const Uint64 <type 2> = 11 
const Uint8 <type 2> = 8 
const Uintptr <type 2> = 12 
const UnsafePointer <type 2> = 26 
func ValueOf (i <type 15>) <type 12>
func Zero (typ <type 11>) <type 12>
checksum C5AC5E99C3C1B7A0C56CC2066B3463618FC6ED04
v3;
package regexp
pkgpath regexp
import bytes bytes "bytes"
import io io "io"
import syntax regexp/syntax "regexp/syntax"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
init regexp regexp..import bytes bytes..import cpu internal..z2fcpu..import io io..import reflect reflect..import syntax regexp..z2fsyntax..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 1 2 1 3 1 6 1 7 1 9 1 10 3 2 3 6 3 7 3 9 4 2 4 6 4 7 4 8 4 9 4 10 5 2 5 3 5 4 5 6 5 7 5 8 5 9 5 10 6 2 6 7 8 2 8 6 8 7 9 2 9 6 9 7
types 69 2 3858 17 21 32 82 447 17 297 41 19 381 82 79 22 72 21 19 40 72 21 40 48 21 22 19 345 171 22 21 32 89 410 19 34 268 96 96 446 19 41 447 19 43 447 19 89 19 667 19 35 66 19 34 70 21 34 62 19 210 21 34 45 30 22 20 21 21 21
type 1 "Regexp" <type 6>
 func (re <esc:0x1> <type 2>) .regexp.tryBacktrack (b <esc:0x9> <type 25>, i <type 34>, pc <type -7>, pos <type -11>) <type -15>
 func (re <type 2>) .regexp.backtrack (ib <type 3>, is <type -16>, pos <type -11>, ncap <type -11>, dstCap <esc:0x12> <type 28>) <type 28>
 func (re <type 2>) .regexp.doOnePass (ir <type 4>, ib <type 3>, is <type -16>, pos <type -11>, ncap <type -11>, dstCap <esc:0x12> <type 28>) <type 28>
 func (re <type 2>) .regexp.doMatch (r <type 4>, b <type 3>, s <type -16>) <type -15>
 func (re <type 2>) .regexp.doExecute (r <type 4>, b <type 3>, s <type -16>, pos <type -11>, ncap <type -11>, dstCap <esc:0x12> <type 28>) <type 28>
 func (re <esc:0x22> <type 2>) String () <type -16>
 func (re <esc:0xa> <type 2>) Copy () <type 2>
 func (re <esc:0x1> <type 2>) Longest ()
 func (re <type 2>) .regexp.get () <type 47>
 func (re <esc:0x1> <type 2>) .regexp.put (m <type 47>)
 func (re <esc:0x1> <type 2>) NumSubexp () <type -11>
 func (re <esc:0x22> <type 2>) SubexpNames () <type 24>
 func (re <esc:0x22> <type 2>) LiteralPrefix () (prefix <type -16>, complete <type -15>)
 func (re <type 2>) MatchReader (r <type 4>) <type -15>
 func (re <type 2>) MatchString (s <type -16>) <type -15>
 func (re <type 2>) Match (b <type 3>) <type -15>
 func (re <type 2>) ReplaceAllString (src <type -16>, repl <type -16>) <type -16>
 func (re <type 2>) ReplaceAllLiteralString (src <type -16>, repl <type -16>) <type -16>
 func (re <type 2>) ReplaceAllStringFunc (src <type -16>, repl <type 61>) <type -16>
 func (re <type 2>) .regexp.replaceAll (bsrc <type 3>, src <type -16>, nmatch <type -11>, repl <esc:0x2a> <type 62>) <type 3>
 func (re <type 2>) ReplaceAll (src <type 3>, repl <type 3>) <type 3>
 func (re <type 2>) ReplaceAllLiteral (src <type 3>, repl <type 3>) <type 3>
 func (re <type 2>) ReplaceAllFunc (src <type 3>, repl <type 63>) <type 3>
 func (re <esc:0x1> <type 2>) .regexp.pad (a <esc:0x12> <type 28>) <type 28>
 func (re <type 2>) .regexp.allMatches (s <type -16>, b <type 3>, n <type -11>, deliver <esc:0x1> <type 64>)
 func (re <type 2>) Find (b <type 3>) <type 3>
 func (re <type 2>) FindIndex (b <type 3>) (loc <type 28>)
 func (re <type 2>) FindString (s <type -16>) <type -16>
 func (re <type 2>) FindStringIndex (s <type -16>) (loc <type 28>)
 func (re <type 2>) FindReaderIndex (r <type 4>) (loc <type 28>)
 func (re <type 2>) FindSubmatch (b <type 3>) <type 65>
 func (re <esc:0x1> <type 2>) Expand (dst <esc:0x12> <type 3>, template <esc:0x1> <type 3>, src <esc:0x1> <type 3>, match <esc:0x1> <type 28>) <type 3>
 func (re <esc:0x1> <type 2>) ExpandString (dst <esc:0x12> <type 3>, template <esc:0x1> <type -16>, src <esc:0x1> <type -16>, match <esc:0x1> <type 28>) <type 3>
 func (re <esc:0x1> <type 2>) .regexp.expand (dst <esc:0x12> <type 3>, template <esc:0x1> <type -16>, bsrc <esc:0x1> <type 3>, src <esc:0x1> <type -16>, match <esc:0x1> <type 28>) <type 3>
 func (re <type 2>) FindSubmatchIndex (b <type 3>) <type 28>
 func (re <type 2>) FindStringSubmatch (s <type -16>) <type 24>
 func (re <type 2>) FindStringSubmatchIndex (s <type -16>) <type 28>
 func (re <type 2>) FindReaderSubmatchIndex (r <type 4>) <type 28>
 func (re <type 2>) FindAll (b <type 3>, n <type -11>) <type 65>
 func (re <type 2>) FindAllIndex (b <type 3>, n <type -11>) <type 66>
 func (re <type 2>) FindAllString (s <type -16>, n <type -11>) <type 24>
 func (re <type 2>) FindAllStringIndex (s <type -16>, n <type -11>) <type 66>
 func (re <type 2>) FindAllSubmatch (b <type 3>, n <type -11>) <type 67>
 func (re <type 2>) FindAllSubmatchIndex (b <type 3>, n <type -11>) <type 66>
 func (re <type 2>) FindAllStringSubmatch (s <type -16>, n <type -11>) <type 68>
 func (re <type 2>) FindAllStringSubmatchIndex (s <type -16>, n <type -11>) <type 66>
 func (re <type 2>) Split (s <type -16>, n <type -11>) <type 24>
type 2 *<type 1>
type 3 [] <type -20>
type 4 "io.RuneReader" <type 5>
type 5 interface { ReadRune () (r <type -21>, size <type -11>, err <type -19>); }
type 6 struct { .regexp.expr <type -16>; .regexp.prog <type 7>; .regexp.onepass <type 17>; .regexp.numSubexp <type -11>; .regexp.maxBitStateLen <type -11>; .regexp.subexpNames <type 24>; .regexp.prefix <type -16>; .regexp.prefixBytes <type 3>; .regexp.prefixRune <type -21>; .regexp.prefixEnd <type -7>; .regexp.mpool <type -11>; .regexp.matchcap <type -11>; .regexp.prefixComplete <type -15>; .regexp.cond <type 9>; .regexp.longest <type -15>; }
type 7 *<type 8>
type 8 "regexp/syntax.Prog" <type 15>
 func (p <esc:0x1> <type 7>) StartCond () <type 9>
 func (p <esc:0x1> <type 7>) Prefix () (prefix <type -16>, complete <type -15>)
 func (p <esc:0x22> <type 7>) .regexp/syntax.skipNop (pc <type -7>) <type 10>
 func (p <esc:0x1> <type 7>) String () <type -16>
type 9 "regexp/syntax.EmptyOp" <type -5>
type 10 *<type 11>
type 11 "regexp/syntax.Inst" <type 13>
 func (i <esc:0x1> <type 10>) String () <type -16>
 func (i <esc:0x1> <type 10>) MatchEmptyWidth (before <type -21>, after <type -21>) <type -15>
 func (i <esc:0x1> <type 10>) MatchRunePos (r <type -21>) <type -11>
 func (i <esc:0x1> <type 10>) MatchRune (r <type -21>) <type -15>
 func (i <esc:0x1> <type 10>) .regexp/syntax.op () <type 12>
type 12 "regexp/syntax.InstOp" <type -5>
 func (i <type 12>) String () <type -16>
type 13 struct { Op <type 12>; Out <type -7>; Arg <type -7>; Rune <type 14>; }
type 14 [] <type -21>
type 15 struct { Inst <type 16>; Start <type -11>; NumCap <type -11>; }
type 16 [] <type 11>
type 17 *<type 18>
type 18 ".regexp.onePassProg" <type 19>
type 19 struct { Inst <type 20>; Start <type -11>; NumCap <type -11>; }
type 20 [] <type 21>
type 21 ".regexp.onePassInst" <type 22>
type 22 struct { ? <type 11>; Next <type 23>; }
type 23 [] <type -7>
type 24 [] <type -16>
type 25 *<type 26>
type 26 ".regexp.bitState" <type 27>
 func (b <esc:0x1> <type 25>) .regexp.reset (prog <esc:0x1> <type 7>, end <type -11>, ncap <type -11>)
 func (b <esc:0x1> <type 25>) .regexp.shouldVisit (pc <type -7>, pos <type -11>) <type -15>
 func (b <esc:0x9> <type 25>) .regexp.push (re <esc:0x1> <type 2>, pc <type -7>, pos <type -11>, arg <type -15>)
type 27 struct { .regexp.end <type -11>; .regexp.cap <type 28>; .regexp.matchcap <type 28>; .regexp.jobs <type 29>; .regexp.visited <type 23>; .regexp.inputs <type 32>; }
type 28 [] <type -11>
type 29 [] <type 30>
type 30 ".regexp.job" <type 31>
type 31 struct { .regexp.pc <type -7>; .regexp.arg <type -15>; .regexp.pos <type -11>; }
type 32 ".regexp.inputs" <type 37>
 func (i <esc:0x12> <type 33>) .regexp.newBytes (b <type 3>) <type 34>
 func (i <esc:0x12> <type 33>) .regexp.newString (s <type -16>) <type 34>
 func (i <esc:0x12> <type 33>) .regexp.newReader (r <type 4>) <type 34>
 func (i <esc:0x1> <type 33>) .regexp.clear ()
 func (i <esc:0x12> <type 33>) .regexp.init (r <type 4>, b <type 3>, s <type -16>) (? <type 34>, ? <type -11>)
type 33 *<type 32>
type 34 ".regexp.input" <type 35>
type 35 interface { .regexp.canCheckPrefix () <type -15>; .regexp.context (pos <type -11>) <type 36>; .regexp.hasPrefix (re <type 2>) <type -15>; .regexp.index (re <type 2>, pos <type -11>) <type -11>; .regexp.step (pos <type -11>) (r <type -21>, width <type -11>); }
type 36 ".regexp.lazyFlag" <type -8>
 func (f <type 36>) .regexp.match (op <type 9>) <type -15>
type 37 struct { .regexp.bytes <type 38>; .regexp.string <type 41>; .regexp.reader <type 44>; }
type 38 ".regexp.inputBytes" <type 40>
 func (i <esc:0x1> <type 39>) .regexp.step (pos <type -11>) (? <type -21>, ? <type -11>)
 func (i <esc:0x1> <type 39>) .regexp.canCheckPrefix () <type -15>
 func (i <esc:0x1> <type 39>) .regexp.hasPrefix (re <esc:0x1> <type 2>) <type -15>
 func (i <esc:0x1> <type 39>) .regexp.index (re <esc:0x1> <type 2>, pos <type -11>) <type -11>
 func (i <esc:0x1> <type 39>) .regexp.context (pos <type -11>) <type 36>
type 39 *<type 38>
type 40 struct { .regexp.str <type 3>; }
type 41 ".regexp.inputString" <type 43>
 func (i <esc:0x1> <type 42>) .regexp.step (pos <type -11>) (? <type -21>, ? <type -11>)
 func (i <esc:0x1> <type 42>) .regexp.canCheckPrefix () <type -15>
 func (i <esc:0x1> <type 42>) .regexp.hasPrefix (re <esc:0x1> <type 2>) <type -15>
 func (i <esc:0x1> <type 42>) .regexp.index (re <esc:0x1> <type 2>, pos <type -11>) <type -11>
 func (i <esc:0x1> <type 42>) .regexp.context (pos <type -11>) <type 36>
type 42 *<type 41>
type 43 struct { .regexp.str <type -16>; }
type 44 ".regexp.inputReader" <type 46>
 func (i <esc:0x9> <type 45>) .regexp.step (pos <type -11>) (? <type -21>, ? <type -11>)
 func (i <esc:0x1> <type 45>) .regexp.canCheckPrefix () <type -15>
 func (i <esc:0x1> <type 45>) .regexp.hasPrefix (re <esc:0x1> <type 2>) <type -15>
 func (i <esc:0x1> <type 45>) .regexp.index (re <esc:0x1> <type 2>, pos <type -11>) <type -11>
 func (i <esc:0x1> <type 45>) .regexp.context (pos <type -11>) <type 36>
type 45 *<type 44>
type 46 struct { .regexp.r <type 4>; .regexp.atEOT <type -15>; .regexp.pos <type -11>; }
type 47 *<type 48>
type 48 ".regexp.machine" <type 59>
 func (m <esc:0x1> <type 47>) .regexp.init (ncap <type -11>)
 func (m <esc:0x32> <type 47>) .regexp.alloc (i <type 10>) <type 49>
 func (m <esc:0x9> <type 47>) .regexp.match (i <type 34>, pos <type -11>) <type -15>
 func (m <esc:0x9> <type 47>) .regexp.clear (q <esc:0x9> <type 52>)
 func (m <esc:0x9> <type 47>) .regexp.step (runq <esc:0x9> <type 52>, nextq <esc:0x1> <type 52>, pos <type -11>, nextPos <type -11>, c <type -21>, nextCond <esc:0x1> <type 58>)
 func (m <esc:0x3a> <type 47>) .regexp.add (q <esc:0x1> <type 52>, pc <type -7>, pos <type -11>, cap <esc:0x1> <type 28>, cond <esc:0x1> <type 58>, t <type 49>) <type 49>
type 49 *<type 50>
type 50 ".regexp.thread" <type 51>
type 51 struct { .regexp.inst <type 10>; .regexp.cap <type 28>; }
type 52 *<type 53>
type 53 ".regexp.queue" <type 54>
type 54 struct { .regexp.sparse <type 23>; .regexp.dense <type 55>; }
type 55 [] <type 56>
type 56 ".regexp.entry" <type 57>
type 57 struct { .regexp.pc <type -7>; .regexp.t <type 49>; }
type 58 *<type 36>
type 59 struct { .regexp.re <type 2>; .regexp.p <type 7>; .regexp.q0 <type 53>; .regexp.q1 <type 53>; .regexp.pool <type 60>; .regexp.matched <type -15>; .regexp.matchcap <type 28>; .regexp.inputs <type 32>; }
type 60 [] <type 49>
type 61 (? <type -16>) <type -16>
type 62 (dst <type 3>, m <type 28>) <type 3>
type 63 (? <type 3>) <type 3>
type 64 (? <type 28>)
type 65 [] <type 3>
type 66 [] <type 28>
type 67 [] <type 65>
type 68 [] <type 24>
func Compile (expr <type -16>) (? <type 2>, ? <type -19>)
func CompilePOSIX (expr <type -16>) (? <type 2>, ? <type -19>)
func Match (pattern <type -16>, b <type 3>) (matched <type -15>, err <type -19>)
func MatchReader (pattern <type -16>, r <type 4>) (matched <type -15>, err <type -19>)
func MatchString (pattern <type -16>, s <type -16>) (matched <type -15>, err <type -19>)
func MustCompile (str <type -16>) <type 2>
func MustCompilePOSIX (str <type -16>) <type 2>
func QuoteMeta (s <esc:0x12> <type -16>) <type -16>
checksum 865D48EFD7C84336083DF2B59DFBD6690CC00289
v3;
package syntax
pkgpath regexp/syntax
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
init syntax regexp..z2fsyntax..import cpu internal..z2fcpu..import io io..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 2 1 2 4 2 5 2 7 3 1 3 4 3 5 3 6 3 7 3 8 4 1 4 5 6 1 6 4 6 5 7 1 7 4 7 5
types 24 10 27 75 321 25 365 66 62 287 380 18 18 51 18 78 22 18 72 20 177 21 23 24 22
type 1 "EmptyOp" <type -5>
type 2 "Error" <type 12>
 func (e <esc:0x1> <type 13>) Error () <type -16>
type 3 "ErrorCode" <type -16>
 func (e <esc:0x12> <type 3>) String () ($ret18 <type -16>) <inl:221>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/regexp/syntax/parse.go:48
  { //49
   $ret18 = $convert(<type -16>, e) //49
   return //49
  } //0
type 4 "Flags" <type -6>
type 5 "Inst" <type 14>
 func (i <esc:0x1> <type 16>) .regexp/syntax.op () <type 6>
 func (i <esc:0x1> <type 16>) MatchRune (r <type -21>) <type -15>
 func (i <esc:0x1> <type 16>) MatchRunePos (r <type -21>) <type -11>
 func (i <esc:0x1> <type 16>) MatchEmptyWidth (before <type -21>, after <type -21>) <type -15>
 func (i <esc:0x1> <type 16>) String () <type -16>
type 6 "InstOp" <type -5>
 func (i <type 6>) String () <type -16>
type 7 "Op" <type -5>
 func (i <type 7>) String () <type -16>
type 8 "Prog" <type 17>
 func (p <esc:0x1> <type 11>) String () <type -16>
 func (p <esc:0x22> <type 11>) .regexp/syntax.skipNop (pc <type -7>) <type 16>
 func (p <esc:0x1> <type 11>) Prefix () (prefix <type -16>, complete <type -15>)
 func (p <esc:0x1> <type 11>) StartCond () <type 1>
type 9 "Regexp" <type 19>
 func (x <esc:0x1> <type 10>) Equal (y <esc:0x1> <type 10>) <type -15>
 func (re <esc:0x1> <type 10>) String () <type -16>
 func (re <esc:0x1> <type 10>) MaxCap () <type -11>
 func (re <esc:0x9> <type 10>) CapNames () <type 23>
 func (re <esc:0x9> <type 10>) .regexp/syntax.capNames (names <esc:0x1> <type 23>)
 func (re <type 10>) Simplify () <type 10>
type 10 *<type 9>
type 11 *<type 8>
type 12 struct { Code <type 3>; Expr <type -16>; }
type 13 *<type 2>
type 14 struct { Op <type 6>; Out <type -7>; Arg <type -7>; Rune <type 15>; }
type 15 [] <type -21>
type 16 *<type 5>
type 17 struct { Inst <type 18>; Start <type -11>; NumCap <type -11>; }
type 18 [] <type 5>
type 19 struct { Op <type 7>; Flags <type 4>; Sub <type 20>; Sub0 <type 21>; Rune <type 15>; Rune0 <type 22>; Min <type -11>; Max <type -11>; Cap <type -11>; Name <type -16>; }
type 20 [] <type 10>
type 21 [1 ] <type 10>
type 22 [2 ] <type -21>
type 23 [] <type -16>
const ClassNL <type 4> = 4 
func Compile (re <esc:0x9> <type 10>) (? <type 11>, ? <type -19>)
const DotNL <type 4> = 8 
const EmptyBeginLine <type 1> = 1 
const EmptyBeginText <type 1> = 4 
const EmptyEndLine <type 1> = 2 
const EmptyEndText <type 1> = 8 
const EmptyNoWordBoundary <type 1> = 32 
func EmptyOpContext (r1 <type -21>, r2 <type -21>) <type 1>
const EmptyWordBoundary <type 1> = 16 
const ErrInternalError <type 3> = "regexp/syntax: internal error"
const ErrInvalidCharClass <type 3> = "invalid character class"
const ErrInvalidCharRange <type 3> = "invalid character class range"
const ErrInvalidEscape <type 3> = "invalid escape sequence"
const ErrInvalidNamedCapture <type 3> = "invalid named capture"
const ErrInvalidPerlOp <type 3> = "invalid or unsupported Perl syntax"
const ErrInvalidRepeatOp <type 3> = "invalid nested repetition operator"
const ErrInvalidRepeatSize <type 3> = "invalid repeat count"
const ErrInvalidUTF8 <type 3> = "invalid UTF-8"
const ErrMissingBracket <type 3> = "missing closing ]"
const ErrMissingParen <type 3> = "missing closing )"
const ErrMissingRepeatArgument <type 3> = "missing argument to repetition operator"
const ErrTrailingBackslash <type 3> = "trailing backslash at end of expression"
const ErrUnexpectedParen <type 3> = "unexpected )"
const FoldCase <type 4> = 1 
const InstAlt <type 6> = 0 
const InstAltMatch <type 6> = 1 
const InstCapture <type 6> = 2 
const InstEmptyWidth <type 6> = 3 
const InstFail <type 6> = 5 
const InstMatch <type 6> = 4 
const InstNop <type 6> = 6 
const InstRune <type 6> = 7 
const InstRune1 <type 6> = 8 
const InstRuneAny <type 6> = 9 
const InstRuneAnyNotNL <type 6> = 10 
func IsWordChar (r <type -21>) <type -15>
const Literal <type 4> = 2 
const MatchNL <type 4> = 12 
const NonGreedy <type 4> = 32 
const OneLine <type 4> = 16 
const OpAlternate <type 7> = 19 
const OpAnyChar <type 7> = 6 
const OpAnyCharNotNL <type 7> = 5 
const OpBeginLine <type 7> = 7 
const OpBeginText <type 7> = 9 
const OpCapture <type 7> = 13 
const OpCharClass <type 7> = 4 
const OpConcat <type 7> = 18 
const OpEmptyMatch <type 7> = 2 
const OpEndLine <type 7> = 8 
const OpEndText <type 7> = 10 
const OpLiteral <type 7> = 3 
const OpNoMatch <type 7> = 1 
const OpNoWordBoundary <type 7> = 12 
const OpPlus <type 7> = 15 
const OpQuest <type 7> = 16 
const OpRepeat <type 7> = 17 
const OpStar <type 7> = 14 
const OpWordBoundary <type 7> = 11 
const POSIX <type 4> = 0 
func Parse (s <type -16>, flags <type 4>) (? <type 10>, ? <type -19>)
const Perl <type 4> = 212 
const PerlX <type 4> = 64 
const Simple <type 4> = 512 
const UnicodeGroups <type 4> = 128 
const WasDollar <type 4> = 256 
checksum 3A4E97CA7192A6F2336564EE371344DAE84D2F20
v3;
package runtime
pkgpath runtime
import bytealg internal/bytealg "internal/bytealg"
import cpu internal/cpu "internal/cpu"
import atomic runtime/internal/atomic "runtime/internal/atomic"
import math runtime/internal/math "runtime/internal/math"
import sys runtime/internal/sys "runtime/internal/sys"
import unsafe unsafe "unsafe"
init runtime runtime..import cpu internal..z2fcpu..import sys runtime..z2finternal..z2fsys..import
init_graph 0 1 0 2
types 52 10 38 25 25 99 214 196 28 81 286 20 66 22 22 18 53 36 123 18 104 72 20 22 20 127 25 18 668 25 24 71 19 18 37 18 143 19 158 356 47 35 13 46 20 20 19 42 100 21 36 145 18
type 1 "BlockProfileRecord" <type 11>
type 2 "Error" <type 15>
type 3 "Frame" <type 17>
type 4 "Frames" <type 19>
 func (ci <esc:0x1> <type 14>) Next () (frame <type 3>, more <type -15>)
type 5 "Func" <type 20>
 func (f <esc:0x22> <type 18>) Name () <type -16>
 func (f <esc:0x1> <type 18>) Entry () <type -13>
 func (f <esc:0x1> <type 18>) FileLine (pc <type -13>) (file <type -16>, line <type -11>)
type 6 "MemProfileRecord" <type 24>
 func (r <esc:0x1> <type 26>) InUseBytes () <type -4>
 func (r <esc:0x1> <type 26>) InUseObjects () <type -4>
 func (r <esc:0x12> <type 26>) Stack () <type 13>
type 7 "MemStats" <type 27>
type 8 "StackRecord" <type 33>
 func (r <esc:0x12> <type 34>) Stack () <type 13>
type 9 "TypeAssertionError" <type 35>
 func (? <esc:0x1> <type 51>) RuntimeError () <inl:142>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/runtime/error.go:28
 func (e <esc:0x1> <type 51>) Error () <type -16>
type 10 [] <type 1>
type 11 struct { Count <type -4>; Cycles <type -4>; ? <type 8>; }
type 12 [] <type -20>
type 13 [] <type -13>
type 14 *<type 4>
type 15 interface { ? <type -19>; RuntimeError (); }
type 16 map [<type -16>] <type -15>
type 17 struct { PC <type -13>; Func <type 18>; Function <type -16>; File <type -16>; Line <type -11>; Entry <type -13>; }
type 18 *<type 5>
type 19 struct { .runtime.callers <type 13>; .runtime.last <type -13>; .runtime.lastCount <type -11>; }
type 20 struct { .runtime.name <type -16>; .runtime.entry <type -13>; }
type 21 [] <type 8>
type 22 interface { }
type 23 [] <type 6>
type 24 struct { AllocBytes <type -4>; FreeBytes <type -4>; AllocObjects <type -4>; FreeObjects <type -4>; Stack0 <type 25>; }
type 25 [32 ] <type -13>
type 26 *<type 6>
type 27 struct { Alloc <type -8>; TotalAlloc <type -8>; Sys <type -8>; Lookups <type -8>; Mallocs <type -8>; Frees <type -8>; HeapAlloc <type -8>; HeapSys <type -8>; HeapIdle <type -8>; HeapInuse <type -8>; HeapReleased <type -8>; HeapObjects <type -8>; StackInuse <type -8>; StackSys <type -8>; MSpanInuse <type -8>; MSpanSys <type -8>; MCacheInuse <type -8>; MCacheSys <type -8>; BuckHashSys <type -8>; GCSys <type -8>; OtherSys <type -8>; NextGC <type -8>; LastGC <type -8>; PauseTotalNs <type -8>; PauseNs <type 28>; PauseEnd <type 28>; NumGC <type -7>; NumForcedGC <type -7>; GCCPUFraction <type -10>; EnableGC <type -15>; DebugGC <type -15>; BySize <type 29>; }
type 28 [256 ] <type -8>
type 29 [61 ] <type 30>
type 30 struct { Size <type -7>; Mallocs <type -8>; Frees <type -8>; }
type 31 *<type 22>
type 32 *<type 7>
type 33 struct { Stack0 <type 25>; }
type 34 *<type 8>
type 35 struct { .runtime._interface <type 36>; .runtime.concrete <type 36>; .runtime.asserted <type 36>; .runtime.missingMethod <type -16>; }
type 36 *<type 37>
type 37 ".runtime._type" <type 38>
 func (t <esc:0x32> <type 36>) .runtime.string () <type -16>
 func (t <esc:0x42> <type 36>) .runtime.pkgpath () <type -16>
type 38 struct { .runtime.size <type -13>; .runtime.ptrdata <type -13>; .runtime.hash <type -7>; .runtime.kind <type -5>; .runtime.align <type -1>; .runtime.fieldAlign <type -5>; .runtime._ <type -5>; .runtime.hashfn <type 39>; .runtime.equalfn <type 42>; .runtime.gcdata <type 43>; .runtime._string <type 44>; ? <type 45>; .runtime.ptrToThis <type 36>; }
type 39 (? <type 40>, ? <type -13>) <type -13>
type 40 "unsafe.Pointer" <type 41>
type 41 *any
type 42 (? <type 40>, ? <type 40>) <type -15>
type 43 *<type -20>
type 44 *<type -16>
type 45 *<type 46>
type 46 ".runtime.uncommontype" <type 47>
type 47 struct { .runtime.name <type 44>; .runtime.pkgPath <type 44>; .runtime.methods <type 48>; }
type 48 [] <type 49>
type 49 ".runtime.method" <type 50>
type 50 struct { .runtime.name <type 44>; .runtime.pkgPath <type 44>; .runtime.mtyp <type 36>; .runtime.typ <type 36>; .runtime.tfn <type 40>; }
type 51 *<type 9>
func BlockProfile (p <esc:0x1> <type 10>) (n <type -11>, ok <type -15>)
func Breakpoint ()
func CPUProfile () <type 12>
func Caller (skip <type -11>) (pc <type -13>, file <type -16>, line <type -11>, ok <type -15>)
func Callers (skip <type -11>, pc <type 13>) <type -11>
func CallersFrames (callers <type 13>) <type 14>
func Cgocall ()
func CgocallBack ()
func CgocallBackDone ()
func CgocallDone ()
const Compiler = "gccgo"
func Fieldtrack (? <type 16>)
func FuncForPC (pc <type -13>) <type 18>
func GC ()
const GCCGOTOOLDIR <type -16> = "/home/arreguin/x-tools/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/libexec/gcc/riscv64-c07-linux-gnu/9.5.0"
const GOARCH <type -16> = "riscv64"
func GOMAXPROCS (n <type -11>) <type -11>
const GOOS <type -16> = "linux"
func GOROOT () <type -16>
func Goexit ()
func GoroutineProfile (p <esc:0x1> <type 21>) (n <type -11>, ok <type -15>)
func Gosched ()
func KeepAlive (x <esc:0x1> <type 22>)
func LockOSThread ()
func MemProfile (p <esc:0x1> <type 23>, inuseZero <type -15>) (n <type -11>, ok <type -15>)
var MemProfileRate <type -11>
func MutexProfile (p <esc:0x1> <type 10>) (n <type -11>, ok <type -15>)
func NewErrorCString (s <type -13>, ret <esc:0x1> <type 31>)
func NumCPU () <type -11>
func NumCgoCall () <type -4>
func NumGoroutine () <type -11>
func ReadMemStats (m <esc:0x1> <type 32>)
func ReadTrace () <type 12>
func SetBlockProfileRate (rate <type -11>)
func SetCPUProfileRate (hz <type -11>)
func SetFinalizer (obj <type 22>, finalizer <type 22>)
func SetMutexProfileFraction (rate <type -11>) <type -11>
func Stack (buf <type 12>, all <type -15>) <type -11>
func StartTrace () <type -19>
func StopTrace ()
func ThreadCreateProfile (p <esc:0x1> <type 21>) (n <type -11>, ok <type -15>)
func UnlockOSThread ()
func Version () <type -16>
checksum 18DA58B5C694B77BE6D6B5837D11510EDA69B596
v3;
package debug
pkgpath runtime/debug
import os os "os"
import runtime runtime "runtime"
import sort sort "sort"
import strings strings "strings"
import time time "time"
import unsafe unsafe "unsafe"
init debug runtime..z2fdebug..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 2 1 2 4 2 7 2 8 2 10 2 11 2 12 4 1 4 7 4 8 4 10 5 1 5 2 5 3 5 4 5 7 5 8 5 10 5 11 5 12 6 1 6 7 6 8 6 9 6 10 6 13 7 1 7 8 9 1 9 7 9 8 10 1 10 7 10 8 11 1 11 7 11 8 11 10 12 1 12 7 12 8 12 10 12 11
types 30 4 28 26 26 65 19 17 136 3256 344 18 22 73 19 525 165 21 31 91 21 36 112 19 75 83 20 20 90 18 18
type 1 "BuildInfo" <type 4>
type 2 "GCStats" <type 7>
type 3 "Module" <type 27>
type 4 struct { Path <type -16>; Main <type 3>; Deps <type 5>; }
type 5 [] <type 6>
type 6 *<type 3>
type 7 struct { LastGC <type 8>; NumGC <type -4>; PauseTotal <type 9>; Pause <type 25>; PauseEnd <type 26>; PauseQuantiles <type 25>; }
type 8 "time.Time" <type 24>
 func (t <esc:0x12> <type 8>) Round (d <type 9>) <type 8>
 func (t <esc:0x12> <type 8>) Truncate (d <type 9>) <type 8>
 func (t <esc:0x1> <type 10>) UnmarshalText (data <esc:0x1> <type 11>) <type -19>
 func (t <esc:0x1> <type 10>) UnmarshalBinary (data <esc:0x1> <type 11>) <type -19>
 func (t <esc:0x12> <type 8>) Local () <type 8>
 func (t <esc:0x1> <type 8>) MarshalJSON () (? <type 11>, ? <type -19>)
 func (t <esc:0x1> <type 8>) .time.date (full <type -15>) (year <type -11>, month <type 12>, day <type -11>, yday <type -11>)
 func (t <type 8>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 8>
 func (t <esc:0x1> <type 10>) .time.mono () <type -4>
 func (t <esc:0x1> <type 8>) MarshalText () (? <type 11>, ? <type -19>)
 func (t <esc:0x1> <type 10>) .time.stripMono ()
 func (t <esc:0x32> <type 8>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 10>) .time.setLoc (loc <type 13>)
 func (t <esc:0x1> <type 10>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 10>) GobDecode (data <esc:0x1> <type 11>) <type -19>
 func (t <esc:0x1> <type 8>) UnixNano () <type -4>
 func (t <esc:0x1> <type 8>) After (u <esc:0x1> <type 8>) <type -15>
 func (t <esc:0x1> <type 8>) MarshalBinary () (? <type 11>, ? <type -19>)
 func (t <esc:0x1> <type 8>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 10>) .time.sec () <type -4>
 func (t <esc:0x1> <type 8>) Before (u <esc:0x1> <type 8>) <type -15>
 func (t <esc:0x1> <type 10>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 10>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 8>) Minute () <type -11>
 func (t <esc:0x1> <type 8>) AppendFormat (b <esc:0x12> <type 11>, layout <esc:0x1> <type -16>) <type 11>
 func (t <esc:0x1> <type 8>) Day () <type -11>
 func (t <esc:0x12> <type 8>) Add (d <type 9>) <type 8>
 func (t <esc:0x1> <type 8>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 8>) String () <type -16>
 func (t <esc:0x1> <type 8>) Equal (u <esc:0x1> <type 8>) <type -15>
 func (t <esc:0x1> <type 8>) Sub (u <esc:0x1> <type 8>) <type 9>
 func (t <esc:0x32> <type 8>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x12> <type 8>) In (loc <type 13>) <type 8>
 func (t <esc:0x12> <type 8>) UTC () <type 8>
 func (t <esc:0x1> <type 8>) Nanosecond () <type -11>
 func (t <esc:0x1> <type 8>) IsZero () <type -15>
 func (t <esc:0x1> <type 8>) .time.abs () <type -8>
 func (t <esc:0x1> <type 8>) Hour () <type -11>
 func (t <esc:0x1> <type 8>) Date () (year <type -11>, month <type 12>, day <type -11>)
 func (t <esc:0x1> <type 8>) GobEncode () (? <type 11>, ? <type -19>)
 func (t <esc:0x12> <type 8>) Location () <type 13>
 func (t <esc:0x1> <type 8>) Month () <type 12>
 func (t <esc:0x1> <type 8>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 10>) UnmarshalJSON (data <esc:0x1> <type 11>) <type -19>
 func (t <esc:0x1> <type 10>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 8>) Year () <type -11>
 func (t <esc:0x1> <type 8>) Second () <type -11>
 func (t <esc:0x1> <type 8>) Weekday () <type 23>
 func (t <esc:0x1> <type 8>) Unix () <type -4>
 func (t <esc:0x1> <type 8>) YearDay () <type -11>
type 9 "time.Duration" <type -4>
 func (d <type 9>) Round (m <type 9>) <type 9>
 func (d <type 9>) Truncate (m <type 9>) <type 9>
 func (d <type 9>) Hours () <type -10>
 func (d <type 9>) Minutes () <type -10>
 func (d <type 9>) Seconds () <type -10>
 func (d <type 9>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 9>) String () <type -16>
type 10 *<type 8>
type 11 [] <type -20>
type 12 "time.Month" <type -11>
 func (m <type 12>) String () <type -16>
type 13 *<type 14>
type 14 "time.Location" <type 15>
 func (l <esc:0x1> <type 13>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 13>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 13>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 13>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 13>) String () <type -16>
 func (l <esc:0x12> <type 13>) .time.get () <type 13>
type 15 struct { .time.name <type -16>; .time.zone <type 16>; .time.tx <type 19>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 22>; }
type 16 [] <type 17>
type 17 ".time.zone" <type 18>
type 18 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 19 [] <type 20>
type 20 ".time.zoneTrans" <type 21>
type 21 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 22 *<type 17>
type 23 "time.Weekday" <type -11>
 func (d <type 23>) String () <type -16>
type 24 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 13>; }
type 25 [] <type 9>
type 26 [] <type 8>
type 27 struct { Path <type -16>; Version <type -16>; Sum <type -16>; Replace <type 6>; }
type 28 *<type 1>
type 29 *<type 2>
func FreeOSMemory ()
func PrintStack ()
func ReadBuildInfo () (info <type 28>, ok <type -15>)
func ReadGCStats (stats <type 29>)
func SetGCPercent (percent <type -11>) <type -11>
func SetMaxStack (bytes <type -11>) <type -11>
func SetMaxThreads (threads <type -11>) <type -11>
func SetPanicOnFault (enabled <type -15>) <type -15>
func SetTraceback (level <type -16>)
func Stack () <type 11>
func WriteHeapDump (fd <type -13>)
checksum 48B06A93341B6A2F0C050C3B5F3CDB7849FFF3C1
v3;
package atomic
pkgpath runtime/internal/atomic
import unsafe unsafe "unsafe"
types 10 1 18 18 18 17 33 12 19 18 19
type 1 *<type -5>
type 2 *<type -7>
type 3 *<type -8>
type 4 *<type 5>
type 5 "unsafe.Pointer" <type 6>
type 6 *any
type 7 *<type -13>
type 8 *<type -4>
type 9 *<type -12>
func And8 (ptr <esc:0x1> <type 1>, val <type -5>)
func Cas (ptr <esc:0x1> <type 2>, old <type -7>, new <type -7>) <type -15>
func Cas64 (ptr <esc:0x1> <type 3>, old <type -8>, new <type -8>) <type -15>
func CasRel (ptr <esc:0x1> <type 2>, old <type -7>, new <type -7>) <type -15>
func Casp1 (ptr <type 4>, old <type 5>, new <type 5>) <type -15>
func Casuintptr (ptr <esc:0x1> <type 7>, old <type -13>, new <type -13>) <type -15>
func Load (ptr <esc:0x1> <type 2>) <type -7>
func Load64 (ptr <esc:0x1> <type 3>) <type -8>
func LoadAcq (ptr <esc:0x1> <type 2>) <type -7>
func Loadint64 (ptr <esc:0x1> <type 8>) <type -4>
func Loadp (ptr <esc:0x1> <type 5>) <type 5>
func Loaduint (ptr <esc:0x1> <type 9>) <type -12>
func Loaduintptr (ptr <esc:0x1> <type 7>) <type -13>
func Or8 (ptr <esc:0x1> <type 1>, val <type -5>)
func Store (ptr <esc:0x1> <type 2>, val <type -7>)
func Store64 (ptr <esc:0x1> <type 3>, val <type -8>)
func StoreRel (ptr <esc:0x1> <type 2>, val <type -7>)
func StorepNoWB (ptr <type 5>, val <type 5>)
func Storeuintptr (ptr <esc:0x1> <type 7>, new <type -13>)
func Xadd (ptr <esc:0x1> <type 2>, delta <type -3>) <type -7>
func Xadd64 (ptr <esc:0x1> <type 3>, delta <type -4>) <type -8>
func Xaddint64 (ptr <esc:0x1> <type 8>, delta <type -4>) <type -4>
func Xadduintptr (ptr <esc:0x1> <type 7>, delta <type -13>) <type -13>
func Xchg (ptr <esc:0x1> <type 2>, new <type -7>) <type -7>
func Xchg64 (ptr <esc:0x1> <type 3>, new <type -8>) <type -8>
func Xchguintptr (ptr <esc:0x1> <type 7>, new <type -13>) <type -13>
checksum FBA544E0F93FD085412C5DBAB32D59AAD0CDEA13
v3;
package math
pkgpath runtime/internal/math
import sys runtime/internal/sys "runtime/internal/sys"
init sys runtime..z2finternal..z2fsys..import
init_graph
types 1 1
const MaxUintptr <type -13> = 18446744073709551615 
func MulUintptr (a <type -13>, b <type -13>) (? <type -13>, ? <type -15>)
checksum 07477381A9238EA4FDC4AB4FC5A8E6B97CB96D48
v3;
package sys
pkgpath runtime/internal/sys
init sys runtime..z2finternal..z2fsys..import
types 3 3 35 28
type 1 "ArchFamilyType" <type -11>
type 2 "Uintreg" <type -13>
const ALPHA <type 1> = 2 
const AMD64 <type 1> = 3 
const ARM <type 1> = 4 
const ARM64 <type 1> = 5 
const ArchFamily <type 1> = 14 
const BigEndian = $false
func Bswap32 (x <type -7>) <type -7>
func Bswap64 (x <type -8>) <type -8>
const CacheLineSize = 64 
func Ctz32 (x <type -7>) <type -11>
func Ctz64 (x <type -8>) <type -11>
func Ctz8 (x <type -5>) <type -11>
var DefaultGoroot <type -16>
const DefaultPhysPageSize = 4096 
const GOARCH = "riscv64"
const GOOS = "linux"
const GccgoToolDir = "/home/arreguin/x-tools/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/libexec/gcc/riscv64-c07-linux-gnu/9.5.0"
const Goarch386 = 0 
const GoarchAlpha = 0 
const GoarchAmd64 = 0 
const GoarchAmd64p32 = 0 
const GoarchArm = 0 
const GoarchArm64 = 0 
const GoarchArm64be = 0 
const GoarchArmbe = 0 
const GoarchIa64 = 0 
const GoarchM68k = 0 
const GoarchMips = 0 
const GoarchMips64 = 0 
const GoarchMips64le = 0 
const GoarchMips64p32 = 0 
const GoarchMips64p32le = 0 
const GoarchMipsle = 0 
const GoarchNios2 = 0 
const GoarchPpc = 0 
const GoarchPpc64 = 0 
const GoarchPpc64le = 0 
const GoarchRiscv = 0 
const GoarchRiscv64 = 1 
const GoarchS390 = 0 
const GoarchS390x = 0 
const GoarchSh = 0 
const GoarchShbe = 0 
const GoarchSparc = 0 
const GoarchSparc64 = 0 
const GoarchWasm = 0 
const Goexperiment = ""
const GoosAix = 0 
const GoosAndroid = 0 
const GoosDarwin = 0 
const GoosDragonfly = 0 
const GoosFreebsd = 0 
const GoosHurd = 0 
const GoosIrix = 0 
const GoosJs = 0 
const GoosLinux = 1 
const GoosNetbsd = 0 
const GoosOpenbsd = 0 
const GoosPlan9 = 0 
const GoosRtems = 0 
const GoosSolaris = 0 
const GoosWindows = 0 
const HugePageSize = 0 
const I386 <type 1> = 1 
const IA64 <type 1> = 6 
const Int64Align = 8 
const M68K <type 1> = 7 
const MIPS <type 1> = 8 
const MIPS64 <type 1> = 9 
const MinFrameSize = 0 
const NIOS2 <type 1> = 10 
const PCQuantum = 2 
const PPC <type 1> = 11 
const PPC64 <type 1> = 12 
const PtrSize = 8 
const RISCV <type 1> = 13 
const RISCV64 <type 1> = 14 
const RegSize = 8 
const S390 <type 1> = 15 
const S390X <type 1> = 16 
const SH <type 1> = 17 
const SPARC <type 1> = 18 
const SPARC64 <type 1> = 19 
const SpAlign = 1 
const TheVersion = "go1.12.2 riscv64-c07-linux-gnu-gccgo (crosstool-NG 1.26.0) 9.5.0"
const UNKNOWN <type 1> = 0 
const WASM <type 1> = 20 
checksum 0273213783516934FBD78D4C07B2E164BC32C92E
v3;
package pprof
pkgpath runtime/pprof
import bufio bufio "bufio"
import bytes bytes "bytes"
import gzip compress/gzip "compress/gzip"
import context context "context"
import binary encoding/binary "encoding/binary"
import errors errors "errors"
import fmt fmt "fmt"
import cpu internal/cpu "internal/cpu"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import math math "math"
import os os "os"
import runtime runtime "runtime"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import tabwriter text/tabwriter "text/tabwriter"
import time time "time"
import unsafe unsafe "unsafe"
init pprof runtime..z2fpprof..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import gzip compress..z2fgzip..import context context..import binary encoding..z2fbinary..import fmt fmt..import crc32 hash..z2fcrc32..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import ioutil io..z2fioutil..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import tabwriter text..z2ftabwriter..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 1 2 1 9 1 12 1 17 1 18 1 20 1 24 2 9 2 12 2 17 2 18 2 20 2 24 3 1 3 2 3 7 3 9 3 10 3 11 3 12 3 14 3 16 3 17 3 18 3 19 3 20 3 21 3 23 3 24 4 1 4 2 4 3 4 6 4 7 4 8 4 9 4 10 4 11 4 12 4 14 4 16 4 17 4 18 4 19 4 20 4 21 4 23 4 24 5 7 5 9 5 10 5 11 5 12 5 14 5 16 5 17 5 18 5 19 5 20 5 21 5 23 5 24 6 9 6 12 6 16 6 17 6 18 6 19 6 20 6 24 7 9 7 10 7 11 7 12 7 14 7 16 7 17 7 18 7 19 7 20 7 21 7 23 7 24 8 9 8 12 8 17 8 18 8 20 10 9 10 12 10 17 10 18 10 20 10 21 10 23 12 9 12 17 12 18 12 20 13 2 13 9 13 10 13 11 13 12 13 14 13 15 13 16 13 17 13 18 13 19 13 20 13 21 13 23 13 24 14 9 14 10 14 11 14 12 14 17 14 18 14 20 14 21 14 23 15 9 15 10 15 11 15 12 15 14 15 16 15 17 15 18 15 19 15 20 15 21 15 23 15 24 16 9 16 17 16 18 16 19 16 20 16 24 17 9 17 18 19 9 19 17 19 18 20 9 20 17 20 18 21 9 21 17 21 18 21 20 22 9 22 12 22 17 22 18 22 20 23 9 23 17 23 18 23 20 23 21
types 44 3 28 302 34 140 3231 569 21 17 18 518 165 21 31 91 21 36 112 19 73 75 82 26 19 22 21 54 50 21 41 83 22 18 172 89 19 64 34 22 22 47 30 73 21
type 1 "LabelSet" <type 27>
type 2 "Profile" <type 33>
 func (p <esc:0x22> <type 32>) Name () <type -16>
 func (p <type 32>) Count () <type -11>
 func (p <type 32>) Add (value <type 24>, skip <type -11>)
 func (p <type 32>) Remove (value <esc:0x1> <type 24>)
 func (p <type 32>) WriteTo (w <type 41>, debug <type -11>) <type -19>
type 3 "context.Context" <type 4>
type 4 interface { Deadline () (deadline <type 5>, ok <type -15>); Done () <type 22>; Err () <type -19>; Value (key <type 24>) <type 24>; }
type 5 "time.Time" <type 21>
 func (t <esc:0x1> <type 5>) String () <type -16>
 func (t <esc:0x1> <type 5>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x12> <type 5>) Add (d <type 6>) <type 5>
 func (t <esc:0x1> <type 5>) AppendFormat (b <esc:0x12> <type 7>, layout <esc:0x1> <type -16>) <type 7>
 func (t <esc:0x1> <type 5>) Minute () <type -11>
 func (t <esc:0x1> <type 8>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 5>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 5>) MarshalBinary () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 5>) After (u <esc:0x1> <type 5>) <type -15>
 func (t <esc:0x1> <type 5>) UnixNano () <type -4>
 func (t <esc:0x1> <type 8>) GobDecode (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 5>) Day () <type -11>
 func (t <esc:0x1> <type 8>) .time.unixSec () <type -4>
 func (t <esc:0x12> <type 5>) Round (d <type 6>) <type 5>
 func (t <esc:0x1> <type 8>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 5>) Before (u <esc:0x1> <type 5>) <type -15>
 func (t <esc:0x32> <type 5>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 8>) .time.setLoc (loc <type 9>)
 func (t <esc:0x12> <type 5>) Truncate (d <type 6>) <type 5>
 func (t <esc:0x1> <type 8>) UnmarshalText (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 8>) UnmarshalBinary (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 5>) Hour () <type -11>
 func (t <esc:0x1> <type 5>) .time.abs () <type -8>
 func (t <esc:0x1> <type 5>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x12> <type 5>) Location () <type 9>
 func (t <esc:0x1> <type 5>) Month () <type 19>
 func (t <esc:0x1> <type 5>) GobEncode () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 5>) Second () <type -11>
 func (t <esc:0x1> <type 8>) UnmarshalJSON (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 8>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 5>) Year () <type -11>
 func (t <esc:0x1> <type 5>) Date () (year <type -11>, month <type 19>, day <type -11>)
 func (t <esc:0x1> <type 5>) Weekday () <type 20>
 func (t <esc:0x1> <type 5>) Unix () <type -4>
 func (t <esc:0x1> <type 5>) YearDay () <type -11>
 func (t <esc:0x12> <type 5>) Local () <type 5>
 func (t <esc:0x1> <type 5>) IsZero () <type -15>
 func (t <esc:0x1> <type 5>) Equal (u <esc:0x1> <type 5>) <type -15>
 func (t <esc:0x12> <type 5>) In (loc <type 9>) <type 5>
 func (t <esc:0x1> <type 5>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 5>) UTC () <type 5>
 func (t <esc:0x32> <type 5>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 5>) Sub (u <esc:0x1> <type 5>) <type 6>
 func (t <esc:0x1> <type 8>) .time.mono () <type -4>
 func (t <esc:0x1> <type 5>) MarshalText () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 8>) .time.stripMono ()
 func (t <esc:0x1> <type 5>) MarshalJSON () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 5>) .time.date (full <type -15>) (year <type -11>, month <type 19>, day <type -11>, yday <type -11>)
 func (t <type 5>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 5>
 func (t <esc:0x1> <type 8>) .time.sec () <type -4>
type 6 "time.Duration" <type -4>
 func (d <type 6>) Nanoseconds () ($ret65 <type -4>) <inl:215>
  //  /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/time/time.go:784
  { //784
   $ret65 = $convert(<type -4>, d) //784
   return //784
  } //0
 func (d <type 6>) Round (m <type 6>) <type 6>
 func (d <type 6>) Truncate (m <type 6>) <type 6>
 func (d <type 6>) Hours () <type -10>
 func (d <type 6>) Minutes () <type -10>
 func (d <type 6>) Seconds () <type -10>
 func (d <type 6>) String () <type -16>
type 7 [] <type -20>
type 8 *<type 5>
type 9 *<type 10>
type 10 "time.Location" <type 11>
 func (l <esc:0x1> <type 9>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 9>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 9>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 9>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 9>) String () <type -16>
 func (l <esc:0x12> <type 9>) .time.get () <type 9>
type 11 struct { .time.name <type -16>; .time.zone <type 12>; .time.tx <type 15>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 18>; }
type 12 [] <type 13>
type 13 ".time.zone" <type 14>
type 14 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 15 [] <type 16>
type 16 ".time.zoneTrans" <type 17>
type 17 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 18 *<type 13>
type 19 "time.Month" <type -11>
 func (m <type 19>) String () <type -16>
type 20 "time.Weekday" <type -11>
 func (d <type 20>) String () <type -16>
type 21 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 9>; }
type 22 chan <- <type 23>
type 23 struct { }
type 24 interface { }
type 25 (? <type 3>)
type 26 (key <type -16>, value <type -16>) <type -15>
type 27 struct { .runtime/pprof.list <type 28>; }
type 28 [] <type 29>
type 29 ".runtime/pprof.label" <type 30>
type 30 struct { .runtime/pprof.key <type -16>; .runtime/pprof.value <type -16>; }
type 31 [] <type -16>
type 32 *<type 2>
type 33 struct { .runtime/pprof.name <type -16>; .runtime/pprof.mu <type 34>; .runtime/pprof.m <type 37>; .runtime/pprof.count <type 39>; .runtime/pprof.write <type 40>; }
type 34 "sync.Mutex" <type 36>
 func (m <type 35>) Unlock ()
 func (m <type 35>) Lock ()
type 35 *<type 34>
type 36 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 37 map [<type 24>] <type 38>
type 38 [] <type -13>
type 39 () <type -11>
type 40 (? <type 41>, ? <type -11>) <type -19>
type 41 "io.Writer" <type 42>
type 42 interface { Write (p <type 7>) (n <type -11>, err <type -19>); }
type 43 [] <type 32>
func Do (ctx <type 3>, labels <esc:0x9> <type 1>, f <esc:0x1> <type 25>)
func ForLabels (ctx <type 3>, f <esc:0x1> <type 26>)
func Label (ctx <type 3>, key <esc:0x1> <type -16>) (? <type -16>, ? <type -15>)
func Labels (args <esc:0x9> ...<type -16>) <type 1>
func Lookup (name <esc:0x1> <type -16>) <type 32>
func NewProfile (name <type -16>) <type 32>
func Profiles () <type 43>
func SetGoroutineLabels (ctx <type 3>)
func StartCPUProfile (w <type 41>) <type -19>
func StopCPUProfile ()
func WithLabels (ctx <type 3>, labels <esc:0x9> <type 1>) <type 3>
func WriteHeapProfile (w <type 41>) <type -19>
checksum 3669437A0451F8F5A99F014EEA63C3A5C6A0B022
v3;
package profile
pkgpath runtime/pprof/internal/profile
import bufio bufio "bufio"
import bytes bytes "bytes"
import gzip compress/gzip "compress/gzip"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import math math "math"
import regexp regexp "regexp"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import time time "time"
indirectimport syntax regexp/syntax
init profile runtime..z2fpprof..z2finternal..z2fprofile..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import gzip compress..z2fgzip..import binary encoding..z2fbinary..import fmt fmt..import crc32 hash..z2fcrc32..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import ioutil io..z2fioutil..import os os..import filepath path..z2ffilepath..import reflect reflect..import regexp regexp..import syntax regexp..z2fsyntax..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 1 2 1 8 1 11 1 18 1 19 1 21 1 24 2 8 2 11 2 18 2 19 2 21 2 24 3 1 3 2 3 6 3 8 3 9 3 10 3 11 3 13 3 15 3 18 3 19 3 20 3 21 3 22 3 23 3 24 4 1 4 2 4 3 4 5 4 6 4 7 4 8 4 9 4 10 4 11 4 13 4 15 4 18 4 19 4 20 4 21 4 22 4 23 4 24 5 8 5 11 5 15 5 18 5 19 5 20 5 21 5 24 6 8 6 9 6 10 6 11 6 13 6 15 6 18 6 19 6 20 6 21 6 22 6 23 6 24 7 8 7 11 7 18 7 19 7 21 9 8 9 11 9 18 9 19 9 21 9 22 9 23 11 8 11 18 11 19 11 21 12 2 12 8 12 9 12 10 12 11 12 13 12 14 12 15 12 18 12 19 12 20 12 21 12 22 12 23 12 24 13 8 13 9 13 10 13 11 13 18 13 19 13 21 13 22 13 23 14 8 14 9 14 10 14 11 14 13 14 15 14 18 14 19 14 20 14 21 14 22 14 23 14 24 15 8 15 18 15 19 15 20 15 21 15 24 16 2 16 8 16 11 16 15 16 17 16 18 16 19 16 20 16 21 16 24 17 8 17 11 17 15 17 18 17 19 17 20 17 21 17 24 18 8 18 19 20 8 20 18 20 19 21 8 21 18 21 19 22 8 22 18 22 19 22 21 23 8 23 18 23 19 23 21 23 22
types 121 11 29 204 179 200 400 203 2025 195 29 209 53 22 36 272 18 21 60 46 19 59 259 22 25 60 130 163 110 18 141 18 20 18 19 3955 21 22 21 34 83 21 21 19 667 19 34 70 21 21 34 62 19 35 66 19 381 82 79 22 19 97 42 34 270 212 19 303 72 21 21 414 19 96 448 19 42 449 19 43 449 19 90 19 347 171 21 32 89 34 47 32 22 451 19 40 72 21 40 48 328 32 74 19 587 23 20 23 19 22 22 22 22 32 75 205 36 37 22 21 69 152
type 1 "Demangler" <type 11>
type 2 "Function" <type 14>
 func (p <esc:0x1> <type 15>) .runtime/pprof/internal/profile.decoder () <type 16>
 func (p <esc:0x1> <type 15>) .runtime/pprof/internal/profile.encode (b <esc:0x9> <type 19>)
type 3 "Label" <type 26>
 func (p <type 3>) .runtime/pprof/internal/profile.decoder () <type 16>
 func (p <type 3>) .runtime/pprof/internal/profile.encode (b <esc:0x9> <type 19>)
type 4 "Line" <type 27>
 func (p <esc:0x1> <type 28>) .runtime/pprof/internal/profile.decoder () <type 16>
 func (p <esc:0x1> <type 28>) .runtime/pprof/internal/profile.encode (b <esc:0x9> <type 19>)
type 5 "Location" <type 29>
 func (p <esc:0x1> <type 32>) .runtime/pprof/internal/profile.decoder () <type 16>
 func (p <esc:0x9> <type 32>) .runtime/pprof/internal/profile.encode (b <type 19>)
 func (loc <esc:0x9> <type 32>) .runtime/pprof/internal/profile.matchesName (re <type 33>) <type -15>
 func (loc <esc:0x9> <type 32>) .runtime/pprof/internal/profile.unmatchedLines (re <type 33>) <type 31>
type 6 "Mapping" <type 99>
 func (p <esc:0x1> <type 30>) .runtime/pprof/internal/profile.decoder () <type 16>
 func (p <esc:0x1> <type 30>) .runtime/pprof/internal/profile.encode (b <esc:0x9> <type 19>)
type 7 "Profile" <type 103>
 func (p <esc:0x1> <type 102>) .runtime/pprof/internal/profile.decoder () <type 16>
 func (p <esc:0x9> <type 102>) .runtime/pprof/internal/profile.preEncode ()
 func (p <esc:0x9> <type 102>) .runtime/pprof/internal/profile.encode (b <type 19>)
 func (p <esc:0x9> <type 102>) .runtime/pprof/internal/profile.postDecode () <type -19>
 func (p <esc:0x9> <type 102>) FilterSamplesByName (focus <type 33>, ignore <type 33>, hide <type 33>) (fm <type -15>, im <type -15>, hm <type -15>)
 func (p <esc:0x9> <type 102>) FilterSamplesByTag (focus <esc:0x1> <type 9>, ignore <esc:0x1> <type 9>) (fm <type -15>, im <type -15>)
 func (p <esc:0x9> <type 102>) .runtime/pprof/internal/profile.remapLocationIDs ()
 func (p <esc:0x9> <type 102>) .runtime/pprof/internal/profile.remapFunctionIDs ()
 func (p <esc:0x9> <type 102>) .runtime/pprof/internal/profile.remapMappingIDs ()
 func (p <esc:0x9> <type 102>) ParseMemoryMap (rd <type 100>) <type -19>
 func (p <esc:0x1> <type 102>) .runtime/pprof/internal/profile.addLegacyFrameInfo ()
 func (p <esc:0x9> <type 102>) .runtime/pprof/internal/profile.setMain ()
 func (p <type 102>) Write (w <type 112>) <type -19>
 func (p <esc:0x9> <type 102>) CheckValid () <type -19>
 func (p <esc:0x9> <type 102>) Aggregate (inlineFrame <type -15>, function <type -15>, filename <type -15>, linenumber <type -15>, address <type -15>) <type -19>
 func (p <esc:0x9> <type 102>) String () <type -16>
 func (p <esc:0x9> <type 102>) Merge (pb <type 102>, r <type -10>) <type -19>
 func (p <esc:0x9> <type 102>) Compatible (pb <esc:0x9> <type 102>) <type -19>
 func (p <esc:0x1> <type 102>) HasFunctions () <type -15>
 func (p <esc:0x1> <type 102>) HasFileLines () <type -15>
 func (p <type 102>) Copy () <type 102>
 func (p <esc:0x9> <type 102>) Demangle (d <esc:0x22> <type 1>) <type -19>
 func (p <esc:0x1> <type 102>) Empty () <type -15>
 func (p <esc:0x9> <type 102>) Prune (dropRx <type 33>, keepRx <type 33>)
 func (p <esc:0x9> <type 102>) RemoveUninteresting () <type -19>
type 8 "Sample" <type 114>
 func (p <esc:0x1> <type 107>) .runtime/pprof/internal/profile.decoder () <type 16>
 func (p <esc:0x1> <type 107>) .runtime/pprof/internal/profile.encode (b <type 19>)
type 9 "TagMatch" <type 119>
type 10 "ValueType" <type 120>
 func (p <esc:0x1> <type 105>) .runtime/pprof/internal/profile.decoder () <type 16>
 func (p <esc:0x1> <type 105>) .runtime/pprof/internal/profile.encode (b <esc:0x9> <type 19>)
type 11 (name <type 12>) (? <type 13>, ? <type -19>)
type 12 [] <type -16>
type 13 map [<type -16>] <type -16>
type 14 struct { ID <type -8>; Name <type -16>; SystemName <type -16>; Filename <type -16>; StartLine <type -4>; .runtime/pprof/internal/profile.nameX <type -4>; .runtime/pprof/internal/profile.systemNameX <type -4>; .runtime/pprof/internal/profile.filenameX <type -4>; }
type 15 *<type 2>
type 16 [] <type 17>
type 17 ".runtime/pprof/internal/profile.decoder" <type 18>
type 18 (? <type 19>, ? <type 24>) <type -19>
type 19 *<type 20>
type 20 ".runtime/pprof/internal/profile.buffer" <type 21>
type 21 struct { .runtime/pprof/internal/profile.field <type -11>; .runtime/pprof/internal/profile.typ <type -11>; .runtime/pprof/internal/profile.u64 <type -8>; .runtime/pprof/internal/profile.data <type 22>; .runtime/pprof/internal/profile.tmp <type 23>; }
type 22 [] <type -20>
type 23 [16 ] <type -20>
type 24 ".runtime/pprof/internal/profile.message" <type 25>
type 25 interface { .runtime/pprof/internal/profile.decoder () <type 16>; .runtime/pprof/internal/profile.encode (? <type 19>); }
type 26 struct { .runtime/pprof/internal/profile.keyX <type -4>; .runtime/pprof/internal/profile.strX <type -4>; .runtime/pprof/internal/profile.numX <type -4>; }
type 27 struct { Function <type 15>; Line <type -4>; .runtime/pprof/internal/profile.functionIDX <type -8>; }
type 28 *<type 4>
type 29 struct { ID <type -8>; Mapping <type 30>; Address <type -8>; Line <type 31>; .runtime/pprof/internal/profile.mappingIDX <type -8>; }
type 30 *<type 6>
type 31 [] <type 4>
type 32 *<type 5>
type 33 *<type 34>
type 34 "regexp.Regexp" <type 92>
 func (re <type 33>) Split (s <type -16>, n <type -11>) <type 12>
 func (re <type 33>) FindAllStringSubmatchIndex (s <type -16>, n <type -11>) <type 35>
 func (re <type 33>) FindAllStringIndex (s <type -16>, n <type -11>) <type 35>
 func (re <type 33>) FindAll (b <type 22>, n <type -11>) <type 37>
 func (re <type 33>) FindReaderSubmatchIndex (r <type 38>) <type 36>
 func (re <type 33>) FindSubmatchIndex (b <type 22>) <type 36>
 func (re <type 33>) FindAllSubmatch (b <type 22>, n <type -11>) <type 40>
 func (re <esc:0x1> <type 33>) .regexp.expand (dst <esc:0x12> <type 22>, template <esc:0x1> <type -16>, bsrc <esc:0x1> <type 22>, src <esc:0x1> <type -16>, match <esc:0x1> <type 36>) <type 22>
 func (re <esc:0x1> <type 33>) Expand (dst <esc:0x12> <type 22>, template <esc:0x1> <type 22>, src <esc:0x1> <type 22>, match <esc:0x1> <type 36>) <type 22>
 func (re <type 33>) FindAllString (s <type -16>, n <type -11>) <type 12>
 func (re <type 33>) FindSubmatch (b <type 22>) <type 37>
 func (re <type 33>) FindReaderIndex (r <type 38>) (loc <type 36>)
 func (re <esc:0x22> <type 33>) LiteralPrefix () (prefix <type -16>, complete <type -15>)
 func (re <type 33>) FindAllStringSubmatch (s <type -16>, n <type -11>) <type 41>
 func (re <esc:0x1> <type 33>) .regexp.put (m <type 42>)
 func (re <type 33>) FindStringSubmatch (s <type -16>) <type 12>
 func (re <esc:0xa> <type 33>) Copy () <type 33>
 func (re <type 33>) Find (b <type 22>) <type 22>
 func (re <esc:0x1> <type 33>) NumSubexp () <type -11>
 func (re <type 33>) .regexp.doExecute (r <type 38>, b <type 22>, s <type -16>, pos <type -11>, ncap <type -11>, dstCap <esc:0x12> <type 36>) <type 36>
 func (re <type 33>) FindAllIndex (b <type 22>, n <type -11>) <type 35>
 func (re <type 33>) Match (b <type 22>) <type -15>
 func (re <type 33>) .regexp.get () <type 42>
 func (re <esc:0x1> <type 33>) ExpandString (dst <esc:0x12> <type 22>, template <esc:0x1> <type -16>, src <esc:0x1> <type -16>, match <esc:0x1> <type 36>) <type 22>
 func (re <type 33>) .regexp.doMatch (r <type 38>, b <type 22>, s <type -16>) <type -15>
 func (re <esc:0x22> <type 33>) SubexpNames () <type 12>
 func (re <type 33>) FindAllSubmatchIndex (b <type 22>, n <type -11>) <type 35>
 func (re <esc:0x22> <type 33>) String () <type -16>
 func (re <type 33>) .regexp.backtrack (ib <type 22>, is <type -16>, pos <type -11>, ncap <type -11>, dstCap <esc:0x12> <type 36>) <type 36>
 func (re <esc:0x1> <type 33>) .regexp.pad (a <esc:0x12> <type 36>) <type 36>
 func (re <esc:0x1> <type 33>) .regexp.tryBacktrack (b <esc:0x9> <type 82>, i <type 62>, pc <type -7>, pos <type -11>) <type -15>
 func (re <type 33>) MatchReader (r <type 38>) <type -15>
 func (re <type 33>) MatchString (s <type -16>) <type -15>
 func (re <type 33>) ReplaceAllString (src <type -16>, repl <type -16>) <type -16>
 func (re <type 33>) ReplaceAllLiteralString (src <type -16>, repl <type -16>) <type -16>
 func (re <type 33>) ReplaceAllStringFunc (src <type -16>, repl <type 88>) <type -16>
 func (re <type 33>) .regexp.doOnePass (ir <type 38>, ib <type 22>, is <type -16>, pos <type -11>, ncap <type -11>, dstCap <esc:0x12> <type 36>) <type 36>
 func (re <type 33>) .regexp.replaceAll (bsrc <type 22>, src <type -16>, nmatch <type -11>, repl <esc:0x2a> <type 89>) <type 22>
 func (re <type 33>) ReplaceAll (src <type 22>, repl <type 22>) <type 22>
 func (re <esc:0x1> <type 33>) Longest ()
 func (re <type 33>) ReplaceAllLiteral (src <type 22>, repl <type 22>) <type 22>
 func (re <type 33>) ReplaceAllFunc (src <type 22>, repl <type 90>) <type 22>
 func (re <type 33>) .regexp.allMatches (s <type -16>, b <type 22>, n <type -11>, deliver <esc:0x1> <type 91>)
 func (re <type 33>) FindIndex (b <type 22>) (loc <type 36>)
 func (re <type 33>) FindString (s <type -16>) <type -16>
 func (re <type 33>) FindStringSubmatchIndex (s <type -16>) <type 36>
 func (re <type 33>) FindStringIndex (s <type -16>) (loc <type 36>)
type 35 [] <type 36>
type 36 [] <type -11>
type 37 [] <type 22>
type 38 "io.RuneReader" <type 39>
type 39 interface { ReadRune () (r <type -21>, size <type -11>, err <type -19>); }
type 40 [] <type 37>
type 41 [] <type 12>
type 42 *<type 43>
type 43 ".regexp.machine" <type 64>
 func (m <esc:0x3a> <type 42>) .regexp.add (q <esc:0x1> <type 44>, pc <type -7>, pos <type -11>, cap <esc:0x1> <type 36>, cond <esc:0x1> <type 59>, t <type 51>) <type 51>
 func (m <esc:0x9> <type 42>) .regexp.step (runq <esc:0x9> <type 44>, nextq <esc:0x1> <type 44>, pos <type -11>, nextPos <type -11>, c <type -21>, nextCond <esc:0x1> <type 59>)
 func (m <esc:0x9> <type 42>) .regexp.clear (q <esc:0x9> <type 44>)
 func (m <esc:0x9> <type 42>) .regexp.match (i <type 62>, pos <type -11>) <type -15>
 func (m <esc:0x32> <type 42>) .regexp.alloc (i <type 54>) <type 51>
 func (m <esc:0x1> <type 42>) .regexp.init (ncap <type -11>)
type 44 *<type 45>
type 45 ".regexp.queue" <type 46>
type 46 struct { .regexp.sparse <type 47>; .regexp.dense <type 48>; }
type 47 [] <type -7>
type 48 [] <type 49>
type 49 ".regexp.entry" <type 50>
type 50 struct { .regexp.pc <type -7>; .regexp.t <type 51>; }
type 51 *<type 52>
type 52 ".regexp.thread" <type 53>
type 53 struct { .regexp.inst <type 54>; .regexp.cap <type 36>; }
type 54 *<type 55>
type 55 "regexp/syntax.Inst" <type 57>
 func (i <esc:0x1> <type 54>) .regexp/syntax.op () <type 56>
 func (i <esc:0x1> <type 54>) MatchRune (r <type -21>) <type -15>
 func (i <esc:0x1> <type 54>) MatchRunePos (r <type -21>) <type -11>
 func (i <esc:0x1> <type 54>) MatchEmptyWidth (before <type -21>, after <type -21>) <type -15>
 func (i <esc:0x1> <type 54>) String () <type -16>
type 56 "regexp/syntax.InstOp" <type -5>
 func (i <type 56>) String () <type -16>
type 57 struct { Op <type 56>; Out <type -7>; Arg <type -7>; Rune <type 58>; }
type 58 [] <type -21>
type 59 *<type 60>
type 60 ".regexp.lazyFlag" <type -8>
 func (f <type 60>) .regexp.match (op <type 61>) <type -15>
type 61 "regexp/syntax.EmptyOp" <type -5>
type 62 ".regexp.input" <type 63>
type 63 interface { .regexp.canCheckPrefix () <type -15>; .regexp.context (pos <type -11>) <type 60>; .regexp.hasPrefix (re <type 33>) <type -15>; .regexp.index (re <type 33>, pos <type -11>) <type -11>; .regexp.step (pos <type -11>) (r <type -21>, width <type -11>); }
type 64 struct { .regexp.re <type 33>; .regexp.p <type 65>; .regexp.q0 <type 45>; .regexp.q1 <type 45>; .regexp.pool <type 69>; .regexp.matched <type -15>; .regexp.matchcap <type 36>; .regexp.inputs <type 70>; }
type 65 *<type 66>
type 66 "regexp/syntax.Prog" <type 67>
 func (p <esc:0x1> <type 65>) String () <type -16>
 func (p <esc:0x22> <type 65>) .regexp/syntax.skipNop (pc <type -7>) <type 54>
 func (p <esc:0x1> <type 65>) Prefix () (prefix <type -16>, complete <type -15>)
 func (p <esc:0x1> <type 65>) StartCond () <type 61>
type 67 struct { Inst <type 68>; Start <type -11>; NumCap <type -11>; }
type 68 [] <type 55>
type 69 [] <type 51>
type 70 ".regexp.inputs" <type 72>
 func (i <esc:0x12> <type 71>) .regexp.init (r <type 38>, b <type 22>, s <type -16>) (? <type 62>, ? <type -11>)
 func (i <esc:0x12> <type 71>) .regexp.newReader (r <type 38>) <type 62>
 func (i <esc:0x1> <type 71>) .regexp.clear ()
 func (i <esc:0x12> <type 71>) .regexp.newString (s <type -16>) <type 62>
 func (i <esc:0x12> <type 71>) .regexp.newBytes (b <type 22>) <type 62>
type 71 *<type 70>
type 72 struct { .regexp.bytes <type 73>; .regexp.string <type 76>; .regexp.reader <type 79>; }
type 73 ".regexp.inputBytes" <type 75>
 func (i <esc:0x1> <type 74>) .regexp.context (pos <type -11>) <type 60>
 func (i <esc:0x1> <type 74>) .regexp.index (re <esc:0x1> <type 33>, pos <type -11>) <type -11>
 func (i <esc:0x1> <type 74>) .regexp.hasPrefix (re <esc:0x1> <type 33>) <type -15>
 func (i <esc:0x1> <type 74>) .regexp.canCheckPrefix () <type -15>
 func (i <esc:0x1> <type 74>) .regexp.step (pos <type -11>) (? <type -21>, ? <type -11>)
type 74 *<type 73>
type 75 struct { .regexp.str <type 22>; }
type 76 ".regexp.inputString" <type 78>
 func (i <esc:0x1> <type 77>) .regexp.context (pos <type -11>) <type 60>
 func (i <esc:0x1> <type 77>) .regexp.index (re <esc:0x1> <type 33>, pos <type -11>) <type -11>
 func (i <esc:0x1> <type 77>) .regexp.hasPrefix (re <esc:0x1> <type 33>) <type -15>
 func (i <esc:0x1> <type 77>) .regexp.canCheckPrefix () <type -15>
 func (i <esc:0x1> <type 77>) .regexp.step (pos <type -11>) (? <type -21>, ? <type -11>)
type 77 *<type 76>
type 78 struct { .regexp.str <type -16>; }
type 79 ".regexp.inputReader" <type 81>
 func (i <esc:0x1> <type 80>) .regexp.context (pos <type -11>) <type 60>
 func (i <esc:0x1> <type 80>) .regexp.index (re <esc:0x1> <type 33>, pos <type -11>) <type -11>
 func (i <esc:0x1> <type 80>) .regexp.hasPrefix (re <esc:0x1> <type 33>) <type -15>
 func (i <esc:0x1> <type 80>) .regexp.canCheckPrefix () <type -15>
 func (i <esc:0x9> <type 80>) .regexp.step (pos <type -11>) (? <type -21>, ? <type -11>)
type 80 *<type 79>
type 81 struct { .regexp.r <type 38>; .regexp.atEOT <type -15>; .regexp.pos <type -11>; }
type 82 *<type 83>
type 83 ".regexp.bitState" <type 84>
 func (b <esc:0x9> <type 82>) .regexp.push (re <esc:0x1> <type 33>, pc <type -7>, pos <type -11>, arg <type -15>)
 func (b <esc:0x1> <type 82>) .regexp.shouldVisit (pc <type -7>, pos <type -11>) <type -15>
 func (b <esc:0x1> <type 82>) .regexp.reset (prog <esc:0x1> <type 65>, end <type -11>, ncap <type -11>)
type 84 struct { .regexp.end <type -11>; .regexp.cap <type 36>; .regexp.matchcap <type 36>; .regexp.jobs <type 85>; .regexp.visited <type 47>; .regexp.inputs <type 70>; }
type 85 [] <type 86>
type 86 ".regexp.job" <type 87>
type 87 struct { .regexp.pc <type -7>; .regexp.arg <type -15>; .regexp.pos <type -11>; }
type 88 (? <type -16>) <type -16>
type 89 (dst <type 22>, m <type 36>) <type 22>
type 90 (? <type 22>) <type 22>
type 91 (? <type 36>)
type 92 struct { .regexp.expr <type -16>; .regexp.prog <type 65>; .regexp.onepass <type 93>; .regexp.numSubexp <type -11>; .regexp.maxBitStateLen <type -11>; .regexp.subexpNames <type 12>; .regexp.prefix <type -16>; .regexp.prefixBytes <type 22>; .regexp.prefixRune <type -21>; .regexp.prefixEnd <type -7>; .regexp.mpool <type -11>; .regexp.matchcap <type -11>; .regexp.prefixComplete <type -15>; .regexp.cond <type 61>; .regexp.longest <type -15>; }
type 93 *<type 94>
type 94 ".regexp.onePassProg" <type 95>
type 95 struct { Inst <type 96>; Start <type -11>; NumCap <type -11>; }
type 96 [] <type 97>
type 97 ".regexp.onePassInst" <type 98>
type 98 struct { ? <type 55>; Next <type 47>; }
type 99 struct { ID <type -8>; Start <type -8>; Limit <type -8>; Offset <type -8>; File <type -16>; BuildID <type -16>; HasFunctions <type -15>; HasFilenames <type -15>; HasLineNumbers <type -15>; HasInlineFrames <type -15>; .runtime/pprof/internal/profile.fileX <type -4>; .runtime/pprof/internal/profile.buildIDX <type -4>; }
type 100 "io.Reader" <type 101>
type 101 interface { Read (p <type 22>) (n <type -11>, err <type -19>); }
type 102 *<type 7>
type 103 struct { SampleType <type 104>; DefaultSampleType <type -16>; Sample <type 106>; Mapping <type 108>; Location <type 109>; Function <type 110>; Comments <type 12>; DropFrames <type -16>; KeepFrames <type -16>; TimeNanos <type -4>; DurationNanos <type -4>; PeriodType <type 105>; Period <type -4>; .runtime/pprof/internal/profile.commentX <type 111>; .runtime/pprof/internal/profile.dropFramesX <type -4>; .runtime/pprof/internal/profile.keepFramesX <type -4>; .runtime/pprof/internal/profile.stringTable <type 12>; .runtime/pprof/internal/profile.defaultSampleTypeX <type -4>; }
type 104 [] <type 105>
type 105 *<type 10>
type 106 [] <type 107>
type 107 *<type 8>
type 108 [] <type 30>
type 109 [] <type 32>
type 110 [] <type 15>
type 111 [] <type -4>
type 112 "io.Writer" <type 113>
type 113 interface { Write (p <type 22>) (n <type -11>, err <type -19>); }
type 114 struct { Location <type 109>; Value <type 111>; Label <type 115>; NumLabel <type 116>; .runtime/pprof/internal/profile.locationIDX <type 117>; .runtime/pprof/internal/profile.labelX <type 118>; }
type 115 map [<type -16>] <type 12>
type 116 map [<type -16>] <type 111>
type 117 [] <type -8>
type 118 [] <type 3>
type 119 (key <type -16>, val <type -16>, nval <type -4>) <type -15>
type 120 struct { Type <type -16>; Unit <type -16>; .runtime/pprof/internal/profile.typeX <type -4>; .runtime/pprof/internal/profile.unitX <type -4>; }
var LegacyHeapAllocated <type -15>
func Parse (r <type 100>) (? <type 102>, ? <type -19>)
func ParseTracebacks (b <type 22>) (? <type 102>, ? <type -19>)
checksum 13B3907A7918D23886DEE1AFCC0347EDC96BBB0D
v3;
package trace
pkgpath runtime/trace
import context context "context"
import fmt fmt "fmt"
import io io "io"
import runtime runtime "runtime"
import sync sync "sync"
import atomic sync/atomic "sync/atomic"
import unsafe unsafe "unsafe"
indirectimport time time
init trace runtime..z2ftrace..import context context..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1 13 1 14 1 15 2 3 2 4 2 5 2 6 2 7 2 8 2 9 2 10 2 11 2 12 2 13 2 14 2 15 4 3 4 6 4 9 4 10 4 12 4 13 4 14 6 3 6 9 6 10 6 12 7 3 7 4 7 5 7 6 7 9 7 10 7 12 7 13 7 14 8 3 8 9 8 10 8 11 8 12 8 15 9 3 9 10 11 3 11 9 11 10 12 3 12 9 12 10 13 3 13 9 13 10 13 12 14 3 14 9 14 10 14 12 14 13
types 33 3 63 61 34 140 3234 73 17 21 71 19 525 165 21 31 91 21 36 112 19 356 83 26 19 22 21 18 86 18 30 73 48 11
type 1 "Region" <type 27>
 func (r <esc:0x9> <type 28>) End ()
type 2 "Task" <type 31>
 func (t <esc:0x1> <type 26>) End ()
type 3 "context.Context" <type 4>
type 4 interface { Deadline () (deadline <type 5>, ok <type -15>); Done () <type 22>; Err () <type -19>; Value (key <type 24>) <type 24>; }
type 5 "time.Time" <type 21>
 func (t <esc:0x1> <type 5>) YearDay () <type -11>
 func (t <esc:0x1> <type 5>) Unix () <type -4>
 func (t <esc:0x1> <type 5>) Weekday () <type 6>
 func (t <esc:0x1> <type 5>) Second () <type -11>
 func (t <esc:0x1> <type 5>) Year () <type -11>
 func (t <esc:0x1> <type 7>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 7>) UnmarshalJSON (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 5>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 5>) Month () <type 9>
 func (t <esc:0x12> <type 5>) Location () <type 10>
 func (t <esc:0x1> <type 5>) GobEncode () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 5>) Date () (year <type -11>, month <type 9>, day <type -11>)
 func (t <esc:0x1> <type 5>) Hour () <type -11>
 func (t <esc:0x1> <type 5>) .time.abs () <type -8>
 func (t <esc:0x1> <type 5>) IsZero () <type -15>
 func (t <esc:0x1> <type 5>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 5>) UTC () <type 5>
 func (t <esc:0x12> <type 5>) In (loc <type 10>) <type 5>
 func (t <esc:0x32> <type 5>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 5>) Sub (u <esc:0x1> <type 5>) <type 20>
 func (t <esc:0x1> <type 5>) Equal (u <esc:0x1> <type 5>) <type -15>
 func (t <esc:0x1> <type 7>) .time.mono () <type -4>
 func (t <esc:0x1> <type 5>) MarshalText () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 7>) .time.stripMono ()
 func (t <esc:0x1> <type 5>) MarshalJSON () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 5>) .time.date (full <type -15>) (year <type -11>, month <type 9>, day <type -11>, yday <type -11>)
 func (t <type 5>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 5>
 func (t <esc:0x1> <type 7>) .time.sec () <type -4>
 func (t <esc:0x12> <type 5>) Local () <type 5>
 func (t <esc:0x1> <type 7>) UnmarshalBinary (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 7>) UnmarshalText (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x12> <type 5>) Truncate (d <type 20>) <type 5>
 func (t <esc:0x1> <type 7>) .time.setLoc (loc <type 10>)
 func (t <esc:0x32> <type 5>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 5>) Before (u <esc:0x1> <type 5>) <type -15>
 func (t <esc:0x1> <type 7>) .time.nsec () <type -3>
 func (t <esc:0x12> <type 5>) Round (d <type 20>) <type 5>
 func (t <esc:0x1> <type 7>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 5>) Day () <type -11>
 func (t <esc:0x1> <type 7>) GobDecode (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 5>) UnixNano () <type -4>
 func (t <esc:0x1> <type 5>) After (u <esc:0x1> <type 5>) <type -15>
 func (t <esc:0x1> <type 5>) MarshalBinary () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 5>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 7>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 5>) Minute () <type -11>
 func (t <esc:0x1> <type 5>) AppendFormat (b <esc:0x12> <type 8>, layout <esc:0x1> <type -16>) <type 8>
 func (t <esc:0x12> <type 5>) Add (d <type 20>) <type 5>
 func (t <esc:0x1> <type 5>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 5>) String () <type -16>
type 6 "time.Weekday" <type -11>
 func (d <type 6>) String () <type -16>
type 7 *<type 5>
type 8 [] <type -20>
type 9 "time.Month" <type -11>
 func (m <type 9>) String () <type -16>
type 10 *<type 11>
type 11 "time.Location" <type 12>
 func (l <esc:0x12> <type 10>) .time.get () <type 10>
 func (l <esc:0x22> <type 10>) String () <type -16>
 func (l <esc:0x32> <type 10>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 10>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 10>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 10>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 12 struct { .time.name <type -16>; .time.zone <type 13>; .time.tx <type 16>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 19>; }
type 13 [] <type 14>
type 14 ".time.zone" <type 15>
type 15 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 16 [] <type 17>
type 17 ".time.zoneTrans" <type 18>
type 18 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 19 *<type 14>
type 20 "time.Duration" <type -4>
 func (d <type 20>) String () <type -16>
 func (d <type 20>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 20>) Seconds () <type -10>
 func (d <type 20>) Minutes () <type -10>
 func (d <type 20>) Hours () <type -10>
 func (d <type 20>) Truncate (m <type 20>) <type 20>
 func (d <type 20>) Round (m <type 20>) <type 20>
type 21 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 10>; }
type 22 chan <- <type 23>
type 23 struct { }
type 24 interface { }
type 25 [] <type 24>
type 26 *<type 2>
type 27 struct { .runtime/trace.id <type -8>; .runtime/trace.regionType <type -16>; }
type 28 *<type 1>
type 29 "io.Writer" <type 30>
type 30 interface { Write (p <type 8>) (n <type -11>, err <type -19>); }
type 31 struct { .runtime/trace.id <type -8>; }
type 32 ()
func IsEnabled () <type -15>
func Log (ctx <type 3>, category <type -16>, message <type -16>)
func Logf (ctx <type 3>, category <type -16>, format <esc:0x1> <type -16>, args <esc:0x9> ...<type 24>)
func NewTask (pctx <type 3>, taskType <type -16>) (ctx <type 3>, task <type 26>)
func Start (w <type 29>) <type -19>
func StartRegion (ctx <type 3>, regionType <type -16>) <type 28>
func Stop ()
func WithRegion (ctx <type 3>, regionType <type -16>, fn <esc:0x1> <type 32>)
checksum C67A69BA40EA3C9DB02E3D4784CB00003920D3F7
v3;
package sort
pkgpath sort
import reflect reflect "reflect"
init cpu internal..z2fcpu..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 1 0 1 2 1 3 1 4 1 5 1 6 2 0 2 3 4 0 4 2 4 3 5 0 5 2 5 3
types 12 5 304 300 28 313 21 21 121 33 21 22 48
type 1 "Float64Slice" <type 5>
 func (p <esc:0x1> <type 1>) Search (x <type -10>) <type -11>
 func (p <esc:0x1> <type 1>) Len () <type -11>
 func (p <esc:0x1> <type 1>) Less (i <type -11>, j <type -11>) <type -15>
 func (p <esc:0x1> <type 1>) Swap (i <type -11>, j <type -11>)
 func (p <type 1>) Sort ()
type 2 "IntSlice" <type 6>
 func (p <esc:0x1> <type 2>) Search (x <type -11>) <type -11>
 func (p <esc:0x1> <type 2>) Len () <type -11>
 func (p <esc:0x1> <type 2>) Less (i <type -11>, j <type -11>) <type -15>
 func (p <esc:0x1> <type 2>) Swap (i <type -11>, j <type -11>)
 func (p <type 2>) Sort ()
type 3 "Interface" <type 7>
type 4 "StringSlice" <type 9>
 func (p <esc:0x1> <type 4>) Search (x <esc:0x1> <type -16>) <type -11>
 func (p <esc:0x1> <type 4>) Len () <type -11>
 func (p <esc:0x1> <type 4>) Less (i <type -11>, j <type -11>) <type -15>
 func (p <esc:0x9> <type 4>) Swap (i <type -11>, j <type -11>)
 func (p <type 4>) Sort ()
type 5 [] <type -10>
type 6 [] <type -11>
type 7 interface { Len () <type -11>; Less (i <type -11>, j <type -11>) <type -15>; Swap (i <type -11>, j <type -11>); }
type 8 (? <type -11>) <type -15>
type 9 [] <type -16>
type 10 interface { }
type 11 (i <type -11>, j <type -11>) <type -15>
func Float64s (a <type 5>)
func Float64sAreSorted (a <type 5>) <type -15>
func Ints (a <type 6>)
func IntsAreSorted (a <type 6>) <type -15>
func IsSorted (data <type 3>) <type -15>
func Reverse (data <type 3>) <type 3>
func Search (n <type -11>, f <esc:0x1> <type 8>) <type -11>
func SearchFloat64s (a <esc:0x1> <type 5>, x <type -10>) <type -11>
func SearchInts (a <esc:0x1> <type 6>, x <type -11>) <type -11>
func SearchStrings (a <esc:0x1> <type 9>, x <esc:0x1> <type -16>) <type -11>
func Slice (slice <type 10>, less <esc:0x1> <type 11>)
func SliceIsSorted (slice <type 10>, less <esc:0x1> <type 11>) <type -15>
func SliceStable (slice <type 10>, less <esc:0x1> <type 11>)
func Sort (data <type 3>)
func Stable (data <type 3>)
func Strings (a <type 9>)
func StringsAreSorted (a <type 9>) <type -15>
checksum 3E2A16606312B76C60CB16801EBEC866B246D0BE
v3;
package strconv
pkgpath strconv
import errors errors "errors"
import bytealg internal/bytealg "internal/bytealg"
import math math "math"
import bits math/bits "math/bits"
import runtime runtime "runtime"
import utf8 unicode/utf8 "unicode/utf8"
init strconv strconv..import cpu internal..z2fcpu..import runtime runtime..import sys runtime..z2finternal..z2fsys..import
init_graph 0 1 0 2 0 3 2 1 2 3
types 5 2 76 21 67 17
type 1 "NumError" <type 3>
 func (e <esc:0x9> <type 4>) Error () <type -16>
type 2 [] <type -20>
type 3 struct { Func <type -16>; Num <type -16>; Err <type -19>; }
type 4 *<type 1>
func AppendBool (dst <esc:0x12> <type 2>, b <type -15>) <type 2>
func AppendFloat (dst <esc:0x12> <type 2>, f <type -10>, fmt <type -20>, prec <type -11>, bitSize <type -11>) <type 2>
func AppendInt (dst <esc:0x12> <type 2>, i <type -4>, base <type -11>) <type 2>
func AppendQuote (dst <esc:0x12> <type 2>, s <esc:0x1> <type -16>) <type 2>
func AppendQuoteRune (dst <esc:0x12> <type 2>, r <type -21>) <type 2>
func AppendQuoteRuneToASCII (dst <esc:0x12> <type 2>, r <type -21>) <type 2>
func AppendQuoteRuneToGraphic (dst <esc:0x12> <type 2>, r <type -21>) <type 2>
func AppendQuoteToASCII (dst <esc:0x12> <type 2>, s <esc:0x1> <type -16>) <type 2>
func AppendQuoteToGraphic (dst <esc:0x12> <type 2>, s <esc:0x1> <type -16>) <type 2>
func AppendUint (dst <esc:0x12> <type 2>, i <type -8>, base <type -11>) <type 2>
func Atoi (s <type -16>) (? <type -11>, ? <type -19>)
func CanBackquote (s <esc:0x1> <type -16>) <type -15>
var ErrRange <type -19>
var ErrSyntax <type -19>
func FormatBool (b <type -15>) <type -16>
func FormatFloat (f <type -10>, fmt <type -20>, prec <type -11>, bitSize <type -11>) <type -16>
func FormatInt (i <type -4>, base <type -11>) <type -16>
func FormatUint (i <type -8>, base <type -11>) <type -16>
const IntSize = 64 
func IsGraphic (r <type -21>) <type -15>
func IsPrint (r <type -21>) <type -15>
func Itoa (i <type -11>) <type -16>
func ParseBool (str <type -16>) (? <type -15>, ? <type -19>)
func ParseFloat (s <type -16>, bitSize <type -11>) (? <type -10>, ? <type -19>)
func ParseInt (s <type -16>, base <type -11>, bitSize <type -11>) (i <type -4>, err <type -19>)
func ParseUint (s <type -16>, base <type -11>, bitSize <type -11>) (? <type -8>, ? <type -19>)
func Quote (s <esc:0x1> <type -16>) <type -16>
func QuoteRune (r <type -21>) <type -16>
func QuoteRuneToASCII (r <type -21>) <type -16>
func QuoteRuneToGraphic (r <type -21>) <type -16>
func QuoteToASCII (s <esc:0x1> <type -16>) <type -16>
func QuoteToGraphic (s <esc:0x1> <type -16>) <type -16>
func Unquote (s <esc:0x12> <type -16>) (? <type -16>, ? <type -19>)
func UnquoteChar (s <esc:0x402> <type -16>, quote <type -20>) (value <type -21>, multibyte <type -15>, tail <type -16>, err <type -19>)
checksum FF9EB0CF866B74BAE7F7CFA3401C4B5E334A8610
v3;
package strings
pkgpath strings
import errors errors "errors"
import bytealg internal/bytealg "internal/bytealg"
import io io "io"
import sync sync "sync"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
import unsafe unsafe "unsafe"
init cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import unicode unicode..import
init_graph 1 0 1 2 1 3 1 4 2 0 2 3 4 0 4 2 4 3
types 31 4 697 823 283 65 17 21 21 33 33 18 18 94 30 73 92 77 19 11 60 89 19 64 38 129 250 21 38 64 31 24
type 1 "Builder" <type 4>
 func (b <esc:0x1> <type 5>) .strings.copyCheck ()
 func (b <esc:0x22> <type 5>) String () <type -16>
 func (b <esc:0x1> <type 5>) Len () <type -11>
 func (b <esc:0x1> <type 5>) Cap () <type -11>
 func (b <esc:0x1> <type 5>) Reset ()
 func (b <esc:0x1> <type 5>) .strings.grow (n <type -11>)
 func (b <esc:0x1> <type 5>) Grow (n <type -11>)
 func (b <esc:0x9> <type 5>) Write (p <esc:0x1> <type 6>) (? <type -11>, ? <type -19>)
 func (b <esc:0x9> <type 5>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x9> <type 5>) WriteRune (r <type -21>) (? <type -11>, ? <type -19>)
 func (b <esc:0x9> <type 5>) WriteString (s <esc:0x1> <type -16>) (? <type -11>, ? <type -19>)
type 2 "Reader" <type 12>
 func (r <esc:0x1> <type 10>) Len () <type -11>
 func (r <esc:0x1> <type 10>) Size () <type -4>
 func (r <esc:0x1> <type 10>) Read (b <esc:0x1> <type 6>) (n <type -11>, err <type -19>)
 func (r <esc:0x1> <type 10>) ReadAt (b <esc:0x1> <type 6>, off <type -4>) (n <type -11>, err <type -19>)
 func (r <esc:0x1> <type 10>) ReadByte () (? <type -20>, ? <type -19>)
 func (r <esc:0x1> <type 10>) UnreadByte () <type -19>
 func (r <esc:0x1> <type 10>) ReadRune () (ch <type -21>, size <type -11>, err <type -19>)
 func (r <esc:0x1> <type 10>) UnreadRune () <type -19>
 func (r <esc:0x1> <type 10>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (r <esc:0x9> <type 10>) WriteTo (w <type 13>) (n <type -4>, err <type -19>)
 func (r <esc:0x1> <type 10>) Reset (s <type -16>)
type 3 "Replacer" <type 15>
 func (r <esc:0x9> <type 11>) .strings.buildOnce ()
 func (b <esc:0x9> <type 11>) .strings.build () <type 23>
 func (r <type 11>) Replace (s <type -16>) <type -16>
 func (r <type 11>) WriteString (w <type 13>, s <type -16>) (n <type -11>, err <type -19>)
type 4 struct { .strings.addr <type 5>; .strings.buf <type 6>; }
type 5 *<type 1>
type 6 [] <type -20>
type 7 [] <type -16>
type 8 (? <type -21>) <type -15>
type 9 (? <type -21>) <type -21>
type 10 *<type 2>
type 11 *<type 3>
type 12 struct { .strings.s <type -16>; .strings.i <type -4>; .strings.prevRune <type -11>; }
type 13 "io.Writer" <type 14>
type 14 interface { Write (p <type 6>) (n <type -11>, err <type -19>); }
type 15 struct { .strings.once <type 16>; .strings.r <type 23>; .strings.oldnew <type 7>; }
type 16 "sync.Once" <type 19>
 func (o <type 17>) Do (f <esc:0x1> <type 18>)
type 17 *<type 16>
type 18 ()
type 19 struct { .sync.m <type 20>; .sync.done <type -7>; }
type 20 "sync.Mutex" <type 22>
 func (m <type 21>) Lock ()
 func (m <type 21>) Unlock ()
type 21 *<type 20>
type 22 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 23 ".strings.replacer" <type 24>
type 24 interface { Replace (s <type -16>) <type -16>; WriteString (w <type 13>, s <type -16>) (n <type -11>, err <type -19>); }
type 25 "unicode.SpecialCase" <type 26>
 func (special <esc:0x1> <type 25>) ToLower (r <type -21>) <type -21>
 func (special <esc:0x1> <type 25>) ToTitle (r <type -21>) <type -21>
 func (special <esc:0x1> <type 25>) ToUpper (r <type -21>) <type -21>
type 26 [] <type 27>
type 27 "unicode.CaseRange" <type 28>
type 28 struct { Lo <type -7>; Hi <type -7>; Delta <type 29>; }
type 29 ".unicode.d" <type 30>
type 30 [3 ] <type -21>
func Compare (a <esc:0x1> <type -16>, b <esc:0x1> <type -16>) <type -11>
func Contains (s <esc:0x1> <type -16>, substr <esc:0x1> <type -16>) <type -15>
func ContainsAny (s <esc:0x1> <type -16>, chars <esc:0x1> <type -16>) <type -15>
func ContainsRune (s <esc:0x1> <type -16>, r <type -21>) <type -15>
func Count (s <esc:0x1> <type -16>, substr <esc:0x1> <type -16>) <type -11>
func EqualFold (s <esc:0x1> <type -16>, t <esc:0x1> <type -16>) <type -15>
func Fields (s <type -16>) <type 7>
func FieldsFunc (s <type -16>, f <esc:0x1> <type 8>) <type 7>
func HasPrefix (s <esc:0x1> <type -16>, prefix <esc:0x1> <type -16>) <type -15>
func HasSuffix (s <esc:0x1> <type -16>, suffix <esc:0x1> <type -16>) <type -15>
func Index (s <esc:0x1> <type -16>, substr <esc:0x1> <type -16>) <type -11>
func IndexAny (s <esc:0x1> <type -16>, chars <esc:0x1> <type -16>) <type -11>
func IndexByte (s <esc:0x1> <type -16>, c <type -20>) <type -11>
func IndexFunc (s <esc:0x1> <type -16>, f <esc:0x1> <type 8>) <type -11>
func IndexRune (s <esc:0x1> <type -16>, r <type -21>) <type -11>
func Join (a <esc:0x22> <type 7>, sep <esc:0x1> <type -16>) <type -16>
func LastIndex (s <esc:0x1> <type -16>, substr <esc:0x1> <type -16>) <type -11>
func LastIndexAny (s <esc:0x1> <type -16>, chars <esc:0x1> <type -16>) <type -11>
func LastIndexByte (s <esc:0x1> <type -16>, c <type -20>) <type -11>
func LastIndexFunc (s <esc:0x1> <type -16>, f <esc:0x1> <type 8>) <type -11>
func Map (mapping <esc:0x1> <type 9>, s <esc:0x12> <type -16>) <type -16>
func NewReader (s <type -16>) <type 10>
func NewReplacer (oldnew <esc:0x9> ...<type -16>) <type 11>
func Repeat (s <esc:0x1> <type -16>, count <type -11>) <type -16>
func Replace (s <esc:0x12> <type -16>, old <esc:0x1> <type -16>, new <esc:0x1> <type -16>, n <type -11>) <type -16>
func ReplaceAll (s <esc:0x12> <type -16>, old <esc:0x1> <type -16>, new <esc:0x1> <type -16>) <type -16>
func Split (s <type -16>, sep <esc:0x1> <type -16>) <type 7>
func SplitAfter (s <type -16>, sep <esc:0x1> <type -16>) <type 7>
func SplitAfterN (s <type -16>, sep <esc:0x1> <type -16>, n <type -11>) <type 7>
func SplitN (s <type -16>, sep <esc:0x1> <type -16>, n <type -11>) <type 7>
func Title (s <esc:0x12> <type -16>) <type -16>
func ToLower (s <esc:0x12> <type -16>) <type -16>
func ToLowerSpecial (c <type 25>, s <esc:0x12> <type -16>) <type -16>
func ToTitle (s <esc:0x12> <type -16>) <type -16>
func ToTitleSpecial (c <type 25>, s <esc:0x12> <type -16>) <type -16>
func ToUpper (s <esc:0x12> <type -16>) <type -16>
func ToUpperSpecial (c <type 25>, s <esc:0x12> <type -16>) <type -16>
func Trim (s <esc:0x12> <type -16>, cutset <type -16>) <type -16>
func TrimFunc (s <esc:0x12> <type -16>, f <esc:0x1> <type 8>) <type -16>
func TrimLeft (s <esc:0x12> <type -16>, cutset <type -16>) <type -16>
func TrimLeftFunc (s <esc:0x12> <type -16>, f <esc:0x1> <type 8>) <type -16>
func TrimPrefix (s <esc:0x12> <type -16>, prefix <esc:0x1> <type -16>) <type -16>
func TrimRight (s <esc:0x12> <type -16>, cutset <type -16>) <type -16>
func TrimRightFunc (s <esc:0x12> <type -16>, f <esc:0x1> <type 8>) <type -16>
func TrimSpace (s <esc:0x12> <type -16>) <type -16>
func TrimSuffix (s <esc:0x12> <type -16>, suffix <esc:0x1> <type -16>) <type -16>
checksum D77C2EB411D68BFD1287C214F96A381AF0D1EFE5
v3;
package sync
pkgpath sync
import race internal/race "internal/race"
import runtime runtime "runtime"
import atomic sync/atomic "sync/atomic"
import unsafe unsafe "unsafe"
init sync sync..import cpu internal..z2fcpu..import runtime runtime..import sys runtime..z2finternal..z2fsys..import
init_graph 0 1 0 2 0 3 2 1 2 3
types 57 9 114 26 453 83 71 240 436 214 103 407 19 19 37 132 35 13 74 19 18 42 108 120 19 22 45 34 19 517 19 38 18 52 64 18 59 18 11 109 21 18 19 36 53 44 80 21 25 148 18 19 91 67 23 18 19 19
type 1 "Cond" <type 9>
 func (c <type 19>) Wait ()
 func (c <type 19>) Signal ()
 func (c <type 19>) Broadcast ()
type 2 "Locker" <type 20>
type 3 "Map" <type 21>
 func (m <type 31>) Load (key <esc:0x1> <type 24>) (value <type 24>, ok <type -15>)
 func (m <type 31>) Store (key <type 24>, value <type 24>)
 func (m <type 31>) LoadOrStore (key <type 24>, value <type 24>) (actual <type 24>, loaded <type -15>)
 func (m <type 31>) Delete (key <esc:0x1> <type 24>)
 func (m <type 31>) Range (f <esc:0x1> <type 32>)
 func (m <type 31>) .sync.missLocked ()
 func (m <type 31>) .sync.dirtyLocked ()
type 4 "Mutex" <type 33>
 func (m <type 34>) Lock ()
 func (m <type 34>) Unlock ()
type 5 "Once" <type 35>
 func (o <type 36>) Do (f <esc:0x1> <type 37>)
type 6 "Pool" <type 38>
 func (p <type 40>) Put (x <type 24>)
 func (p <type 40>) Get () <type 24>
 func (p <type 40>) .sync.getSlow () (x <type 24>)
 func (p <type 40>) .sync.pin () <type 41>
 func (p <type 40>) .sync.pinSlow () <type 41>
type 7 "RWMutex" <type 48>
 func (rw <type 49>) RLock ()
 func (rw <type 49>) RUnlock ()
 func (rw <type 49>) Lock ()
 func (rw <type 49>) Unlock ()
 func (rw <esc:0x12> <type 49>) RLocker () ($ret8 <type 2>) <inl:217>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/sync/rwmutex.go:139
  { //140
   $ret8 = $convert(<type 50>, rw) //140
   return //140
  } //0
type 8 "WaitGroup" <type 52>
 func (wg <esc:0x92> <type 54>) .sync.state () (statep <type 55>, semap <type 56>)
 func (wg <type 54>) Add (delta <type -11>)
 func (wg <type 54>) Done ()
 func (wg <type 54>) Wait ()
type 9 struct { .sync.noCopy <type 10>; L <type 2>; .sync.notify <type 13>; .sync.checker <type 17>; }
type 10 ".sync.noCopy" <type 12>
 func (? <esc:0x1> <type 11>) Lock () <inl:138>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/sync/cond.go:97
 func (? <esc:0x1> <type 11>) Unlock () <inl:138>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/sync/cond.go:98
type 11 *<type 10>
type 12 struct { }
type 13 ".sync.notifyList" <type 14>
type 14 struct { .sync.wait <type -7>; .sync.notify <type -7>; .sync.lock <type -13>; .sync.head <type 15>; .sync.tail <type 15>; }
type 15 "unsafe.Pointer" <type 16>
type 16 *any
type 17 ".sync.copyChecker" <type -13>
 func (c <type 18>) .sync.check ()
type 18 *<type 17>
type 19 *<type 1>
type 20 interface { Lock (); Unlock (); }
type 21 struct { .sync.mu <type 4>; .sync.read <type 22>; .sync.dirty <type 26>; .sync.misses <type -11>; }
type 22 "sync/atomic.Value" <type 25>
 func (v <type 23>) Store (x <type 24>)
 func (v <type 23>) Load () (x <type 24>)
type 23 *<type 22>
type 24 interface { }
type 25 struct { .sync/atomic.v <type 24>; }
type 26 map [<type 24>] <type 27>
type 27 *<type 28>
type 28 ".sync.entry" <type 30>
 func (e <type 27>) .sync.load () (value <type 24>, ok <type -15>)
 func (e <type 27>) .sync.tryStore (i <type 29>) <type -15>
 func (e <type 27>) .sync.unexpungeLocked () (wasExpunged <type -15>)
 func (e <type 27>) .sync.storeLocked (i <type 29>)
 func (e <type 27>) .sync.tryLoadOrStore (i <type 24>) (actual <type 24>, loaded <type -15>, ok <type -15>)
 func (e <type 27>) .sync.delete () (hadValue <type -15>)
 func (e <type 27>) .sync.tryExpungeLocked () (isExpunged <type -15>)
type 29 *<type 24>
type 30 struct { .sync.p <type 15>; }
type 31 *<type 3>
type 32 (key <type 24>, value <type 24>) <type -15>
type 33 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 34 *<type 4>
type 35 struct { .sync.m <type 4>; .sync.done <type -7>; }
type 36 *<type 5>
type 37 ()
type 38 struct { .sync.noCopy <type 10>; .sync.local <type 15>; .sync.localSize <type -13>; New <type 39>; }
type 39 () <type 24>
type 40 *<type 6>
type 41 *<type 42>
type 42 ".sync.poolLocal" <type 43>
type 43 struct { ? <type 44>; .sync.pad <type 47>; }
type 44 ".sync.poolLocalInternal" <type 45>
type 45 struct { .sync.private <type 24>; .sync.shared <type 46>; ? <type 4>; }
type 46 [] <type 24>
type 47 [80 ] <type -20>
type 48 struct { .sync.w <type 4>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 49 *<type 7>
type 50 *<type 51>
type 51 ".sync.rlocker" <type 7>
 func (r <type 50>) Lock ()
 func (r <type 50>) Unlock ()
type 52 struct { .sync.noCopy <type 10>; .sync.state1 <type 53>; }
type 53 [3 ] <type -7>
type 54 *<type 8>
type 55 *<type -8>
type 56 *<type -7>
func NewCond (l <type 2>) <type 19>
checksum 7689F11B58491BE8AB2A5ABA0ECA127A44279C77
v3;
package atomic
pkgpath sync/atomic
import unsafe unsafe "unsafe"
types 13 2 107 18 18 18 18 19 17 33 12 45 22 18
type 1 "Value" <type 10>
 func (v <type 12>) Load () (x <type 11>)
 func (v <type 12>) Store (x <type 11>)
type 2 *<type -3>
type 3 *<type -4>
type 4 *<type -7>
type 5 *<type -8>
type 6 *<type -13>
type 7 *<type 8>
type 8 "unsafe.Pointer" <type 9>
type 9 *any
type 10 struct { .sync/atomic.v <type 11>; }
type 11 interface { }
type 12 *<type 1>
func AddInt32 (addr <type 2>, delta <type -3>) (new <type -3>)
func AddInt64 (addr <type 3>, delta <type -4>) (new <type -4>)
func AddUint32 (addr <type 4>, delta <type -7>) (new <type -7>)
func AddUint64 (addr <type 5>, delta <type -8>) (new <type -8>)
func AddUintptr (addr <type 6>, delta <type -13>) (new <type -13>)
func CompareAndSwapInt32 (addr <type 2>, old <type -3>, new <type -3>) (swapped <type -15>)
func CompareAndSwapInt64 (addr <type 3>, old <type -4>, new <type -4>) (swapped <type -15>)
func CompareAndSwapPointer (addr <type 7>, old <type 8>, new <type 8>) (swapped <type -15>)
func CompareAndSwapUint32 (addr <type 4>, old <type -7>, new <type -7>) (swapped <type -15>)
func CompareAndSwapUint64 (addr <type 5>, old <type -8>, new <type -8>) (swapped <type -15>)
func CompareAndSwapUintptr (addr <type 6>, old <type -13>, new <type -13>) (swapped <type -15>)
func LoadInt32 (addr <type 2>) (val <type -3>)
func LoadInt64 (addr <type 3>) (val <type -4>)
func LoadPointer (addr <type 7>) (val <type 8>)
func LoadUint32 (addr <type 4>) (val <type -7>)
func LoadUint64 (addr <type 5>) (val <type -8>)
func LoadUintptr (addr <type 6>) (val <type -13>)
func StoreInt32 (addr <type 2>, val <type -3>)
func StoreInt64 (addr <type 3>, val <type -4>)
func StorePointer (addr <type 7>, val <type 8>)
func StoreUint32 (addr <type 4>, val <type -7>)
func StoreUint64 (addr <type 5>, val <type -8>)
func StoreUintptr (addr <type 6>, val <type -13>)
func SwapInt32 (addr <type 2>, new <type -3>) (old <type -3>)
func SwapInt64 (addr <type 3>, new <type -4>) (old <type -4>)
func SwapPointer (addr <type 7>, new <type 8>) (old <type 8>)
func SwapUint32 (addr <type 4>, new <type -7>) (old <type -7>)
func SwapUint64 (addr <type 5>, new <type -8>) (old <type -8>)
func SwapUintptr (addr <type 6>, new <type -13>) (old <type -13>)
checksum 8792F9B8A8421B0EFD4DDFFABC9C129FC342C55A
v3;
package syscall
pkgpath syscall
import race internal/race "internal/race"
import runtime runtime "runtime"
import sync sync "sync"
import unsafe unsafe "unsafe"
init syscall syscall..import cpu internal..z2fcpu..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import
init_graph 0 1 0 2 0 3 0 4 2 1 2 3 4 1 4 2 4 3
types 262 88 28 88 33 25 31 24 27 31 149 27 29 27 27 34 28 29 33 30 31 31 34 34 34 87 32 28 28 98 40 36 38 108 28 30 30 30 28 27 30 32 29 33 36 99 99 42 40 261 28 28 30 27 31 28 259 28 32 31 30 131 131 135 133 130 42 31 29 28 30 33 34 31 29 28 152 36 35 151 34 35 27 25 27 27 29 29 417 190 19 39 77 24 19 18 19 21 20 22 99 24 19 67 93 22 36 20 126 26 25 23 19 85 25 21 20 20 37 26 44 126 20 224 21 34 43 151 93 21 65 20 20 22 23 20 20 20 20 20 20 20 20 20 37 97 20 52 24 64 81 51 63 26 110 136 77 56 100 51 20 55 20 38 172 20 20 54 53 54 20 51 52 98 39 22 20 22 22 20 154 37 86 23 20 470 123 25 43 55 25 52 25 88 24 20 111 20 148 86 55 26 20 50 38 178 87 305 20 20 38 22 77 54 93 20 78 20 96 20 155 25 20 110 20 61 20 53 25 41 39 322 24 229 41 47 24 396 19 22 80 20 325 24 20 155 25 20 38 20 51 51 603 90 65 37 20 57 20 22 144 25 20
type 1 "Addrinfo" <type 88>
type 2 "Cmsghdr" <type 99>
 func (cmsg <esc:0x1> <type 101>) SetLen (length <type -11>)
type 3 "Cmsghdr_len_t" <type -8>
type 4 "Conn" <type 102>
type 5 "Credential" <type 103>
type 6 "DIR" <type 105>
type 7 "Dirent" <type 107>
type 8 "EpollEvent" <type 112>
type 9 "Errno" <type -13>
 func (e <type 9>) Error () <type -16>
 func (e <type 9>) Temporary () <type -15>
 func (e <type 9>) Timeout () <type -15>
type 10 "FdSet" <type 117>
type 11 "Flock_t" <type 120>
type 12 "Gid_t" <type 143>
type 13 "Group" <type 144>
type 14 "ICMPv6Filter" <type 146>
type 15 "IPMreq" <type 148>
type 16 "IPMreqn" <type 149>
type 17 "IPv6MTUInfo" <type 150>
type 18 "IPv6Mreq" <type 151>
type 19 "IfAddrmsg" <type 153>
type 20 "IfInfomsg" <type 154>
type 21 "Inet4Pktinfo" <type 155>
type 22 "Inet6Pktinfo" <type 156>
type 23 "InotifyEvent" <type 157>
type 24 "Iovec" <type 158>
 func (iov <esc:0x1> <type 159>) SetLen (length <type -11>)
type 25 "Iovec_len_t" <type -8>
type 26 "Linger" <type 160>
type 27 "Mode_t" <type 162>
type 28 "Msghdr" <type 163>
 func (msghdr <esc:0x1> <type 164>) SetControllen (length <type -11>)
type 29 "Msghdr_controllen_t" <type -8>
type 30 "NetlinkMessage" <type 166>
type 31 "NetlinkRouteAttr" <type 167>
type 32 "NetlinkRouteRequest" <type 168>
 func (rr <esc:0x1> <type 169>) .syscall.toWireFormat () <type 98>
type 33 "NlAttr" <type 170>
type 34 "NlMsgerr" <type 171>
type 35 "NlMsghdr" <type 172>
type 36 "Offset_t" <type 173>
type 37 "Passwd" <type 179>
type 38 "Pid_t" <type 180>
type 39 "ProcAttr" <type 181>
type 40 "PtraceRegs" <type 184>
type 41 "RawConn" <type 185>
type 42 "RawSockaddr" <type 188>
type 43 "RawSockaddrAny" <type 190>
type 44 "RawSockaddrInet4" <type 192>
 func (sa <esc:0x1> <type 194>) .syscall.setLen () <type 66>
type 45 "RawSockaddrInet6" <type 195>
 func (sa <esc:0x1> <type 196>) .syscall.setLen () <type 66>
type 46 "RawSockaddrLinklayer" <type 197>
type 47 "RawSockaddrNetlink" <type 198>
type 48 "RawSockaddrUnix" <type 199>
 func (sa <esc:0x1> <type 201>) .syscall.setLen (? <type -11>)
 func (sa <esc:0x1> <type 201>) .syscall.getLen () (? <type -11>, ? <type -19>)
 func (sa <esc:0x1> <type 201>) .syscall.adjustAbstract (sl <type 66>) <type 66>
type 49 "Rlimit" <type 202>
type 50 "RtAttr" <type 170>
type 51 "RtGenmsg" <type 203>
type 52 "RtMsg" <type 204>
type 53 "RtNexthop" <type 205>
type 54 "Rusage" <type 206>
type 55 "Signal" <type -11>
 func (s <type 55>) Signal () <inl:150>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/syscall/syscall_unix.go:142
 func (s <type 55>) String () <type -16>
type 56 "Size_t" <type 209>
type 57 "SockFilter" <type 211>
type 58 "SockFprog" <type 212>
type 59 "Sockaddr" <type 213>
type 60 "SockaddrInet4" <type 215>
 func (sa <esc:0x12> <type 216>) .syscall.sockaddr () (? <type 214>, ? <type 66>, ? <type -19>)
type 61 "SockaddrInet6" <type 217>
 func (sa <esc:0x12> <type 218>) .syscall.sockaddr () (? <type 214>, ? <type 66>, ? <type -19>)
type 62 "SockaddrLinklayer" <type 219>
 func (sa <esc:0x12> <type 221>) .syscall.sockaddr () (? <type 214>, ? <type 66>, ? <type -19>)
type 63 "SockaddrNetlink" <type 222>
 func (sa <esc:0x12> <type 223>) .syscall.sockaddr () (? <type 214>, ? <type 66>, ? <type -19>)
type 64 "SockaddrUnix" <type 224>
 func (sa <esc:0x12> <type 225>) .syscall.sockaddr () (? <type 214>, ? <type 66>, ? <type -19>)
type 65 "SocketControlMessage" <type 226>
type 66 "Socklen_t" <type 228>
type 67 "Ssize_t" <type 229>
type 68 "Stat_t" <type 230>
type 69 "Statfs_t" <type 232>
type 70 "SysProcAttr" <type 236>
type 71 "SysProcIDMap" <type 239>
type 72 "Sysinfo_t" <type 241>
type 73 "Termios" <type 244>
type 74 "Time_t" <type 247>
type 75 "Timespec" <type 249>
 func (ts <esc:0x1> <type 165>) Unix () (sec <type -4>, nsec <type -4>)
 func (ts <esc:0x1> <type 165>) Nano () <type -4>
type 76 "Timespec_nsec_t" <type -4>
type 77 "Timespec_sec_t" <type -4>
type 78 "Timeval" <type 250>
 func (tv <esc:0x1> <type 142>) Unix () (sec <type -4>, nsec <type -4>)
 func (tv <esc:0x1> <type 142>) Nano () <type -4>
type 79 "Timeval_sec_t" <type -4>
type 80 "Timeval_usec_t" <type -4>
type 81 "Timex" <type 251>
type 82 "Tms" <type 252>
type 83 "Ucred" <type 253>
type 84 "Uid_t" <type 254>
type 85 "Utimbuf" <type 256>
type 86 "Utsname" <type 259>
type 87 "WaitStatus" <type -7>
 func (w <type 87>) TrapCause () <type -11>
 func (w <type 87>) StopSignal () <type 55>
 func (w <type 87>) Signal () <type 55>
 func (w <type 87>) CoreDump () <type -15>
 func (w <type 87>) ExitStatus () <type -11>
 func (w <type 87>) Continued () <type -15>
 func (w <type 87>) Stopped () <type -15>
 func (w <type 87>) Signaled () <type -15>
 func (w <type 87>) Exited () <type -15>
type 88 struct { Ai_flags <type -3>; Ai_family <type -3>; Ai_socktype <type -3>; Ai_protocol <type -3>; Ai_addrlen <type -7>; Ai_addr <type 89>; Ai_canonname <type 93>; Ai_next <type 94>; }
type 89 *<type 90>
type 90 ".syscall._sockaddr" <type 91>
type 91 struct { .syscall.sa_family <type -6>; .syscall.sa_data <type 92>; }
type 92 [14 ] <type -5>
type 93 *<type -5>
type 94 *<type 1>
type 95 *<type 81>
type 96 [] <type 57>
type 97 *<type -20>
type 98 [] <type -20>
type 99 struct { Len <type 3>; Level <type -3>; Type <type -3>; .syscall.__cmsg_data <type 100>; }
type 100 [0 ] <type -5>
type 101 *<type 2>
type 102 interface { SyscallConn () (? <type 41>, ? <type -19>); }
type 103 struct { Uid <type -7>; Gid <type -7>; Groups <type 104>; NoSetGroups <type -15>; }
type 104 [] <type -7>
type 105 ".syscall._DIR" <type 106>
type 106 struct { }
type 107 struct { Ino <type -8>; Off <type -4>; Reclen <type -6>; Type <type -5>; Name <type 108>; Godump_0_pad <type 109>; }
type 108 [256 ] <type -5>
type 109 [5 ] <type -20>
type 110 [] <type -16>
type 111 *<type 8>
type 112 struct { Events <type -7>; Pad <type 113>; Fd <type -3>; Pad2 <type 113>; }
type 113 [4 ] <type -20>
type 114 [] <type 8>
type 115 *<type 10>
type 116 *<type 11>
type 117 struct { Bits <type 118>; }
type 118 [16 ] <type 119>
type 119 ".syscall.fds_bits_type" <type -4>
type 120 struct { Type <type -2>; Whence <type -2>; Start <type -4>; Len <type -4>; Pid <type -3>; Godump_0_pad <type 113>; }
type 121 *<type 39>
type 122 "sync.RWMutex" <type 126>
 func (rw <esc:0x12> <type 123>) RLocker () ($ret8 <type 124>)
 func (rw <type 123>) Unlock ()
 func (rw <type 123>) Lock ()
 func (rw <type 123>) RUnlock ()
 func (rw <type 123>) RLock ()
type 123 *<type 122>
type 124 "sync.Locker" <type 125>
type 125 interface { Lock (); Unlock (); }
type 126 struct { .sync.w <type 127>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 127 "sync.Mutex" <type 129>
 func (m <type 128>) Unlock ()
 func (m <type 128>) Lock ()
type 128 *<type 127>
type 129 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 130 *<type 68>
type 131 *<type 69>
type 132 [] <type 78>
type 133 [] <type -11>
type 134 *<type 49>
type 135 *<type 54>
type 136 *<type 14>
type 137 *<type 15>
type 138 *<type 16>
type 139 *<type 17>
type 140 *<type 18>
type 141 *<type 83>
type 142 *<type 78>
type 143 ".syscall._gid_t" <type -7>
type 144 struct { Gr_name <type 93>; Gr_passwd <type 93>; Gr_gid <type -7>; Gr_mem <type 145>; }
type 145 *<type 93>
type 146 struct { .syscall.icmp6_Filt <type 147>; }
type 147 [8 ] <type -7>
type 148 struct { Multiaddr <type 113>; Interface <type 113>; }
type 149 struct { Multiaddr <type 113>; Address <type 113>; Ifindex <type -3>; }
type 150 struct { Addr <type 45>; Mtu <type -7>; }
type 151 struct { Multiaddr <type 152>; Interface <type -7>; }
type 152 [16 ] <type -20>
type 153 struct { Family <type -5>; Prefixlen <type -5>; Flags <type -5>; Scope <type -5>; Index <type -7>; }
type 154 struct { Family <type -5>; .syscall.__ifi_pad <type -5>; Type <type -6>; Index <type -3>; Flags <type -7>; Change <type -7>; }
type 155 struct { Ifindex <type -3>; Spec_dst <type 113>; Addr <type 113>; }
type 156 struct { Addr <type 152>; Ifindex <type -7>; }
type 157 struct { Wd <type -3>; Mask <type -7>; Cookie <type -7>; Len <type -7>; Name <type 100>; }
type 158 struct { Base <type 97>; Len <type 25>; }
type 159 *<type 24>
type 160 struct { Onoff <type -3>; Linger <type -3>; }
type 161 *<type 57>
type 162 ".syscall._mode_t" <type -7>
type 163 struct { Name <type 97>; Namelen <type -7>; Iov <type 159>; Iovlen <type -8>; Control <type 97>; Controllen <type 29>; Flags <type -3>; Godump_0_pad <type 113>; }
type 164 *<type 28>
type 165 *<type 75>
type 166 struct { Header <type 35>; Data <type 98>; }
type 167 struct { Attr <type 50>; Value <type 98>; }
type 168 struct { Header <type 35>; Data <type 51>; }
type 169 *<type 32>
type 170 struct { Len <type -6>; Type <type -6>; }
type 171 struct { Error <type -3>; Msg <type 35>; }
type 172 struct { Len <type -7>; Type <type -6>; Flags <type -6>; Seq <type -7>; Pid <type -7>; }
type 173 ".syscall._off64_t" <type -4>
type 174 [] <type 30>
type 175 *<type 30>
type 176 [] <type 31>
type 177 [] <type 65>
type 178 *<type 65>
type 179 struct { Pw_name <type 93>; Pw_passwd <type 93>; Pw_uid <type -7>; Pw_gid <type -7>; Pw_gecos <type 93>; Pw_dir <type 93>; Pw_shell <type 93>; }
type 180 ".syscall._pid_t" <type -3>
type 181 struct { Dir <type -16>; Env <type 110>; Files <type 182>; Sys <type 183>; }
type 182 [] <type -13>
type 183 *<type 70>
type 184 struct { Pc <type -8>; Ra <type -8>; Sp <type -8>; Gp <type -8>; Tp <type -8>; T0 <type -8>; T1 <type -8>; T2 <type -8>; S0 <type -8>; S1 <type -8>; A0 <type -8>; A1 <type -8>; A2 <type -8>; A3 <type -8>; A4 <type -8>; A5 <type -8>; A6 <type -8>; A7 <type -8>; S2 <type -8>; S3 <type -8>; S4 <type -8>; S5 <type -8>; S6 <type -8>; S7 <type -8>; S8 <type -8>; S9 <type -8>; S10 <type -8>; S11 <type -8>; T3 <type -8>; T4 <type -8>; T5 <type -8>; T6 <type -8>; }
type 185 interface { Control (f <type 186>) <type -19>; Read (f <type 187>) <type -19>; Write (f <type 187>) <type -19>; }
type 186 (fd <type -13>)
type 187 (fd <type -13>) (done <type -15>)
type 188 struct { Family <type -6>; Data <type 189>; }
type 189 [14 ] <type -1>
type 190 struct { Addr <type 42>; Pad <type 191>; }
type 191 [96 ] <type -1>
type 192 struct { Family <type -6>; Port <type -6>; Addr <type 113>; Zero <type 193>; }
type 193 [8 ] <type -5>
type 194 *<type 44>
type 195 struct { Family <type -6>; Port <type -6>; Flowinfo <type -7>; Addr <type 152>; Scope_id <type -7>; }
type 196 *<type 45>
type 197 struct { Family <type -6>; Protocol <type -6>; Ifindex <type -3>; Hatype <type -6>; Pkttype <type -5>; Halen <type -5>; Addr <type 193>; }
type 198 struct { Family <type -6>; Pad <type -6>; Pid <type -7>; Groups <type -7>; }
type 199 struct { Family <type -6>; Path <type 200>; }
type 200 [108 ] <type -1>
type 201 *<type 48>
type 202 struct { Cur <type -8>; Max <type -8>; }
type 203 struct { Family <type -5>; }
type 204 struct { Family <type -5>; Dst_len <type -5>; Src_len <type -5>; Tos <type -5>; Table <type -5>; Protocol <type -5>; Scope <type -5>; Type <type -5>; Flags <type -7>; }
type 205 struct { Len <type -6>; Flags <type -5>; Hops <type -5>; Ifindex <type -3>; }
type 206 struct { Utime <type 78>; Stime <type 78>; Maxrss <type -4>; Ixrss <type -4>; Idrss <type -4>; Isrss <type -4>; Minflt <type -4>; Majflt <type -4>; Nswap <type -4>; Inblock <type -4>; Oublock <type -4>; Msgsnd <type -4>; Msgrcv <type -4>; Nsignals <type -4>; Nvcsw <type -4>; Nivcsw <type -4>; }
type 207 *<type -4>
type 208 *<type 26>
type 209 ".syscall._size_t" <type -8>
type 210 [] <type 97>
type 211 struct { Code <type -6>; Jt <type -5>; Jf <type -5>; K <type -7>; }
type 212 struct { Len <type -6>; Filter <type 161>; }
type 213 interface { .syscall.sockaddr () (ptr <type 214>, len <type 66>, err <type -19>); }
type 214 *<type 43>
type 215 struct { Port <type -11>; Addr <type 113>; .syscall.raw <type 44>; }
type 216 *<type 60>
type 217 struct { Port <type -11>; ZoneId <type -7>; Addr <type 152>; .syscall.raw <type 45>; }
type 218 *<type 61>
type 219 struct { Protocol <type -6>; Ifindex <type -11>; Hatype <type -6>; Pkttype <type -5>; Halen <type -5>; Addr <type 220>; .syscall.raw <type 46>; }
type 220 [8 ] <type -20>
type 221 *<type 62>
type 222 struct { Family <type -6>; Pad <type -6>; Pid <type -7>; Groups <type -7>; .syscall.raw <type 47>; }
type 223 *<type 63>
type 224 struct { Name <type -16>; .syscall.raw <type 48>; }
type 225 *<type 64>
type 226 struct { Header <type 2>; Data <type 98>; }
type 227 [2 ] <type -11>
type 228 ".syscall._socklen_t" <type -7>
type 229 ".syscall._ssize_t" <type -4>
type 230 struct { Dev <type -8>; Ino <type -8>; Mode <type -7>; Nlink <type -7>; Uid <type -7>; Gid <type -7>; Rdev <type -8>; .syscall.__pad1 <type -8>; Size <type -4>; Blksize <type -3>; .syscall.__pad2 <type -3>; Blocks <type -4>; Atim <type 75>; Mtim <type 75>; Ctim <type 75>; .syscall.__glibc_reserved <type 231>; }
type 231 [2 ] <type -3>
type 232 struct { Type <type -4>; Bsize <type -4>; Blocks <type -8>; Bfree <type -8>; Bavail <type -8>; Files <type -8>; Ffree <type -8>; Fsid <type 233>; Namelen <type -4>; Frsize <type -4>; Flags <type -4>; Spare <type 235>; }
type 233 ".syscall.___fsid_t" <type 234>
type 234 struct { .syscall.__val <type 231>; }
type 235 [4 ] <type -4>
type 236 struct { Chroot <type -16>; Credential <type 237>; Ptrace <type -15>; Setsid <type -15>; Setpgid <type -15>; Setctty <type -15>; Noctty <type -15>; Ctty <type -11>; Foreground <type -15>; Pgid <type -11>; Pdeathsig <type 55>; Cloneflags <type -13>; Unshareflags <type -13>; UidMappings <type 238>; GidMappings <type 238>; GidMappingsEnableSetgroups <type -15>; AmbientCaps <type 182>; }
type 237 *<type 5>
type 238 [] <type 71>
type 239 struct { ContainerID <type -11>; HostID <type -11>; Size <type -11>; }
type 240 *<type 72>
type 241 struct { Uptime <type -4>; Loads <type 242>; Totalram <type -8>; Freeram <type -8>; Sharedram <type -8>; Bufferram <type -8>; Totalswap <type -8>; Freeswap <type -8>; Procs <type -6>; .syscall.pad <type -6>; Totalhigh <type -8>; Freehigh <type -8>; Unit <type -7>; .syscall._f <type 100>; Godump_0_pad <type 113>; }
type 242 [3 ] <type -8>
type 243 *<type 73>
type 244 struct { Iflag <type -7>; Oflag <type -7>; Cflag <type -7>; Lflag <type -7>; Line <type -5>; Cc <type 245>; Ispeed <type -7>; Ospeed <type -7>; }
type 245 [32 ] <type -5>
type 246 *<type 74>
type 247 ".syscall._time_t" <type -4>
type 248 *<type 82>
type 249 struct { Sec <type 77>; Nsec <type 76>; }
type 250 struct { Sec <type 79>; Usec <type 80>; }
type 251 struct { Modes <type -7>; Offset <type -4>; Freq <type -4>; Maxerror <type -4>; Esterror <type -4>; Status <type -3>; Constant <type -4>; Precision <type -4>; Tolerance <type -4>; Time <type 78>; Tick <type -4>; Ppsfreq <type -4>; Jitter <type -4>; Shift <type -3>; Stabil <type -4>; Jitcnt <type -4>; Calcnt <type -4>; Errcnt <type -4>; Stbcnt <type -4>; Tai <type -3>; Godump_0 <type -3>; Godump_1 <type -3>; Godump_2 <type -3>; Godump_3 <type -3>; Godump_4 <type -3>; Godump_5 <type -3>; Godump_6 <type -3>; Godump_7 <type -3>; Godump_8 <type -3>; Godump_9 <type -3>; Godump_10 <type -3>; }
type 252 struct { Utime <type -4>; Stime <type -4>; Cutime <type -4>; Cstime <type -4>; }
type 253 struct { Pid <type -3>; Uid <type -7>; Gid <type -7>; }
type 254 ".syscall._uid_t" <type -7>
type 255 *<type 86>
type 256 struct { Actime <type -4>; Modtime <type -4>; }
type 257 *<type 85>
type 258 [] <type 75>
type 259 struct { Sysname <type 260>; Nodename <type 260>; Release <type 260>; Version <type 260>; Machine <type 260>; Domainname <type 260>; }
type 260 [65 ] <type -5>
type 261 *<type 87>
const AF_ALG = 38 
const AF_APPLETALK = 5 
const AF_ASH = 18 
const AF_ATMPVC = 8 
const AF_ATMSVC = 20 
const AF_AX25 = 3 
const AF_BLUETOOTH = 31 
const AF_BRIDGE = 7 
const AF_CAIF = 37 
const AF_CAN = 29 
const AF_DECnet = 12 
const AF_ECONET = 19 
const AF_FILE = 1 
const AF_IB = 27 
const AF_IEEE802154 = 36 
const AF_INET = 2 
const AF_INET6 = 10 
const AF_IPX = 4 
const AF_IRDA = 23 
const AF_ISDN = 34 
const AF_IUCV = 32 
const AF_KCM = 41 
const AF_KEY = 15 
const AF_LLC = 26 
const AF_LOCAL = 1 
const AF_MAX = 45 
const AF_MPLS = 28 
const AF_NETBEUI = 13 
const AF_NETLINK = 16 
const AF_NETROM = 6 
const AF_NFC = 39 
const AF_PACKET = 17 
const AF_PHONET = 35 
const AF_PPPOX = 24 
const AF_QIPCRTR = 42 
const AF_RDS = 21 
const AF_ROSE = 11 
const AF_ROUTE = 16 
const AF_RXRPC = 33 
const AF_SECURITY = 14 
const AF_SMC = 43 
const AF_SNA = 22 
const AF_TIPC = 30 
const AF_UNIX = 1 
const AF_UNSPEC = 0 
const AF_VSOCK = 40 
const AF_WANPIPE = 25 
const AF_X25 = 9 
const AF_XDP = 44 
const AI_ADDRCONFIG = 32 
const AI_ALL = 16 
const AI_CANONIDN = 128 
const AI_CANONNAME = 2 
const AI_IDN = 64 
const AI_NUMERICHOST = 4 
const AI_NUMERICSERV = 1024 
const AI_PASSIVE = 1 
const AI_V4MAPPED = 8 
const ARCH = "riscv64"
const ARPHRD_ADAPT = 264 
const ARPHRD_APPLETLK = 8 
const ARPHRD_ARCNET = 7 
const ARPHRD_ASH = 781 
const ARPHRD_ATM = 19 
const ARPHRD_AX25 = 3 
const ARPHRD_BIF = 775 
const ARPHRD_CHAOS = 5 
const ARPHRD_CISCO = 513 
const ARPHRD_CSLIP = 257 
const ARPHRD_CSLIP6 = 259 
const ARPHRD_DDCMP = 517 
const ARPHRD_DLCI = 15 
const ARPHRD_ECONET = 782 
const ARPHRD_EETHER = 2 
const ARPHRD_ETHER = 1 
const ARPHRD_EUI64 = 27 
const ARPHRD_FCAL = 785 
const ARPHRD_FCFABRIC = 787 
const ARPHRD_FCPL = 786 
const ARPHRD_FCPP = 784 
const ARPHRD_FDDI = 774 
const ARPHRD_FRAD = 770 
const ARPHRD_HDLC = 513 
const ARPHRD_HIPPI = 780 
const ARPHRD_HWX25 = 272 
const ARPHRD_IEEE1394 = 24 
const ARPHRD_IEEE802 = 6 
const ARPHRD_IEEE80211 = 801 
const ARPHRD_IEEE80211_PRISM = 802 
const ARPHRD_IEEE80211_RADIOTAP = 803 
const ARPHRD_IEEE802154 = 804 
const ARPHRD_IEEE802154_PHY = 805 
const ARPHRD_IEEE802_TR = 800 
const ARPHRD_INFINIBAND = 32 
const ARPHRD_IPDDP = 777 
const ARPHRD_IPGRE = 778 
const ARPHRD_IRDA = 783 
const ARPHRD_LAPB = 516 
const ARPHRD_LOCALTLK = 773 
const ARPHRD_LOOPBACK = 772 
const ARPHRD_METRICOM = 23 
const ARPHRD_NETROM = 0 
const ARPHRD_NONE = 65534 
const ARPHRD_PIMREG = 779 
const ARPHRD_PPP = 512 
const ARPHRD_PRONET = 4 
const ARPHRD_RAWHDLC = 518 
const ARPHRD_RAWIP = 519 
const ARPHRD_ROSE = 270 
const ARPHRD_RSRVD = 260 
const ARPHRD_SIT = 776 
const ARPHRD_SKIP = 771 
const ARPHRD_SLIP = 256 
const ARPHRD_SLIP6 = 258 
const ARPHRD_TUNNEL = 768 
const ARPHRD_TUNNEL6 = 769 
const ARPHRD_VOID = 65535 
const ARPHRD_X25 = 271 
func Accept (fd <type -11>) (nfd <type -11>, sa <type 59>, err <type -19>)
func Accept4 (fd <type -11>, flags <type -11>) (nfd <type -11>, sa <type 59>, err <type -19>)
func Access (path <esc:0x1> <type -16>, mode <type -7>) (err <type -19>)
func Acct (path <esc:0x1> <type -16>) (err <type -19>)
func Adjtimex (buf <esc:0x1> <type 95>) (state <type -11>, err <type -19>)
func AttachLsf (fd <type -11>, i <esc:0x1> <type 96>) <type -19>
const B0 = 0 
const B1000000 = 4104 
const B110 = 3 
const B115200 = 4098 
const B1152000 = 4105 
const B1200 = 9 
const B134 = 4 
const B150 = 5 
const B1500000 = 4106 
const B1800 = 10 
const B19200 = 14 
const B200 = 6 
const B2000000 = 4107 
const B230400 = 4099 
const B2400 = 11 
const B2500000 = 4108 
const B300 = 7 
const B3000000 = 4109 
const B3500000 = 4110 
const B38400 = 15 
const B4000000 = 4111 
const B460800 = 4100 
const B4800 = 12 
const B50 = 1 
const B500000 = 4101 
const B57600 = 4097 
const B576000 = 4102 
const B600 = 8 
const B75 = 2 
const B921600 = 4103 
const B9600 = 13 
const BPF_A = 16 
const BPF_ABS = 32 
const BPF_ADD = 0 
const BPF_ALU = 4 
const BPF_AND = 80 
const BPF_B = 16 
const BPF_DIV = 48 
const BPF_H = 8 
const BPF_IMM = 0 
const BPF_IND = 64 
const BPF_JA = 0 
const BPF_JEQ = 16 
const BPF_JGE = 48 
const BPF_JGT = 32 
const BPF_JMP = 5 
const BPF_JSET = 64 
const BPF_K = 0 
const BPF_LD = 0 
const BPF_LDX = 1 
const BPF_LEN = 128 
const BPF_LL_OFF = -2097152 
const BPF_LSH = 96 
const BPF_MAJOR_VERSION = 1 
const BPF_MAXINSNS = 4096 
const BPF_MEM = 96 
const BPF_MEMWORDS = 16 
const BPF_MINOR_VERSION = 1 
const BPF_MISC = 7 
const BPF_MOD = 144 
const BPF_MSH = 160 
const BPF_MUL = 32 
const BPF_NEG = 128 
const BPF_NET_OFF = -1048576 
const BPF_OR = 64 
const BPF_RET = 6 
const BPF_RSH = 112 
const BPF_ST = 2 
const BPF_STX = 3 
const BPF_SUB = 16 
const BPF_TAX = 0 
const BPF_TXA = 128 
const BPF_W = 0 
const BPF_X = 8 
const BPF_XOR = 160 
const BRKINT = 2 
const BSDLY = 8192 
func Bind (fd <type -11>, sa <type 59>) (err <type -19>)
func BindToDevice (fd <type -11>, device <esc:0x1> <type -16>) (err <type -19>)
func BytePtrFromString (s <esc:0x1> <type -16>) (? <type 97>, ? <type -19>)
func ByteSliceFromString (s <esc:0x1> <type -16>) (? <type 98>, ? <type -19>)
const CBAUD = 4111 
const CBAUDEX = 4096 
const CIBAUD = 269418496 
const CLOCAL = 2048 
const CLONE_CHILD_CLEARTID = 2097152 
const CLONE_CHILD_SETTID = 16777216 
const CLONE_DETACHED = 4194304 
const CLONE_FILES = 1024 
const CLONE_FS = 512 
const CLONE_IO = 2147483648 
const CLONE_NEWCGROUP = 33554432 
const CLONE_NEWIPC = 134217728 
const CLONE_NEWNET = 1073741824 
const CLONE_NEWNS = 131072 
const CLONE_NEWPID = 536870912 
const CLONE_NEWUSER = 268435456 
const CLONE_NEWUTS = 67108864 
const CLONE_PARENT = 32768 
const CLONE_PARENT_SETTID = 1048576 
const CLONE_PIDFD = 4096 
const CLONE_PTRACE = 8192 
const CLONE_SETTLS = 524288 
const CLONE_SIGHAND = 2048 
const CLONE_SYSVSEM = 262144 
const CLONE_THREAD = 65536 
const CLONE_UNTRACED = 8388608 
const CLONE_VFORK = 16384 
const CLONE_VM = 256 
const CMSPAR = 1073741824 
const CR0 = 0 
const CR1 = 512 
const CR2 = 1024 
const CR3 = 1536 
const CRDLY = 1536 
const CREAD = 128 
const CRTSCTS = 2147483648 
const CS5 = 0 
const CS6 = 16 
const CS7 = 32 
const CS8 = 48 
const CSIZE = 48 
const CSTOPB = 64 
func Cgocall ()
func CgocallBack ()
func CgocallBackDone ()
func CgocallDone ()
func Chdir (path <esc:0x1> <type -16>) (err <type -19>)
func Chmod (path <esc:0x1> <type -16>, mode <type -7>) (err <type -19>)
func Chown (path <esc:0x1> <type -16>, uid <type -11>, gid <type -11>) (err <type -19>)
func Chroot (path <esc:0x1> <type -16>) (err <type -19>)
func Clearenv ()
func Close (fd <type -11>) (err <type -19>)
func CloseOnExec (fd <type -11>)
func CmsgLen (datalen <type -11>) <type -11>
func CmsgSpace (datalen <type -11>) <type -11>
func Connect (fd <type -11>, sa <type 59>) (err <type -19>)
func Creat (path <esc:0x1> <type -16>, mode <type -7>) (fd <type -11>, err <type -19>)
const DT_BLK = 6 
const DT_CHR = 2 
const DT_DIR = 4 
const DT_FIFO = 1 
const DT_LNK = 10 
const DT_REG = 8 
const DT_SOCK = 12 
const DT_UNKNOWN = 0 
const DT_WHT = 14 
func DetachLsf (fd <type -11>) <type -19>
func Dup (oldfd <type -11>) (fd <type -11>, err <type -19>)
func Dup2 (oldfd <type -11>, newfd <type -11>) (err <type -19>)
func Dup3 (oldfd <type -11>, newfd <type -11>, flags <type -11>) (err <type -19>)
const E2BIG <type 9> = 7 
const EACCES <type 9> = 13 
const EADDRINUSE <type 9> = 98 
const EADDRNOTAVAIL <type 9> = 99 
const EADV <type 9> = 68 
const EAFNOSUPPORT <type 9> = 97 
const EAGAIN <type 9> = 11 
const EAI_ADDRFAMILY = -9 
const EAI_AGAIN = -3 
const EAI_ALLDONE = -103 
const EAI_BADFLAGS = -1 
const EAI_CANCELED = -101 
const EAI_FAIL = -4 
const EAI_FAMILY = -6 
const EAI_IDN_ENCODE = -105 
const EAI_INPROGRESS = -100 
const EAI_INTR = -104 
const EAI_MEMORY = -10 
const EAI_NODATA = -5 
const EAI_NONAME = -2 
const EAI_NOTCANCELED = -102 
const EAI_OVERFLOW = -12 
const EAI_SERVICE = -8 
const EAI_SOCKTYPE = -7 
const EAI_SYSTEM = -11 
const EALREADY <type 9> = 114 
const EBADE <type 9> = 52 
const EBADF <type 9> = 9 
const EBADFD <type 9> = 77 
const EBADMSG <type 9> = 74 
const EBADR <type 9> = 53 
const EBADRQC <type 9> = 56 
const EBADSLT <type 9> = 57 
const EBFONT <type 9> = 59 
const EBUSY <type 9> = 16 
const ECANCELED <type 9> = 125 
const ECHILD <type 9> = 10 
const ECHO = 8 
const ECHOCTL = 512 
const ECHOE = 16 
const ECHOK = 32 
const ECHOKE = 2048 
const ECHONL = 64 
const ECHOPRT = 1024 
const ECHRNG <type 9> = 44 
const ECOMM <type 9> = 70 
const ECONNABORTED <type 9> = 103 
const ECONNREFUSED <type 9> = 111 
const ECONNRESET <type 9> = 104 
const EDEADLK <type 9> = 35 
const EDEADLOCK <type 9> = 35 
const EDESTADDRREQ <type 9> = 89 
const EDOM <type 9> = 33 
const EDOTDOT <type 9> = 73 
const EDQUOT <type 9> = 122 
const EEXIST <type 9> = 17 
const EFAULT <type 9> = 14 
const EFBIG <type 9> = 27 
const EHOSTDOWN <type 9> = 112 
const EHOSTUNREACH <type 9> = 113 
const EHWPOISON <type 9> = 133 
const EIDRM <type 9> = 43 
const EILSEQ <type 9> = 84 
const EINPROGRESS <type 9> = 115 
const EINTR <type 9> = 4 
const EINVAL <type 9> = 22 
const EIO <type 9> = 5 
const EISCONN <type 9> = 106 
const EISDIR <type 9> = 21 
const EISNAM <type 9> = 120 
const EKEYEXPIRED <type 9> = 127 
const EKEYREJECTED <type 9> = 129 
const EKEYREVOKED <type 9> = 128 
const EL2HLT <type 9> = 51 
const EL2NSYNC <type 9> = 45 
const EL3HLT <type 9> = 46 
const EL3RST <type 9> = 47 
const ELIBACC <type 9> = 79 
const ELIBBAD <type 9> = 80 
const ELIBEXEC <type 9> = 83 
const ELIBMAX <type 9> = 82 
const ELIBSCN <type 9> = 81 
const ELNRNG <type 9> = 48 
const ELOOP <type 9> = 40 
const EMEDIUMTYPE <type 9> = 124 
const EMFILE <type 9> = 24 
const EMLINK <type 9> = 31 
const EMSGSIZE <type 9> = 90 
const EMULTIHOP <type 9> = 72 
const ENAMETOOLONG <type 9> = 36 
const ENAVAIL <type 9> = 119 
const ENETDOWN <type 9> = 100 
const ENETRESET <type 9> = 102 
const ENETUNREACH <type 9> = 101 
const ENFILE <type 9> = 23 
const ENOANO <type 9> = 55 
const ENOBUFS <type 9> = 105 
const ENOCSI <type 9> = 50 
const ENODATA <type 9> = 61 
const ENODEV <type 9> = 19 
const ENOENT <type 9> = 2 
const ENOEXEC <type 9> = 8 
const ENOKEY <type 9> = 126 
const ENOLCK <type 9> = 37 
const ENOLINK <type 9> = 67 
const ENOMEDIUM <type 9> = 123 
const ENOMEM <type 9> = 12 
const ENOMSG <type 9> = 42 
const ENONET <type 9> = 64 
const ENOPKG <type 9> = 65 
const ENOPROTOOPT <type 9> = 92 
const ENOSPC <type 9> = 28 
const ENOSR <type 9> = 63 
const ENOSTR <type 9> = 60 
const ENOSYS <type 9> = 38 
const ENOTBLK <type 9> = 15 
const ENOTCONN <type 9> = 107 
const ENOTDIR <type 9> = 20 
const ENOTEMPTY <type 9> = 39 
const ENOTNAM <type 9> = 118 
const ENOTRECOVERABLE <type 9> = 131 
const ENOTSOCK <type 9> = 88 
const ENOTSUP <type 9> = 95 
const ENOTTY <type 9> = 25 
const ENOTUNIQ <type 9> = 76 
const ENXIO <type 9> = 6 
const EOPNOTSUPP <type 9> = 95 
const EOVERFLOW <type 9> = 75 
const EOWNERDEAD <type 9> = 130 
const EPERM <type 9> = 1 
const EPFNOSUPPORT <type 9> = 96 
const EPIPE <type 9> = 32 
const EPOLLERR = 8 
const EPOLLET = 2147483648 
const EPOLLEXCLUSIVE = 268435456 
const EPOLLHUP = 16 
const EPOLLIN = 1 
const EPOLLMSG = 1024 
const EPOLLONESHOT = 1073741824 
const EPOLLOUT = 4 
const EPOLLPRI = 2 
const EPOLLRDBAND = 128 
const EPOLLRDHUP = 8192 
const EPOLLRDNORM = 64 
const EPOLLWAKEUP = 536870912 
const EPOLLWRBAND = 512 
const EPOLLWRNORM = 256 
const EPOLL_CLOEXEC = 524288 
const EPOLL_CTL_ADD = 1 
const EPOLL_CTL_DEL = 2 
const EPOLL_CTL_MOD = 3 
const EPROTO <type 9> = 71 
const EPROTONOSUPPORT <type 9> = 93 
const EPROTOTYPE <type 9> = 91 
const ERANGE <type 9> = 34 
const EREMCHG <type 9> = 78 
const EREMOTE <type 9> = 66 
const EREMOTEIO <type 9> = 121 
const ERESTART <type 9> = 85 
const ERFKILL <type 9> = 132 
const EROFS <type 9> = 30 
const ESHUTDOWN <type 9> = 108 
const ESOCKTNOSUPPORT <type 9> = 94 
const ESPIPE <type 9> = 29 
const ESRCH <type 9> = 3 
const ESRMNT <type 9> = 69 
const ESTALE <type 9> = 116 
const ESTRPIPE <type 9> = 86 
const ETH_ALEN = 6 
const ETH_DATA_LEN = 1500 
const ETH_FCS_LEN = 4 
const ETH_FRAME_LEN = 1514 
const ETH_HLEN = 14 
const ETH_MAX_MTU = 65535 
const ETH_MIN_MTU = 68 
const ETH_P_1588 = 35063 
const ETH_P_8021AD = 34984 
const ETH_P_8021AH = 35047 
const ETH_P_8021Q = 33024 
const ETH_P_80221 = 35095 
const ETH_P_802_2 = 4 
const ETH_P_802_3 = 1 
const ETH_P_802_3_MIN = 1536 
const ETH_P_802_EX1 = 34997 
const ETH_P_AARP = 33011 
const ETH_P_AF_IUCV = 64507 
const ETH_P_ALL = 3 
const ETH_P_AOE = 34978 
const ETH_P_ARCNET = 26 
const ETH_P_ARP = 2054 
const ETH_P_ATALK = 32923 
const ETH_P_ATMFATE = 34948 
const ETH_P_ATMMPOA = 34892 
const ETH_P_AX25 = 2 
const ETH_P_BATMAN = 17157 
const ETH_P_BPQ = 2303 
const ETH_P_CAIF = 247 
const ETH_P_CAN = 12 
const ETH_P_CANFD = 13 
const ETH_P_CONTROL = 22 
const ETH_P_CUST = 24582 
const ETH_P_DDCMP = 6 
const ETH_P_DEC = 24576 
const ETH_P_DIAG = 24581 
const ETH_P_DNA_DL = 24577 
const ETH_P_DNA_RC = 24578 
const ETH_P_DNA_RT = 24579 
const ETH_P_DSA = 27 
const ETH_P_DSA_8021Q = 56027 
const ETH_P_ECONET = 24 
const ETH_P_EDSA = 56026 
const ETH_P_ERSPAN = 35006 
const ETH_P_ERSPAN2 = 8939 
const ETH_P_FCOE = 35078 
const ETH_P_FIP = 35092 
const ETH_P_HDLC = 25 
const ETH_P_HSR = 35119 
const ETH_P_IBOE = 35093 
const ETH_P_IEEE802154 = 246 
const ETH_P_IEEEPUP = 2560 
const ETH_P_IEEEPUPAT = 2561 
const ETH_P_IFE = 60734 
const ETH_P_IP = 2048 
const ETH_P_IPV6 = 34525 
const ETH_P_IPX = 33079 
const ETH_P_IRDA = 23 
const ETH_P_LAT = 24580 
const ETH_P_LINK_CTL = 34924 
const ETH_P_LLDP = 35020 
const ETH_P_LOCALTALK = 9 
const ETH_P_LOOP = 96 
const ETH_P_LOOPBACK = 36864 
const ETH_P_MACSEC = 35045 
const ETH_P_MAP = 249 
const ETH_P_MOBITEX = 21 
const ETH_P_MPLS_MC = 34888 
const ETH_P_MPLS_UC = 34887 
const ETH_P_MRP = 35043 
const ETH_P_MVRP = 35061 
const ETH_P_NCSI = 35064 
const ETH_P_NSH = 35151 
const ETH_P_PAE = 34958 
const ETH_P_PAUSE = 34824 
const ETH_P_PHONET = 245 
const ETH_P_PPPTALK = 16 
const ETH_P_PPP_DISC = 34915 
const ETH_P_PPP_MP = 8 
const ETH_P_PPP_SES = 34916 
const ETH_P_PREAUTH = 35015 
const ETH_P_PRP = 35067 
const ETH_P_PUP = 512 
const ETH_P_PUPAT = 513 
const ETH_P_QINQ1 = 37120 
const ETH_P_QINQ2 = 37376 
const ETH_P_QINQ3 = 37632 
const ETH_P_RARP = 32821 
const ETH_P_SCA = 24583 
const ETH_P_SLOW = 34825 
const ETH_P_SNAP = 5 
const ETH_P_TDLS = 35085 
const ETH_P_TEB = 25944 
const ETH_P_TIPC = 35018 
const ETH_P_TRAILER = 28 
const ETH_P_TR_802_2 = 17 
const ETH_P_TSN = 8944 
const ETH_P_WAN_PPP = 7 
const ETH_P_WCCP = 34878 
const ETH_P_X25 = 2053 
const ETH_P_XDSA = 248 
const ETH_TLEN = 2 
const ETH_ZLEN = 60 
const ETIME <type 9> = 62 
const ETIMEDOUT <type 9> = 110 
const ETOOMANYREFS <type 9> = 109 
const ETXTBSY <type 9> = 26 
const EUCLEAN <type 9> = 117 
const EUNATCH <type 9> = 49 
const EUSERS <type 9> = 87 
const EWOULDBLOCK <type 9> = 11 
const EXDEV <type 9> = 18 
const EXFULL <type 9> = 54 
func Entersyscall ()
func Environ () <type 110>
func EpollCreate (size <type -11>) (fd <type -11>, err <type -19>)
func EpollCreate1 (flags <type -11>) (fd <type -11>, err <type -19>)
func EpollCtl (epfd <type -11>, op <type -11>, fd <type -11>, event <esc:0x1> <type 111>) (err <type -19>)
func EpollWait (epfd <type -11>, events <esc:0x1> <type 114>, msec <type -11>) (n <type -11>, err <type -19>)
func Errstr (errnum <type -11>) <type -16>
func Exec (argv0 <esc:0x1> <type -16>, argv <esc:0x1> <type 110>, envv <esc:0x1> <type 110>) (err <type -19>)
func Exit (code <type -11>)
func Exitsyscall ()
const FALLOC_FL_COLLAPSE_RANGE = 8 
const FALLOC_FL_INSERT_RANGE = 32 
const FALLOC_FL_KEEP_SIZE = 1 
const FALLOC_FL_NO_HIDE_STALE = 4 
const FALLOC_FL_PUNCH_HOLE = 2 
const FALLOC_FL_UNSHARE_RANGE = 64 
const FALLOC_FL_ZERO_RANGE = 16 
func FDClr (fd <type -11>, set <esc:0x1> <type 115>)
func FDIsSet (fd <type -11>, set <esc:0x1> <type 115>) <type -15>
func FDSet (fd <type -11>, set <esc:0x1> <type 115>)
func FDZero (set <esc:0x1> <type 115>)
const FD_CLOEXEC = 1 
const FD_SETSIZE = 1024 
const FFDLY = 32768 
const FLUSHO = 4096 
const F_ADD_SEALS = 1033 
const F_DUPFD = 0 
const F_DUPFD_CLOEXEC = 1030 
const F_EXLCK = 4 
const F_GETFD = 1 
const F_GETFL = 3 
const F_GETLEASE = 1025 
const F_GETLK = 5 
const F_GETLK64 = 5 
const F_GETOWN = 9 
const F_GETOWN_EX = 16 
const F_GETPIPE_SZ = 1032 
const F_GETSIG = 11 
const F_GET_FILE_RW_HINT = 1037 
const F_GET_RW_HINT = 1035 
const F_GET_SEALS = 1034 
const F_LOCK = 1 
const F_NOTIFY = 1026 
const F_OFD_GETLK = 36 
const F_OFD_SETLK = 37 
const F_OFD_SETLKW = 38 
const F_OK = 0 
const F_OWNER_GID = 2 
const F_OWNER_PGRP = 2 
const F_OWNER_PID = 1 
const F_OWNER_TID = 0 
const F_RDLCK = 0 
const F_SEAL_FUTURE_WRITE = 16 
const F_SEAL_GROW = 4 
const F_SEAL_SEAL = 1 
const F_SEAL_SHRINK = 2 
const F_SEAL_WRITE = 8 
const F_SETFD = 2 
const F_SETFL = 4 
const F_SETLEASE = 1024 
const F_SETLK = 6 
const F_SETLK64 = 6 
const F_SETLKW = 7 
const F_SETLKW64 = 7 
const F_SETOWN = 8 
const F_SETOWN_EX = 15 
const F_SETPIPE_SZ = 1031 
const F_SETSIG = 10 
const F_SET_FILE_RW_HINT = 1038 
const F_SET_RW_HINT = 1036 
const F_SHLCK = 8 
const F_TEST = 3 
const F_TLOCK = 2 
const F_ULOCK = 0 
const F_UNLCK = 2 
const F_WRLCK = 1 
func Faccessat (dirfd <type -11>, path <esc:0x1> <type -16>, mode <type -7>, flags <type -11>) (err <type -19>)
func Fallocate (fd <type -11>, mode <type -7>, off <type -4>, len <type -4>) (err <type -19>)
func Fchdir (fd <type -11>) (err <type -19>)
func Fchmod (fd <type -11>, mode <type -7>) (err <type -19>)
func Fchmodat (dirfd <type -11>, path <esc:0x1> <type -16>, mode <type -7>, flags <type -11>) (err <type -19>)
func Fchown (fd <type -11>, uid <type -11>, gid <type -11>) (err <type -19>)
func Fchownat (dirfd <type -11>, path <esc:0x1> <type -16>, uid <type -11>, gid <type -11>, flags <type -11>) (err <type -19>)
func FcntlFlock (fd <type -13>, cmd <type -11>, lk <esc:0x1> <type 116>) (err <type -19>)
func Fdatasync (fd <type -11>) (err <type -19>)
func Flock (fd <type -11>, how <type -11>) (err <type -19>)
func ForkExec (argv0 <esc:0x1> <type -16>, argv <esc:0x1> <type 110>, attr <esc:0x1> <type 121>) (pid <type -11>, err <type -19>)
var ForkLock <type 122>
func Fstat (fd <type -11>, stat <esc:0x1> <type 130>) (err <type -19>)
func Fstatfs (fd <type -11>, buf <esc:0x1> <type 131>) (err <type -19>)
func Fsync (fd <type -11>) (err <type -19>)
func Ftruncate (fd <type -11>, length <type -4>) (err <type -19>)
func Futimes (fd <type -11>, tv <esc:0x1> <type 132>) (err <type -19>)
func Futimesat (dirfd <type -11>, path <esc:0x1> <type -16>, tv <esc:0x1> <type 132>) (err <type -19>)
func GetErrno () <type 9>
func Getcwd (buf <esc:0x1> <type 98>) (n <type -11>, err <type -19>)
func Getdents (fd <type -11>, buf <esc:0x1> <type 98>) (n <type -11>, err <type -19>)
func Getegid () (egid <type -11>)
func Getenv (key <esc:0x1> <type -16>) (value <type -16>, found <type -15>)
func Geteuid () (euid <type -11>)
func Getgid () (gid <type -11>)
func Getgroups () (gids <type 133>, err <type -19>)
func Getpagesize () <type -11>
func Getpeername (fd <type -11>) (sa <type 59>, err <type -19>)
func Getpgid (pid <type -11>) (pgid <type -11>, err <type -19>)
func Getpgrp () (pid <type -11>)
func Getpid () (pid <type -11>)
func Getppid () (ppid <type -11>)
func Getpriority (which <type -11>, who <type -11>) (prio <type -11>, err <type -19>)
func Getrlimit (resource <type -11>, rlim <esc:0x1> <type 134>) (err <type -19>)
func Getrusage (who <type -11>, rusage <esc:0x1> <type 135>) (err <type -19>)
func Getsockname (fd <type -11>) (sa <type 59>, err <type -19>)
func GetsockoptByte (fd <type -11>, level <type -11>, opt <type -11>) (value <type -20>, err <type -19>)
func GetsockoptICMPv6Filter (fd <type -11>, level <type -11>, opt <type -11>) (? <type 136>, ? <type -19>)
func GetsockoptIPMreq (fd <type -11>, level <type -11>, opt <type -11>) (? <type 137>, ? <type -19>)
func GetsockoptIPMreqn (fd <type -11>, level <type -11>, opt <type -11>) (? <type 138>, ? <type -19>)
func GetsockoptIPv6MTUInfo (fd <type -11>, level <type -11>, opt <type -11>) (? <type 139>, ? <type -19>)
func GetsockoptIPv6Mreq (fd <type -11>, level <type -11>, opt <type -11>) (? <type 140>, ? <type -19>)
func GetsockoptInet4Addr (fd <type -11>, level <type -11>, opt <type -11>) (value <type 113>, err <type -19>)
func GetsockoptInt (fd <type -11>, level <type -11>, opt <type -11>) (value <type -11>, err <type -19>)
func GetsockoptUcred (fd <type -11>, level <type -11>, opt <type -11>) (? <type 141>, ? <type -19>)
func Gettid () (tid <type -11>)
func Gettimeofday (tv <esc:0x1> <type 142>) (err <type -19>)
func Getuid () (uid <type -11>)
func Getwd () (ret <type -16>, err <type -19>)
func Getxattr (path <esc:0x1> <type -16>, attr <esc:0x1> <type -16>, dest <esc:0x1> <type 98>) (sz <type -11>, err <type -19>)
const HUPCL = 1024 
const ICANON = 2 
const ICRNL = 256 
const IEXTEN = 32768 
const IFA_ADDRESS = 1 
const IFA_ANYCAST = 5 
const IFA_BROADCAST = 4 
const IFA_CACHEINFO = 6 
const IFA_FLAGS = 8 
const IFA_F_DADFAILED = 8 
const IFA_F_DEPRECATED = 32 
const IFA_F_HOMEADDRESS = 16 
const IFA_F_MANAGETEMPADDR = 256 
const IFA_F_MCAUTOJOIN = 1024 
const IFA_F_NODAD = 2 
const IFA_F_NOPREFIXROUTE = 512 
const IFA_F_OPTIMISTIC = 4 
const IFA_F_PERMANENT = 128 
const IFA_F_SECONDARY = 1 
const IFA_F_STABLE_PRIVACY = 2048 
const IFA_F_TEMPORARY = 1 
const IFA_F_TENTATIVE = 64 
const IFA_LABEL = 3 
const IFA_LOCAL = 2 
const IFA_MULTICAST = 7 
const IFA_RT_PRIORITY = 9 
const IFA_TARGET_NETNSID = 10 
const IFA_UNSPEC = 0 
const IFF_ALLMULTI = 512 
const IFF_ATTACH_QUEUE = 512 
const IFF_AUTOMEDIA = 16384 
const IFF_BROADCAST = 2 
const IFF_DEBUG = 4 
const IFF_DETACH_QUEUE = 1024 
const IFF_DYNAMIC = 32768 
const IFF_LOOPBACK = 8 
const IFF_MASTER = 1024 
const IFF_MULTICAST = 4096 
const IFF_MULTI_QUEUE = 256 
const IFF_NAPI = 16 
const IFF_NAPI_FRAGS = 32 
const IFF_NOARP = 128 
const IFF_NOFILTER = 4096 
const IFF_NOTRAILERS = 32 
const IFF_NO_PI = 4096 
const IFF_ONE_QUEUE = 8192 
const IFF_PERSIST = 2048 
const IFF_POINTOPOINT = 16 
const IFF_PORTSEL = 8192 
const IFF_PROMISC = 256 
const IFF_RUNNING = 64 
const IFF_SLAVE = 2048 
const IFF_TAP = 2 
const IFF_TUN = 1 
const IFF_TUN_EXCL = 32768 
const IFF_UP = 1 
const IFF_VNET_HDR = 16384 
const IFLA_ADDRESS = 1 
const IFLA_AF_SPEC = 26 
const IFLA_ALT_IFNAME = 53 
const IFLA_BAREUDP_ETHERTYPE = 2 
const IFLA_BAREUDP_MULTIPROTO_MODE = 4 
const IFLA_BAREUDP_PORT = 1 
const IFLA_BAREUDP_SRCPORT_MIN = 3 
const IFLA_BAREUDP_UNSPEC = 0 
const IFLA_BOND_ACTIVE_SLAVE = 2 
const IFLA_BOND_AD_ACTOR_SYSTEM = 26 
const IFLA_BOND_AD_ACTOR_SYS_PRIO = 24 
const IFLA_BOND_AD_INFO = 23 
const IFLA_BOND_AD_INFO_ACTOR_KEY = 3 
const IFLA_BOND_AD_INFO_AGGREGATOR = 1 
const IFLA_BOND_AD_INFO_NUM_PORTS = 2 
const IFLA_BOND_AD_INFO_PARTNER_KEY = 4 
const IFLA_BOND_AD_INFO_PARTNER_MAC = 5 
const IFLA_BOND_AD_INFO_UNSPEC = 0 
const IFLA_BOND_AD_LACP_RATE = 21 
const IFLA_BOND_AD_SELECT = 22 
const IFLA_BOND_AD_USER_PORT_KEY = 25 
const IFLA_BOND_ALL_SLAVES_ACTIVE = 17 
const IFLA_BOND_ARP_ALL_TARGETS = 10 
const IFLA_BOND_ARP_INTERVAL = 7 
const IFLA_BOND_ARP_IP_TARGET = 8 
const IFLA_BOND_ARP_VALIDATE = 9 
const IFLA_BOND_DOWNDELAY = 5 
const IFLA_BOND_FAIL_OVER_MAC = 13 
const IFLA_BOND_LP_INTERVAL = 19 
const IFLA_BOND_MIIMON = 3 
const IFLA_BOND_MIN_LINKS = 18 
const IFLA_BOND_MODE = 1 
const IFLA_BOND_NUM_PEER_NOTIF = 16 
const IFLA_BOND_PACKETS_PER_SLAVE = 20 
const IFLA_BOND_PEER_NOTIF_DELAY = 28 
const IFLA_BOND_PRIMARY = 11 
const IFLA_BOND_PRIMARY_RESELECT = 12 
const IFLA_BOND_RESEND_IGMP = 15 
const IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE = 7 
const IFLA_BOND_SLAVE_AD_AGGREGATOR_ID = 6 
const IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE = 8 
const IFLA_BOND_SLAVE_LINK_FAILURE_COUNT = 3 
const IFLA_BOND_SLAVE_MII_STATUS = 2 
const IFLA_BOND_SLAVE_PERM_HWADDR = 4 
const IFLA_BOND_SLAVE_QUEUE_ID = 5 
const IFLA_BOND_SLAVE_STATE = 1 
const IFLA_BOND_SLAVE_UNSPEC = 0 
const IFLA_BOND_TLB_DYNAMIC_LB = 27 
const IFLA_BOND_UNSPEC = 0 
const IFLA_BOND_UPDELAY = 4 
const IFLA_BOND_USE_CARRIER = 6 
const IFLA_BOND_XMIT_HASH_POLICY = 14 
const IFLA_BROADCAST = 2 
const IFLA_BRPORT_BACKUP_PORT = 34 
const IFLA_BRPORT_BCAST_FLOOD = 30 
const IFLA_BRPORT_BRIDGE_ID = 14 
const IFLA_BRPORT_CONFIG_PENDING = 20 
const IFLA_BRPORT_COST = 3 
const IFLA_BRPORT_DESIGNATED_COST = 16 
const IFLA_BRPORT_DESIGNATED_PORT = 15 
const IFLA_BRPORT_FAST_LEAVE = 7 
const IFLA_BRPORT_FLUSH = 24 
const IFLA_BRPORT_FORWARD_DELAY_TIMER = 22 
const IFLA_BRPORT_GROUP_FWD_MASK = 31 
const IFLA_BRPORT_GUARD = 5 
const IFLA_BRPORT_HOLD_TIMER = 23 
const IFLA_BRPORT_ID = 17 
const IFLA_BRPORT_ISOLATED = 33 
const IFLA_BRPORT_LEARNING = 8 
const IFLA_BRPORT_LEARNING_SYNC = 11 
const IFLA_BRPORT_MCAST_FLOOD = 27 
const IFLA_BRPORT_MCAST_TO_UCAST = 28 
const IFLA_BRPORT_MESSAGE_AGE_TIMER = 21 
const IFLA_BRPORT_MODE = 4 
const IFLA_BRPORT_MRP_RING_OPEN = 35 
const IFLA_BRPORT_MULTICAST_ROUTER = 25 
const IFLA_BRPORT_NEIGH_SUPPRESS = 32 
const IFLA_BRPORT_NO = 18 
const IFLA_BRPORT_PAD = 26 
const IFLA_BRPORT_PRIORITY = 2 
const IFLA_BRPORT_PROTECT = 6 
const IFLA_BRPORT_PROXYARP = 10 
const IFLA_BRPORT_PROXYARP_WIFI = 12 
const IFLA_BRPORT_ROOT_ID = 13 
const IFLA_BRPORT_STATE = 1 
const IFLA_BRPORT_TOPOLOGY_CHANGE_ACK = 19 
const IFLA_BRPORT_UNICAST_FLOOD = 9 
const IFLA_BRPORT_UNSPEC = 0 
const IFLA_BRPORT_VLAN_TUNNEL = 29 
const IFLA_BR_AGEING_TIME = 4 
const IFLA_BR_BRIDGE_ID = 11 
const IFLA_BR_FDB_FLUSH = 21 
const IFLA_BR_FORWARD_DELAY = 1 
const IFLA_BR_GC_TIMER = 19 
const IFLA_BR_GROUP_ADDR = 20 
const IFLA_BR_GROUP_FWD_MASK = 9 
const IFLA_BR_HELLO_TIME = 2 
const IFLA_BR_HELLO_TIMER = 16 
const IFLA_BR_MAX_AGE = 3 
const IFLA_BR_MCAST_HASH_ELASTICITY = 26 
const IFLA_BR_MCAST_HASH_MAX = 27 
const IFLA_BR_MCAST_IGMP_VERSION = 43 
const IFLA_BR_MCAST_LAST_MEMBER_CNT = 28 
const IFLA_BR_MCAST_LAST_MEMBER_INTVL = 30 
const IFLA_BR_MCAST_MEMBERSHIP_INTVL = 31 
const IFLA_BR_MCAST_MLD_VERSION = 44 
const IFLA_BR_MCAST_QUERIER = 25 
const IFLA_BR_MCAST_QUERIER_INTVL = 32 
const IFLA_BR_MCAST_QUERY_INTVL = 33 
const IFLA_BR_MCAST_QUERY_RESPONSE_INTVL = 34 
const IFLA_BR_MCAST_QUERY_USE_IFADDR = 24 
const IFLA_BR_MCAST_ROUTER = 22 
const IFLA_BR_MCAST_SNOOPING = 23 
const IFLA_BR_MCAST_STARTUP_QUERY_CNT = 29 
const IFLA_BR_MCAST_STARTUP_QUERY_INTVL = 35 
const IFLA_BR_MCAST_STATS_ENABLED = 42 
const IFLA_BR_MULTI_BOOLOPT = 46 
const IFLA_BR_NF_CALL_ARPTABLES = 38 
const IFLA_BR_NF_CALL_IP6TABLES = 37 
const IFLA_BR_NF_CALL_IPTABLES = 36 
const IFLA_BR_PAD = 40 
const IFLA_BR_PRIORITY = 6 
const IFLA_BR_ROOT_ID = 10 
const IFLA_BR_ROOT_PATH_COST = 13 
const IFLA_BR_ROOT_PORT = 12 
const IFLA_BR_STP_STATE = 5 
const IFLA_BR_TCN_TIMER = 17 
const IFLA_BR_TOPOLOGY_CHANGE = 14 
const IFLA_BR_TOPOLOGY_CHANGE_DETECTED = 15 
const IFLA_BR_TOPOLOGY_CHANGE_TIMER = 18 
const IFLA_BR_UNSPEC = 0 
const IFLA_BR_VLAN_DEFAULT_PVID = 39 
const IFLA_BR_VLAN_FILTERING = 7 
const IFLA_BR_VLAN_PROTOCOL = 8 
const IFLA_BR_VLAN_STATS_ENABLED = 41 
const IFLA_BR_VLAN_STATS_PER_PORT = 45 
const IFLA_CARRIER = 33 
const IFLA_CARRIER_CHANGES = 35 
const IFLA_CARRIER_DOWN_COUNT = 48 
const IFLA_CARRIER_UP_COUNT = 47 
const IFLA_COST = 8 
const IFLA_EVENT = 44 
const IFLA_EVENT_BONDING_FAILOVER = 3 
const IFLA_EVENT_BONDING_OPTIONS = 6 
const IFLA_EVENT_FEATURES = 2 
const IFLA_EVENT_IGMP_RESEND = 5 
const IFLA_EVENT_NONE = 0 
const IFLA_EVENT_NOTIFY_PEERS = 4 
const IFLA_EVENT_REBOOT = 1 
const IFLA_EXT_MASK = 29 
const IFLA_GENEVE_COLLECT_METADATA = 6 
const IFLA_GENEVE_DF = 13 
const IFLA_GENEVE_ID = 1 
const IFLA_GENEVE_LABEL = 11 
const IFLA_GENEVE_PORT = 5 
const IFLA_GENEVE_REMOTE = 2 
const IFLA_GENEVE_REMOTE6 = 7 
const IFLA_GENEVE_TOS = 4 
const IFLA_GENEVE_TTL = 3 
const IFLA_GENEVE_TTL_INHERIT = 12 
const IFLA_GENEVE_UDP_CSUM = 8 
const IFLA_GENEVE_UDP_ZERO_CSUM6_RX = 10 
const IFLA_GENEVE_UDP_ZERO_CSUM6_TX = 9 
const IFLA_GENEVE_UNSPEC = 0 
const IFLA_GROUP = 27 
const IFLA_GSO_MAX_SEGS = 40 
const IFLA_GSO_MAX_SIZE = 41 
const IFLA_GTP_FD0 = 1 
const IFLA_GTP_FD1 = 2 
const IFLA_GTP_PDP_HASHSIZE = 3 
const IFLA_GTP_ROLE = 4 
const IFLA_GTP_UNSPEC = 0 
const IFLA_HSR_MULTICAST_SPEC = 3 
const IFLA_HSR_SEQ_NR = 5 
const IFLA_HSR_SLAVE1 = 1 
const IFLA_HSR_SLAVE2 = 2 
const IFLA_HSR_SUPERVISION_ADDR = 4 
const IFLA_HSR_UNSPEC = 0 
const IFLA_HSR_VERSION = 6 
const IFLA_IFALIAS = 20 
const IFLA_IFNAME = 3 
const IFLA_IF_NETNSID = 46 
const IFLA_INET6_ADDR_GEN_MODE = 8 
const IFLA_INET6_CACHEINFO = 5 
const IFLA_INET6_CONF = 2 
const IFLA_INET6_FLAGS = 1 
const IFLA_INET6_ICMP6STATS = 6 
const IFLA_INET6_MCAST = 4 
const IFLA_INET6_STATS = 3 
const IFLA_INET6_TOKEN = 7 
const IFLA_INET6_UNSPEC = 0 
const IFLA_INET_CONF = 1 
const IFLA_INET_UNSPEC = 0 
const IFLA_INFO_DATA = 2 
const IFLA_INFO_KIND = 1 
const IFLA_INFO_SLAVE_DATA = 5 
const IFLA_INFO_SLAVE_KIND = 4 
const IFLA_INFO_UNSPEC = 0 
const IFLA_INFO_XSTATS = 3 
const IFLA_IPOIB_MODE = 2 
const IFLA_IPOIB_PKEY = 1 
const IFLA_IPOIB_UMCAST = 3 
const IFLA_IPOIB_UNSPEC = 0 
const IFLA_IPVLAN_FLAGS = 2 
const IFLA_IPVLAN_MODE = 1 
const IFLA_IPVLAN_UNSPEC = 0 
const IFLA_LINK = 5 
const IFLA_LINKINFO = 18 
const IFLA_LINKMODE = 17 
const IFLA_LINK_NETNSID = 37 
const IFLA_MACSEC_CIPHER_SUITE = 4 
const IFLA_MACSEC_ENCODING_SA = 6 
const IFLA_MACSEC_ENCRYPT = 7 
const IFLA_MACSEC_ES = 10 
const IFLA_MACSEC_ICV_LEN = 3 
const IFLA_MACSEC_INC_SCI = 9 
const IFLA_MACSEC_OFFLOAD = 15 
const IFLA_MACSEC_PAD = 14 
const IFLA_MACSEC_PORT = 2 
const IFLA_MACSEC_PROTECT = 8 
const IFLA_MACSEC_REPLAY_PROTECT = 12 
const IFLA_MACSEC_SCB = 11 
const IFLA_MACSEC_SCI = 1 
const IFLA_MACSEC_UNSPEC = 0 
const IFLA_MACSEC_VALIDATION = 13 
const IFLA_MACSEC_WINDOW = 5 
const IFLA_MACVLAN_FLAGS = 2 
const IFLA_MACVLAN_MACADDR = 4 
const IFLA_MACVLAN_MACADDR_COUNT = 6 
const IFLA_MACVLAN_MACADDR_DATA = 5 
const IFLA_MACVLAN_MACADDR_MODE = 3 
const IFLA_MACVLAN_MODE = 1 
const IFLA_MACVLAN_UNSPEC = 0 
const IFLA_MAP = 14 
const IFLA_MASTER = 10 
const IFLA_MAX_MTU = 51 
const IFLA_MIN_MTU = 50 
const IFLA_MTU = 4 
const IFLA_NET_NS_FD = 28 
const IFLA_NET_NS_PID = 19 
const IFLA_NEW_IFINDEX = 49 
const IFLA_NEW_NETNSID = 45 
const IFLA_NUM_RX_QUEUES = 32 
const IFLA_NUM_TX_QUEUES = 31 
const IFLA_NUM_VF = 21 
const IFLA_OFFLOAD_XSTATS_CPU_HIT = 1 
const IFLA_OFFLOAD_XSTATS_UNSPEC = 0 
const IFLA_OPERSTATE = 16 
const IFLA_PAD = 42 
const IFLA_PERM_ADDRESS = 54 
const IFLA_PHYS_PORT_ID = 34 
const IFLA_PHYS_PORT_NAME = 38 
const IFLA_PHYS_SWITCH_ID = 36 
const IFLA_PORT_HOST_UUID = 5 
const IFLA_PORT_INSTANCE_UUID = 4 
const IFLA_PORT_PROFILE = 2 
const IFLA_PORT_REQUEST = 6 
const IFLA_PORT_RESPONSE = 7 
const IFLA_PORT_SELF = 25 
const IFLA_PORT_UNSPEC = 0 
const IFLA_PORT_VF = 1 
const IFLA_PORT_VSI_TYPE = 3 
const IFLA_PPP_DEV_FD = 1 
const IFLA_PPP_UNSPEC = 0 
const IFLA_PRIORITY = 9 
const IFLA_PROMISCUITY = 30 
const IFLA_PROP_LIST = 52 
const IFLA_PROTINFO = 12 
const IFLA_PROTO_DOWN = 39 
const IFLA_QDISC = 6 
const IFLA_RMNET_FLAGS = 2 
const IFLA_RMNET_MUX_ID = 1 
const IFLA_RMNET_UNSPEC = 0 
const IFLA_STATS = 7 
const IFLA_STATS64 = 23 
const IFLA_STATS_AF_SPEC = 5 
const IFLA_STATS_LINK_64 = 1 
const IFLA_STATS_LINK_OFFLOAD_XSTATS = 4 
const IFLA_STATS_LINK_XSTATS = 2 
const IFLA_STATS_LINK_XSTATS_SLAVE = 3 
const IFLA_STATS_UNSPEC = 0 
const IFLA_TARGET_NETNSID = 46 
const IFLA_TUN_GROUP = 2 
const IFLA_TUN_MULTI_QUEUE = 7 
const IFLA_TUN_NUM_DISABLED_QUEUES = 9 
const IFLA_TUN_NUM_QUEUES = 8 
const IFLA_TUN_OWNER = 1 
const IFLA_TUN_PERSIST = 6 
const IFLA_TUN_PI = 4 
const IFLA_TUN_TYPE = 3 
const IFLA_TUN_UNSPEC = 0 
const IFLA_TUN_VNET_HDR = 5 
const IFLA_TXQLEN = 13 
const IFLA_UNSPEC = 0 
const IFLA_VFINFO_LIST = 22 
const IFLA_VF_BROADCAST = 13 
const IFLA_VF_IB_NODE_GUID = 10 
const IFLA_VF_IB_PORT_GUID = 11 
const IFLA_VF_INFO = 1 
const IFLA_VF_INFO_UNSPEC = 0 
const IFLA_VF_LINK_STATE = 5 
const IFLA_VF_LINK_STATE_AUTO = 0 
const IFLA_VF_LINK_STATE_DISABLE = 2 
const IFLA_VF_LINK_STATE_ENABLE = 1 
const IFLA_VF_MAC = 1 
const IFLA_VF_PORT = 1 
const IFLA_VF_PORTS = 24 
const IFLA_VF_PORT_UNSPEC = 0 
const IFLA_VF_RATE = 6 
const IFLA_VF_RSS_QUERY_EN = 7 
const IFLA_VF_SPOOFCHK = 4 
const IFLA_VF_STATS = 8 
const IFLA_VF_STATS_BROADCAST = 4 
const IFLA_VF_STATS_MULTICAST = 5 
const IFLA_VF_STATS_PAD = 6 
const IFLA_VF_STATS_RX_BYTES = 2 
const IFLA_VF_STATS_RX_DROPPED = 7 
const IFLA_VF_STATS_RX_PACKETS = 0 
const IFLA_VF_STATS_TX_BYTES = 3 
const IFLA_VF_STATS_TX_DROPPED = 8 
const IFLA_VF_STATS_TX_PACKETS = 1 
const IFLA_VF_TRUST = 9 
const IFLA_VF_TX_RATE = 3 
const IFLA_VF_UNSPEC = 0 
const IFLA_VF_VLAN = 2 
const IFLA_VF_VLAN_INFO = 1 
const IFLA_VF_VLAN_INFO_UNSPEC = 0 
const IFLA_VF_VLAN_LIST = 12 
const IFLA_VLAN_EGRESS_QOS = 3 
const IFLA_VLAN_FLAGS = 2 
const IFLA_VLAN_ID = 1 
const IFLA_VLAN_INGRESS_QOS = 4 
const IFLA_VLAN_PROTOCOL = 5 
const IFLA_VLAN_QOS_MAPPING = 1 
const IFLA_VLAN_QOS_UNSPEC = 0 
const IFLA_VLAN_UNSPEC = 0 
const IFLA_VRF_PORT_TABLE = 1 
const IFLA_VRF_PORT_UNSPEC = 0 
const IFLA_VRF_TABLE = 1 
const IFLA_VRF_UNSPEC = 0 
const IFLA_VXLAN_AGEING = 8 
const IFLA_VXLAN_COLLECT_METADATA = 25 
const IFLA_VXLAN_DF = 29 
const IFLA_VXLAN_GBP = 23 
const IFLA_VXLAN_GPE = 27 
const IFLA_VXLAN_GROUP = 2 
const IFLA_VXLAN_GROUP6 = 16 
const IFLA_VXLAN_ID = 1 
const IFLA_VXLAN_L2MISS = 13 
const IFLA_VXLAN_L3MISS = 14 
const IFLA_VXLAN_LABEL = 26 
const IFLA_VXLAN_LEARNING = 7 
const IFLA_VXLAN_LIMIT = 9 
const IFLA_VXLAN_LINK = 3 
const IFLA_VXLAN_LOCAL = 4 
const IFLA_VXLAN_LOCAL6 = 17 
const IFLA_VXLAN_PORT = 15 
const IFLA_VXLAN_PORT_RANGE = 10 
const IFLA_VXLAN_PROXY = 11 
const IFLA_VXLAN_REMCSUM_NOPARTIAL = 24 
const IFLA_VXLAN_REMCSUM_RX = 22 
const IFLA_VXLAN_REMCSUM_TX = 21 
const IFLA_VXLAN_RSC = 12 
const IFLA_VXLAN_TOS = 6 
const IFLA_VXLAN_TTL = 5 
const IFLA_VXLAN_TTL_INHERIT = 28 
const IFLA_VXLAN_UDP_CSUM = 18 
const IFLA_VXLAN_UDP_ZERO_CSUM6_RX = 20 
const IFLA_VXLAN_UDP_ZERO_CSUM6_TX = 19 
const IFLA_VXLAN_UNSPEC = 0 
const IFLA_WEIGHT = 15 
const IFLA_WIRELESS = 11 
const IFLA_XDP = 43 
const IFLA_XDP_ATTACHED = 2 
const IFLA_XDP_DRV_PROG_ID = 5 
const IFLA_XDP_EXPECTED_FD = 8 
const IFLA_XDP_FD = 1 
const IFLA_XDP_FLAGS = 3 
const IFLA_XDP_HW_PROG_ID = 7 
const IFLA_XDP_PROG_ID = 4 
const IFLA_XDP_SKB_PROG_ID = 6 
const IFLA_XDP_UNSPEC = 0 
const IFLA_XFRM_IF_ID = 2 
const IFLA_XFRM_LINK = 1 
const IFLA_XFRM_UNSPEC = 0 
const IFNAMSIZ = 16 
const IGNBRK = 1 
const IGNCR = 128 
const IGNPAR = 4 
const IMAXBEL = 8192 
const INLCR = 64 
const INPCK = 16 
const IN_ACCESS = 1 
const IN_ALL_EVENTS = 4095 
const IN_ATTRIB = 4 
const IN_CLASSA_HOST = 16777215 
const IN_CLASSA_MAX = 128 
const IN_CLASSA_NET = 4278190080 
const IN_CLASSA_NSHIFT = 24 
const IN_CLASSB_HOST = 65535 
const IN_CLASSB_MAX = 65536 
const IN_CLASSB_NET = 4294901760 
const IN_CLASSB_NSHIFT = 16 
const IN_CLASSC_HOST = 255 
const IN_CLASSC_NET = 4294967040 
const IN_CLASSC_NSHIFT = 8 
const IN_CLOEXEC = 524288 
const IN_CLOSE = 24 
const IN_CLOSE_NOWRITE = 16 
const IN_CLOSE_WRITE = 8 
const IN_CREATE = 256 
const IN_DELETE = 512 
const IN_DELETE_SELF = 1024 
const IN_DONT_FOLLOW = 33554432 
const IN_EXCL_UNLINK = 67108864 
const IN_IGNORED = 32768 
const IN_ISDIR = 1073741824 
const IN_LOOPBACKNET = 127 
const IN_MASK_ADD = 536870912 
const IN_MASK_CREATE = 268435456 
const IN_MODIFY = 2 
const IN_MOVE = 192 
const IN_MOVED_FROM = 64 
const IN_MOVED_TO = 128 
const IN_MOVE_SELF = 2048 
const IN_NONBLOCK = 2048 
const IN_ONESHOT = 2147483648 
const IN_ONLYDIR = 16777216 
const IN_OPEN = 32 
const IN_Q_OVERFLOW = 16384 
const IN_UNMOUNT = 8192 
const IPPROTO_AH = 51 
const IPPROTO_BEETPH = 94 
const IPPROTO_COMP = 108 
const IPPROTO_DCCP = 33 
const IPPROTO_DSTOPTS = 60 
const IPPROTO_EGP = 8 
const IPPROTO_ENCAP = 98 
const IPPROTO_ESP = 50 
const IPPROTO_ETHERNET = 143 
const IPPROTO_FRAGMENT = 44 
const IPPROTO_GRE = 47 
const IPPROTO_HOPOPTS = 0 
const IPPROTO_ICMP = 1 
const IPPROTO_ICMPV6 = 58 
const IPPROTO_IDP = 22 
const IPPROTO_IGMP = 2 
const IPPROTO_IP = 0 
const IPPROTO_IPIP = 4 
const IPPROTO_IPV6 = 41 
const IPPROTO_MAX = 263 
const IPPROTO_MH = 135 
const IPPROTO_MPLS = 137 
const IPPROTO_MPTCP = 262 
const IPPROTO_MTP = 92 
const IPPROTO_NONE = 59 
const IPPROTO_PIM = 103 
const IPPROTO_PUP = 12 
const IPPROTO_RAW = 255 
const IPPROTO_ROUTING = 43 
const IPPROTO_RSVP = 46 
const IPPROTO_SCTP = 132 
const IPPROTO_TCP = 6 
const IPPROTO_TP = 29 
const IPPROTO_UDP = 17 
const IPPROTO_UDPLITE = 136 
const IPV6_2292DSTOPTS = 4 
const IPV6_2292HOPLIMIT = 8 
const IPV6_2292HOPOPTS = 3 
const IPV6_2292PKTINFO = 2 
const IPV6_2292PKTOPTIONS = 6 
const IPV6_2292RTHDR = 5 
const IPV6_ADDRFORM = 1 
const IPV6_ADDR_PREFERENCES = 72 
const IPV6_ADD_MEMBERSHIP = 20 
const IPV6_AUTHHDR = 10 
const IPV6_AUTOFLOWLABEL = 70 
const IPV6_CHECKSUM = 7 
const IPV6_DONTFRAG = 62 
const IPV6_DROP_MEMBERSHIP = 21 
const IPV6_DSTOPTS = 59 
const IPV6_FREEBIND = 78 
const IPV6_HDRINCL = 36 
const IPV6_HOPLIMIT = 52 
const IPV6_HOPOPTS = 54 
const IPV6_IPSEC_POLICY = 34 
const IPV6_JOIN_ANYCAST = 27 
const IPV6_JOIN_GROUP = 20 
const IPV6_LEAVE_ANYCAST = 28 
const IPV6_LEAVE_GROUP = 21 
const IPV6_MINHOPCOUNT = 73 
const IPV6_MTU = 24 
const IPV6_MTU_DISCOVER = 23 
const IPV6_MULTICAST_ALL = 29 
const IPV6_MULTICAST_HOPS = 18 
const IPV6_MULTICAST_IF = 17 
const IPV6_MULTICAST_LOOP = 19 
const IPV6_NEXTHOP = 9 
const IPV6_ORIGDSTADDR = 74 
const IPV6_PATHMTU = 61 
const IPV6_PKTINFO = 50 
const IPV6_PMTUDISC_DO = 2 
const IPV6_PMTUDISC_DONT = 0 
const IPV6_PMTUDISC_INTERFACE = 4 
const IPV6_PMTUDISC_OMIT = 5 
const IPV6_PMTUDISC_PROBE = 3 
const IPV6_PMTUDISC_WANT = 1 
const IPV6_RECVDSTOPTS = 58 
const IPV6_RECVERR = 25 
const IPV6_RECVERR_RFC4884 = 31 
const IPV6_RECVFRAGSIZE = 77 
const IPV6_RECVHOPLIMIT = 51 
const IPV6_RECVHOPOPTS = 53 
const IPV6_RECVORIGDSTADDR = 74 
const IPV6_RECVPATHMTU = 60 
const IPV6_RECVPKTINFO = 49 
const IPV6_RECVRTHDR = 56 
const IPV6_RECVTCLASS = 66 
const IPV6_ROUTER_ALERT = 22 
const IPV6_ROUTER_ALERT_ISOLATE = 30 
const IPV6_RTHDR = 57 
const IPV6_RTHDRDSTOPTS = 55 
const IPV6_RTHDR_LOOSE = 0 
const IPV6_RTHDR_STRICT = 1 
const IPV6_RTHDR_TYPE_0 = 0 
const IPV6_RXDSTOPTS = 59 
const IPV6_RXHOPOPTS = 54 
const IPV6_TCLASS = 67 
const IPV6_TRANSPARENT = 75 
const IPV6_UNICAST_HOPS = 16 
const IPV6_UNICAST_IF = 76 
const IPV6_V6ONLY = 26 
const IPV6_XFRM_POLICY = 35 
const IP_ADD_MEMBERSHIP = 35 
const IP_ADD_SOURCE_MEMBERSHIP = 39 
const IP_BIND_ADDRESS_NO_PORT = 24 
const IP_BLOCK_SOURCE = 38 
const IP_CHECKSUM = 23 
const IP_DEFAULT_MULTICAST_LOOP = 1 
const IP_DEFAULT_MULTICAST_TTL = 1 
const IP_DF = 16384 
const IP_DROP_MEMBERSHIP = 36 
const IP_DROP_SOURCE_MEMBERSHIP = 40 
const IP_FREEBIND = 15 
const IP_HDRINCL = 3 
const IP_IPSEC_POLICY = 16 
const IP_MAXPACKET = 65535 
const IP_MAX_MEMBERSHIPS = 20 
const IP_MF = 8192 
const IP_MINTTL = 21 
const IP_MSFILTER = 41 
const IP_MSS = 576 
const IP_MTU = 14 
const IP_MTU_DISCOVER = 10 
const IP_MULTICAST_ALL = 49 
const IP_MULTICAST_IF = 32 
const IP_MULTICAST_LOOP = 34 
const IP_MULTICAST_TTL = 33 
const IP_NODEFRAG = 22 
const IP_OFFMASK = 8191 
const IP_OPTIONS = 4 
const IP_ORIGDSTADDR = 20 
const IP_PASSSEC = 18 
const IP_PKTINFO = 8 
const IP_PKTOPTIONS = 9 
const IP_PMTUDISC = 10 
const IP_PMTUDISC_DO = 2 
const IP_PMTUDISC_DONT = 0 
const IP_PMTUDISC_INTERFACE = 4 
const IP_PMTUDISC_OMIT = 5 
const IP_PMTUDISC_PROBE = 3 
const IP_PMTUDISC_WANT = 1 
const IP_RECVERR = 11 
const IP_RECVERR_RFC4884 = 26 
const IP_RECVFRAGSIZE = 25 
const IP_RECVOPTS = 6 
const IP_RECVORIGDSTADDR = 20 
const IP_RECVTOS = 13 
const IP_RECVTTL = 12 
const IP_RETOPTS = 7 
const IP_RF = 32768 
const IP_ROUTER_ALERT = 5 
const IP_TOS = 1 
const IP_TRANSPARENT = 19 
const IP_TTL = 2 
const IP_UNBLOCK_SOURCE = 37 
const IP_UNICAST_IF = 50 
const IP_XFRM_POLICY = 17 
const ISIG = 1 
const ISTRIP = 32 
const IUCLC = 512 
const IUTF8 = 16384 
const IXANY = 2048 
const IXOFF = 4096 
const IXON = 1024 
const ImplementsGetwd = $true
func InotifyAddWatch (fd <type -11>, pathname <esc:0x1> <type -16>, mask <type -7>) (watchdesc <type -11>, err <type -19>)
func InotifyInit () (fd <type -11>, err <type -19>)
func InotifyInit1 (flags <type -11>) (fd <type -11>, err <type -19>)
func InotifyRmWatch (fd <type -11>, watchdesc <type -7>) (success <type -11>, err <type -19>)
func Kill (pid <type -11>, sig <type 55>) (err <type -19>)
func Klogctl (typ <type -11>, buf <esc:0x1> <type 98>) (n <type -11>, err <type -19>)
const LINUX_REBOOT_CMD_CAD_OFF = 0 
const LINUX_REBOOT_CMD_CAD_ON = 2309737967 
const LINUX_REBOOT_CMD_HALT = 3454992675 
const LINUX_REBOOT_CMD_KEXEC = 1163412803 
const LINUX_REBOOT_CMD_POWER_OFF = 1126301404 
const LINUX_REBOOT_CMD_RESTART = 19088743 
const LINUX_REBOOT_CMD_RESTART2 = 2712847316 
const LINUX_REBOOT_CMD_SW_SUSPEND = 3489725666 
const LINUX_REBOOT_MAGIC1 = 4276215469 
const LINUX_REBOOT_MAGIC2 = 672274793 
const LINUX_REBOOT_MAGIC2A = 85072278 
const LINUX_REBOOT_MAGIC2B = 369367448 
const LINUX_REBOOT_MAGIC2C = 537993216 
const LOCK_EX = 2 
const LOCK_MAND = 32 
const LOCK_NB = 4 
const LOCK_READ = 64 
const LOCK_RW = 192 
const LOCK_SH = 1 
const LOCK_UN = 8 
const LOCK_WRITE = 128 
func Lchown (path <esc:0x1> <type -16>, uid <type -11>, gid <type -11>) (err <type -19>)
func Link (oldpath <esc:0x1> <type -16>, newpath <esc:0x1> <type -16>) (err <type -19>)
func Listen (fd <type -11>, n <type -11>) (err <type -19>)
func Listxattr (path <esc:0x1> <type -16>, dest <esc:0x1> <type 98>) (sz <type -11>, err <type -19>)
func LsfJump (code <type -11>, k <type -11>, jt <type -11>, jf <type -11>) <type 161>
func LsfSocket (ifindex <type -11>, proto <type -11>) (? <type -11>, ? <type -19>)
func LsfStmt (code <type -11>, k <type -11>) <type 161>
func Lstat (path <esc:0x1> <type -16>, stat <esc:0x1> <type 130>) (err <type -19>)
const MADV_COLD = 20 
const MADV_DODUMP = 17 
const MADV_DOFORK = 11 
const MADV_DONTDUMP = 16 
const MADV_DONTFORK = 10 
const MADV_DONTNEED = 4 
const MADV_FREE = 8 
const MADV_HUGEPAGE = 14 
const MADV_HWPOISON = 100 
const MADV_KEEPONFORK = 19 
const MADV_MERGEABLE = 12 
const MADV_NOHUGEPAGE = 15 
const MADV_NORMAL = 0 
const MADV_PAGEOUT = 21 
const MADV_RANDOM = 1 
const MADV_REMOVE = 9 
const MADV_SEQUENTIAL = 2 
const MADV_UNMERGEABLE = 13 
const MADV_WILLNEED = 3 
const MADV_WIPEONFORK = 18 
const MAP_ANON = 32 
const MAP_ANONYMOUS = 32 
const MAP_DENYWRITE = 2048 
const MAP_EXECUTABLE = 4096 
const MAP_FILE = 0 
const MAP_FIXED = 16 
const MAP_FIXED_NOREPLACE = 1048576 
const MAP_GROWSDOWN = 256 
const MAP_HUGETLB = 262144 
const MAP_HUGE_MASK = 63 
const MAP_HUGE_SHIFT = 26 
const MAP_LOCKED = 8192 
const MAP_NONBLOCK = 65536 
const MAP_NORESERVE = 16384 
const MAP_POPULATE = 32768 
const MAP_PRIVATE = 2 
const MAP_SHARED = 1 
const MAP_SHARED_VALIDATE = 3 
const MAP_STACK = 131072 
const MAP_SYNC = 524288 
const MAP_TYPE = 15 
const MCL_CURRENT = 1 
const MCL_FUTURE = 2 
const MCL_ONFAULT = 4 
const MNT_DETACH = 2 
const MNT_EXPIRE = 4 
const MNT_FORCE = 1 
const MSG_BATCH = 262144 
const MSG_CMSG_CLOEXEC = 1073741824 
const MSG_CONFIRM = 2048 
const MSG_CTRUNC = 8 
const MSG_DONTROUTE = 4 
const MSG_DONTWAIT = 64 
const MSG_EOR = 128 
const MSG_ERRQUEUE = 8192 
const MSG_FASTOPEN = 536870912 
const MSG_FIN = 512 
const MSG_MORE = 32768 
const MSG_NOSIGNAL = 16384 
const MSG_OOB = 1 
const MSG_PEEK = 2 
const MSG_PROXY = 16 
const MSG_RST = 4096 
const MSG_SYN = 1024 
const MSG_TRUNC = 32 
const MSG_TRYHARD = 4 
const MSG_WAITALL = 256 
const MSG_WAITFORONE = 65536 
const MSG_ZEROCOPY = 67108864 
const MS_ACTIVE = 1073741824 
const MS_ASYNC = 1 
const MS_BIND = 4096 
const MS_BORN = 536870912 
const MS_DIRSYNC = 128 
const MS_INVALIDATE = 2 
const MS_I_VERSION = 8388608 
const MS_KERNMOUNT = 4194304 
const MS_LAZYTIME = 33554432 
const MS_MANDLOCK = 64 
const MS_MGC_MSK = 4294901760 
const MS_MGC_VAL = 3236757504 
const MS_MOVE = 8192 
const MS_NOATIME = 1024 
const MS_NODEV = 4 
const MS_NODIRATIME = 2048 
const MS_NOEXEC = 8 
const MS_NOREMOTELOCK = 134217728 
const MS_NOSEC = 268435456 
const MS_NOSUID = 2 
const MS_NOUSER = -2147483648 
const MS_POSIXACL = 65536 
const MS_PRIVATE = 262144 
const MS_RDONLY = 1 
const MS_REC = 16384 
const MS_RELATIME = 2097152 
const MS_REMOUNT = 32 
const MS_RMT_MASK = 41943121 
const MS_SHARED = 1048576 
const MS_SILENT = 32768 
const MS_SLAVE = 524288 
const MS_STRICTATIME = 16777216 
const MS_SUBMOUNT = 67108864 
const MS_SYNC = 4 
const MS_SYNCHRONOUS = 16 
const MS_UNBINDABLE = 131072 
const MS_VERBOSE = 32768 
func Madvise (b <esc:0x1> <type 98>, advice <type -11>) (err <type -19>)
func Mkdir (path <esc:0x1> <type -16>, mode <type -7>) (err <type -19>)
func Mkdirat (dirfd <type -11>, path <esc:0x1> <type -16>, mode <type -7>) (err <type -19>)
func Mkfifo (path <esc:0x1> <type -16>, mode <type -7>) (err <type -19>)
func Mknod (path <esc:0x1> <type -16>, mode <type -7>, dev <type -11>) (err <type -19>)
func Mknodat (dirfd <type -11>, path <esc:0x1> <type -16>, mode <type -7>, dev <type -11>) (err <type -19>)
func Mlock (b <esc:0x1> <type 98>) (err <type -19>)
func Mlockall (flags <type -11>) (err <type -19>)
func Mmap (fd <type -11>, offset <type -4>, length <type -11>, prot <type -11>, flags <type -11>) (data <type 98>, err <type -19>)
func Mount (source <esc:0x1> <type -16>, target <esc:0x1> <type -16>, fstype <esc:0x1> <type -16>, flags <type -13>, data <esc:0x1> <type -16>) (err <type -19>)
func Mprotect (b <esc:0x1> <type 98>, prot <type -11>) (err <type -19>)
func Munlock (b <esc:0x1> <type 98>) (err <type -19>)
func Munlockall () (err <type -19>)
func Munmap (b <esc:0x1> <type 98>) (err <type -19>)
const NETLINK_ADD_MEMBERSHIP = 1 
const NETLINK_AUDIT = 9 
const NETLINK_BROADCAST_ERROR = 4 
const NETLINK_CAP_ACK = 10 
const NETLINK_CONNECTED = 1 
const NETLINK_CONNECTOR = 11 
const NETLINK_CRYPTO = 21 
const NETLINK_DNRTMSG = 14 
const NETLINK_DROP_MEMBERSHIP = 2 
const NETLINK_ECRYPTFS = 19 
const NETLINK_EXT_ACK = 11 
const NETLINK_FIB_LOOKUP = 10 
const NETLINK_FIREWALL = 3 
const NETLINK_GENERIC = 16 
const NETLINK_GET_STRICT_CHK = 12 
const NETLINK_INET_DIAG = 4 
const NETLINK_IP6_FW = 13 
const NETLINK_ISCSI = 8 
const NETLINK_KOBJECT_UEVENT = 15 
const NETLINK_LISTEN_ALL_NSID = 8 
const NETLINK_LIST_MEMBERSHIPS = 9 
const NETLINK_NETFILTER = 12 
const NETLINK_NFLOG = 5 
const NETLINK_NO_ENOBUFS = 5 
const NETLINK_PKTINFO = 3 
const NETLINK_RDMA = 20 
const NETLINK_ROUTE = 0 
const NETLINK_RX_RING = 6 
const NETLINK_SCSITRANSPORT = 18 
const NETLINK_SELINUX = 7 
const NETLINK_SMC = 22 
const NETLINK_SOCK_DIAG = 4 
const NETLINK_TX_RING = 7 
const NETLINK_UNCONNECTED = 0 
const NETLINK_UNUSED = 1 
const NETLINK_USERSOCK = 2 
const NETLINK_XFRM = 6 
const NI_DGRAM = 16 
const NI_IDN = 32 
const NI_MAXHOST = 1025 
const NI_MAXSERV = 32 
const NI_NAMEREQD = 8 
const NI_NOFQDN = 4 
const NI_NUMERICHOST = 1 
const NI_NUMERICSERV = 2 
const NL0 = 0 
const NL1 = 256 
const NLA_ALIGNTO = 4 
const NLA_F_NESTED = 32768 
const NLA_F_NET_BYTEORDER = 16384 
const NLA_HDRLEN = 4 
const NLA_TYPE_MASK = -49153 
const NLDLY = 256 
const NLMSGERR_ATTR_COOKIE = 3 
const NLMSGERR_ATTR_MAX = 3 
const NLMSGERR_ATTR_MSG = 1 
const NLMSGERR_ATTR_OFFS = 2 
const NLMSGERR_ATTR_UNUSED = 0 
const NLMSG_ALIGNTO = 4 
const NLMSG_DONE = 3 
const NLMSG_ERROR = 2 
const NLMSG_HDRLEN = 16 
const NLMSG_MIN_TYPE = 16 
const NLMSG_NOOP = 1 
const NLMSG_OVERRUN = 4 
const NLM_F_ACK = 4 
const NLM_F_ACK_TLVS = 512 
const NLM_F_APPEND = 2048 
const NLM_F_ATOMIC = 1024 
const NLM_F_CAPPED = 256 
const NLM_F_CREATE = 1024 
const NLM_F_DUMP = 768 
const NLM_F_DUMP_FILTERED = 32 
const NLM_F_DUMP_INTR = 16 
const NLM_F_ECHO = 8 
const NLM_F_EXCL = 512 
const NLM_F_MATCH = 512 
const NLM_F_MULTI = 2 
const NLM_F_NONREC = 256 
const NLM_F_REPLACE = 256 
const NLM_F_REQUEST = 1 
const NLM_F_ROOT = 256 
const NOFLSH = 128 
func Nanosleep (time <esc:0x1> <type 165>, leftover <esc:0x1> <type 165>) (err <type -19>)
func NetlinkRIB (proto <type -11>, family <type -11>) (? <type 98>, ? <type -19>)
func NsecToTimespec (nsec <type -4>) <type 75>
func NsecToTimeval (nsec <type -4>) <type 78>
const OCRNL = 8 
const OFDEL = 128 
const OFILL = 64 
const OLCUC = 2 
const ONLCR = 4 
const ONLRET = 32 
const ONOCR = 16 
const OPOST = 1 
const OS = "linux"
const O_ACCMODE = 3 
const O_APPEND = 1024 
const O_ASYNC = 8192 
const O_CLOEXEC = 524288 
const O_CREAT = 64 
const O_DIRECT = 16384 
const O_DIRECTORY = 65536 
const O_DSYNC = 4096 
const O_EXCL = 128 
const O_FSYNC = 1052672 
const O_LARGEFILE = 0 
const O_NDELAY = 2048 
const O_NOATIME = 262144 
const O_NOCTTY = 256 
const O_NOFOLLOW = 131072 
const O_NONBLOCK = 2048 
const O_PATH = 2097152 
const O_RDONLY = 0 
const O_RDWR = 2 
const O_RSYNC = 1052672 
const O_SYNC = 1052672 
const O_TMPFILE = 4259840 
const O_TRUNC = 512 
const O_WRONLY = 1 
func Open (path <esc:0x1> <type -16>, mode <type -11>, perm <type -7>) (fd <type -11>, err <type -19>)
func Openat (dirfd <type -11>, path <esc:0x1> <type -16>, flags <type -11>, mode <type -7>) (fd <type -11>, err <type -19>)
const PACKET_ADD_MEMBERSHIP = 1 
const PACKET_AUXDATA = 8 
const PACKET_BROADCAST = 1 
const PACKET_COPY_THRESH = 7 
const PACKET_DROP_MEMBERSHIP = 2 
const PACKET_FANOUT = 18 
const PACKET_FANOUT_DATA = 22 
const PACKET_FASTROUTE = 6 
const PACKET_HDRLEN = 11 
const PACKET_HOST = 0 
const PACKET_IGNORE_OUTGOING = 23 
const PACKET_LOOPBACK = 5 
const PACKET_LOSS = 14 
const PACKET_MR_ALLMULTI = 2 
const PACKET_MR_MULTICAST = 0 
const PACKET_MR_PROMISC = 1 
const PACKET_MR_UNICAST = 3 
const PACKET_MULTICAST = 2 
const PACKET_ORIGDEV = 9 
const PACKET_OTHERHOST = 3 
const PACKET_OUTGOING = 4 
const PACKET_QDISC_BYPASS = 20 
const PACKET_RECV_OUTPUT = 3 
const PACKET_RESERVE = 12 
const PACKET_ROLLOVER_STATS = 21 
const PACKET_RX_RING = 5 
const PACKET_STATISTICS = 6 
const PACKET_TIMESTAMP = 17 
const PACKET_TX_HAS_OFF = 19 
const PACKET_TX_RING = 13 
const PACKET_TX_TIMESTAMP = 16 
const PACKET_VERSION = 10 
const PACKET_VNET_HDR = 15 
const PARENB = 256 
const PARMRK = 8 
const PARODD = 512 
const PC_2_SYMLINKS = 20 
const PC_ALLOC_SIZE_MIN = 18 
const PC_ASYNC_IO = 10 
const PC_CHOWN_RESTRICTED = 6 
const PC_FILESIZEBITS = 13 
const PC_LINK_MAX = 0 
const PC_MAX_CANON = 1 
const PC_MAX_INPUT = 2 
const PC_NAME_MAX = 3 
const PC_NO_TRUNC = 7 
const PC_PATH_MAX = 4 
const PC_PIPE_BUF = 5 
const PC_PRIO_IO = 11 
const PC_REC_INCR_XFER_SIZE = 14 
const PC_REC_MAX_XFER_SIZE = 15 
const PC_REC_MIN_XFER_SIZE = 16 
const PC_REC_XFER_ALIGN = 17 
const PC_SOCK_MAXBUF = 12 
const PC_SYMLINK_MAX = 19 
const PC_SYNC_IO = 9 
const PC_VDISABLE = 8 
const PENDIN = 16384 
const PRIO_MAX = 20 
const PRIO_MIN = -20 
const PRIO_PGRP = 1 
const PRIO_PROCESS = 0 
const PRIO_USER = 2 
const PROT_EXEC = 4 
const PROT_GROWSDOWN = 16777216 
const PROT_GROWSUP = 33554432 
const PROT_NONE = 0 
const PROT_READ = 1 
const PROT_WRITE = 2 
const PR_CAPBSET_DROP = 24 
const PR_CAPBSET_READ = 23 
const PR_CAP_AMBIENT = 47 
const PR_CAP_AMBIENT_CLEAR_ALL = 4 
const PR_CAP_AMBIENT_IS_SET = 1 
const PR_CAP_AMBIENT_LOWER = 3 
const PR_CAP_AMBIENT_RAISE = 2 
const PR_ENDIAN_BIG = 0 
const PR_ENDIAN_LITTLE = 1 
const PR_ENDIAN_PPC_LITTLE = 2 
const PR_FPEMU_NOPRINT = 1 
const PR_FPEMU_SIGFPE = 2 
const PR_FP_EXC_ASYNC = 2 
const PR_FP_EXC_DISABLED = 0 
const PR_FP_EXC_DIV = 65536 
const PR_FP_EXC_INV = 1048576 
const PR_FP_EXC_NONRECOV = 1 
const PR_FP_EXC_OVF = 131072 
const PR_FP_EXC_PRECISE = 3 
const PR_FP_EXC_RES = 524288 
const PR_FP_EXC_SW_ENABLE = 128 
const PR_FP_EXC_UND = 262144 
const PR_FP_MODE_FR = 1 
const PR_FP_MODE_FRE = 2 
const PR_GET_CHILD_SUBREAPER = 37 
const PR_GET_DUMPABLE = 3 
const PR_GET_ENDIAN = 19 
const PR_GET_FPEMU = 9 
const PR_GET_FPEXC = 11 
const PR_GET_FP_MODE = 46 
const PR_GET_IO_FLUSHER = 58 
const PR_GET_KEEPCAPS = 7 
const PR_GET_NAME = 16 
const PR_GET_NO_NEW_PRIVS = 39 
const PR_GET_PDEATHSIG = 2 
const PR_GET_SECCOMP = 21 
const PR_GET_SECUREBITS = 27 
const PR_GET_SPECULATION_CTRL = 52 
const PR_GET_TAGGED_ADDR_CTRL = 56 
const PR_GET_THP_DISABLE = 42 
const PR_GET_TID_ADDRESS = 40 
const PR_GET_TIMERSLACK = 30 
const PR_GET_TIMING = 13 
const PR_GET_TSC = 25 
const PR_GET_UNALIGN = 5 
const PR_MCE_KILL = 33 
const PR_MCE_KILL_CLEAR = 0 
const PR_MCE_KILL_DEFAULT = 2 
const PR_MCE_KILL_EARLY = 1 
const PR_MCE_KILL_GET = 34 
const PR_MCE_KILL_LATE = 0 
const PR_MCE_KILL_SET = 1 
const PR_MPX_DISABLE_MANAGEMENT = 44 
const PR_MPX_ENABLE_MANAGEMENT = 43 
const PR_MTE_TAG_MASK = 524280 
const PR_MTE_TAG_SHIFT = 3 
const PR_MTE_TCF_ASYNC = 4 
const PR_MTE_TCF_MASK = 6 
const PR_MTE_TCF_NONE = 0 
const PR_MTE_TCF_SHIFT = 1 
const PR_MTE_TCF_SYNC = 2 
const PR_PAC_APDAKEY = 4 
const PR_PAC_APDBKEY = 8 
const PR_PAC_APGAKEY = 16 
const PR_PAC_APIAKEY = 1 
const PR_PAC_APIBKEY = 2 
const PR_PAC_RESET_KEYS = 54 
const PR_SET_CHILD_SUBREAPER = 36 
const PR_SET_DUMPABLE = 4 
const PR_SET_ENDIAN = 20 
const PR_SET_FPEMU = 10 
const PR_SET_FPEXC = 12 
const PR_SET_FP_MODE = 45 
const PR_SET_IO_FLUSHER = 57 
const PR_SET_KEEPCAPS = 8 
const PR_SET_MM = 35 
const PR_SET_MM_ARG_END = 9 
const PR_SET_MM_ARG_START = 8 
const PR_SET_MM_AUXV = 12 
const PR_SET_MM_BRK = 7 
const PR_SET_MM_END_CODE = 2 
const PR_SET_MM_END_DATA = 4 
const PR_SET_MM_ENV_END = 11 
const PR_SET_MM_ENV_START = 10 
const PR_SET_MM_EXE_FILE = 13 
const PR_SET_MM_MAP = 14 
const PR_SET_MM_MAP_SIZE = 15 
const PR_SET_MM_START_BRK = 6 
const PR_SET_MM_START_CODE = 1 
const PR_SET_MM_START_DATA = 3 
const PR_SET_MM_START_STACK = 5 
const PR_SET_NAME = 15 
const PR_SET_NO_NEW_PRIVS = 38 
const PR_SET_PDEATHSIG = 1 
const PR_SET_PTRACER = 1499557217 
const PR_SET_SECCOMP = 22 
const PR_SET_SECUREBITS = 28 
const PR_SET_SPECULATION_CTRL = 53 
const PR_SET_TAGGED_ADDR_CTRL = 55 
const PR_SET_THP_DISABLE = 41 
const PR_SET_TIMERSLACK = 29 
const PR_SET_TIMING = 14 
const PR_SET_TSC = 26 
const PR_SET_UNALIGN = 6 
const PR_SPEC_DISABLE = 4 
const PR_SPEC_DISABLE_NOEXEC = 16 
const PR_SPEC_ENABLE = 2 
const PR_SPEC_FORCE_DISABLE = 8 
const PR_SPEC_INDIRECT_BRANCH = 1 
const PR_SPEC_NOT_AFFECTED = 0 
const PR_SPEC_PRCTL = 1 
const PR_SPEC_STORE_BYPASS = 0 
const PR_SVE_GET_VL = 51 
const PR_SVE_SET_VL = 50 
const PR_SVE_SET_VL_ONEXEC = 262144 
const PR_SVE_VL_INHERIT = 131072 
const PR_SVE_VL_LEN_MASK = 65535 
const PR_TAGGED_ADDR_ENABLE = 1 
const PR_TASK_PERF_EVENTS_DISABLE = 31 
const PR_TASK_PERF_EVENTS_ENABLE = 32 
const PR_TIMING_STATISTICAL = 0 
const PR_TIMING_TIMESTAMP = 1 
const PR_TSC_ENABLE = 1 
const PR_TSC_SIGSEGV = 2 
const PR_UNALIGN_NOPRINT = 1 
const PR_UNALIGN_SIGBUS = 2 
const PTRACE_ATTACH = 16 
const PTRACE_CONT = 7 
const PTRACE_DETACH = 17 
const PTRACE_EVENTMSG_SYSCALL_ENTRY = 1 
const PTRACE_EVENTMSG_SYSCALL_EXIT = 2 
const PTRACE_EVENT_CLONE = 3 
const PTRACE_EVENT_EXEC = 4 
const PTRACE_EVENT_EXIT = 6 
const PTRACE_EVENT_FORK = 1 
const PTRACE_EVENT_SECCOMP = 7 
const PTRACE_EVENT_STOP = 128 
const PTRACE_EVENT_VFORK = 2 
const PTRACE_EVENT_VFORK_DONE = 5 
const PTRACE_GETEVENTMSG = 16897 
const PTRACE_GETFPREGS = 14 
const PTRACE_GETFPXREGS = 18 
const PTRACE_GETREGS = 12 
const PTRACE_GETREGSET = 16900 
const PTRACE_GETSIGINFO = 16898 
const PTRACE_GETSIGMASK = 16906 
const PTRACE_GET_SYSCALL_INFO = 16910 
const PTRACE_INTERRUPT = 16903 
const PTRACE_KILL = 8 
const PTRACE_LISTEN = 16904 
const PTRACE_O_EXITKILL = 1048576 
const PTRACE_O_MASK = 3145983 
const PTRACE_O_SUSPEND_SECCOMP = 2097152 
const PTRACE_O_TRACECLONE = 8 
const PTRACE_O_TRACEEXEC = 16 
const PTRACE_O_TRACEEXIT = 64 
const PTRACE_O_TRACEFORK = 2 
const PTRACE_O_TRACESECCOMP = 128 
const PTRACE_O_TRACESYSGOOD = 1 
const PTRACE_O_TRACEVFORK = 4 
const PTRACE_O_TRACEVFORKDONE = 32 
const PTRACE_PEEKDATA = 2 
const PTRACE_PEEKSIGINFO = 16905 
const PTRACE_PEEKSIGINFO_SHARED = 1 
const PTRACE_PEEKTEXT = 1 
const PTRACE_PEEKUSER = 3 
const PTRACE_PEEKUSR = 3 
const PTRACE_POKEDATA = 5 
const PTRACE_POKETEXT = 4 
const PTRACE_POKEUSER = 6 
const PTRACE_POKEUSR = 6 
const PTRACE_SECCOMP_GET_FILTER = 16908 
const PTRACE_SECCOMP_GET_METADATA = 16909 
const PTRACE_SEIZE = 16902 
const PTRACE_SETFPREGS = 15 
const PTRACE_SETFPXREGS = 19 
const PTRACE_SETOPTIONS = 16896 
const PTRACE_SETREGS = 13 
const PTRACE_SETREGSET = 16901 
const PTRACE_SETSIGINFO = 16899 
const PTRACE_SETSIGMASK = 16907 
const PTRACE_SINGLESTEP = 9 
const PTRACE_SYSCALL = 24 
const PTRACE_SYSCALL_INFO_ENTRY = 1 
const PTRACE_SYSCALL_INFO_EXIT = 2 
const PTRACE_SYSCALL_INFO_NONE = 0 
const PTRACE_SYSCALL_INFO_SECCOMP = 3 
const PTRACE_TRACEME = 0 
func ParseDirent (buf <esc:0x1> <type 98>, max <type -11>, names <esc:0x40a> <type 110>) (consumed <type -11>, count <type -11>, newnames <type 110>)
func ParseNetlinkMessage (b <type 98>) (? <type 174>, ? <type -19>)
func ParseNetlinkRouteAttr (m <esc:0x9> <type 175>) (? <type 176>, ? <type -19>)
func ParseSocketControlMessage (b <type 98>) (? <type 177>, ? <type -19>)
func ParseUnixCredentials (m <esc:0x1> <type 178>) (? <type 141>, ? <type -19>)
func ParseUnixRights (m <esc:0x1> <type 178>) (? <type 133>, ? <type -19>)
const PathMax = 4096 
func Pause () (err <type -19>)
func Pipe (p <esc:0x1> <type 133>) (err <type -19>)
func Pipe2 (p <esc:0x1> <type 133>, flags <type -11>) (err <type -19>)
func PivotRoot (newroot <esc:0x1> <type -16>, putold <esc:0x1> <type -16>) (err <type -19>)
func Pread (fd <type -11>, p <esc:0x1> <type 98>, offset <type -4>) (n <type -11>, err <type -19>)
func PtraceAttach (pid <type -11>) (err <type -19>)
func PtraceCont (pid <type -11>, signal <type -11>) (err <type -19>)
func PtraceDetach (pid <type -11>) (err <type -19>)
func PtraceGetEventMsg (pid <type -11>) (msg <type -12>, err <type -19>)
func PtracePeekData (pid <type -11>, addr <type -13>, out <esc:0x1> <type 98>) (count <type -11>, err <type -19>)
func PtracePeekText (pid <type -11>, addr <type -13>, out <esc:0x1> <type 98>) (count <type -11>, err <type -19>)
func PtracePokeData (pid <type -11>, addr <type -13>, data <esc:0x1> <type 98>) (count <type -11>, err <type -19>)
func PtracePokeText (pid <type -11>, addr <type -13>, data <esc:0x1> <type 98>) (count <type -11>, err <type -19>)
func PtraceSetOptions (pid <type -11>, options <type -11>) (err <type -19>)
func PtraceSingleStep (pid <type -11>) (err <type -19>)
func Pwrite (fd <type -11>, p <esc:0x1> <type 98>, offset <type -4>) (n <type -11>, err <type -19>)
const RLIMIT_AS = 9 
const RLIMIT_CORE = 4 
const RLIMIT_CPU = 0 
const RLIMIT_DATA = 2 
const RLIMIT_FSIZE = 1 
const RLIMIT_NOFILE = 7 
const RLIMIT_STACK = 3 
const RLIM_INFINITY = -1 
const RLIM_SAVED_CUR = 18446744073709551615 
const RLIM_SAVED_MAX = 18446744073709551615 
const RTAX_ADVMSS = 8 
const RTAX_CC_ALGO = 16 
const RTAX_CWND = 7 
const RTAX_FASTOPEN_NO_COOKIE = 17 
const RTAX_FEATURES = 12 
const RTAX_FEATURE_ALLFRAG = 8 
const RTAX_FEATURE_ECN = 1 
const RTAX_FEATURE_MASK = 15 
const RTAX_FEATURE_SACK = 2 
const RTAX_FEATURE_TIMESTAMP = 4 
const RTAX_HOPLIMIT = 10 
const RTAX_INITCWND = 11 
const RTAX_INITRWND = 14 
const RTAX_LOCK = 1 
const RTAX_MTU = 2 
const RTAX_QUICKACK = 15 
const RTAX_REORDERING = 9 
const RTAX_RTO_MIN = 13 
const RTAX_RTT = 4 
const RTAX_RTTVAR = 5 
const RTAX_SSTHRESH = 6 
const RTAX_UNSPEC = 0 
const RTAX_WINDOW = 3 
const RTA_ALIGNTO = 4 
const RTA_CACHEINFO = 12 
const RTA_DPORT = 29 
const RTA_DST = 1 
const RTA_ENCAP = 22 
const RTA_ENCAP_TYPE = 21 
const RTA_EXPIRES = 23 
const RTA_FLOW = 11 
const RTA_GATEWAY = 5 
const RTA_IIF = 3 
const RTA_IP_PROTO = 27 
const RTA_MARK = 16 
const RTA_METRICS = 8 
const RTA_MFC_STATS = 17 
const RTA_MP_ALGO = 14 
const RTA_MULTIPATH = 9 
const RTA_NEWDST = 19 
const RTA_NH_ID = 30 
const RTA_OIF = 4 
const RTA_PAD = 24 
const RTA_PREF = 20 
const RTA_PREFSRC = 7 
const RTA_PRIORITY = 6 
const RTA_PROTOINFO = 10 
const RTA_SESSION = 13 
const RTA_SPORT = 28 
const RTA_SRC = 2 
const RTA_TABLE = 15 
const RTA_TTL_PROPAGATE = 26 
const RTA_UID = 25 
const RTA_UNSPEC = 0 
const RTA_VIA = 18 
const RTCF_DIRECTSRC = 67108864 
const RTCF_DOREDIRECT = 16777216 
const RTCF_LOG = 33554432 
const RTCF_MASQ = 4194304 
const RTCF_NAT = 8388608 
const RTCF_VALVE = 2097152 
const RTF_ADDRCLASSMASK = 4160749568 
const RTF_ADDRCONF = 262144 
const RTF_ALLONLINK = 131072 
const RTF_BROADCAST = 268435456 
const RTF_CACHE = 16777216 
const RTF_DEFAULT = 65536 
const RTF_DYNAMIC = 16 
const RTF_FLOW = 33554432 
const RTF_GATEWAY = 2 
const RTF_HOST = 4 
const RTF_INTERFACE = 1073741824 
const RTF_IRTT = 256 
const RTF_LINKRT = 1048576 
const RTF_LOCAL = 2147483648 
const RTF_MODIFIED = 32 
const RTF_MSS = 64 
const RTF_MTU = 64 
const RTF_MULTICAST = 536870912 
const RTF_NAT = 134217728 
const RTF_NOFORWARD = 4096 
const RTF_NONEXTHOP = 2097152 
const RTF_NOPMTUDISC = 16384 
const RTF_POLICY = 67108864 
const RTF_REINSTATE = 8 
const RTF_REJECT = 512 
const RTF_STATIC = 1024 
const RTF_THROW = 8192 
const RTF_UP = 1 
const RTF_WINDOW = 128 
const RTF_XRESOLVE = 2048 
const RTMGRP_DECnet_IFADDR = 4096 
const RTMGRP_DECnet_ROUTE = 16384 
const RTMGRP_IPV4_IFADDR = 16 
const RTMGRP_IPV4_MROUTE = 32 
const RTMGRP_IPV4_ROUTE = 64 
const RTMGRP_IPV4_RULE = 128 
const RTMGRP_IPV6_IFADDR = 256 
const RTMGRP_IPV6_IFINFO = 2048 
const RTMGRP_IPV6_MROUTE = 512 
const RTMGRP_IPV6_PREFIX = 131072 
const RTMGRP_IPV6_ROUTE = 1024 
const RTMGRP_LINK = 1 
const RTMGRP_NEIGH = 4 
const RTMGRP_NOTIFY = 2 
const RTMGRP_TC = 8 
const RTMSG_AR_FAILED = 81 
const RTMSG_CONTROL = 64 
const RTMSG_DELDEVICE = 18 
const RTMSG_DELROUTE = 34 
const RTMSG_DELRULE = 50 
const RTMSG_NEWDEVICE = 17 
const RTMSG_NEWROUTE = 33 
const RTMSG_NEWRULE = 49 
const RTMSG_OVERRUN = 4 
const RTM_BASE = 16 
const RTM_DELACTION = 49 
const RTM_DELADDR = 21 
const RTM_DELADDRLABEL = 73 
const RTM_DELCHAIN = 101 
const RTM_DELLINK = 17 
const RTM_DELLINKPROP = 109 
const RTM_DELMDB = 85 
const RTM_DELNEIGH = 29 
const RTM_DELNETCONF = 81 
const RTM_DELNEXTHOP = 105 
const RTM_DELNSID = 89 
const RTM_DELQDISC = 37 
const RTM_DELROUTE = 25 
const RTM_DELRULE = 33 
const RTM_DELTCLASS = 41 
const RTM_DELTFILTER = 45 
const RTM_DELVLAN = 113 
const RTM_F_CLONED = 512 
const RTM_F_EQUALIZE = 1024 
const RTM_F_FIB_MATCH = 8192 
const RTM_F_LOOKUP_TABLE = 4096 
const RTM_F_NOTIFY = 256 
const RTM_F_OFFLOAD = 16384 
const RTM_F_PREFIX = 2048 
const RTM_F_TRAP = 32768 
const RTM_GETACTION = 50 
const RTM_GETADDR = 22 
const RTM_GETADDRLABEL = 74 
const RTM_GETANYCAST = 62 
const RTM_GETCHAIN = 102 
const RTM_GETDCB = 78 
const RTM_GETLINK = 18 
const RTM_GETLINKPROP = 110 
const RTM_GETMDB = 86 
const RTM_GETMULTICAST = 58 
const RTM_GETNEIGH = 30 
const RTM_GETNEIGHTBL = 66 
const RTM_GETNETCONF = 82 
const RTM_GETNEXTHOP = 106 
const RTM_GETNSID = 90 
const RTM_GETQDISC = 38 
const RTM_GETROUTE = 26 
const RTM_GETRULE = 34 
const RTM_GETSTATS = 94 
const RTM_GETTCLASS = 42 
const RTM_GETTFILTER = 46 
const RTM_GETVLAN = 114 
const RTM_NEWACTION = 48 
const RTM_NEWADDR = 20 
const RTM_NEWADDRLABEL = 72 
const RTM_NEWCACHEREPORT = 96 
const RTM_NEWCHAIN = 100 
const RTM_NEWLINK = 16 
const RTM_NEWLINKPROP = 108 
const RTM_NEWMDB = 84 
const RTM_NEWNDUSEROPT = 68 
const RTM_NEWNEIGH = 28 
const RTM_NEWNEIGHTBL = 64 
const RTM_NEWNETCONF = 80 
const RTM_NEWNEXTHOP = 104 
const RTM_NEWNSID = 88 
const RTM_NEWPREFIX = 52 
const RTM_NEWQDISC = 36 
const RTM_NEWROUTE = 24 
const RTM_NEWRULE = 32 
const RTM_NEWSTATS = 92 
const RTM_NEWTCLASS = 40 
const RTM_NEWTFILTER = 44 
const RTM_NEWVLAN = 112 
const RTM_SETDCB = 79 
const RTM_SETLINK = 19 
const RTM_SETNEIGHTBL = 67 
const RTNETLINK_HAVE_PEERINFO = 1 
const RTNH_ALIGNTO = 4 
const RTNH_COMPARE_MASK = 25 
const RTNH_F_DEAD = 1 
const RTNH_F_LINKDOWN = 16 
const RTNH_F_OFFLOAD = 8 
const RTNH_F_ONLINK = 4 
const RTNH_F_PERVASIVE = 2 
const RTNH_F_UNRESOLVED = 32 
const RTNLGRP_BRVLAN = 33 
const RTNLGRP_DCB = 23 
const RTNLGRP_DECnet_IFADDR = 13 
const RTNLGRP_DECnet_ROUTE = 15 
const RTNLGRP_DECnet_RULE = 16 
const RTNLGRP_IPV4_IFADDR = 5 
const RTNLGRP_IPV4_MROUTE = 6 
const RTNLGRP_IPV4_MROUTE_R = 30 
const RTNLGRP_IPV4_NETCONF = 24 
const RTNLGRP_IPV4_ROUTE = 7 
const RTNLGRP_IPV4_RULE = 8 
const RTNLGRP_IPV6_IFADDR = 9 
const RTNLGRP_IPV6_IFINFO = 12 
const RTNLGRP_IPV6_MROUTE = 10 
const RTNLGRP_IPV6_MROUTE_R = 31 
const RTNLGRP_IPV6_NETCONF = 25 
const RTNLGRP_IPV6_PREFIX = 18 
const RTNLGRP_IPV6_ROUTE = 11 
const RTNLGRP_IPV6_RULE = 19 
const RTNLGRP_LINK = 1 
const RTNLGRP_MDB = 26 
const RTNLGRP_MPLS_NETCONF = 29 
const RTNLGRP_MPLS_ROUTE = 27 
const RTNLGRP_ND_USEROPT = 20 
const RTNLGRP_NEIGH = 3 
const RTNLGRP_NEXTHOP = 32 
const RTNLGRP_NONE = 0 
const RTNLGRP_NOP2 = 14 
const RTNLGRP_NOP4 = 17 
const RTNLGRP_NOTIFY = 2 
const RTNLGRP_NSID = 28 
const RTNLGRP_PHONET_IFADDR = 21 
const RTNLGRP_PHONET_ROUTE = 22 
const RTNLGRP_TC = 4 
const RTNL_FAMILY_IP6MR = 129 
const RTNL_FAMILY_IPMR = 128 
const RTNL_FAMILY_MAX = 129 
const RTN_ANYCAST = 4 
const RTN_BLACKHOLE = 6 
const RTN_BROADCAST = 3 
const RTN_LOCAL = 2 
const RTN_MULTICAST = 5 
const RTN_NAT = 10 
const RTN_PROHIBIT = 8 
const RTN_THROW = 9 
const RTN_UNICAST = 1 
const RTN_UNREACHABLE = 7 
const RTN_UNSPEC = 0 
const RTN_XRESOLVE = 11 
const RTPROT_BABEL = 42 
const RTPROT_BGP = 186 
const RTPROT_BIRD = 12 
const RTPROT_BOOT = 3 
const RTPROT_DHCP = 16 
const RTPROT_DNROUTED = 13 
const RTPROT_EIGRP = 192 
const RTPROT_GATED = 8 
const RTPROT_ISIS = 187 
const RTPROT_KERNEL = 2 
const RTPROT_MROUTED = 17 
const RTPROT_MRT = 10 
const RTPROT_NTK = 15 
const RTPROT_OSPF = 188 
const RTPROT_RA = 9 
const RTPROT_REDIRECT = 1 
const RTPROT_RIP = 189 
const RTPROT_STATIC = 4 
const RTPROT_UNSPEC = 0 
const RTPROT_XORP = 14 
const RTPROT_ZEBRA = 11 
const RT_CLASS_DEFAULT = 253 
const RT_CLASS_LOCAL = 255 
const RT_CLASS_MAIN = 254 
const RT_CLASS_MAX = 255 
const RT_CLASS_UNSPEC = 0 
const RT_SCOPE_HOST = 254 
const RT_SCOPE_LINK = 253 
const RT_SCOPE_NOWHERE = 255 
const RT_SCOPE_SITE = 200 
const RT_SCOPE_UNIVERSE = 0 
const RT_TABLE_COMPAT = 252 
const RT_TABLE_DEFAULT = 253 
const RT_TABLE_LOCAL = 255 
const RT_TABLE_MAIN = 254 
const RT_TABLE_MAX = 4294967295 
const RT_TABLE_UNSPEC = 0 
const RUSAGE_CHILDREN = -1 
const RUSAGE_SELF = 0 
const RUSAGE_THREAD = 1 
func RawSyscall (trap <type -13>, a1 <type -13>, a2 <type -13>, a3 <type -13>) (r1 <type -13>, r2 <type -13>, err <type 9>)
func RawSyscall6 (trap <type -13>, a1 <type -13>, a2 <type -13>, a3 <type -13>, a4 <type -13>, a5 <type -13>, a6 <type -13>) (r1 <type -13>, r2 <type -13>, err <type 9>)
func Read (fd <type -11>, p <type 98>) (n <type -11>, err <type -19>)
func ReadDirent (fd <type -11>, buf <esc:0x1> <type 98>) (n <type -11>, err <type -19>)
func Readlink (path <esc:0x1> <type -16>, buf <esc:0x1> <type 98>) (n <type -11>, err <type -19>)
func Reboot (cmd <type -11>) (err <type -19>)
func Recvfrom (fd <type -11>, p <esc:0x1> <type 98>, flags <type -11>) (n <type -11>, from <type 59>, err <type -19>)
func Recvmsg (fd <type -11>, p <esc:0x1> <type 98>, oob <esc:0x1> <type 98>, flags <type -11>) (n <type -11>, oobn <type -11>, recvflags <type -11>, from <type 59>, err <type -19>)
func Removexattr (path <esc:0x1> <type -16>, attr <esc:0x1> <type -16>) (err <type -19>)
func Rename (oldpath <esc:0x1> <type -16>, newpath <esc:0x1> <type -16>) (err <type -19>)
func Renameat (olddirfd <type -11>, oldpath <esc:0x1> <type -16>, newdirfd <type -11>, newpath <esc:0x1> <type -16>) (err <type -19>)
func Rmdir (path <esc:0x1> <type -16>) (err <type -19>)
const SCHED_H = 1 
const SCM_CREDENTIALS = 2 
const SCM_RIGHTS = 1 
const SCM_TIMESTAMP = 29 
const SCM_TIMESTAMPING = 37 
const SCM_TIMESTAMPING_OPT_STATS = 54 
const SCM_TIMESTAMPING_PKTINFO = 58 
const SCM_TIMESTAMPNS = 35 
const SCM_TXTIME = 61 
const SCM_WIFI_STATUS = 41 
const SC_2_CHAR_TERM = 95 
const SC_2_C_BIND = 47 
const SC_2_C_DEV = 48 
const SC_2_C_VERSION = 96 
const SC_2_FORT_DEV = 49 
const SC_2_FORT_RUN = 50 
const SC_2_LOCALEDEF = 52 
const SC_2_PBS = 168 
const SC_2_PBS_ACCOUNTING = 169 
const SC_2_PBS_CHECKPOINT = 175 
const SC_2_PBS_LOCATE = 170 
const SC_2_PBS_MESSAGE = 171 
const SC_2_PBS_TRACK = 172 
const SC_2_SW_DEV = 51 
const SC_2_UPE = 97 
const SC_2_VERSION = 46 
const SC_ADVISORY_INFO = 132 
const SC_AIO_LISTIO_MAX = 23 
const SC_AIO_MAX = 24 
const SC_AIO_PRIO_DELTA_MAX = 25 
const SC_ARG_MAX = 0 
const SC_ASYNCHRONOUS_IO = 12 
const SC_ATEXIT_MAX = 87 
const SC_AVPHYS_PAGES = 86 
const SC_BARRIERS = 133 
const SC_BASE = 134 
const SC_BC_BASE_MAX = 36 
const SC_BC_DIM_MAX = 37 
const SC_BC_SCALE_MAX = 38 
const SC_BC_STRING_MAX = 39 
const SC_CHARCLASS_NAME_MAX = 45 
const SC_CHAR_BIT = 101 
const SC_CHAR_MAX = 102 
const SC_CHAR_MIN = 103 
const SC_CHILD_MAX = 1 
const SC_CLK_TCK = 2 
const SC_CLOCK_SELECTION = 137 
const SC_COLL_WEIGHTS_MAX = 40 
const SC_CPUTIME = 138 
const SC_C_LANG_SUPPORT = 135 
const SC_C_LANG_SUPPORT_R = 136 
const SC_DELAYTIMER_MAX = 26 
const SC_DEVICE_IO = 140 
const SC_DEVICE_SPECIFIC = 141 
const SC_DEVICE_SPECIFIC_R = 142 
const SC_EQUIV_CLASS_MAX = 41 
const SC_EXPR_NEST_MAX = 42 
const SC_FD_MGMT = 143 
const SC_FIFO = 144 
const SC_FILE_ATTRIBUTES = 146 
const SC_FILE_LOCKING = 147 
const SC_FILE_SYSTEM = 148 
const SC_FSYNC = 15 
const SC_GETGR_R_SIZE_MAX = 69 
const SC_GETPW_R_SIZE_MAX = 70 
const SC_HOST_NAME_MAX = 180 
const SC_INT_MAX = 104 
const SC_INT_MIN = 105 
const SC_IOV_MAX = 60 
const SC_IPV6 = 235 
const SC_JOB_CONTROL = 7 
const SC_LEVEL1_DCACHE_ASSOC = 189 
const SC_LEVEL1_DCACHE_LINESIZE = 190 
const SC_LEVEL1_DCACHE_SIZE = 188 
const SC_LEVEL1_ICACHE_ASSOC = 186 
const SC_LEVEL1_ICACHE_LINESIZE = 187 
const SC_LEVEL1_ICACHE_SIZE = 185 
const SC_LEVEL2_CACHE_ASSOC = 192 
const SC_LEVEL2_CACHE_LINESIZE = 193 
const SC_LEVEL2_CACHE_SIZE = 191 
const SC_LEVEL3_CACHE_ASSOC = 195 
const SC_LEVEL3_CACHE_LINESIZE = 196 
const SC_LEVEL3_CACHE_SIZE = 194 
const SC_LEVEL4_CACHE_ASSOC = 198 
const SC_LEVEL4_CACHE_LINESIZE = 199 
const SC_LEVEL4_CACHE_SIZE = 197 
const SC_LINE_MAX = 43 
const SC_LOGIN_NAME_MAX = 71 
const SC_LONG_BIT = 106 
const SC_MAPPED_FILES = 16 
const SC_MB_LEN_MAX = 108 
const SC_MEMLOCK = 17 
const SC_MEMLOCK_RANGE = 18 
const SC_MEMORY_PROTECTION = 19 
const SC_MESSAGE_PASSING = 20 
const SC_MONOTONIC_CLOCK = 149 
const SC_MQ_OPEN_MAX = 27 
const SC_MQ_PRIO_MAX = 28 
const SC_MULTI_PROCESS = 150 
const SC_NETWORKING = 152 
const SC_NGROUPS_MAX = 3 
const SC_NL_ARGMAX = 119 
const SC_NL_LANGMAX = 120 
const SC_NL_MSGMAX = 121 
const SC_NL_NMAX = 122 
const SC_NL_SETMAX = 123 
const SC_NL_TEXTMAX = 124 
const SC_NPROCESSORS_CONF = 83 
const SC_NPROCESSORS_ONLN = 84 
const SC_NZERO = 109 
const SC_OPEN_MAX = 4 
const SC_PAGESIZE = 30 
const SC_PASS_MAX = 88 
const SC_PHYS_PAGES = 85 
const SC_PII = 53 
const SC_PII_INTERNET = 56 
const SC_PII_INTERNET_DGRAM = 62 
const SC_PII_INTERNET_STREAM = 61 
const SC_PII_OSI = 57 
const SC_PII_OSI_CLTS = 64 
const SC_PII_OSI_COTS = 63 
const SC_PII_OSI_M = 65 
const SC_PII_SOCKET = 55 
const SC_PII_XTI = 54 
const SC_PIPE = 145 
const SC_POLL = 58 
const SC_PRIORITIZED_IO = 13 
const SC_PRIORITY_SCHEDULING = 10 
const SC_RAW_SOCKETS = 236 
const SC_READER_WRITER_LOCKS = 153 
const SC_REALTIME_SIGNALS = 9 
const SC_REGEXP = 155 
const SC_REGEX_VERSION = 156 
const SC_RE_DUP_MAX = 44 
const SC_RTSIG_MAX = 31 
const SC_SAVED_IDS = 8 
const SC_SCHAR_MAX = 111 
const SC_SCHAR_MIN = 112 
const SC_SELECT = 59 
const SC_SEMAPHORES = 21 
const SC_SEM_NSEMS_MAX = 32 
const SC_SEM_VALUE_MAX = 33 
const SC_SHARED_MEMORY_OBJECTS = 22 
const SC_SHELL = 157 
const SC_SHRT_MAX = 113 
const SC_SHRT_MIN = 114 
const SC_SIGNALS = 158 
const SC_SIGQUEUE_MAX = 34 
const SC_SINGLE_PROCESS = 151 
const SC_SPAWN = 159 
const SC_SPIN_LOCKS = 154 
const SC_SPORADIC_SERVER = 160 
const SC_SSIZE_MAX = 110 
const SC_SS_REPL_MAX = 241 
const SC_STREAMS = 174 
const SC_STREAM_MAX = 5 
const SC_SYMLOOP_MAX = 173 
const SC_SYNCHRONIZED_IO = 14 
const SC_SYSTEM_DATABASE = 162 
const SC_SYSTEM_DATABASE_R = 163 
const SC_THREADS = 67 
const SC_THREAD_ATTR_STACKADDR = 77 
const SC_THREAD_ATTR_STACKSIZE = 78 
const SC_THREAD_CPUTIME = 139 
const SC_THREAD_DESTRUCTOR_ITERATIONS = 73 
const SC_THREAD_KEYS_MAX = 74 
const SC_THREAD_PRIORITY_SCHEDULING = 79 
const SC_THREAD_PRIO_INHERIT = 80 
const SC_THREAD_PRIO_PROTECT = 81 
const SC_THREAD_PROCESS_SHARED = 82 
const SC_THREAD_ROBUST_PRIO_INHERIT = 247 
const SC_THREAD_ROBUST_PRIO_PROTECT = 248 
const SC_THREAD_SAFE_FUNCTIONS = 68 
const SC_THREAD_SPORADIC_SERVER = 161 
const SC_THREAD_STACK_MIN = 75 
const SC_THREAD_THREADS_MAX = 76 
const SC_TIMEOUTS = 164 
const SC_TIMERS = 11 
const SC_TIMER_MAX = 35 
const SC_TRACE = 181 
const SC_TRACE_EVENT_FILTER = 182 
const SC_TRACE_EVENT_NAME_MAX = 242 
const SC_TRACE_INHERIT = 183 
const SC_TRACE_LOG = 184 
const SC_TRACE_NAME_MAX = 243 
const SC_TRACE_SYS_MAX = 244 
const SC_TRACE_USER_EVENT_MAX = 245 
const SC_TTY_NAME_MAX = 72 
const SC_TYPED_MEMORY_OBJECTS = 165 
const SC_TZNAME_MAX = 6 
const SC_T_IOV_MAX = 66 
const SC_UCHAR_MAX = 115 
const SC_UINT_MAX = 116 
const SC_UIO_MAXIOV = 60 
const SC_ULONG_MAX = 117 
const SC_USER_GROUPS = 166 
const SC_USER_GROUPS_R = 167 
const SC_USHRT_MAX = 118 
const SC_V6_ILP32_OFF32 = 176 
const SC_V6_ILP32_OFFBIG = 177 
const SC_V6_LP64_OFF64 = 178 
const SC_V6_LPBIG_OFFBIG = 179 
const SC_V7_ILP32_OFF32 = 237 
const SC_V7_ILP32_OFFBIG = 238 
const SC_V7_LP64_OFF64 = 239 
const SC_V7_LPBIG_OFFBIG = 240 
const SC_VERSION = 29 
const SC_WORD_BIT = 107 
const SC_XBS5_ILP32_OFF32 = 125 
const SC_XBS5_ILP32_OFFBIG = 126 
const SC_XBS5_LP64_OFF64 = 127 
const SC_XBS5_LPBIG_OFFBIG = 128 
const SC_XOPEN_CRYPT = 92 
const SC_XOPEN_ENH_I18N = 93 
const SC_XOPEN_LEGACY = 129 
const SC_XOPEN_REALTIME = 130 
const SC_XOPEN_REALTIME_THREADS = 131 
const SC_XOPEN_SHM = 94 
const SC_XOPEN_STREAMS = 246 
const SC_XOPEN_UNIX = 91 
const SC_XOPEN_VERSION = 89 
const SC_XOPEN_XCU_VERSION = 90 
const SC_XOPEN_XPG2 = 98 
const SC_XOPEN_XPG3 = 99 
const SC_XOPEN_XPG4 = 100 
const SHUT_RD = 0 
const SHUT_RDWR = 2 
const SHUT_WR = 1 
const SIGABRT <type 55> = 6 
const SIGALRM <type 55> = 14 
const SIGBUS <type 55> = 7 
const SIGCHLD <type 55> = 17 
const SIGCLD <type 55> = 17 
const SIGCONT <type 55> = 18 
const SIGFPE <type 55> = 8 
const SIGHUP <type 55> = 1 
const SIGILL <type 55> = 4 
const SIGINT <type 55> = 2 
const SIGIO <type 55> = 29 
const SIGIOT <type 55> = 6 
const SIGKILL <type 55> = 9 
const SIGPIPE <type 55> = 13 
const SIGPOLL <type 55> = 29 
const SIGPROF <type 55> = 27 
const SIGPWR <type 55> = 30 
const SIGQUIT <type 55> = 3 
const SIGSEGV <type 55> = 11 
const SIGSTKFLT <type 55> = 16 
const SIGSTKSZ <type 55> = 8192 
const SIGSTOP <type 55> = 19 
const SIGSYS <type 55> = 31 
const SIGTERM <type 55> = 15 
const SIGTRAP <type 55> = 5 
const SIGTSTP <type 55> = 20 
const SIGTTIN <type 55> = 21 
const SIGTTOU <type 55> = 22 
const SIGURG <type 55> = 23 
const SIGUSR1 <type 55> = 10 
const SIGUSR2 <type 55> = 12 
const SIGVTALRM <type 55> = 26 
const SIGWINCH <type 55> = 28 
const SIGXCPU <type 55> = 24 
const SIGXFSZ <type 55> = 25 
const SIOCADDDLCI = 35200 
const SIOCADDMULTI = 35121 
const SIOCADDRT = 35083 
const SIOCATMARK = 35077 
const SIOCDARP = 35155 
const SIOCDELDLCI = 35201 
const SIOCDELMULTI = 35122 
const SIOCDELRT = 35084 
const SIOCDEVPRIVATE = 35312 
const SIOCDIFADDR = 35126 
const SIOCDRARP = 35168 
const SIOCGARP = 35156 
const SIOCGIFADDR = 35093 
const SIOCGIFBR = 35136 
const SIOCGIFBRDADDR = 35097 
const SIOCGIFCONF = 35090 
const SIOCGIFCOUNT = 35128 
const SIOCGIFDSTADDR = 35095 
const SIOCGIFENCAP = 35109 
const SIOCGIFFLAGS = 35091 
const SIOCGIFHWADDR = 35111 
const SIOCGIFINDEX = 35123 
const SIOCGIFMAP = 35184 
const SIOCGIFMEM = 35103 
const SIOCGIFMETRIC = 35101 
const SIOCGIFMTU = 35105 
const SIOCGIFNAME = 35088 
const SIOCGIFNETMASK = 35099 
const SIOCGIFPFLAGS = 35125 
const SIOCGIFSLAVE = 35113 
const SIOCGIFTXQLEN = 35138 
const SIOCGPGRP = 35076 
const SIOCGRARP = 35169 
const SIOCGSTAMPNS_OLD = 35079 
const SIOCGSTAMP_OLD = 35078 
const SIOCPROTOPRIVATE = 35296 
const SIOCRTMSG = 35085 
const SIOCSARP = 35157 
const SIOCSIFADDR = 35094 
const SIOCSIFBR = 35137 
const SIOCSIFBRDADDR = 35098 
const SIOCSIFDSTADDR = 35096 
const SIOCSIFENCAP = 35110 
const SIOCSIFFLAGS = 35092 
const SIOCSIFHWADDR = 35108 
const SIOCSIFHWBROADCAST = 35127 
const SIOCSIFLINK = 35089 
const SIOCSIFMAP = 35185 
const SIOCSIFMEM = 35104 
const SIOCSIFMETRIC = 35102 
const SIOCSIFMTU = 35106 
const SIOCSIFNAME = 35107 
const SIOCSIFNETMASK = 35100 
const SIOCSIFPFLAGS = 35124 
const SIOCSIFSLAVE = 35120 
const SIOCSIFTXQLEN = 35139 
const SIOCSPGRP = 35074 
const SIOCSRARP = 35170 
const SOCK_CLOEXEC = 524288 
const SOCK_DCCP = 6 
const SOCK_DGRAM = 2 
const SOCK_NONBLOCK = 2048 
const SOCK_PACKET = 10 
const SOCK_RAW = 3 
const SOCK_RDM = 4 
const SOCK_SEQPACKET = 5 
const SOCK_STREAM = 1 
const SOL_AAL = 265 
const SOL_ALG = 279 
const SOL_ATM = 264 
const SOL_BLUETOOTH = 274 
const SOL_CAIF = 278 
const SOL_DCCP = 269 
const SOL_DECNET = 261 
const SOL_ICMPV6 = 58 
const SOL_IP = 0 
const SOL_IPV6 = 41 
const SOL_IRDA = 266 
const SOL_IUCV = 277 
const SOL_KCM = 281 
const SOL_LLC = 268 
const SOL_NETBEUI = 267 
const SOL_NETLINK = 270 
const SOL_NFC = 280 
const SOL_PACKET = 263 
const SOL_PNPIPE = 275 
const SOL_PPPOL2TP = 273 
const SOL_RAW = 255 
const SOL_RDS = 276 
const SOL_RXRPC = 272 
const SOL_SOCKET = 1 
const SOL_TCP = 6 
const SOL_TIPC = 271 
const SOL_TLS = 282 
const SOL_X25 = 262 
const SOL_XDP = 283 
const SOMAXCONN = 4096 
const SO_ACCEPTCONN = 30 
const SO_ATTACH_BPF = 50 
const SO_ATTACH_FILTER = 26 
const SO_ATTACH_REUSEPORT_CBPF = 51 
const SO_ATTACH_REUSEPORT_EBPF = 52 
const SO_BINDTODEVICE = 25 
const SO_BINDTOIFINDEX = 62 
const SO_BPF_EXTENSIONS = 48 
const SO_BROADCAST = 6 
const SO_BSDCOMPAT = 14 
const SO_BUSY_POLL = 46 
const SO_CNX_ADVICE = 53 
const SO_COOKIE = 57 
const SO_DEBUG = 1 
const SO_DETACH_BPF = 27 
const SO_DETACH_FILTER = 27 
const SO_DETACH_REUSEPORT_BPF = 68 
const SO_DOMAIN = 39 
const SO_DONTROUTE = 5 
const SO_ERROR = 4 
const SO_GET_FILTER = 26 
const SO_INCOMING_CPU = 49 
const SO_INCOMING_NAPI_ID = 56 
const SO_KEEPALIVE = 9 
const SO_LINGER = 13 
const SO_LOCK_FILTER = 44 
const SO_MARK = 36 
const SO_MAX_PACING_RATE = 47 
const SO_MEMINFO = 55 
const SO_NOFCS = 43 
const SO_NO_CHECK = 11 
const SO_OOBINLINE = 10 
const SO_PASSCRED = 16 
const SO_PASSSEC = 34 
const SO_PEEK_OFF = 42 
const SO_PEERCRED = 17 
const SO_PEERGROUPS = 59 
const SO_PEERNAME = 28 
const SO_PEERSEC = 31 
const SO_PRIORITY = 12 
const SO_PROTOCOL = 38 
const SO_RCVBUF = 8 
const SO_RCVBUFFORCE = 33 
const SO_RCVLOWAT = 18 
const SO_RCVTIMEO = 20 
const SO_RCVTIMEO_NEW = 66 
const SO_RCVTIMEO_OLD = 20 
const SO_REUSEADDR = 2 
const SO_REUSEPORT = 15 
const SO_RXQ_OVFL = 40 
const SO_SECURITY_AUTHENTICATION = 22 
const SO_SECURITY_ENCRYPTION_NETWORK = 24 
const SO_SECURITY_ENCRYPTION_TRANSPORT = 23 
const SO_SELECT_ERR_QUEUE = 45 
const SO_SNDBUF = 7 
const SO_SNDBUFFORCE = 32 
const SO_SNDLOWAT = 19 
const SO_SNDTIMEO = 21 
const SO_SNDTIMEO_NEW = 67 
const SO_SNDTIMEO_OLD = 21 
const SO_TIMESTAMP = 29 
const SO_TIMESTAMPING = 37 
const SO_TIMESTAMPING_NEW = 65 
const SO_TIMESTAMPING_OLD = 37 
const SO_TIMESTAMPNS = 35 
const SO_TIMESTAMPNS_NEW = 64 
const SO_TIMESTAMPNS_OLD = 35 
const SO_TIMESTAMP_NEW = 63 
const SO_TIMESTAMP_OLD = 29 
const SO_TXTIME = 61 
const SO_TYPE = 3 
const SO_WIFI_STATUS = 41 
const SO_ZEROCOPY = 60 
const SYS_ACCEPT = 202 
const SYS_ACCEPT4 = 242 
const SYS_ACCT = 89 
const SYS_ADD_KEY = 217 
const SYS_ADJTIMEX = 171 
const SYS_BIND = 200 
const SYS_BPF = 280 
const SYS_BRK = 214 
const SYS_CAPGET = 90 
const SYS_CAPSET = 91 
const SYS_CHDIR = 49 
const SYS_CHROOT = 51 
const SYS_CLOCK_ADJTIME = 266 
const SYS_CLOCK_GETRES = 114 
const SYS_CLOCK_GETTIME = 113 
const SYS_CLOCK_NANOSLEEP = 115 
const SYS_CLOCK_SETTIME = 112 
const SYS_CLONE = 220 
const SYS_CLONE3 = 435 
const SYS_CLOSE = 57 
const SYS_CONNECT = 203 
const SYS_COPY_FILE_RANGE = 285 
const SYS_DELETE_MODULE = 106 
const SYS_DUP = 23 
const SYS_DUP3 = 24 
const SYS_EPOLL_CREATE1 = 20 
const SYS_EPOLL_CTL = 21 
const SYS_EPOLL_PWAIT = 22 
const SYS_EVENTFD2 = 19 
const SYS_EXECVE = 221 
const SYS_EXECVEAT = 281 
const SYS_EXIT = 93 
const SYS_EXIT_GROUP = 94 
const SYS_FACCESSAT = 48 
const SYS_FACCESSAT2 = 439 
const SYS_FADVISE64 = 223 
const SYS_FALLOCATE = 47 
const SYS_FANOTIFY_INIT = 262 
const SYS_FANOTIFY_MARK = 263 
const SYS_FCHDIR = 50 
const SYS_FCHMOD = 52 
const SYS_FCHMODAT = 53 
const SYS_FCHOWN = 55 
const SYS_FCHOWNAT = 54 
const SYS_FCNTL = 25 
const SYS_FDATASYNC = 83 
const SYS_FGETXATTR = 10 
const SYS_FINIT_MODULE = 273 
const SYS_FLISTXATTR = 13 
const SYS_FLOCK = 32 
const SYS_FREMOVEXATTR = 16 
const SYS_FSCONFIG = 431 
const SYS_FSETXATTR = 7 
const SYS_FSMOUNT = 432 
const SYS_FSOPEN = 430 
const SYS_FSPICK = 433 
const SYS_FSTAT = 80 
const SYS_FSTATFS = 44 
const SYS_FSYNC = 82 
const SYS_FTRUNCATE = 46 
const SYS_FUTEX = 98 
const SYS_GETCPU = 168 
const SYS_GETCWD = 17 
const SYS_GETDENTS = 0 
const SYS_GETDENTS64 = 61 
const SYS_GETEGID = 177 
const SYS_GETEUID = 175 
const SYS_GETGID = 176 
const SYS_GETGROUPS = 158 
const SYS_GETITIMER = 102 
const SYS_GETPEERNAME = 205 
const SYS_GETPGID = 155 
const SYS_GETPID = 172 
const SYS_GETPPID = 173 
const SYS_GETPRIORITY = 141 
const SYS_GETRANDOM = 278 
const SYS_GETRESGID = 150 
const SYS_GETRESUID = 148 
const SYS_GETRLIMIT = 163 
const SYS_GETRUSAGE = 165 
const SYS_GETSID = 156 
const SYS_GETSOCKNAME = 204 
const SYS_GETSOCKOPT = 209 
const SYS_GETTID = 178 
const SYS_GETTIMEOFDAY = 169 
const SYS_GETUID = 174 
const SYS_GETXATTR = 8 
const SYS_GET_MEMPOLICY = 236 
const SYS_GET_ROBUST_LIST = 100 
const SYS_INIT_MODULE = 105 
const SYS_INOTIFY_ADD_WATCH = 27 
const SYS_INOTIFY_INIT1 = 26 
const SYS_INOTIFY_RM_WATCH = 28 
const SYS_IOCTL = 29 
const SYS_IOPRIO_GET = 31 
const SYS_IOPRIO_SET = 30 
const SYS_IO_CANCEL = 3 
const SYS_IO_DESTROY = 1 
const SYS_IO_GETEVENTS = 4 
const SYS_IO_PGETEVENTS = 292 
const SYS_IO_SETUP = 0 
const SYS_IO_SUBMIT = 2 
const SYS_IO_URING_ENTER = 426 
const SYS_IO_URING_REGISTER = 427 
const SYS_IO_URING_SETUP = 425 
const SYS_KCMP = 272 
const SYS_KEXEC_FILE_LOAD = 294 
const SYS_KEXEC_LOAD = 104 
const SYS_KEYCTL = 219 
const SYS_KILL = 129 
const SYS_LGETXATTR = 9 
const SYS_LINKAT = 37 
const SYS_LISTEN = 201 
const SYS_LISTXATTR = 11 
const SYS_LLISTXATTR = 12 
const SYS_LOOKUP_DCOOKIE = 18 
const SYS_LREMOVEXATTR = 15 
const SYS_LSEEK = 62 
const SYS_LSETXATTR = 6 
const SYS_MADVISE = 233 
const SYS_MBIND = 235 
const SYS_MEMBARRIER = 283 
const SYS_MEMFD_CREATE = 279 
const SYS_MIGRATE_PAGES = 238 
const SYS_MINCORE = 232 
const SYS_MKDIRAT = 34 
const SYS_MKNODAT = 33 
const SYS_MLOCK = 228 
const SYS_MLOCK2 = 284 
const SYS_MLOCKALL = 230 
const SYS_MMAP = 222 
const SYS_MOUNT = 40 
const SYS_MOVE_MOUNT = 429 
const SYS_MOVE_PAGES = 239 
const SYS_MPROTECT = 226 
const SYS_MQ_GETSETATTR = 185 
const SYS_MQ_NOTIFY = 184 
const SYS_MQ_OPEN = 180 
const SYS_MQ_TIMEDRECEIVE = 183 
const SYS_MQ_TIMEDSEND = 182 
const SYS_MQ_UNLINK = 181 
const SYS_MREMAP = 216 
const SYS_MSGCTL = 187 
const SYS_MSGGET = 186 
const SYS_MSGRCV = 188 
const SYS_MSGSND = 189 
const SYS_MSYNC = 227 
const SYS_MUNLOCK = 229 
const SYS_MUNLOCKALL = 231 
const SYS_MUNMAP = 215 
const SYS_NAME_TO_HANDLE_AT = 264 
const SYS_NANOSLEEP = 101 
const SYS_NEWFSTATAT = 79 
const SYS_NFSSERVCTL = 42 
const SYS_NMLN = 65 
const SYS_OPENAT = 56 
const SYS_OPENAT2 = 437 
const SYS_OPEN_BY_HANDLE_AT = 265 
const SYS_OPEN_TREE = 428 
const SYS_PERF_EVENT_OPEN = 241 
const SYS_PERSONALITY = 92 
const SYS_PIDFD_GETFD = 438 
const SYS_PIDFD_OPEN = 434 
const SYS_PIDFD_SEND_SIGNAL = 424 
const SYS_PIPE2 = 59 
const SYS_PIVOT_ROOT = 41 
const SYS_PKEY_ALLOC = 289 
const SYS_PKEY_FREE = 290 
const SYS_PKEY_MPROTECT = 288 
const SYS_PPOLL = 73 
const SYS_PRCTL = 167 
const SYS_PREAD64 = 67 
const SYS_PREADV = 69 
const SYS_PREADV2 = 286 
const SYS_PRLIMIT64 = 261 
const SYS_PROCESS_VM_READV = 270 
const SYS_PROCESS_VM_WRITEV = 271 
const SYS_PSELECT6 = 72 
const SYS_PTRACE = 117 
const SYS_PWRITE64 = 68 
const SYS_PWRITEV = 70 
const SYS_PWRITEV2 = 287 
const SYS_QUOTACTL = 60 
const SYS_READ = 63 
const SYS_READAHEAD = 213 
const SYS_READLINKAT = 78 
const SYS_READV = 65 
const SYS_REBOOT = 142 
const SYS_RECVFROM = 207 
const SYS_RECVMMSG = 243 
const SYS_RECVMSG = 212 
const SYS_REMAP_FILE_PAGES = 234 
const SYS_REMOVEXATTR = 14 
const SYS_RENAMEAT2 = 276 
const SYS_REQUEST_KEY = 218 
const SYS_RESTART_SYSCALL = 128 
const SYS_RISCV_FLUSH_ICACHE = 259 
const SYS_RSEQ = 293 
const SYS_RT_SIGACTION = 134 
const SYS_RT_SIGPENDING = 136 
const SYS_RT_SIGPROCMASK = 135 
const SYS_RT_SIGQUEUEINFO = 138 
const SYS_RT_SIGRETURN = 139 
const SYS_RT_SIGSUSPEND = 133 
const SYS_RT_SIGTIMEDWAIT = 137 
const SYS_RT_TGSIGQUEUEINFO = 240 
const SYS_SCHED_GETAFFINITY = 123 
const SYS_SCHED_GETATTR = 275 
const SYS_SCHED_GETPARAM = 121 
const SYS_SCHED_GETSCHEDULER = 120 
const SYS_SCHED_GET_PRIORITY_MAX = 125 
const SYS_SCHED_GET_PRIORITY_MIN = 126 
const SYS_SCHED_RR_GET_INTERVAL = 127 
const SYS_SCHED_SETAFFINITY = 122 
const SYS_SCHED_SETATTR = 274 
const SYS_SCHED_SETPARAM = 118 
const SYS_SCHED_SETSCHEDULER = 119 
const SYS_SCHED_YIELD = 124 
const SYS_SECCOMP = 277 
const SYS_SEMCTL = 191 
const SYS_SEMGET = 190 
const SYS_SEMOP = 193 
const SYS_SEMTIMEDOP = 192 
const SYS_SENDFILE = 71 
const SYS_SENDMMSG = 269 
const SYS_SENDMSG = 211 
const SYS_SENDTO = 206 
const SYS_SETDOMAINNAME = 162 
const SYS_SETFSGID = 152 
const SYS_SETFSUID = 151 
const SYS_SETGID = 144 
const SYS_SETGROUPS = 159 
const SYS_SETHOSTNAME = 161 
const SYS_SETITIMER = 103 
const SYS_SETNS = 268 
const SYS_SETPGID = 154 
const SYS_SETPRIORITY = 140 
const SYS_SETREGID = 143 
const SYS_SETRESGID = 149 
const SYS_SETRESUID = 147 
const SYS_SETREUID = 145 
const SYS_SETRLIMIT = 164 
const SYS_SETSID = 157 
const SYS_SETSOCKOPT = 208 
const SYS_SETTIMEOFDAY = 170 
const SYS_SETUID = 146 
const SYS_SETXATTR = 5 
const SYS_SET_MEMPOLICY = 237 
const SYS_SET_ROBUST_LIST = 99 
const SYS_SET_TID_ADDRESS = 96 
const SYS_SHMAT = 196 
const SYS_SHMCTL = 195 
const SYS_SHMDT = 197 
const SYS_SHMGET = 194 
const SYS_SHUTDOWN = 210 
const SYS_SIGALTSTACK = 132 
const SYS_SIGNALFD4 = 74 
const SYS_SOCKET = 198 
const SYS_SOCKETPAIR = 199 
const SYS_SPLICE = 76 
const SYS_STATFS = 43 
const SYS_STATX = 291 
const SYS_SWAPOFF = 225 
const SYS_SWAPON = 224 
const SYS_SYMLINKAT = 36 
const SYS_SYNC = 81 
const SYS_SYNCFS = 267 
const SYS_SYNC_FILE_RANGE = 84 
const SYS_SYSINFO = 179 
const SYS_SYSLOG = 116 
const SYS_TEE = 77 
const SYS_TGKILL = 131 
const SYS_TIMERFD_CREATE = 85 
const SYS_TIMERFD_GETTIME = 87 
const SYS_TIMERFD_SETTIME = 86 
const SYS_TIMER_CREATE = 107 
const SYS_TIMER_DELETE = 111 
const SYS_TIMER_GETOVERRUN = 109 
const SYS_TIMER_GETTIME = 108 
const SYS_TIMER_SETTIME = 110 
const SYS_TIMES = 153 
const SYS_TKILL = 130 
const SYS_TRUNCATE = 45 
const SYS_UMASK = 166 
const SYS_UMOUNT2 = 39 
const SYS_UNAME = 160 
const SYS_UNLINKAT = 35 
const SYS_UNSHARE = 97 
const SYS_USERFAULTFD = 282 
const SYS_UTIMENSAT = 88 
const SYS_VHANGUP = 58 
const SYS_VMSPLICE = 75 
const SYS_WAIT4 = 260 
const SYS_WAITID = 95 
const SYS_WRITE = 64 
const SYS_WRITEV = 66 
const S_BLKSIZE = 512 
const S_IEXEC = 64 
const S_IFBLK = 24576 
const S_IFCHR = 8192 
const S_IFDIR = 16384 
const S_IFIFO = 4096 
const S_IFLNK = 40960 
const S_IFMT = 61440 
const S_IFREG = 32768 
const S_IFSOCK = 49152 
const S_IREAD = 256 
const S_IRGRP = 32 
const S_IROTH = 4 
const S_IRUSR = 256 
const S_IRWXG = 56 
const S_IRWXO = 7 
const S_IRWXU = 448 
const S_ISGID = 1024 
const S_ISUID = 2048 
const S_ISVTX = 512 
const S_IWGRP = 16 
const S_IWOTH = 2 
const S_IWRITE = 128 
const S_IWUSR = 128 
const S_IXGRP = 8 
const S_IXOTH = 1 
const S_IXUSR = 64 
func Seek (fd <type -11>, offset <type -4>, whence <type -11>) (off <type -4>, err <type -19>)
func Select (nfd <type -11>, r <esc:0x1> <type 115>, w <esc:0x1> <type 115>, e <esc:0x1> <type 115>, timeout <esc:0x1> <type 142>) (n <type -11>, err <type -19>)
func Sendfile (outfd <type -11>, infd <type -11>, offset <esc:0x1> <type 207>, count <type -11>) (written <type -11>, err <type -19>)
func Sendmsg (fd <type -11>, p <esc:0x1> <type 98>, oob <esc:0x1> <type 98>, to <type 59>, flags <type -11>) (err <type -19>)
func SendmsgN (fd <type -11>, p <esc:0x1> <type 98>, oob <esc:0x1> <type 98>, to <type 59>, flags <type -11>) (n <type -11>, err <type -19>)
func Sendto (fd <type -11>, p <esc:0x1> <type 98>, flags <type -11>, to <type 59>) (err <type -19>)
func SetErrno (? <type 9>)
func SetLsfPromisc (name <esc:0x1> <type -16>, m <type -15>) <type -19>
func SetNonblock (fd <type -11>, nonblocking <type -15>) (err <type -19>)
func Setdomainname (p <esc:0x1> <type 98>) (err <type -19>)
func Setenv (key <type -16>, value <type -16>) <type -19>
func Setfsgid (gid <type -11>) (err <type -19>)
func Setfsuid (uid <type -11>) (err <type -19>)
func Setgid (gid <type -11>) (err <type -19>)
func Setgroups (gids <esc:0x1> <type 133>) (err <type -19>)
func Sethostname (p <esc:0x1> <type 98>) (err <type -19>)
func Setpgid (pid <type -11>, pgid <type -11>) (err <type -19>)
func Setpriority (which <type -11>, who <type -11>, prio <type -11>) (err <type -19>)
func Setregid (rgid <type -11>, egid <type -11>) (err <type -19>)
func Setresgid (rgid <type -11>, egid <type -11>, sgid <type -11>) (err <type -19>)
func Setresuid (ruid <type -11>, eguid <type -11>, suid <type -11>) (err <type -19>)
func Setreuid (ruid <type -11>, euid <type -11>) (err <type -19>)
func Setrlimit (resource <type -11>, rlim <esc:0x1> <type 134>) (err <type -19>)
func Setsid () (pid <type -11>, err <type -19>)
func SetsockoptByte (fd <type -11>, level <type -11>, opt <type -11>, value <type -20>) (err <type -19>)
func SetsockoptICMPv6Filter (fd <type -11>, level <type -11>, opt <type -11>, filter <esc:0x1> <type 136>) <type -19>
func SetsockoptIPMreq (fd <type -11>, level <type -11>, opt <type -11>, mreq <esc:0x1> <type 137>) (err <type -19>)
func SetsockoptIPMreqn (fd <type -11>, level <type -11>, op