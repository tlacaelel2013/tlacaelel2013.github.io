117>
 func (z <esc:0x12> <type 117>) .math/big.make (n <type -11>) <type 117>
 func (z <type 117>) .math/big.mulRange (a <type -8>, b <type -8>) <type 117>
 func (n <type 117>) .math/big.probablyPrimeLucas () <type -15>
 func (z <esc:0x12> <type 117>) .math/big.setWord (x <type 100>) <type 117>
 func (z <esc:0x12> <type 117>) .math/big.divW (x <esc:0x1> <type 117>, y <type 100>) (q <type 117>, r <type 100>)
 func (x <esc:0x1> <type 117>) .math/big.itoa (neg <type -15>, base <type -11>) <type 10>
 func (z <esc:0x1> <type 117>) .math/big.clear ()
 func (z <esc:0x12> <type 117>) .math/big.div (z2 <esc:0x82> <type 117>, u <esc:0x1> <type 117>, v <esc:0x1> <type 117>) (q <type 117>, r <type 117>)
 func (z <esc:0x12> <type 117>) .math/big.setUint64 (x <type -8>) <type 117>
 func (z <esc:0x12> <type 117>) .math/big.and (x <esc:0x1> <type 117>, y <esc:0x1> <type 117>) <type 117>
 func (z <esc:0x12> <type 117>) .math/big.setBit (x <esc:0x1> <type 117>, i <type -12>, b <type -12>) <type 117>
 func (x <esc:0x1> <type 117>) .math/big.utoa (base <type -11>) <type 10>
 func (z <esc:0x12> <type 117>) .math/big.norm () <type 117>
 func (z <type 117>) .math/big.sqr (x <esc:0x1> <type 117>) <type 117>
 func (x <esc:0x1> <type 117>) .math/big.trailingZeroBits () <type -12>
 func (x <esc:0x1> <type 117>) .math/big.bit (i <type -12>) <type -12>
 func (z <type 117>) .math/big.expNN (x <type 117>, y <esc:0x1> <type 117>, m <esc:0x1> <type 117>) <type 117>
 func (z <esc:0x12> <type 117>) .math/big.mulAddWW (x <esc:0x1> <type 117>, y <type 100>, r <type 100>) <type 117>
 func (z <type 117>) .math/big.mul (x <esc:0x1> <type 117>, y <esc:0x1> <type 117>) <type 117>
 func (z <esc:0x12> <type 117>) .math/big.andNot (x <esc:0x1> <type 117>, y <esc:0x1> <type 117>) <type 117>
 func (z <esc:0x12> <type 117>) .math/big.or (x <esc:0x1> <type 117>, y <esc:0x1> <type 117>) <type 117>
 func (z <esc:0x1> <type 117>) .math/big.bytes (buf <esc:0x1> <type 10>) (i <type -11>)
 func (z <esc:0x12> <type 117>) .math/big.xor (x <esc:0x1> <type 117>, y <esc:0x1> <type 117>) <type 117>
 func (x <esc:0x1> <type 117>) .math/big.modW (d <type 100>) (r <type 100>)
type 118 [] <type 119>
type 119 ".math/big.divisor" <type 120>
type 120 struct { .math/big.bbb <type 117>; .math/big.nbits <type -11>; .math/big.ndigits <type -11>; }
type 121 [] <type 122>
type 122 "crypto/x509/pkix.Extension" <type 123>
type 123 struct { Id <type 124>; Critical <type -15> "asn1:\"optional\""; Value <type 10>; }
type 124 "encoding/asn1.ObjectIdentifier" <type 109>
 func (oi <esc:0x1> <type 124>) Equal (other <esc:0x1> <type 124>) <type -15>
 func (oi <esc:0x1> <type 124>) String () <type -16>
type 125 *<type 126>
type 126 "crypto/x509/pkix.CertificateList" <type 127>
 func (certList <esc:0x1> <type 125>) HasExpired (now <esc:0x1> <type 12>) <type -15>
type 127 struct { TBSCertList <type 128>; SignatureAlgorithm <type 131>; SignatureValue <type 141>; }
type 128 "crypto/x509/pkix.TBSCertificateList" <type 129>
type 129 struct { Raw <type 130>; Version <type -11> "asn1:\"optional,default:0\""; Signature <type 131>; Issuer <type 135>; ThisUpdate <type 12>; NextUpdate <type 12> "asn1:\"optional\""; RevokedCertificates <type 91> "asn1:\"optional\""; Extensions <type 121> "asn1:\"tag:0,optional,explicit\""; }
type 130 "encoding/asn1.RawContent" <type 10>
type 131 "crypto/x509/pkix.AlgorithmIdentifier" <type 132>
type 132 struct { Algorithm <type 124>; Parameters <type 133> "asn1:\"optional\""; }
type 133 "encoding/asn1.RawValue" <type 134>
type 134 struct { Class <type -11>; Tag <type -11>; IsCompound <type -15>; Bytes <type 10>; FullBytes <type 10>; }
type 135 "crypto/x509/pkix.RDNSequence" <type 136>
 func (r <esc:0x9> <type 135>) String () <type -16>
type 136 [] <type 137>
type 137 "crypto/x509/pkix.RelativeDistinguishedNameSET" <type 138>
type 138 [] <type 139>
type 139 "crypto/x509/pkix.AttributeTypeAndValue" <type 140>
type 140 struct { Type <type 124>; Value <type 7>; }
type 141 "encoding/asn1.BitString" <type 142>
 func (b <esc:0x1> <type 141>) At (i <type -11>) <type -11>
 func (b <esc:0x12> <type 141>) RightAlign () <type 10>
type 142 struct { Bytes <type 10>; BitLength <type -11>; }
type 143 *<type 144>
type 144 "crypto/x509.VerifyOptions" <type 145>
type 145 struct { DNSName <type -16>; Intermediates <type 146>; Roots <type 146>; CurrentTime <type 12>; KeyUsages <type 151>; MaxConstraintComparisions <type -11>; }
type 146 *<type 147>
type 147 "crypto/x509.CertPool" <type 149>
 func (s <esc:0x9> <type 146>) .crypto/x509.copy () <type 146>
 func (s <esc:0x1> <type 146>) .crypto/x509.findPotentialParents (cert <esc:0x1> <type 87>) <type 109>
 func (s <esc:0x1> <type 146>) .crypto/x509.contains (cert <esc:0x1> <type 87>) <type -15>
 func (s <esc:0x9> <type 146>) AddCert (cert <type 87>)
 func (s <esc:0x9> <type 146>) AppendCertsFromPEM (pemCerts <type 10>) (ok <type -15>)
 func (s <esc:0x9> <type 146>) Subjects () <type 148>
type 148 [] <type 10>
type 149 struct { .crypto/x509.bySubjectKeyId <type 150>; .crypto/x509.byName <type 150>; .crypto/x509.certs <type 86>; }
type 150 map [<type -16>] <type 109>
type 151 [] <type 152>
type 152 "crypto/x509.ExtKeyUsage" <type -11>
type 153 [] <type 86>
type 154 *<type -11>
type 155 (parsedName <type 7>, constraint <type 7>) (match <type -15>, err <type -19>)
type 156 map [<type 87>] <type 153>
type 157 "crypto/x509.SignatureAlgorithm" <type -11>
 func (algo <type 157>) .crypto/x509.isRSAPSS () <type -15>
 func (algo <type 157>) String () <type -16>
type 158 struct { Raw <type 10>; RawTBSCertificate <type 10>; RawSubjectPublicKeyInfo <type 10>; RawSubject <type 10>; RawIssuer <type 10>; Signature <type 10>; SignatureAlgorithm <type 157>; PublicKeyAlgorithm <type 159>; PublicKey <type 7>; Version <type -11>; SerialNumber <type 94>; Issuer <type 160>; Subject <type 160>; NotBefore <type 12>; NotAfter <type 12>; KeyUsage <type 164>; Extensions <type 121>; ExtraExtensions <type 121>; UnhandledCriticalExtensions <type 165>; ExtKeyUsage <type 151>; UnknownExtKeyUsage <type 165>; BasicConstraintsValid <type -15>; IsCA <type -15>; MaxPathLen <type -11>; MaxPathLenZero <type -15>; SubjectKeyId <type 10>; AuthorityKeyId <type 10>; OCSPServer <type 3>; IssuingCertificateURL <type 3>; DNSNames <type 3>; EmailAddresses <type 3>; IPAddresses <type 166>; URIs <type 167>; PermittedDNSDomainsCritical <type -15>; PermittedDNSDomains <type 3>; ExcludedDNSDomains <type 3>; PermittedIPRanges <type 175>; ExcludedIPRanges <type 175>; PermittedEmailAddresses <type 3>; ExcludedEmailAddresses <type 3>; PermittedURIDomains <type 3>; ExcludedURIDomains <type 3>; CRLDistributionPoints <type 3>; PolicyIdentifiers <type 165>; }
type 159 "crypto/x509.PublicKeyAlgorithm" <type -11>
 func (algo <type 159>) String () <type -16>
type 160 "crypto/x509/pkix.Name" <type 163>
 func (n <type 160>) String () <type -16>
 func (n <type 160>) ToRDNSequence () (ret <type 135>)
 func (n <esc:0x1> <type 160>) .crypto/x509/pkix.appendRDNs (in <esc:0x1a> <type 135>, values <esc:0x9> <type 3>, oid <type 124>) <type 135>
 func (n <esc:0x9> <type 161>) FillFromRDNSequence (rdns <esc:0x9> <type 162>)
type 161 *<type 160>
type 162 *<type 135>
type 163 struct { Country <type 3>; Organization <type 3>; OrganizationalUnit <type 3>; Locality <type 3>; Province <type 3>; StreetAddress <type 3>; PostalCode <type 3>; SerialNumber <type -16>; CommonName <type -16>; Names <type 138>; ExtraNames <type 138>; }
type 164 "crypto/x509.KeyUsage" <type -11>
type 165 [] <type 124>
type 166 [] <type 77>
type 167 [] <type 168>
type 168 *<type 169>
type 169 "net/url.URL" <type 171>
 func (u <esc:0x1> <type 168>) UnmarshalBinary (text <esc:0x1> <type 10>) <type -19>
 func (u <esc:0x1> <type 168>) MarshalBinary () (text <type 10>, err <type -19>)
 func (u <esc:0x9> <type 168>) Query () <type 170>
 func (u <esc:0xa> <type 168>) ResolveReference (ref <esc:0xa> <type 168>) <type 168>
 func (u <esc:0x22> <type 168>) RequestURI () <type -16>
 func (u <esc:0x9> <type 168>) Parse (ref <type -16>) (? <type 168>, ? <type -19>)
 func (u <esc:0x1> <type 168>) IsAbs () <type -15>
 func (u <esc:0x1> <type 168>) String () <type -16>
 func (u <esc:0x22> <type 168>) Hostname () <type -16>
 func (u <esc:0x22> <type 168>) EscapedPath () <type -16>
 func (u <esc:0x22> <type 168>) Port () <type -16>
 func (u <esc:0x1> <type 168>) .net/url.setPath (p <type -16>) <type -19>
type 170 "net/url.Values" <type 53>
 func (v <esc:0x1> <type 170>) Encode () <type -16>
 func (v <esc:0x1> <type 170>) Del (key <esc:0x1> <type -16>)
 func (v <esc:0x9> <type 170>) Add (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 170>) Set (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 170>) Get (key <esc:0x1> <type -16>) <type -16>
type 171 struct { Scheme <type -16>; Opaque <type -16>; User <type 172>; Host <type -16>; Path <type -16>; RawPath <type -16>; ForceQuery <type -15>; RawQuery <type -16>; Fragment <type -16>; }
type 172 *<type 173>
type 173 "net/url.Userinfo" <type 174>
 func (u <esc:0x22> <type 172>) Password () (? <type -16>, ? <type -15>)
 func (u <esc:0x22> <type 172>) String () <type -16>
 func (u <esc:0x22> <type 172>) Username () <type -16>
type 174 struct { .net/url.username <type -16>; .net/url.password <type -16>; .net/url.passwordSet <type -15>; }
type 175 [] <type 176>
type 176 *<type 177>
type 177 "net.IPNet" <type 178>
 func (n <esc:0x1> <type 176>) String () <type -16>
 func (n <esc:0x1> <type 176>) Network () ($ret178 <type -16>)
 func (n <esc:0x1> <type 176>) Contains (ip <esc:0x1> <type 77>) <type -15>
type 178 struct { IP <type 77>; Mask <type 78>; }
type 179 (label <type -16>, context <type 10>, length <type -11>) (? <type 10>, ? <type -19>)
type 180 (key <type -16>, value <type 3>)
type 181 (? <type 182>)
type 182 "net/http/httptrace.WroteRequestInfo" <type 183>
type 183 struct { Err <type -19>; }
type 184 [] <type 185>
type 185 ".net/http.keyValues" <type 186>
type 186 struct { .net/http.key <type -16>; .net/http.values <type 3>; }
type 187 *<type 188>
type 188 ".net/http.headerSorter" <type 189>
 func (s <esc:0x1> <type 187>) Less (i <type -11>, j <type -11>) <type -15>
 func (s <esc:0x9> <type 187>) Swap (i <type -11>, j <type -11>)
 func (s <esc:0x1> <type 187>) Len () <type -11>
type 189 struct { .net/http.kvs <type 184>; }
type 190 *<type 191>
type 191 "net/http.Request" <type 228>
 func (r <esc:0x1> <type 190>) .net/http.requiresHTTP1 () <type -15>
 func (r <esc:0x1> <type 190>) .net/http.wantsHttp10KeepAlive () <type -15>
 func (r <esc:0x9> <type 190>) FormFile (key <esc:0x1> <type -16>) (? <type 192>, ? <type 200>, ? <type -19>)
 func (r <esc:0x1> <type 190>) .net/http.outgoingLength () <type -4>
 func (r <esc:0x1> <type 190>) .net/http.expectsContinue () <type -15>
 func (r <esc:0x9> <type 190>) PostFormValue (key <esc:0x1> <type -16>) <type -16>
 func (r <esc:0x1> <type 190>) .net/http.wantsClose () <type -15>
 func (r <esc:0x9> <type 190>) ParseMultipartForm (maxMemory <type -4>) <type -19>
 func (r <esc:0x9> <type 190>) ParseForm () <type -19>
 func (r <esc:0x1> <type 190>) BasicAuth () (username <type -16>, password <type -16>, ok <type -15>)
 func (r <esc:0x1> <type 190>) SetBasicAuth (username <esc:0x1> <type -16>, password <esc:0x1> <type -16>)
 func (r <esc:0x22> <type 190>) Context () <type 203>
 func (r <esc:0x9> <type 190>) .net/http.multipartReader (allowMixed <type -15>) (? <type 207>, ? <type -19>)
 func (r <esc:0x9> <type 190>) WithContext (ctx <type 203>) <type 190>
 func (r <esc:0x1> <type 190>) .net/http.isH2Upgrade () <type -15>
 func (r <esc:0x1> <type 190>) ProtoAtLeast (major <type -11>, minor <type -11>) <type -15>
 func (r <esc:0x1> <type 190>) UserAgent () <type -16>
 func (r <esc:0x1> <type 190>) .net/http.isReplayable () <type -15>
 func (r <esc:0x9> <type 190>) .net/http.closeBody ()
 func (r <esc:0x9> <type 190>) .net/http.write (w <type 8>, usingProxy <type -15>, extraHeaders <esc:0x1> <type 36>, waitForContinue <esc:0x1> <type 222>) (err <type -19>)
 func (r <esc:0x1> <type 190>) Referer () <type -16>
 func (r <esc:0x9> <type 190>) Write (w <type 8>) <type -19>
 func (r <esc:0x9> <type 190>) FormValue (key <esc:0x1> <type -16>) <type -16>
 func (r <esc:0x1> <type 190>) AddCookie (c <esc:0x9> <type 223>)
 func (r <esc:0x1> <type 190>) Cookies () <type 227>
 func (r <esc:0x1> <type 190>) Cookie (name <esc:0x1> <type -16>) (? <type 223>, ? <type -19>)
 func (r <esc:0x9> <type 190>) MultipartReader () (? <type 207>, ? <type -19>)
 func (r <esc:0x9> <type 190>) WriteProxy (w <type 8>) <type -19>
type 192 "mime/multipart.File" <type 193>
type 193 interface { ? <type 89>; ? <type 194>; ? <type 196>; ? <type 198>; }
type 194 "io.ReaderAt" <type 195>
type 195 interface { ReadAt (p <type 10>, off <type -4>) (n <type -11>, err <type -19>); }
type 196 "io.Seeker" <type 197>
type 197 interface { Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>); }
type 198 "io.Closer" <type 199>
type 199 interface { Close () <type -19>; }
type 200 *<type 201>
type 201 "mime/multipart.FileHeader" <type 202>
 func (fh <esc:0x9> <type 200>) Open () (? <type 192>, ? <type -19>)
type 202 struct { Filename <type -16>; Header <type 52>; Size <type -4>; .mime/multipart.content <type 10>; .mime/multipart.tmpfile <type -16>; }
type 203 "context.Context" <type 204>
type 204 interface { Deadline () (deadline <type 12>, ok <type -15>); Done () <type 205>; Err () <type -19>; Value (key <type 7>) <type 7>; }
type 205 chan <- <type 206>
type 206 struct { }
type 207 *<type 208>
type 208 "mime/multipart.Reader" <type 218>
 func (r <type 207>) ReadForm (maxMemory <type -4>) (? <type 209>, ? <type -19>)
 func (r <type 207>) .mime/multipart.readForm (maxMemory <type -4>) (_ <type 209>, err <type -19>)
 func (mr <esc:0x1> <type 207>) .mime/multipart.isBoundaryDelimiterLine (line <esc:0x1> <type 10>) (ret <type -15>)
 func (r <type 207>) NextPart () (? <type 214>, ? <type -19>)
 func (mr <esc:0x1> <type 207>) .mime/multipart.isFinalBoundary (line <esc:0x1> <type 10>) <type -15>
type 209 *<type 210>
type 210 "mime/multipart.Form" <type 211>
 func (f <esc:0x1> <type 209>) RemoveAll () <type -19>
type 211 struct { Value <type 53>; File <type 212>; }
type 212 map [<type -16>] <type 213>
type 213 [] <type 200>
type 214 *<type 215>
type 215 "mime/multipart.Part" <type 216>
 func (p <esc:0x1> <type 214>) FormName () <type -16>
 func (p <esc:0x1> <type 214>) FileName () <type -16>
 func (bp <esc:0x9> <type 214>) .mime/multipart.populateHeaders () <type -19>
 func (p <esc:0x1> <type 214>) .mime/multipart.parseContentDisposition ()
 func (p <esc:0x9> <type 214>) Read (d <type 10>) (n <type -11>, err <type -19>)
 func (p <type 214>) Close () <type -19>
type 216 struct { Header <type 52>; .mime/multipart.mr <type 207>; .mime/multipart.disposition <type -16>; .mime/multipart.dispositionParams <type 217>; .mime/multipart.r <type 89>; .mime/multipart.n <type -11>; .mime/multipart.total <type -4>; .mime/multipart.err <type -19>; .mime/multipart.readErr <type -19>; }
type 217 map [<type -16>] <type -16>
type 218 struct { .mime/multipart.bufReader <type 219>; .mime/multipart.currentPart <type 214>; .mime/multipart.partsRead <type -11>; .mime/multipart.nl <type 10>; .mime/multipart.nlDashBoundary <type 10>; .mime/multipart.dashBoundaryDash <type 10>; .mime/multipart.dashBoundary <type 10>; }
type 219 *<type 220>
type 220 "bufio.Reader" <type 221>
 func (b <esc:0x9> <type 219>) .bufio.writeBuf (w <type 8>) (? <type -4>, ? <type -19>)
 func (b <esc:0x10a> <type 219>) WriteTo (w <type 8>) (n <type -4>, err <type -19>)
 func (b <esc:0x10a> <type 219>) ReadString (delim <type -20>) (? <type -16>, ? <type -19>)
 func (b <esc:0x82a> <type 219>) ReadLine () (line <type 10>, isPrefix <type -15>, err <type -19>)
 func (b <esc:0x1> <type 219>) Size () <type -11>
 func (b <esc:0x9> <type 219>) Reset (r <type 89>)
 func (b <esc:0x9> <type 219>) .bufio.fill ()
 func (b <esc:0x1> <type 219>) UnreadByte () <type -19>
 func (b <esc:0x80a> <type 219>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x1> <type 219>) .bufio.reset (buf <type 10>, r <type 89>)
 func (b <esc:0x22> <type 219>) .bufio.readErr () <type -19>
 func (b <esc:0x1> <type 219>) UnreadRune () <type -19>
 func (b <esc:0x12a> <type 219>) ReadSlice (delim <type -20>) (line <type 10>, err <type -19>)
 func (b <esc:0x12a> <type 219>) Peek (n <type -11>) (? <type 10>, ? <type -19>)
 func (b <esc:0x10a> <type 219>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x10a> <type 219>) Discard (n <type -11>) (discarded <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 219>) Read (p <type 10>) (n <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 219>) ReadBytes (delim <type -20>) (? <type 10>, ? <type -19>)
 func (b <esc:0x1> <type 219>) Buffered () <type -11>
type 221 struct { .bufio.buf <type 10>; .bufio.rd <type 89>; .bufio.r <type -11>; .bufio.w <type -11>; .bufio.err <type -19>; .bufio.lastByte <type -11>; .bufio.lastRuneSize <type -11>; }
type 222 () <type -15>
type 223 *<type 224>
type 224 "net/http.Cookie" <type 225>
 func (c <esc:0x9> <type 223>) String () <type -16>
type 225 struct { Name <type -16>; Value <type -16>; Path <type -16>; Domain <type -16>; Expires <type 12>; RawExpires <type -16>; MaxAge <type -11>; Secure <type -15>; HttpOnly <type -15>; SameSite <type 226>; Raw <type -16>; Unparsed <type 3>; }
type 226 "net/http.SameSite" <type -11>
type 227 [] <type 223>
type 228 struct { Method <type -16>; URL <type 168>; Proto <type -16>; ProtoMajor <type -11>; ProtoMinor <type -11>; Header <type 36>; Body <type 229>; GetBody <type 231>; ContentLength <type -4>; TransferEncoding <type 3>; Close <type -15>; Host <type -16>; Form <type 170>; PostForm <type 170>; MultipartForm <type 209>; Trailer <type 36>; RemoteAddr <type -16>; RequestURI <type -16>; TLS <type 84>; Cancel <type 205>; Response <type 232>; .net/http.ctx <type 203>; }
type 229 "io.ReadCloser" <type 230>
type 230 interface { ? <type 89>; ? <type 198>; }
type 231 () (? <type 229>, ? <type -19>)
type 232 *<type 233>
type 233 "net/http.Response" <type 234>
 func (r <esc:0x1> <type 232>) .net/http.isProtocolSwitch () <type -15>
 func (r <esc:0x1> <type 232>) .net/http.bodyIsWritable () <type -15>
 func (r <esc:0x1> <type 232>) ProtoAtLeast (major <type -11>, minor <type -11>) <type -15>
 func (r <esc:0x9> <type 232>) Write (w <type 8>) <type -19>
 func (r <esc:0x9> <type 232>) Location () (? <type 168>, ? <type -19>)
 func (r <esc:0x9> <type 232>) .net/http.closeBody ()
 func (r <esc:0x1> <type 232>) Cookies () <type 227>
type 234 struct { Status <type -16>; StatusCode <type -11>; Proto <type -16>; ProtoMajor <type -11>; ProtoMinor <type -11>; Header <type 36>; Body <type 229>; ContentLength <type -4>; TransferEncoding <type 3>; Close <type -15>; Uncompressed <type -15>; Trailer <type 36>; Request <type 190>; TLS <type 84>; }
type 235 *<type 1>
func Request () (? <type 190>, ? <type -19>)
func RequestFromMap (params <esc:0x1> <type 217>) (? <type 190>, ? <type -19>)
func Serve (handler <type 32>) <type -19>
checksum F2BBC9E1583853B743864E307E32E36BC7704742
v3;
package cookiejar
pkgpath net/http/cookiejar
import errors errors "errors"
import fmt fmt "fmt"
import net net "net"
import http net/http "net/http"
import url net/url "net/url"
import sort sort "sort"
import strings strings "strings"
import sync sync "sync"
import time time "time"
import utf8 unicode/utf8 "unicode/utf8"
init cookiejar net..z2fhttp..z2fcookiejar..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import gzip compress..z2fgzip..import context context..import crypto crypto..import cipher crypto..z2fcipher..import des crypto..z2fdes..import dsa crypto..z2fdsa..import ecdsa crypto..z2fecdsa..import elliptic crypto..z2felliptic..import randutil crypto..z2finternal..z2frandutil..import md5 crypto..z2fmd5..import rand crypto..z2frand..import rsa crypto..z2frsa..import sha1 crypto..z2fsha1..import sha256 crypto..z2fsha256..import sha512 crypto..z2fsha512..import tls crypto..z2ftls..import x509 crypto..z2fx509..import pkix crypto..z2fx509..z2fpkix..import asn1 encoding..z2fasn1..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import hex encoding..z2fhex..import pem encoding..z2fpem..import fmt fmt..import crc32 hash..z2fcrc32..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import chacha20poly1305 internal..z2fx..z2fcrypto..z2fchacha20poly1305..import cryptobyte internal..z2fx..z2fcrypto..z2fcryptobyte..import chacha20 internal..z2fx..z2fcrypto..z2finternal..z2fchacha20..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import httpguts internal..z2fx..z2fnet..z2fhttp..z2fhttpguts..import httpproxy internal..z2fx..z2fnet..z2fhttp..z2fhttpproxy..import hpack internal..z2fx..z2fnet..z2fhttp2..z2fhpack..import idna internal..z2fx..z2fnet..z2fidna..import bidirule internal..z2fx..z2ftext..z2fsecure..z2fbidirule..import transform internal..z2fx..z2ftext..z2ftransform..import bidi internal..z2fx..z2ftext..z2funicode..z2fbidi..import norm internal..z2fx..z2ftext..z2funicode..z2fnorm..import io io..import ioutil io..z2fioutil..import log log..import big math..z2fbig..import rand math..z2frand..import mime mime..import multipart mime..z2fmultipart..import quotedprintable mime..z2fquotedprintable..import net net..import http net..z2fhttp..import internal net..z2fhttp..z2finternal..import textproto net..z2ftextproto..import os os..import path path..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 1 2 1 29 1 44 1 60 1 61 1 63 1 66 2 29 2 44 2 60 2 61 2 63 2 66 3 1 3 2 3 27 3 29 3 30 3 31 3 44 3 56 3 59 3 60 3 61 3 62 3 63 3 64 3 65 3 66 4 1 4 2 4 3 4 24 4 27 4 28 4 29 4 30 4 31 4 44 4 56 4 59 4 60 4 61 4 62 4 63 4 64 4 65 4 66 5 27 5 29 5 30 5 31 5 44 5 56 5 59 5 60 5 61 5 62 5 63 5 64 5 65 5 66 6 29 6 44 6 60 6 61 6 62 6 63 7 24 7 29 7 44 7 59 7 60 7 61 7 62 7 63 7 66 8 7 8 24 8 29 8 44 8 59 8 60 8 61 8 62 8 63 8 66 9 2 9 12 9 24 9 27 9 29 9 30 9 31 9 44 9 47 9 48 9 56 9 59 9 60 9 61 9 62 9 63 9 64 9 65 9 66 10 2 10 6 10 7 10 11 10 12 10 18 10 22 10 24 10 27 10 29 10 30 10 31 10 44 10 47 10 48 10 56 10 59 10 60 10 61 10 62 10 63 10 64 10 65 10 66 11 2 11 24 11 27 11 29 11 30 11 31 11 44 11 47 11 48 11 56 11 59 11 60 11 61 11 62 11 63 11 64 11 65 11 66 12 29 12 44 12 60 12 61 12 63 13 6 13 24 13 29 13 44 13 59 13 60 13 61 13 62 13 63 13 66 14 1 14 2 14 7 14 24 14 27 14 29 14 30 14 31 14 44 14 47 14 48 14 56 14 59 14 60 14 61 14 62 14 63 14 64 14 65 14 66 15 1 15 2 15 6 15 7 15 12 15 14 15 24 15 27 15 29 15 30 15 31 15 44 15 47 15 48 15 56 15 59 15 60 15 61 15 62 15 63 15 64 15 65 15 66 16 6 16 29 16 44 16 60 16 61 16 62 16 63 17 6 17 29 17 44 17 60 17 61 17 62 17 63 18 6 18 29 18 44 18 60 18 61 18 62 18 63 19 1 19 2 19 5 19 6 19 7 19 8 19 9 19 10 19 11 19 12 19 13 19 14 19 15 19 16 19 17 19 18 19 20 19 21 19 22 19 23 19 24 19 25 19 26 19 27 19 29 19 30 19 31 19 32 19 33 19 34 19 35 19 44 19 45 19 47 19 48 19 52 19 56 19 58 19 59 19 60 19 61 19 62 19 63 19 64 19 65 19 66 20 1 20 2 20 5 20 6 20 7 20 8 20 9 20 10 20 11 20 12 20 13 20 14 20 15 20 16 20 17 20 18 20 21 20 22 20 23 20 24 20 25 20 26 20 27 20 29 20 30 20 31 20 33 20 35 20 44 20 45 20 47 20 48 20 52 20 56 20 58 20 59 20 60 20 61 20 62 20 63 20 64 20 65 20 66 21 2 21 22 21 24 21 25 21 27 21 29 21 30 21 31 21 44 21 47 21 48 21 56 21 59 21 60 21 61 21 62 21 63 21 64 21 65 21 66 22 2 22 24 22 27 22 29 22 30 22 31 22 44 22 47 22 48 22 56 22 59 22 60 22 61 22 62 22 63 22 64 22 65 22 66 23 24 23 29 23 44 23 59 23 60 23 61 23 62 23 63 23 66 24 29 24 44 24 59 24 60 24 61 24 62 24 63 24 66 25 27 25 29 25 30 25 31 25 44 25 56 25 59 25 60 25 61 25 62 25 63 25 64 25 65 25 66 26 2 26 23 26 24 26 29 26 44 26 59 26 60 26 61 26 62 26 63 26 66 27 29 27 30 27 31 27 44 27 56 27 59 27 60 27 61 27 62 27 63 27 64 27 65 27 66 28 29 28 44 28 60 28 61 28 63 30 29 30 44 30 60 30 61 30 63 30 64 30 65 32 7 32 24 32 29 32 34 32 44 32 59 32 60 32 61 32 62 32 63 32 66 33 2 33 22 33 24 33 27 33 29 33 30 33 31 33 44 33 47 33 48 33 56 33 59 33 60 33 61 33 62 33 63 33 64 33 65 33 66 34 7 34 24 34 29 34 44 34 59 34 60 34 61 34 62 34 63 34 66 36 1 36 2 36 5 36 27 36 29 36 30 36 31 36 35 36 39 36 40 36 41 36 42 36 43 36 44 36 45 36 46 36 48 36 52 36 55 36 56 36 58 36 59 36 60 36 61 36 62 36 63 36 64 36 65 36 66 37 2 37 5 37 27 37 29 37 30 37 31 37 35 37 39 37 40 37 41 37 42 37 43 37 44 37 46 37 48 37 52 37 56 37 59 37 60 37 61 37 62 37 63 37 64 37 65 37 66 38 2 38 27 38 29 38 30 38 31 38 44 38 56 38 59 38 60 38 61 38 62 38 63 38 64 38 65 38 66 39 2 39 27 39 29 39 30 39 31 39 40 39 41 39 42 39 43 39 44 39 46 39 56 39 59 39 60 39 61 39 62 39 63 39 64 39 65 39 66 40 2 40 27 40 29 40 30 40 31 40 41 40 42 40 44 40 46 40 56 40 59 40 60 40 61 40 62 40 63 40 64 40 65 40 66 41 2 41 29 41 44 41 60 41 61 41 63 41 66 42 27 42 29 42 30 42 31 42 44 42 46 42 56 42 59 42 60 42 61 42 62 42 63 42 64 42 65 42 66 43 2 43 27 43 29 43 30 43 31 43 41 43 44 43 56 43 59 43 60 43 61 43 62 43 63 43 64 43 65 43 66 44 29 44 60 44 61 44 63 45 2 45 29 45 30 45 31 45 44 45 56 45 58 45 59 45 60 45 61 45 62 45 63 45 64 45 65 45 66 46 27 46 29 46 30 46 31 46 44 46 56 46 59 46 60 46 61 46 62 46 63 46 64 46 65 46 66 47 2 47 24 47 27 47 29 47 30 47 31 47 44 47 48 47 56 47 59 47 60 47 61 47 62 47 63 47 64 47 65 47 66 48 29 48 60 48 61 48 63 49 1 49 2 49 23 49 24 49 27 49 29 49 30 49 31 49 44 49 56 49 59 49 60 49 61 49 62 49 63 49 64 49 65 49 66 50 1 50 2 50 5 50 7 50 14 50 23 50 24 50 27 50 29 50 30 50 31 50 35 50 44 50 45 50 47 50 48 50 49 50 51 50 52 50 55 50 56 50 58 50 59 50 60 50 61 50 62 50 63 50 64 50 65 50 66 51 1 51 2 51 27 51 29 51 30 51 31 51 44 51 56 51 59 51 60 51 61 51 62 51 63 51 64 51 65 51 66 52 5 52 27 52 29 52 30 52 31 52 35 52 44 52 48 52 56 52 59 52 60 52 61 52 62 52 63 52 64 52 65 52 66 53 1 53 2 53 3 53 4 53 5 53 6 53 7 53 8 53 9 53 10 53 11 53 12 53 13 53 14 53 15 53 16 53 17 53 18 53 19 53 20 53 21 53 22 53 23 53 24 53 25 53 26 53 27 53 28 53 29 53 30 53 31 53 32 53 33 53 34 53 35 53 36 53 37 53 38 53 39 53 40 53 41 53 42 53 43 53 44 53 45 53 46 53 47 53 48 53 49 53 50 53 51 53 52 53 54 53 55 53 56 53 57 53 58 53 59 53 60 53 61 53 62 53 63 53 64 53 65 53 66 54 1 54 2 54 27 54 29 54 30 54 31 54 44 54 56 54 59 54 60 54 61 54 62 54 63 54 64 54 65 54 66 55 1 55 2 55 5 55 27 55 29 55 30 55 31 55 35 55 44 55 45 55 48 55 52 55 56 55 58 55 59 55 60 55 61 55 62 55 63 55 64 55 65 55 66 56 29 56 30 56 31 56 44 56 60 56 61 56 63 56 64 56 65 57 29 57 44 57 60 57 61 57 63 57 66 58 29 58 30 58 31 58 44 58 56 58 59 58 60 58 61 58 62 58 63 58 64 58 65 58 66 59 29 59 60 59 61 59 62 59 63 59 66 60 29 60 61 62 29 62 60 62 61 63 29 63 60 63 61 64 29 64 60 64 61 64 63 65 29 65 60 65 61 65 63 65 64
types 48 4 777 27 36 168 85 17 63 33 34 465 19 294 3310 356 22 19 19 525 165 21 31 91 21 36 112 19 73 75 83 18 19 800 357 35 22 192 19 215 112 21 19 87 247 39 18 46 89
type 1 "Jar" <type 4>
 func (j <type 30>) Cookies (u <esc:0x9> <type 31>) (cookies <type 40>)
 func (j <type 30>) .net/http/cookiejar.cookies (u <esc:0x9> <type 31>, now <type 13>) (cookies <type 40>)
 func (j <type 30>) SetCookies (u <esc:0x9> <type 31>, cookies <esc:0x9> <type 40>)
 func (j <type 30>) .net/http/cookiejar.setCookies (u <esc:0x9> <type 31>, cookies <esc:0x9> <type 40>, now <type 13>)
 func (j <esc:0x9> <type 30>) .net/http/cookiejar.newEntry (c <esc:0x2a> <type 41>, now <esc:0x12> <type 13>, defPath <esc:0x12> <type -16>, host <esc:0x12> <type -16>) (e <type 10>, remove <type -15>, err <type -19>)
 func (j <esc:0x9> <type 30>) .net/http/cookiejar.domainAndType (host <esc:0x12> <type -16>, domain <type -16>) (? <type -16>, ? <type -15>, ? <type -19>)
type 2 "Options" <type 46>
type 3 "PublicSuffixList" <type 47>
type 4 struct { .net/http/cookiejar.psList <type 3>; .net/http/cookiejar.mu <type 5>; .net/http/cookiejar.entries <type 8>; .net/http/cookiejar.nextSeqNum <type -8>; }
type 5 "sync.Mutex" <type 7>
 func (m <type 6>) Unlock ()
 func (m <type 6>) Lock ()
type 6 *<type 5>
type 7 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 8 map [<type -16>] <type 9>
type 9 map [<type -16>] <type 10>
type 10 ".net/http/cookiejar.entry" <type 12>
 func (e <esc:0x9> <type 11>) .net/http/cookiejar.id () <type -16>
 func (e <esc:0x1> <type 11>) .net/http/cookiejar.shouldSend (https <type -15>, host <esc:0x1> <type -16>, path <esc:0x1> <type -16>) <type -15>
 func (e <esc:0x1> <type 11>) .net/http/cookiejar.domainMatch (host <esc:0x1> <type -16>) <type -15>
 func (e <esc:0x1> <type 11>) .net/http/cookiejar.pathMatch (requestPath <esc:0x1> <type -16>) <type -15>
type 11 *<type 10>
type 12 struct { Name <type -16>; Value <type -16>; Domain <type -16>; Path <type -16>; SameSite <type -16>; Secure <type -15>; HttpOnly <type -15>; Persistent <type -15>; HostOnly <type -15>; Expires <type 13>; Creation <type 13>; LastAccess <type 13>; .net/http/cookiejar.seqNum <type -8>; }
type 13 "time.Time" <type 29>
 func (t <esc:0x1> <type 13>) String () <type -16>
 func (t <esc:0x1> <type 13>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x12> <type 13>) Add (d <type 14>) <type 13>
 func (t <esc:0x1> <type 13>) AppendFormat (b <esc:0x12> <type 15>, layout <esc:0x1> <type -16>) <type 15>
 func (t <esc:0x1> <type 13>) Minute () <type -11>
 func (t <esc:0x1> <type 16>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 13>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 13>) MarshalBinary () (? <type 15>, ? <type -19>)
 func (t <esc:0x1> <type 13>) After (u <esc:0x1> <type 13>) <type -15>
 func (t <esc:0x1> <type 13>) UnixNano () <type -4>
 func (t <esc:0x1> <type 16>) GobDecode (data <esc:0x1> <type 15>) <type -19>
 func (t <esc:0x1> <type 13>) Day () <type -11>
 func (t <esc:0x1> <type 16>) .time.unixSec () <type -4>
 func (t <esc:0x12> <type 13>) Round (d <type 14>) <type 13>
 func (t <esc:0x1> <type 16>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 13>) Before (u <esc:0x1> <type 13>) <type -15>
 func (t <esc:0x32> <type 13>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 16>) .time.setLoc (loc <type 17>)
 func (t <esc:0x12> <type 13>) Truncate (d <type 14>) <type 13>
 func (t <esc:0x1> <type 16>) UnmarshalText (data <esc:0x1> <type 15>) <type -19>
 func (t <esc:0x1> <type 16>) UnmarshalBinary (data <esc:0x1> <type 15>) <type -19>
 func (t <esc:0x1> <type 13>) Hour () <type -11>
 func (t <esc:0x1> <type 13>) .time.abs () <type -8>
 func (t <esc:0x1> <type 13>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x12> <type 13>) Location () <type 17>
 func (t <esc:0x1> <type 13>) Month () <type 27>
 func (t <esc:0x1> <type 13>) GobEncode () (? <type 15>, ? <type -19>)
 func (t <esc:0x1> <type 13>) Second () <type -11>
 func (t <esc:0x1> <type 16>) UnmarshalJSON (data <esc:0x1> <type 15>) <type -19>
 func (t <esc:0x1> <type 16>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 13>) Year () <type -11>
 func (t <esc:0x1> <type 13>) Date () (year <type -11>, month <type 27>, day <type -11>)
 func (t <esc:0x1> <type 13>) Weekday () <type 28>
 func (t <esc:0x1> <type 13>) Unix () <type -4>
 func (t <esc:0x1> <type 13>) YearDay () <type -11>
 func (t <esc:0x12> <type 13>) Local () <type 13>
 func (t <esc:0x1> <type 13>) IsZero () <type -15>
 func (t <esc:0x1> <type 13>) Equal (u <esc:0x1> <type 13>) <type -15>
 func (t <esc:0x12> <type 13>) In (loc <type 17>) <type 13>
 func (t <esc:0x1> <type 13>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 13>) UTC () <type 13>
 func (t <esc:0x32> <type 13>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 13>) Sub (u <esc:0x1> <type 13>) <type 14>
 func (t <esc:0x1> <type 16>) .time.mono () <type -4>
 func (t <esc:0x1> <type 13>) MarshalText () (? <type 15>, ? <type -19>)
 func (t <esc:0x1> <type 16>) .time.stripMono ()
 func (t <esc:0x1> <type 13>) MarshalJSON () (? <type 15>, ? <type -19>)
 func (t <esc:0x1> <type 13>) .time.date (full <type -15>) (year <type -11>, month <type 27>, day <type -11>, yday <type -11>)
 func (t <type 13>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 13>
 func (t <esc:0x1> <type 16>) .time.sec () <type -4>
type 14 "time.Duration" <type -4>
 func (d <type 14>) Round (m <type 14>) <type 14>
 func (d <type 14>) Truncate (m <type 14>) <type 14>
 func (d <type 14>) Hours () <type -10>
 func (d <type 14>) Minutes () <type -10>
 func (d <type 14>) Seconds () <type -10>
 func (d <type 14>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 14>) String () <type -16>
type 15 [] <type -20>
type 16 *<type 13>
type 17 *<type 18>
type 18 "time.Location" <type 19>
 func (l <esc:0x1> <type 17>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 17>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 17>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 17>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 17>) String () <type -16>
 func (l <esc:0x12> <type 17>) .time.get () <type 17>
type 19 struct { .time.name <type -16>; .time.zone <type 20>; .time.tx <type 23>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 26>; }
type 20 [] <type 21>
type 21 ".time.zone" <type 22>
type 22 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 23 [] <type 24>
type 24 ".time.zoneTrans" <type 25>
type 25 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 26 *<type 21>
type 27 "time.Month" <type -11>
 func (m <type 27>) String () <type -16>
type 28 "time.Weekday" <type -11>
 func (d <type 28>) String () <type -16>
type 29 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 17>; }
type 30 *<type 1>
type 31 *<type 32>
type 32 "net/url.URL" <type 36>
 func (u <esc:0x1> <type 31>) .net/url.setPath (p <type -16>) <type -19>
 func (u <esc:0x22> <type 31>) Port () <type -16>
 func (u <esc:0x22> <type 31>) EscapedPath () <type -16>
 func (u <esc:0x22> <type 31>) Hostname () <type -16>
 func (u <esc:0x1> <type 31>) String () <type -16>
 func (u <esc:0x1> <type 31>) IsAbs () <type -15>
 func (u <esc:0x9> <type 31>) Parse (ref <type -16>) (? <type 31>, ? <type -19>)
 func (u <esc:0x22> <type 31>) RequestURI () <type -16>
 func (u <esc:0xa> <type 31>) ResolveReference (ref <esc:0xa> <type 31>) <type 31>
 func (u <esc:0x9> <type 31>) Query () <type 33>
 func (u <esc:0x1> <type 31>) MarshalBinary () (text <type 15>, err <type -19>)
 func (u <esc:0x1> <type 31>) UnmarshalBinary (text <esc:0x1> <type 15>) <type -19>
type 33 "net/url.Values" <type 34>
 func (v <esc:0x1> <type 33>) Get (key <esc:0x1> <type -16>) <type -16>
 func (v <esc:0x1> <type 33>) Set (key <type -16>, value <type -16>)
 func (v <esc:0x9> <type 33>) Add (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 33>) Del (key <esc:0x1> <type -16>)
 func (v <esc:0x1> <type 33>) Encode () <type -16>
type 34 map [<type -16>] <type 35>
type 35 [] <type -16>
type 36 struct { Scheme <type -16>; Opaque <type -16>; User <type 37>; Host <type -16>; Path <type -16>; RawPath <type -16>; ForceQuery <type -15>; RawQuery <type -16>; Fragment <type -16>; }
type 37 *<type 38>
type 38 "net/url.Userinfo" <type 39>
 func (u <esc:0x22> <type 37>) Username () <type -16>
 func (u <esc:0x22> <type 37>) String () <type -16>
 func (u <esc:0x22> <type 37>) Password () (? <type -16>, ? <type -15>)
type 39 struct { .net/url.username <type -16>; .net/url.password <type -16>; .net/url.passwordSet <type -15>; }
type 40 [] <type 41>
type 41 *<type 42>
type 42 "net/http.Cookie" <type 43>
 func (c <esc:0x9> <type 41>) String () <type -16>
type 43 struct { Name <type -16>; Value <type -16>; Path <type -16>; Domain <type -16>; Expires <type 13>; RawExpires <type -16>; MaxAge <type -11>; Secure <type -15>; HttpOnly <type -15>; SameSite <type 44>; Raw <type -16>; Unparsed <type 35>; }
type 44 "net/http.SameSite" <type -11>
type 45 *<type 2>
type 46 struct { PublicSuffixList <type 3>; }
type 47 interface { PublicSuffix (domain <type -16>) <type -16>; String () <type -16>; }
func New (o <esc:0x9> <type 45>) (? <type 30>, ? <type -19>)
checksum 1D6049BD9B318C549917D93B311F31F07DB1F21D
v3;
package fcgi
pkgpath net/http/fcgi
import bufio bufio "bufio"
import bytes bytes "bytes"
import context context "context"
import binary encoding/binary "encoding/binary"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import net net "net"
import http net/http "net/http"
import cgi net/http/cgi "net/http/cgi"
import os os "os"
import strings strings "strings"
import sync sync "sync"
import time time "time"
indirectimport asn1 encoding/asn1
indirectimport big math/big
indirectimport httptrace net/http/httptrace
indirectimport multipart mime/multipart
indirectimport pkix crypto/x509/pkix
indirectimport rand math/rand
indirectimport syscall syscall
indirectimport textproto net/textproto
indirectimport tls crypto/tls
indirectimport url net/url
indirectimport x509 crypto/x509
init fcgi net..z2fhttp..z2ffcgi..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import gzip compress..z2fgzip..import context context..import crypto crypto..import cipher crypto..z2fcipher..import des crypto..z2fdes..import dsa crypto..z2fdsa..import ecdsa crypto..z2fecdsa..import elliptic crypto..z2felliptic..import randutil crypto..z2finternal..z2frandutil..import md5 crypto..z2fmd5..import rand crypto..z2frand..import rsa crypto..z2frsa..import sha1 crypto..z2fsha1..import sha256 crypto..z2fsha256..import sha512 crypto..z2fsha512..import tls crypto..z2ftls..import x509 crypto..z2fx509..import pkix crypto..z2fx509..z2fpkix..import asn1 encoding..z2fasn1..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import hex encoding..z2fhex..import pem encoding..z2fpem..import fmt fmt..import crc32 hash..z2fcrc32..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import chacha20poly1305 internal..z2fx..z2fcrypto..z2fchacha20poly1305..import cryptobyte internal..z2fx..z2fcrypto..z2fcryptobyte..import chacha20 internal..z2fx..z2fcrypto..z2finternal..z2fchacha20..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import httpguts internal..z2fx..z2fnet..z2fhttp..z2fhttpguts..import httpproxy internal..z2fx..z2fnet..z2fhttp..z2fhttpproxy..import hpack internal..z2fx..z2fnet..z2fhttp2..z2fhpack..import idna internal..z2fx..z2fnet..z2fidna..import bidirule internal..z2fx..z2ftext..z2fsecure..z2fbidirule..import transform internal..z2fx..z2ftext..z2ftransform..import bidi internal..z2fx..z2ftext..z2funicode..z2fbidi..import norm internal..z2fx..z2ftext..z2funicode..z2fnorm..import io io..import ioutil io..z2fioutil..import log log..import big math..z2fbig..import rand math..z2frand..import mime mime..import multipart mime..z2fmultipart..import quotedprintable mime..z2fquotedprintable..import net net..import http net..z2fhttp..import cgi net..z2fhttp..z2fcgi..import internal net..z2fhttp..z2finternal..import textproto net..z2ftextproto..import os os..import exec os..z2fexec..import path path..import filepath path..z2ffilepath..import reflect reflect..import regexp regexp..import syntax regexp..z2fsyntax..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 1 2 1 29 1 44 1 64 1 65 1 67 1 70 2 29 2 44 2 64 2 65 2 67 2 70 3 1 3 2 3 27 3 29 3 30 3 31 3 44 3 57 3 61 3 64 3 65 3 66 3 67 3 68 3 69 3 70 4 1 4 2 4 3 4 24 4 27 4 28 4 29 4 30 4 31 4 44 4 57 4 61 4 64 4 65 4 66 4 67 4 68 4 69 4 70 5 27 5 29 5 30 5 31 5 44 5 57 5 61 5 64 5 65 5 66 5 67 5 68 5 69 5 70 6 29 6 44 6 64 6 65 6 66 6 67 7 24 7 29 7 44 7 61 7 64 7 65 7 66 7 67 7 70 8 7 8 24 8 29 8 44 8 61 8 64 8 65 8 66 8 67 8 70 9 2 9 12 9 24 9 27 9 29 9 30 9 31 9 44 9 47 9 48 9 57 9 61 9 64 9 65 9 66 9 67 9 68 9 69 9 70 10 2 10 6 10 7 10 11 10 12 10 18 10 22 10 24 10 27 10 29 10 30 10 31 10 44 10 47 10 48 10 57 10 61 10 64 10 65 10 66 10 67 10 68 10 69 10 70 11 2 11 24 11 27 11 29 11 30 11 31 11 44 11 47 11 48 11 57 11 61 11 64 11 65 11 66 11 67 11 68 11 69 11 70 12 29 12 44 12 64 12 65 12 67 13 6 13 24 13 29 13 44 13 61 13 64 13 65 13 66 13 67 13 70 14 1 14 2 14 7 14 24 14 27 14 29 14 30 14 31 14 44 14 47 14 48 14 57 14 61 14 64 14 65 14 66 14 67 14 68 14 69 14 70 15 1 15 2 15 6 15 7 15 12 15 14 15 24 15 27 15 29 15 30 15 31 15 44 15 47 15 48 15 57 15 61 15 64 15 65 15 66 15 67 15 68 15 69 15 70 16 6 16 29 16 44 16 64 16 65 16 66 16 67 17 6 17 29 17 44 17 64 17 65 17 66 17 67 18 6 18 29 18 44 18 64 18 65 18 66 18 67 19 1 19 2 19 5 19 6 19 7 19 8 19 9 19 10 19 11 19 12 19 13 19 14 19 15 19 16 19 17 19 18 19 20 19 21 19 22 19 23 19 24 19 25 19 26 19 27 19 29 19 30 19 31 19 32 19 33 19 34 19 35 19 44 19 45 19 47 19 48 19 52 19 57 19 60 19 61 19 64 19 65 19 66 19 67 19 68 19 69 19 70 20 1 20 2 20 5 20 6 20 7 20 8 20 9 20 10 20 11 20 12 20 13 20 14 20 15 20 16 20 17 20 18 20 21 20 22 20 23 20 24 20 25 20 26 20 27 20 29 20 30 20 31 20 33 20 35 20 44 20 45 20 47 20 48 20 52 20 57 20 60 20 61 20 64 20 65 20 66 20 67 20 68 20 69 20 70 21 2 21 22 21 24 21 25 21 27 21 29 21 30 21 31 21 44 21 47 21 48 21 57 21 61 21 64 21 65 21 66 21 67 21 68 21 69 21 70 22 2 22 24 22 27 22 29 22 30 22 31 22 44 22 47 22 48 22 57 22 61 22 64 22 65 22 66 22 67 22 68 22 69 22 70 23 24 23 29 23 44 23 61 23 64 23 65 23 66 23 67 23 70 24 29 24 44 24 61 24 64 24 65 24 66 24 67 24 70 25 27 25 29 25 30 25 31 25 44 25 57 25 61 25 64 25 65 25 66 25 67 25 68 25 69 25 70 26 2 26 23 26 24 26 29 26 44 26 61 26 64 26 65 26 66 26 67 26 70 27 29 27 30 27 31 27 44 27 57 27 61 27 64 27 65 27 66 27 67 27 68 27 69 27 70 28 29 28 44 28 64 28 65 28 67 30 29 30 44 30 64 30 65 30 67 30 68 30 69 32 7 32 24 32 29 32 34 32 44 32 61 32 64 32 65 32 66 32 67 32 70 33 2 33 22 33 24 33 27 33 29 33 30 33 31 33 44 33 47 33 48 33 57 33 61 33 64 33 65 33 66 33 67 33 68 33 69 33 70 34 7 34 24 34 29 34 44 34 61 34 64 34 65 34 66 34 67 34 70 36 1 36 2 36 5 36 27 36 29 36 30 36 31 36 35 36 39 36 40 36 41 36 42 36 43 36 44 36 45 36 46 36 48 36 52 36 56 36 57 36 60 36 61 36 64 36 65 36 66 36 67 36 68 36 69 36 70 37 2 37 5 37 27 37 29 37 30 37 31 37 35 37 39 37 40 37 41 37 42 37 43 37 44 37 46 37 48 37 52 37 57 37 61 37 64 37 65 37 66 37 67 37 68 37 69 37 70 38 2 38 27 38 29 38 30 38 31 38 44 38 57 38 61 38 64 38 65 38 66 38 67 38 68 38 69 38 70 39 2 39 27 39 29 39 30 39 31 39 40 39 41 39 42 39 43 39 44 39 46 39 57 39 61 39 64 39 65 39 66 39 67 39 68 39 69 39 70 40 2 40 27 40 29 40 30 40 31 40 41 40 42 40 44 40 46 40 57 40 61 40 64 40 65 40 66 40 67 40 68 40 69 40 70 41 2 41 29 41 44 41 64 41 65 41 67 41 70 42 27 42 29 42 30 42 31 42 44 42 46 42 57 42 61 42 64 42 65 42 66 42 67 42 68 42 69 42 70 43 2 43 27 43 29 43 30 43 31 43 41 43 44 43 57 43 61 43 64 43 65 43 66 43 67 43 68 43 69 43 70 44 29 44 64 44 65 44 67 45 2 45 29 45 30 45 31 45 44 45 57 45 60 45 61 45 64 45 65 45 66 45 67 45 68 45 69 45 70 46 27 46 29 46 30 46 31 46 44 46 57 46 61 46 64 46 65 46 66 46 67 46 68 46 69 46 70 47 2 47 24 47 27 47 29 47 30 47 31 47 44 47 48 47 57 47 61 47 64 47 65 47 66 47 67 47 68 47 69 47 70 48 29 48 64 48 65 48 67 49 1 49 2 49 23 49 24 49 27 49 29 49 30 49 31 49 44 49 57 49 61 49 64 49 65 49 66 49 67 49 68 49 69 49 70 50 1 50 2 50 5 50 7 50 14 50 23 50 24 50 27 50 29 50 30 50 31 50 35 50 44 50 45 50 47 50 48 50 49 50 51 50 52 50 56 50 57 50 60 50 61 50 64 50 65 50 66 50 67 50 68 50 69 50 70 51 1 51 2 51 27 51 29 51 30 51 31 51 44 51 57 51 61 51 64 51 65 51 66 51 67 51 68 51 69 51 70 52 5 52 27 52 29 52 30 52 31 52 35 52 44 52 48 52 57 52 61 52 64 52 65 52 66 52 67 52 68 52 69 52 70 53 1 53 2 53 3 53 4 53 5 53 6 53 7 53 8 53 9 53 10 53 11 53 12 53 13 53 14 53 15 53 16 53 17 53 18 53 19 53 20 53 21 53 22 53 23 53 24 53 25 53 26 53 27 53 28 53 29 53 30 53 31 53 32 53 33 53 34 53 35 53 36 53 37 53 38 53 39 53 40 53 41 53 42 53 43 53 44 53 45 53 46 53 47 53 48 53 49 53 50 53 51 53 52 53 55 53 56 53 57 53 59 53 60 53 61 53 64 53 65 53 66 53 67 53 68 53 69 53 70 54 1 54 2 54 3 54 4 54 5 54 6 54 7 54 8 54 9 54 10 54 11 54 12 54 13 54 14 54 15 54 16 54 17 54 18 54 19 54 20 54 21 54 22 54 23 54 24 54 25 54 26 54 27 54 28 54 29 54 30 54 31 54 32 54 33 54 34 54 35 54 36 54 37 54 38 54 39 54 40 54 41 54 42 54 43 54 44 54 45 54 46 54 47 54 48 54 49 54 50 54 51 54 52 54 53 54 55 54 56 54 57 54 58 54 59 54 60 54 61 54 62 54 63 54 64 54 65 54 66 54 67 54 68 54 69 54 70 55 1 55 2 55 27 55 29 55 30 55 31 55 44 55 57 55 61 55 64 55 65 55 66 55 67 55 68 55 69 55 70 56 1 56 2 56 5 56 27 56 29 56 30 56 31 56 35 56 44 56 45 56 48 56 52 56 57 56 60 56 61 56 64 56 65 56 66 56 67 56 68 56 69 56 70 57 29 57 30 57 31 57 44 57 64 57 65 57 67 57 68 57 69 58 2 58 5 58 27 58 29 58 30 58 31 58 44 58 57 58 60 58 61 58 64 58 65 58 66 58 67 58 68 58 69 58 70 59 29 59 44 59 64 59 65 59 67 59 70 60 29 60 30 60 31 60 44 60 57 60 61 60 64 60 65 60 66 60 67 60 68 60 69 60 70 61 29 61 64 61 65 61 66 61 67 61 70 62 2 62 29 62 44 62 61 62 63 62 64 62 65 62 66 62 67 62 70 63 29 63 44 63 61 63 64 63 65 63 66 63 67 63 70 64 29 64 65 66 29 66 64 66 65 67 29 67 64 67 65 68 29 68 64 68 65 68 67 69 29 69 64 69 65 69 67 69 68
types 227 1 17 2161 38 71 28 71 21 30 88 30 94 30 43 19 112 144 316 35 22 36 142 3300 75 19 73 19 525 165 21 31 91 21 36 112 19 356 83 26 19 22 19 492 19 94 52 35 21 19 415 311 36 285 19 1429 30 73 185 1036 36 19 191 415 30 22 51 94 29 316 29 67 25 11 55 22 52 36 22 51 74 21 488 19 34 197 37 91 19 43 50 40 53 24 24 38 40 50 1054 19 154 47 63 38 187 21 374 23 21 1783 158 23 58 114 21 5347 23 36 32 195 36 295 35 37 63 36 65 21 1041 38 23 134 39 66 41 58 72 4256 23 40 104 23 49 92 184 21 141 102 58 301 45 59 85 45 113 103 23 68 23 61 54 161 58 21 48 167 21 499 21 123 37 23 46 23 21 89 37 1176 98 362 21 21 269 43 23 22 23 21 816 363 194 21 220 113 23 21 223 50 92 43 24 58 36 23 42 74 21 235 46 23 21 90 249 40 23 470 36 48 41 21 515 310 35 102 39 61 46 130
type 1 *<type 2>
type 2 "net/http.Request" <type 214>
 func (r <esc:0x1> <type 1>) .net/http.requiresHTTP1 () <type -15>
 func (r <esc:0x1> <type 1>) .net/http.wantsHttp10KeepAlive () <type -15>
 func (r <esc:0x9> <type 1>) FormFile (key <esc:0x1> <type -16>) (? <type 3>, ? <type 14>, ? <type -19>)
 func (r <esc:0x1> <type 1>) .net/http.outgoingLength () <type -4>
 func (r <esc:0x1> <type 1>) .net/http.expectsContinue () <type -15>
 func (r <esc:0x9> <type 1>) PostFormValue (key <esc:0x1> <type -16>) <type -16>
 func (r <esc:0x1> <type 1>) .net/http.wantsClose () <type -15>
 func (r <esc:0x9> <type 1>) ParseMultipartForm (maxMemory <type -4>) <type -19>
 func (r <esc:0x9> <type 1>) ParseForm () <type -19>
 func (r <esc:0x1> <type 1>) BasicAuth () (username <type -16>, password <type -16>, ok <type -15>)
 func (r <esc:0x1> <type 1>) SetBasicAuth (username <esc:0x1> <type -16>, password <esc:0x1> <type -16>)
 func (r <esc:0x22> <type 1>) Context () <type 20>
 func (r <esc:0x9> <type 1>) .net/http.multipartReader (allowMixed <type -15>) (? <type 41>, ? <type -19>)
 func (r <esc:0x9> <type 1>) WithContext (ctx <type 20>) <type 1>
 func (r <esc:0x1> <type 1>) .net/http.isH2Upgrade () <type -15>
 func (r <esc:0x1> <type 1>) ProtoAtLeast (major <type -11>, minor <type -11>) <type -15>
 func (r <esc:0x1> <type 1>) UserAgent () <type -16>
 func (r <esc:0x1> <type 1>) .net/http.isReplayable () <type -15>
 func (r <esc:0x9> <type 1>) .net/http.closeBody ()
 func (r <esc:0x9> <type 1>) .net/http.write (w <type 55>, usingProxy <type -15>, extraHeaders <esc:0x1> <type 58>, waitForContinue <esc:0x1> <type 208>) (err <type -19>)
 func (r <esc:0x1> <type 1>) Referer () <type -16>
 func (r <esc:0x9> <type 1>) Write (w <type 55>) <type -19>
 func (r <esc:0x9> <type 1>) FormValue (key <esc:0x1> <type -16>) <type -16>
 func (r <esc:0x1> <type 1>) AddCookie (c <esc:0x9> <type 209>)
 func (r <esc:0x1> <type 1>) Cookies () <type 213>
 func (r <esc:0x1> <type 1>) Cookie (name <esc:0x1> <type -16>) (? <type 209>, ? <type -19>)
 func (r <esc:0x9> <type 1>) MultipartReader () (? <type 41>, ? <type -19>)
 func (r <esc:0x9> <type 1>) WriteProxy (w <type 55>) <type -19>
type 3 "mime/multipart.File" <type 4>
type 4 interface { ? <type 5>; ? <type 8>; ? <type 10>; ? <type 12>; }
type 5 "io.Reader" <type 6>
type 6 interface { Read (p <type 7>) (n <type -11>, err <type -19>); }
type 7 [] <type -20>
type 8 "io.ReaderAt" <type 9>
type 9 interface { ReadAt (p <type 7>, off <type -4>) (n <type -11>, err <type -19>); }
type 10 "io.Seeker" <type 11>
type 11 interface { Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>); }
type 12 "io.Closer" <type 13>
type 13 interface { Close () <type -19>; }
type 14 *<type 15>
type 15 "mime/multipart.FileHeader" <type 16>
 func (fh <esc:0x9> <type 14>) Open () (? <type 3>, ? <type -19>)
type 16 struct { Filename <type -16>; Header <type 17>; Size <type -4>; .mime/multipart.content <type 7>; .mime/multipart.tmpfile <type -16>; }
type 17 "net/textproto.MIMEHeader" <type 18>
 func (h <esc:0x1> <type 17>) Del (key <esc:0x1> <type -16>)
 func (h <esc:0x1> <type 17>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 17>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x9> <type 17>) Add (key <type -16>, value <type -16>)
type 18 map [<type -16>] <type 19>
type 19 [] <type -16>
type 20 "context.Context" <type 21>
type 21 interface { Deadline () (deadline <type 22>, ok <type -15>); Done () <type 38>; Err () <type -19>; Value (key <type 40>) <type 40>; }
type 22 "time.Time" <type 37>
 func (t <esc:0x1> <type 22>) YearDay () <type -11>
 func (t <esc:0x1> <type 22>) Unix () <type -4>
 func (t <esc:0x1> <type 22>) Weekday () <type 23>
 func (t <esc:0x1> <type 22>) Second () <type -11>
 func (t <esc:0x1> <type 22>) Year () <type -11>
 func (t <esc:0x1> <type 24>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 24>) UnmarshalJSON (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 22>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 22>) Month () <type 25>
 func (t <esc:0x12> <type 22>) Location () <type 26>
 func (t <esc:0x1> <type 22>) GobEncode () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 22>) Date () (year <type -11>, month <type 25>, day <type -11>)
 func (t <esc:0x1> <type 22>) Hour () <type -11>
 func (t <esc:0x1> <type 22>) .time.abs () <type -8>
 func (t <esc:0x1> <type 22>) IsZero () <type -15>
 func (t <esc:0x1> <type 22>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 22>) UTC () <type 22>
 func (t <esc:0x12> <type 22>) In (loc <type 26>) <type 22>
 func (t <esc:0x32> <type 22>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 22>) Sub (u <esc:0x1> <type 22>) <type 36>
 func (t <esc:0x1> <type 22>) Equal (u <esc:0x1> <type 22>) <type -15>
 func (t <esc:0x1> <type 24>) .time.mono () <type -4>
 func (t <esc:0x1> <type 22>) MarshalText () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 24>) .time.stripMono ()
 func (t <esc:0x1> <type 22>) MarshalJSON () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 22>) .time.date (full <type -15>) (year <type -11>, month <type 25>, day <type -11>, yday <type -11>)
 func (t <type 22>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 22>
 func (t <esc:0x1> <type 24>) .time.sec () <type -4>
 func (t <esc:0x12> <type 22>) Local () <type 22>
 func (t <esc:0x1> <type 24>) UnmarshalBinary (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 24>) UnmarshalText (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x12> <type 22>) Truncate (d <type 36>) <type 22>
 func (t <esc:0x1> <type 24>) .time.setLoc (loc <type 26>)
 func (t <esc:0x32> <type 22>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 22>) Before (u <esc:0x1> <type 22>) <type -15>
 func (t <esc:0x1> <type 24>) .time.nsec () <type -3>
 func (t <esc:0x12> <type 22>) Round (d <type 36>) <type 22>
 func (t <esc:0x1> <type 24>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 22>) Day () <type -11>
 func (t <esc:0x1> <type 24>) GobDecode (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 22>) UnixNano () <type -4>
 func (t <esc:0x1> <type 22>) After (u <esc:0x1> <type 22>) <type -15>
 func (t <esc:0x1> <type 22>) MarshalBinary () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 22>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 24>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 22>) Minute () <type -11>
 func (t <esc:0x1> <type 22>) AppendFormat (b <esc:0x12> <type 7>, layout <esc:0x1> <type -16>) <type 7>
 func (t <esc:0x12> <type 22>) Add (d <type 36>) <type 22>
 func (t <esc:0x1> <type 22>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 22>) String () <type -16>
type 23 "time.Weekday" <type -11>
 func (d <type 23>) String () <type -16>
type 24 *<type 22>
type 25 "time.Month" <type -11>
 func (m <type 25>) String () <type -16>
type 26 *<type 27>
type 27 "time.Location" <type 28>
 func (l <esc:0x12> <type 26>) .time.get () <type 26>
 func (l <esc:0x22> <type 26>) String () <type -16>
 func (l <esc:0x32> <type 26>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 26>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 26>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 26>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 28 struct { .time.name <type -16>; .time.zone <type 29>; .time.tx <type 32>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 35>; }
type 29 [] <type 30>
type 30 ".time.zone" <type 31>
type 31 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 32 [] <type 33>
type 33 ".time.zoneTrans" <type 34>
type 34 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 35 *<type 30>
type 36 "time.Duration" <type -4>
 func (d <type 36>) String () <type -16>
 func (d <type 36>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 36>) Seconds () <type -10>
 func (d <type 36>) Minutes () <type -10>
 func (d <type 36>) Hours () <type -10>
 func (d <type 36>) Truncate (m <type 36>) <type 36>
 func (d <type 36>) Round (m <type 36>) <type 36>
type 37 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 26>; }
type 38 chan <- <type 39>
type 39 struct { }
type 40 interface { }
type 41 *<type 42>
type 42 "mime/multipart.Reader" <type 52>
 func (r <type 41>) ReadForm (maxMemory <type -4>) (? <type 43>, ? <type -19>)
 func (r <type 41>) .mime/multipart.readForm (maxMemory <type -4>) (_ <type 43>, err <type -19>)
 func (mr <esc:0x1> <type 41>) .mime/multipart.isBoundaryDelimiterLine (line <esc:0x1> <type 7>) (ret <type -15>)
 func (r <type 41>) NextPart () (? <type 48>, ? <type -19>)
 func (mr <esc:0x1> <type 41>) .mime/multipart.isFinalBoundary (line <esc:0x1> <type 7>) <type -15>
type 43 *<type 44>
type 44 "mime/multipart.Form" <type 45>
 func (f <esc:0x1> <type 43>) RemoveAll () <type -19>
type 45 struct { Value <type 18>; File <type 46>; }
type 46 map [<type -16>] <type 47>
type 47 [] <type 14>
type 48 *<type 49>
type 49 "mime/multipart.Part" <type 50>
 func (p <esc:0x1> <type 48>) FormName () <type -16>
 func (p <esc:0x1> <type 48>) FileName () <type -16>
 func (bp <esc:0x9> <type 48>) .mime/multipart.populateHeaders () <type -19>
 func (p <esc:0x1> <type 48>) .mime/multipart.parseContentDisposition ()
 func (p <esc:0x9> <type 48>) Read (d <type 7>) (n <type -11>, err <type -19>)
 func (p <type 48>) Close () <type -19>
type 50 struct { Header <type 17>; .mime/multipart.mr <type 41>; .mime/multipart.disposition <type -16>; .mime/multipart.dispositionParams <type 51>; .mime/multipart.r <type 5>; .mime/multipart.n <type -11>; .mime/multipart.total <type -4>; .mime/multipart.err <type -19>; .mime/multipart.readErr <type -19>; }
type 51 map [<type -16>] <type -16>
type 52 struct { .mime/multipart.bufReader <type 53>; .mime/multipart.currentPart <type 48>; .mime/multipart.partsRead <type -11>; .mime/multipart.nl <type 7>; .mime/multipart.nlDashBoundary <type 7>; .mime/multipart.dashBoundaryDash <type 7>; .mime/multipart.dashBoundary <type 7>; }
type 53 *<type 54>
type 54 "bufio.Reader" <type 57>
 func (b <esc:0x1> <type 53>) Size () <type -11>
 func (b <esc:0x82a> <type 53>) ReadLine () (line <type 7>, isPrefix <type -15>, err <type -19>)
 func (b <esc:0x10a> <type 53>) ReadString (delim <type -20>) (? <type -16>, ? <type -19>)
 func (b <esc:0x10a> <type 53>) WriteTo (w <type 55>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 53>) UnreadByte () <type -19>
 func (b <esc:0x9> <type 53>) .bufio.fill ()
 func (b <esc:0x1> <type 53>) UnreadRune () <type -19>
 func (b <esc:0x22> <type 53>) .bufio.readErr () <type -19>
 func (b <esc:0x12a> <type 53>) ReadSlice (delim <type -20>) (line <type 7>, err <type -19>)
 func (b <esc:0x12a> <type 53>) Peek (n <type -11>) (? <type 7>, ? <type -19>)
 func (b <esc:0x10a> <type 53>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x1> <type 53>) .bufio.reset (buf <type 7>, r <type 5>)
 func (b <esc:0x80a> <type 53>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x9> <type 53>) .bufio.writeBuf (w <type 55>) (? <type -4>, ? <type -19>)
 func (b <esc:0x9> <type 53>) Reset (r <type 5>)
 func (b <esc:0x10a> <type 53>) Read (p <type 7>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 53>) Buffered () <type -11>
 func (b <esc:0x10a> <type 53>) ReadBytes (delim <type -20>) (? <type 7>, ? <type -19>)
 func (b <esc:0x10a> <type 53>) Discard (n <type -11>) (discarded <type -11>, err <type -19>)
type 55 "io.Writer" <type 56>
type 56 interface { Write (p <type 7>) (n <type -11>, err <type -19>); }
type 57 struct { .bufio.buf <type 7>; .bufio.rd <type 5>; .bufio.r <type -11>; .bufio.w <type -11>; .bufio.err <type -19>; .bufio.lastByte <type -11>; .bufio.lastRuneSize <type -11>; }
type 58 "net/http.Header" <type 18>
 func (h <esc:0x1> <type 58>) .net/http.writeSubset (w <type 55>, exclude <esc:0x1> <type 59>, trace <esc:0x1> <type 60>) <type -19>
 func (h <esc:0x1> <type 58>) .net/http.sortedKeyValues (exclude <esc:0x1> <type 59>) (kvs <type 202>, hs <type 205>)
 func (h <esc:0x1> <type 58>) Write (w <type 55>) <type -19>
 func (h <esc:0x1> <type 58>) Del (key <esc:0x1> <type -16>)
 func (h <esc:0x1> <type 58>) .net/http.has (key <esc:0x1> <type -16>) <type -15>
 func (h <esc:0x1> <type 58>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 58>) WriteSubset (w <type 55>, exclude <esc:0x1> <type 59>) <type -19>
 func (h <esc:0x1> <type 58>) .net/http.clone () <type 58>
 func (h <esc:0x1> <type 58>) .net/http.write (w <type 55>, trace <esc:0x1> <type 60>) <type -19>
 func (h <esc:0x1> <type 58>) .net/http.get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 58>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x9> <type 58>) Add (key <type -16>, value <type -16>)
type 59 map [<type -16>] <type -15>
type 60 *<type 61>
type 61 "net/http/httptrace.ClientTrace" <type 62>
 func (t <type 60>) .net/http/httptrace.compose (old <type 60>)
 func (t <esc:0x1> <type 60>) .net/http/httptrace.hasNetHooks () <type -15>
type 62 struct { GetConn <type 63>; GotConn <type 64>; PutIdleConn <type 71>; GotFirstResponseByte <type 72>; Got100Continue <type 72>; Got1xxResponse <type 73>; DNSStart <type 74>; DNSDone <type 77>; ConnectStart <type 100>; ConnectDone <type 101>; TLSHandshakeStart <type 72>; TLSHandshakeDone <type 102>; WroteHeaderField <type 198>; WroteHeaders <type 72>; Wait100Continue <type 72>; WroteRequest <type 199>; }
type 63 (hostPort <type -16>)
type 64 (? <type 65>)
type 65 "net/http/httptrace.GotConnInfo" <type 66>
type 66 struct { Conn <type 67>; Reused <type -15>; WasIdle <type -15>; IdleTime <type 36>; }
type 67 "net.Conn" <type 68>
type 68 interface { Close () <type -19>; LocalAddr () <type 69>; Read (b <type 7>) (n <type -11>, err <type -19>); RemoteAddr () <type 69>; SetDeadline (t <type 22>) <type -19>; SetReadDeadline (t <type 22>) <type -19>; SetWriteDeadline (t <type 22>) <type -19>; Write (b <type 7>) (n <type -11>, err <type -19>); }
type 69 "net.Addr" <type 70>
type 70 interface { Network () <type -16>; String () <type -16>; }
type 71 (err <type -19>)
type 72 ()
type 73 (code <type -11>, header <type 17>) <type -19>
type 74 (? <type 75>)
type 75 "net/http/httptrace.DNSStartInfo" <type 76>
type 76 struct { Host <type -16>; }
type 77 (? <type 78>)
type 78 "net/http/httptrace.DNSDoneInfo" <type 79>
type 79 struct { Addrs <type 80>; Err <type -19>; Coalesced <type -15>; }
type 80 [] <type 81>
type 81 "net.IPAddr" <type 96>
 func (a <esc:0xa> <type 82>) .net.toLocal (net <esc:0x1> <type -16>) <type 83>
 func (a <esc:0x1> <type 82>) .net.sockaddr (family <type -11>) (? <type 85>, ? <type -19>)
 func (a <esc:0x1> <type 82>) .net.family () <type -11>
 func (a <esc:0x12> <type 82>) .net.opAddr () <type 69>
 func (a <esc:0x1> <type 82>) .net.isWildcard () <type -15>
 func (a <esc:0x1> <type 82>) String () <type -16>
 func (a <esc:0x1> <type 82>) Network () ($ret189 <type -16>)
type 82 *<type 81>
type 83 ".net.sockaddr" <type 84>
type 84 interface { ? <type 69>; .net.family () <type -11>; .net.isWildcard () <type -15>; .net.sockaddr (family <type -11>) (? <type 85>, ? <type -19>); .net.toLocal (net <type -16>) <type 83>; }
type 85 "syscall.Sockaddr" <type 86>
type 86 interface { .syscall.sockaddr () (ptr <type 87>, len <type 94>, err <type -19>); }
type 87 *<type 88>
type 88 "syscall.RawSockaddrAny" <type 89>
type 89 struct { Addr <type 90>; Pad <type 93>; }
type 90 "syscall.RawSockaddr" <type 91>
type 91 struct { Family <type -6>; Data <type 92>; }
type 92 [14 ] <type -1>
type 93 [96 ] <type -1>
type 94 "syscall.Socklen_t" <type 95>
type 95 ".syscall._socklen_t" <type -7>
type 96 struct { IP <type 97>; Zone <type -16>; }
type 97 "net.IP" <type 7>
 func (ip <esc:0x1> <type 97>) .net.matchAddrFamily (x <esc:0x1> <type 97>) <type -15>
 func (ip <esc:0x1> <type 98>) UnmarshalText (text <esc:0x1> <type 7>) <type -19>
 func (ip <esc:0x12> <type 97>) To4 () <type 97>
 func (ip <esc:0x1> <type 97>) IsMulticast () <type -15>
 func (ip <esc:0x1> <type 97>) IsUnspecified () <type -15>
 func (ip <esc:0x1> <type 97>) IsInterfaceLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 97>) IsLinkLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 97>) IsLinkLocalUnicast () <type -15>
 func (ip <esc:0x1> <type 97>) IsGlobalUnicast () <type -15>
 func (ip <esc:0x1> <type 97>) IsLoopback () <type -15>
 func (ip <esc:0x12> <type 97>) To16 () <type 97>
 func (ip <esc:0x1> <type 97>) Equal (x <esc:0x1> <type 97>) <type -15>
 func (ip <esc:0x1> <type 97>) Mask (mask <esc:0x1> <type 99>) <type 97>
 func (ip <esc:0x1> <type 97>) DefaultMask () <type 99>
 func (ip <esc:0x1> <type 97>) String () <type -16>
 func (ip <esc:0x1> <type 97>) MarshalText () (? <type 7>, ? <type -19>)
type 98 *<type 97>
type 99 "net.IPMask" <type 7>
 func (m <esc:0x1> <type 99>) String () <type -16>
 func (m <esc:0x1> <type 99>) Size () (ones <type -11>, bits <type -11>)
type 100 (network <type -16>, addr <type -16>)
type 101 (network <type -16>, addr <type -16>, err <type -19>)
type 102 (? <type 103>, ? <type -19>)
type 103 "crypto/tls.ConnectionState" <type 105>
 func (cs <esc:0x1b2> <type 104>) ExportKeyingMaterial (label <type -16>, context <type 7>, length <type -11>) (? <type 7>, ? <type -19>)
type 104 *<type 103>
type 105 struct { Version <type -6>; HandshakeComplete <type -15>; DidResume <type -15>; CipherSuite <type -6>; NegotiatedProtocol <type -16>; NegotiatedProtocolIsMutual <type -15>; ServerName <type -16>; PeerCertificates <type 106>; VerifiedChains <type 172>; SignedCertificateTimestamps <type 167>; OCSPResponse <type 7>; .crypto/tls.ekm <type 197>; TLSUnique <type 7>; }
type 106 [] <type 107>
type 107 *<type 108>
type 108 "crypto/x509.Certificate" <type 176>
 func (c <esc:0x9> <type 107>) CheckSignature (algo <type 109>, signed <type 7>, signature <type 7>) <type -19>
 func (c <esc:0x9> <type 107>) CheckSignatureFrom (parent <esc:0x9> <type 107>) <type -19>
 func (c <esc:0x32> <type 107>) .crypto/x509.getSANExtension () <type 7>
 func (c <esc:0x9> <type 107>) CreateCRL (rand <type 5>, priv <type 40>, revokedCerts <esc:0x9> <type 110>, now <type 22>, expiry <type 22>) (crlBytes <type 7>, err <type -19>)
 func (c <esc:0x9> <type 107>) .crypto/x509.commonNameAsHostname () <type -15>
 func (c <esc:0x9> <type 107>) CheckCRLSignature (crl <esc:0x9> <type 144>) <type -19>
 func (c <type 107>) .crypto/x509.isValid (certType <type -11>, currentChain <esc:0x9> <type 106>, opts <esc:0x1> <type 162>) <type -19>
 func (c <esc:0x1> <type 107>) .crypto/x509.systemVerify (opts <esc:0x1> <type 162>) (chains <type 172>, err <type -19>)
 func (c <esc:0x12> <type 107>) .crypto/x509.checkNameConstraints (count <esc:0x1> <type 173>, maxConstraintComparisons <type -11>, nameType <type -16>, name <type -16>, parsedName <type 40>, match <esc:0x9> <type 174>, permitted <type 40>, excluded <type 40>) <type -19>
 func (c <type 107>) Verify (opts <type 163>) (chains <type 172>, err <type -19>)
 func (c <type 107>) .crypto/x509.buildChains (cache <esc:0x1> <type 175>, currentChain <esc:0x9> <type 106>, sigChecks <esc:0x1> <type 173>, opts <esc:0x9> <type 162>) (chains <type 172>, err <type -19>)
 func (c <esc:0x1a> <type 107>) VerifyHostname (h <type -16>) <type -19>
 func (c <esc:0x1> <type 107>) .crypto/x509.hasSANExtension () <type -15>
 func (c <esc:0x1> <type 107>) .crypto/x509.hasNameConstraints () <type -15>
 func (c <esc:0x1> <type 107>) Equal (other <esc:0x1> <type 107>) <type -15>
type 109 "crypto/x509.SignatureAlgorithm" <type -11>
 func (algo <type 109>) String () <type -16>
 func (algo <type 109>) .crypto/x509.isRSAPSS () <type -15>
type 110 [] <type 111>
type 111 "crypto/x509/pkix.RevokedCertificate" <type 112>
type 112 struct { SerialNumber <type 113>; RevocationTime <type 22>; Extensions <type 140> "asn1:\"optional\""; }
type 113 *<type 114>
type 114 "math/big.Int" <type 135>
 func (x <esc:0x1> <type 113>) Append (buf <esc:0x12> <type 7>, base <type -11>) <type 7>
 func (x <esc:0x1> <type 113>) GobEncode () (? <type 7>, ? <type -19>)
 func (x <esc:0x1> <type 113>) MarshalText () (text <type 7>, err <type -19>)
 func (x <esc:0x9> <type 113>) ProbablyPrime (n <type -11>) <type -15>
 func (z <esc:0x1a> <type 113>) SetInt64 (x <type -4>) <type 113>
 func (z <esc:0x1a> <type 113>) ModSqrt (x <esc:0x9> <type 113>, p <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) Rsh (x <esc:0x1> <type 113>, n <type -12>) <type 113>
 func (x <esc:0x1> <type 113>) Int64 () <type -4>
 func (z <esc:0x1a> <type 113>) SetUint64 (x <type -8>) <type 113>
 func (x <esc:0x1> <type 113>) MarshalJSON () (? <type 7>, ? <type -19>)
 func (z <esc:0x1a> <type 113>) SetBytes (buf <esc:0x1> <type 7>) <type 113>
 func (z <esc:0x1a> <type 113>) .math/big.modSqrtTonelliShanks (x <esc:0x9> <type 113>, p <type 113>) <type 113>
 func (x <esc:0x22> <type 113>) Bits () <type 115>
 func (z <esc:0x1a> <type 113>) Add (x <esc:0x1> <type 113>, y <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) .math/big.modSqrt3Mod4Prime (x <esc:0x9> <type 113>, p <esc:0x1> <type 113>) <type 113>
 func (x <esc:0x1> <type 113>) Format (s <type 117>, ch <type -21>)
 func (z <esc:0x1a> <type 113>) ModInverse (g <esc:0x1> <type 113>, n <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) Set (x <esc:0x1> <type 113>) <type 113>
 func (x <esc:0x1> <type 113>) String () <type -16>
 func (z <esc:0x9> <type 113>) Scan (s <type 119>, ch <type -21>) <type -19>
 func (x <esc:0x1> <type 113>) Text (base <type -11>) <type -16>
 func (x <esc:0x1> <type 113>) IsInt64 () <type -15>
 func (x <esc:0x1> <type 113>) Cmp (y <esc:0x1> <type 113>) (r <type -11>)
 func (z <esc:0x1a> <type 113>) Quo (x <esc:0x1> <type 113>, y <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) Exp (x <esc:0x9> <type 113>, y <esc:0x1> <type 113>, m <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) Not (x <esc:0x1> <type 113>) <type 113>
 func (x <esc:0x1> <type 113>) Bytes () <type 7>
 func (z <esc:0x12> <type 113>) SetBits (abs <type 115>) <type 113>
 func (z <esc:0x1a> <type 113>) MulRange (a <type -4>, b <type -4>) <type 113>
 func (x <esc:0x1> <type 113>) Sign () <type -11>
 func (z <esc:0x1a> <type 113>) Abs (x <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) Neg (x <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x9> <type 113>) UnmarshalText (text <type 7>) <type -19>
 func (z <esc:0x1a> <type 113>) QuoRem (x <esc:0x1> <type 113>, y <esc:0x1> <type 113>, r <esc:0x8a> <type 113>) (? <type 113>, ? <type 113>)
 func (z <esc:0x9> <type 113>) UnmarshalJSON (text <type 7>) <type -19>
 func (z <esc:0x9> <type 113>) GobDecode (buf <esc:0x1> <type 7>) <type -19>
 func (z <esc:0x1a> <type 113>) .math/big.scan (r <type 122>, base <type -11>) (? <type 113>, ? <type -11>, ? <type -19>)
 func (z <esc:0x1a> <type 113>) SetString (s <type -16>, base <type -11>) (? <type 113>, ? <type -15>)
 func (z <esc:0x1a> <type 113>) Mul (x <esc:0x1> <type 113>, y <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) Mod (x <esc:0x1> <type 113>, y <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) .math/big.setFromScanner (r <type 122>, base <type -11>) (? <type 113>, ? <type -15>)
 func (z <esc:0x1a> <type 113>) And (x <esc:0x1> <type 113>, y <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) Sub (x <esc:0x1> <type 113>, y <esc:0x1> <type 113>) <type 113>
 func (x <esc:0x1> <type 113>) CmpAbs (y <esc:0x1> <type 113>) <type -11>
 func (z <esc:0x1a> <type 113>) Div (x <esc:0x1> <type 113>, y <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) Rem (x <esc:0x1> <type 113>, y <esc:0x1> <type 113>) <type 113>
 func (x <esc:0x1> <type 113>) IsUint64 () <type -15>
 func (z <esc:0x1a> <type 113>) DivMod (x <esc:0x1> <type 113>, y <esc:0x1> <type 113>, m <esc:0x8a> <type 113>) (? <type 113>, ? <type 113>)
 func (z <esc:0x1a> <type 113>) Binomial (n <type -4>, k <type -4>) <type 113>
 func (x <esc:0x1> <type 113>) Uint64 () <type -8>
 func (x <esc:0x1> <type 113>) BitLen () <type -11>
 func (z <esc:0x1a> <type 113>) GCD (x <esc:0x9> <type 113>, y <esc:0x9> <type 113>, a <esc:0x1> <type 113>, b <esc:0x1> <type 113>) <type 113>
 func (x <esc:0x1> <type 113>) Bit (i <type -11>) <type -12>
 func (z <esc:0x1a> <type 113>) Or (x <esc:0x1> <type 113>, y <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x12> <type 113>) .math/big.lehmerGCD (x <esc:0x1> <type 113>, y <esc:0x9> <type 113>, a <esc:0x1> <type 113>, b <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) Rand (rnd <esc:0x9> <type 126>, n <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) Xor (x <esc:0x1> <type 113>, y <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) Sqrt (x <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) .math/big.modSqrt5Mod8Prime (x <esc:0x1> <type 113>, p <esc:0x1> <type 113>) <type 113>
 func (z <esc:0x1a> <type 113>) Lsh (x <esc:0x1> <type 113>, n <type -12>) <type 113>
 func (z <esc:0x1a> <type 113>) SetBit (x <esc:0x1> <type 113>, i <type -11>, b <type -12>) <type 113>
 func (z <esc:0x1a> <type 113>) AndNot (x <esc:0x1> <type 113>, y <esc:0x1> <type 113>) <type 113>
type 115 [] <type 116>
type 116 "math/big.Word" <type -12>
type 117 "fmt.State" <type 118>
type 118 interface { Flag (c <type -11>) <type -15>; Precision () (prec <type -11>, ok <type -15>); Width () (wid <type -11>, ok <type -15>); Write (b <type 7>) (n <type -11>, err <type -19>); }
type 119 "fmt.ScanState" <type 120>
type 120 interface { Read (buf <type 7>) (n <type -11>, err <type -19>); ReadRune () (r <type -21>, size <type -11>, err <type -19>); SkipSpace (); Token (skipSpace <type -15>, f <type 121>) (token <type 7>, err <type -19>); UnreadRune () <type -19>; Width () (wid <type -11>, ok <type -15>); }
type 121 (? <type -21>) <type -15>
type 122 "io.ByteScanner" <type 123>
type 123 interface { ? <type 124>; UnreadByte () <type -19>; }
type 124 "io.ByteReader" <type 125>
type 125 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 126 *<type 127>
type 127 "math/rand.Rand" <type 130>
 func (r <esc:0x9> <type 126>) Uint32 () <type -7>
 func (r <esc:0x9> <type 126>) Shuffle (n <type -11>, swap <esc:0x1> <type 128>)
 func (r <esc:0x9> <type 126>) Int31 () <type -3>
 func (r <type 126>) Read (p <esc:0x1> <type 7>) (n <type -11>, err <type -19>)
 func (r <esc:0x9> <type 126>) Float32 () <type -9>
 func (r <esc:0x9> <type 126>) Perm (n <type -11>) <type 129>
 func (r <esc:0x9> <type 126>) Uint64 () <type -8>
 func (r <esc:0x9> <type 126>) .math/rand.int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 126>) Seed (seed <type -4>)
 func (r <esc:0x9> <type 126>) Float64 () <type -10>
 func (r <esc:0x9> <type 126>) Int63 () <type -4>
 func (r <esc:0x9> <type 126>) NormFloat64 () <type -10>
 func (r <esc:0x9> <type 126>) ExpFloat64 () <type -10>
 func (r <esc:0x9> <type 126>) Int63n (n <type -4>) <type -4>
 func (r <esc:0x9> <type 126>) Int () <type -11>
 func (r <esc:0x9> <type 126>) Intn (n <type -11>) <type -11>
 func (r <esc:0x9> <type 126>) Int31n (n <type -3>) <type -3>
type 128 (i <type -11>, j <type -11>)
type 129 [] <type -11>
type 130 struct { .math/rand.src <type 131>; .math/rand.s64 <type 133>; .math/rand.readVal <type -4>; .math/rand.readPos <type -1>; }
type 131 "math/rand.Source" <type 132>
type 132 interface { Int63 () <type -4>; Seed (seed <type -4>); }
type 133 "math/rand.Source64" <type 134>
type 134 interface { ? <type 131>; Uint64 () <type -8>; }
type 135 struct { .math/big.neg <type -15>; .math/big.abs <type 136>; }
type 136 ".math/big.nat" <type 115>
 func (x <esc:0x1> <type 136>) .math/big.modW (d <type 116>) (r <type 116>)
 func (z <esc:0x12> <type 136>) .math/big.xor (x <esc:0x1> <type 136>, y <esc:0x1> <type 136>) <type 136>
 func (z <esc:0x1> <type 136>) .math/big.bytes (buf <esc:0x1> <type 7>) (i <type -11>)
 func (z <esc:0x12> <type 136>) .math/big.or (x <esc:0x1> <type 136>, y <esc:0x1> <type 136>) <type 136>
 func (z <esc:0x12> <type 136>) .math/big.andNot (x <esc:0x1> <type 136>, y <esc:0x1> <type 136>) <type 136>
 func (z <type 136>) .math/big.mul (x <esc:0x1> <type 136>, y <esc:0x1> <type 136>) <type 136>
 func (z <esc:0x12> <type 136>) .math/big.mulAddWW (x <esc:0x1> <type 136>, y <type 116>, r <type 116>) <type 136>
 func (z <type 136>) .math/big.expNN (x <type 136>, y <esc:0x1> <type 136>, m <esc:0x1> <type 136>) <type 136>
 func (x <esc:0x1> <type 136>) .math/big.bit (i <type -12>) <type -12>
 func (x <esc:0x1> <type 136>) .math/big.trailingZeroBits () <type -12>
 func (z <type 136>) .math/big.sqr (x <esc:0x1> <type 136>) <type 136>
 func (z <esc:0x12> <type 136>) .math/big.norm () <type 136>
 func (x <esc:0x1> <type 136>) .math/big.utoa (base <type -11>) <type 7>
 func (z <esc:0x12> <type 136>) .math/big.setBit (x <esc:0x1> <type 136>, i <type -12>, b <type -12>) <type 136>
 func (z <type 136>) .math/big.expNNWindowed (x <type 136>, y <esc:0x1> <type 136>, m <esc:0x1> <type 136>) <type 136>
 func (z <esc:0x12> <type 136>) .math/big.shr (x <esc:0x1> <type 136>, s <type -12>) <type 136>
 func (z <type 136>) .math/big.expWW (x <type 116>, y <type 116>) <type 136>
 func (z <esc:0x12> <type 136>) .math/big.montgomery (x <esc:0x1> <type 136>, y <esc:0x1> <type 136>, m <esc:0x1> <type 136>, k <type 116>, n <type -11>) <type 136>
 func (q <esc:0x1> <type 136>) .math/big.convertWords (s <esc:0x1> <type 7>, b <type 116>, ndigits <type -11>, bb <type 116>, table <esc:0x1> <type 137>)
 func (z <type 136>) .math/big.add (x <esc:0x1> <type 136>, y <esc:0x1> <type 136>) <type 136>
 func (z <esc:0x12> <type 136>) .math/big.expNNMontgomery (x <esc:0x1> <type 136>, y <esc:0x1> <type 136>, m <esc:0x1> <type 136>) <type 136>
 func (z <esc:0x12> <type 136>) .math/big.scan (r <type 122>, base <type -11>, fracOk <type -15>) (res <type 136>, b <type -11>, count <type -11>, err <type -19>)
 func (n <esc:0x1> <type 136>) .math/big.probablyPrimeMillerRabin (reps <type -11>, force2 <type -15>) <type -15>
 func (z <esc:0x12> <type 136>) .math/big.setBytes (buf <esc:0x1> <type 7>) <type 136>
 func (z <esc:0x12> <type 136>) .math/big.random (rand <esc:0x9> <type 126>, limit <esc:0x1> <type 136>, n <type -11>) <type 136>
 func (z <esc:0x12> <type 136>) .math/big.set (x <esc:0x1> <type 136>) <type 136>
 func (z <esc:0x12> <type 136>) .math/big.make (n <type -11>) <type 136>
 func (z <type 136>) .math/big.mulRange (a <type -8>, b <type -8>) <type 136>
 func (x <esc:0x1> <type 136>) .math/big.bitLen () <type -11>
 func (z <esc:0x12> <type 136>) .math/big.divLarge (u <esc:0x82> <type 136>, uIn <esc:0x1> <type 136>, vIn <esc:0x1> <type 136>) (q <type 136>, r <type 136>)
 func (z <esc:0x12> <type 136>) .math/big.shl (x <esc:0x1> <type 136>, s <type -12>) <type 136>
 func (x <esc:0x1> <type 136>) .math/big.cmp (y <esc:0x1> <type 136>) (r <type -11>)
 func (z <esc:0x12> <type 136>) .math/big.sub (x <esc:0x1> <type 136>, y <esc:0x1> <type 136>) <type 136>
 func (x <esc:0x1> <type 136>) .math/big.sticky (i <type -12>) <type -12>
 func (z <type 136>) .math/big.sqrt (x <esc:0x1> <type 136>) <type 136>
 func (n <type 136>) .math/big.probablyPrimeLucas () <type -15>
 func (z <esc:0x12> <type 136>) .math/big.setWord (x <type 116>) <type 136>
 func (z <esc:0x12> <type 136>) .math/big.divW (x <esc:0x1> <type 136>, y <type 116>) (q <type 136>, r <type 116>)
 func (x <esc:0x1> <type 136>) .math/big.itoa (neg <type -15>, base <type -11>) <type 7>
 func (z <esc:0x1> <type 136>) .math/big.clear ()
 func (z <esc:0x12> <type 136>) .math/big.div (z2 <esc:0x82> <type 136>, u <esc:0x1> <type 136>, v <esc:0x1> <type 136>) (q <type 136>, r <type 136>)
 func (z <esc:0x12> <type 136>) .math/big.and (x <esc:0x1> <type 136>, y <esc:0x1> <type 136>) <type 136>
 func (z <esc:0x12> <type 136>) .math/big.setUint64 (x <type -8>) <type 136>
type 137 [] <type 138>
type 138 ".math/big.divisor" <type 139>
type 139 struct { .math/big.bbb <type 136>; .math/big.nbits <type -11>; .math/big.ndigits <type -11>; }
type 140 [] <type 141>
type 141 "crypto/x509/pkix.Extension" <type 142>
type 142 struct { Id <type 143>; Critical <type -15> "asn1:\"optional\""; Value <type 7>; }
type 143 "encoding/asn1.ObjectIdentifier" <type 129>
 func (oi <esc:0x1> <type 143>) String () <type -16>
 func (oi <esc:0x1> <type 143>) Equal (other <esc:0x1> <type 143>) <type -15>
type 144 *<type 145>
type 145 "crypto/x509/pkix.CertificateList" <type 146>
 func (certList <esc:0x1> <type 144>) HasExpired (now <esc:0x1> <type 22>) <type -15>
type 146 struct { TBSCertList <type 147>; SignatureAlgorithm <type 150>; SignatureValue <type 160>; }
type 147 "crypto/x509/pkix.TBSCertificateList" <type 148>
type 148 struct { Raw <type 149>; Version <type -11> "asn1:\"optional,default:0\""; Signature <type 150>; Issuer <type 154>; ThisUpdate <type 22>; NextUpdate <type 22> "asn1:\"optional\""; RevokedCertificates <type 110> "asn1:\"optional\""; Extensions <type 140> "asn1:\"tag:0,optional,explicit\""; }
type 149 "encoding/asn1.RawContent" <type 7>
type 150 "crypto/x509/pkix.AlgorithmIdentifier" <type 151>
type 151 struct { Algorithm <type 143>; Parameters <type 152> "asn1:\"optional\""; }
type 152 "encoding/asn1.RawValue" <type 153>
type 153 struct { Class <type -11>; Tag <type -11>; IsCompound <type -15>; Bytes <type 7>; FullBytes <type 7>; }
type 154 "crypto/x509/pkix.RDNSequence" <type 155>
 func (r <esc:0x9> <type 154>) String () <type -16>
type 155 [] <type 156>
type 156 "crypto/x509/pkix.RelativeDistinguishedNameSET" <type 157>
type 157 [] <type 158>
type 158 "crypto/x509/pkix.AttributeTypeAndValue" <type 159>
type 159 struct { Type <type 143>; Value <type 40>; }
type 160 "encoding/asn1.BitString" <type 161>
 func (b <esc:0x12> <type 160>) RightAlign () <type 7>
 func (b <esc:0x1> <type 160>) At (i <type -11>) <type -11>
type 161 struct { Bytes <type 7>; BitLength <type -11>; }
type 162 *<type 163>
type 163 "crypto/x509.VerifyOptions" <type 164>
type 164 struct { DNSName <type -16>; Intermediates <type 165>; Roots <type 165>; CurrentTime <type 22>; KeyUsages <type 170>; MaxConstraintComparisions <type -11>; }
type 165 *<type 166>
type 166 "crypto/x509.CertPool" <type 168>
 func (s <esc:0x9> <type 165>) Subjects () <type 167>
 func (s <esc:0x9> <type 165>) AppendCertsFromPEM (pemCerts <type 7>) (ok <type -15>)
 func (s <esc:0x9> <type 165>) AddCert (cert <type 107>)
 func (s <esc:0x1> <type 165>) .crypto/x509.contains (cert <esc:0x1> <type 107>) <type -15>
 func (s <esc:0x1> <type 165>) .crypto/x509.findPotentialParents (cert <esc:0x1> <type 107>) <type 129>
 func (s <esc:0x9> <type 165>) .crypto/x509.copy () <type 165>
type 167 [] <type 7>
type 168 struct { .crypto/x509.bySubjectKeyId <type 169>; .crypto/x509.byName <type 169>; .crypto/x509.certs <type 106>; }
type 169 map [<type -16>] <type 129>
type 170 [] <type 171>
type 171 "crypto/x509.ExtKeyUsage" <type -11>
type 172 [] <type 106>
type 173 *<type -11>
type 174 (parsedName <type 40>, constraint <type 40>) (match <type -15>, err <type -19>)
type 175 map [<type 107>] <type 172>
type 176 struct { Raw <type 7>; RawTBSCertificate <type 7>; RawSubjectPublicKeyInfo <type 7>; RawSubject <type 7>; RawIssuer <type 7>; Signature <type 7>; SignatureAlgorithm <type 109>; PublicKeyAlgorithm <type 177>; PublicKey <type 40>; Version <type -11>; SerialNumber <type 113>; Issuer <type 178>; Subject <type 178>; NotBefore <type 22>; NotAfter <type 22>; KeyUsage <type 182>; Extensions <type 140>; ExtraExtensions <type 140>; UnhandledCriticalExtensions <type 183>; ExtKeyUsage <type 170>; UnknownExtKeyUsage <type 183>; BasicConstraintsValid <type -15>; IsCA <type -15>; MaxPathLen <type -11>; MaxPathLenZero <type -15>; SubjectKeyId <type 7>; AuthorityKeyId <type 7>; OCSPServer <type 19>; IssuingCertificateURL <type 19>; DNSNames <type 19>; EmailAddresses <type 19>; IPAddresses <type 184>; URIs <type 185>; PermittedDNSDomainsCritical <type -15>; PermittedDNSDomains <type 19>; ExcludedDNSDomains <type 19>; PermittedIPRanges <type 193>; ExcludedIPRanges <type 193>; PermittedEmailAddresses <type 19>; ExcludedEmailAddresses <type 19>; PermittedURIDomains <type 19>; ExcludedURIDomains <type 19>; CRLDistributionPoints <type 19>; PolicyIdentifiers <type 183>; }
type 177 "crypto/x509.PublicKeyAlgorithm" <type -11>
 func (algo <type 177>) String () <type -16>
type 178 "crypto/x509/pkix.Name" <type 181>
 func (n <esc:0x9> <type 179>) FillFromRDNSequence (rdns <esc:0x9> <type 180>)
 func (n <esc:0x1> <type 178>) .crypto/x509/pkix.appendRDNs (in <esc:0x1a> <type 154>, values <esc:0x9> <type 19>, oid <type 143>) <type 154>
 func (n <type 178>) ToRDNSequence () (ret <type 154>)
 func (n <type 178>) String () <type -16>
type 179 *<type 178>
type 180 *<type 154>
type 181 struct { Country <type 19>; Organization <type 19>; OrganizationalUnit <type 19>; Locality <type 19>; Province <type 19>; StreetAddress <type 19>; PostalCode <type 19>; SerialNumber <type -16>; CommonName <type -16>; Names <type 157>; ExtraNames <type 157>; }
type 182 "crypto/x509.KeyUsage" <type -11>
type 183 [] <type 143>
type 184 [] <type 97>
type 185 [] <type 186>
type 186 *<type 187>
type 187 "net/url.URL" <type 189>
 func (u <esc:0x1> <type 186>) .net/url.setPath (p <type -16>) <type -19>
 func (u <esc:0x22> <type 186>) Port () <type -16>
 func (u <esc:0x22> <type 186>) EscapedPath () <type -16>
 func (u <esc:0x22> <type 186>) Hostname () <type -16>
 func (u <esc:0x1> <type 186>) String () <type -16>
 func (u <esc:0x1> <type 186>) IsAbs () <type -15>
 func (u <esc:0x9> <type 186>) Parse (ref <type -16>) (? <type 186>, ? <type -19>)
 func (u <esc:0x22> <type 186>) RequestURI () <type -16>
 func (u <esc:0xa> <type 186>) ResolveReference (ref <esc:0xa> <type 186>) <type 186>
 func (u <esc:0x9> <type 186>) Query () <type 188>
 func (u <esc:0x1> <type 186>) MarshalBinary () (text <type 7>, err <type -19>)
 func (u <esc:0x1> <type 186>) UnmarshalBinary (text <esc:0x1> <type 7>) <type -19>
type 188 "net/url.Values" <type 18>
 func (v <esc:0x1> <type 188>) Get (key <esc:0x1> <type -16>) <type -16>
 func (v <esc:0x1> <type 188>) Set (key <type -16>, value <type -16>)
 func (v <esc:0x9> <type 188>) Add (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 188>) Del (key <esc:0x1> <type -16>)
 func (v <esc:0x1> <type 188>) Encode () <type -16>
type 189 struct { Scheme <type -16>; Opaque <type -16>; User <type 190>; Host <type -16>; Path <type -16>; RawPath <type -16>; ForceQuery <type -15>; RawQuery <type -16>; Fragment <type -16>; }
type 190 *<type 191>
type 191 "net/url.Userinfo" <type 192>
 func (u <esc:0x22> <type 190>) Username () <type -16>
 func (u <esc:0x22> <type 190>) String () <type -16>
 func (u <esc:0x22> <type 190>) Password () (? <type -16>, ? <type -15>)
type 192 struct { .net/url.username <type -16>; .net/url.password <type -16>; .net/url.passwordSet <type -15>; }
type 193 [] <type 194>
type 194 *<type 195>
type 195 "net.IPNet" <type 196>
 func (n <esc:0x1> <type 194>) String () <type -16>
 func (n <esc:0x1> <type 194>) Network () ($ret178 <type -16>)
 func (n <esc:0x1> <type 194>) Contains (ip <esc:0x1> <type 97>) <type -15>
type 196 struct { IP <type 97>; Mask <type 99>; }
type 197 (label <type -16>, context <type 7>, length <type -11>) (? <type 7>, ? <type -19>)
type 198 (key <type -16>, value <type 19>)
type 199 (? <type 200>)
type 200 "net/http/httptrace.WroteRequestInfo" <type 201>
type 201 struct { Err <type -19>; }
type 202 [] <type 203>
type 203 ".net/http.keyValues" <type 204>
type 204 struct { .net/http.key <type -16>; .net/http.values <type 19>; }
type 205 *<type 206>
type 206 ".net/http.headerSorter" <type 207>
 func (s <esc:0x1> <type 205>) Less (i <type -11>, j <type -11>) <type -15>
 func (s <esc:0x9> <type 205>) Swap (i <type -11>, j <type -11>)
 func (s <esc:0x1> <type 205>) Len () <type -11>
type 207 struct { .net/http.kvs <type 202>; }
type 208 () <type -15>
type 209 *<type 210>
type 210 "net/http.Cookie" <type 211>
 func (c <esc:0x9> <type 209>) String () <type -16>
type 211 struct { Name <type -16>; Value <type -16>; Path <type -16>; Domain <type -16>; Expires <type 22>; RawExpires <type -16>; MaxAge <type -11>; Secure <type -15>; HttpOnly <type -15>; SameSite <type 212>; Raw <type -16>; Unparsed <type 19>; }
type 212 "net/http.SameSite" <type -11>
type 213 [] <type 209>
type 214 struct { Method <type -16>; URL <type 186>; Proto <type -16>; ProtoMajor <type -11>; ProtoMinor <type -11>; Header <type 58>; Body <type 215>; GetBody <type 217>; ContentLength <type -4>; TransferEncoding <type 19>; Close <type -15>; Host <type -16>; Form <type 188>; PostForm <type 188>; MultipartForm <type 43>; Trailer <type 58>; RemoteAddr <type -16>; RequestURI <type -16>; TLS <type 104>; Cancel <type 38>; Response <type 218>; .net/http.ctx <type 20>; }
type 215 "io.ReadCloser" <type 216>
type 216 interface { ? <type 5>; ? <type 12>; }
type 217 () (? <type 215>, ? <type -19>)
type 218 *<type 219>
type 219 "net/http.Response" <type 220>
 func (r <esc:0x1> <type 218>) .net/http.isProtocolSwitch () <type -15>
 func (r <esc:0x1> <type 218>) .net/http.bodyIsWritable () <type -15>
 func (r <esc:0x1> <type 218>) ProtoAtLeast (major <type -11>, minor <type -11>) <type -15>
 func (r <esc:0x9> <type 218>) Write (w <type 55>) <type -19>
 func (r <esc:0x9> <type 218>) Location () (? <type 186>, ? <type -19>)
 func (r <esc:0x9> <type 218>) .net/http.closeBody ()
 func (r <esc:0x1> <type 218>) Cookies () <type 213>
type 220 struct { Status <type -16>; StatusCode <type -11>; Proto <type -16>; ProtoMajor <type -11>; ProtoMinor <type -11>; Header <type 58>; Body <type 215>; ContentLength <type -4>; TransferEncoding <type 19>; Close <type -15>; Uncompressed <type -15>; Trailer <type 58>; Request <type 1>; TLS <type 104>; }
type 221 "net.Listener" <type 222>
type 222 interface { Accept () (? <type 67>, ? <type -19>); Addr () <type 69>; Close () <type -19>; }
type 223 "net/http.Handler" <type 224>
type 224 interface { ServeHTTP (? <type 225>, ? <type 1>); }
type 225 "net/http.ResponseWriter" <type 226>
type 226 interface { Header () <type 58>; Write (? <type 7>) (? <type -11>, ? <type -19>); WriteHeader (statusCode <type -11>); }
var ErrConnClosed <type -19>
var ErrRequestAborted <type -19>
func ProcessEnv (r <esc:0x9> <type 1>) <type 51>
func Serve (l <type 221>, handler <type 223>) <type -19>
checksum F72D681FEC014EC6FCF0253FDFB6D1095802DF43
v3;
package httptest
pkgpath net/http/httptest
import bufio bufio "bufio"
import bytes bytes "bytes"
import tls crypto/tls "crypto/tls"
import x509 crypto/x509 "crypto/x509"
import flag flag "flag"
import fmt fmt "fmt"
import httpguts internal/x/net/http/httpguts "internal/x/net/http/httpguts"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import log log "log"
import net net "net"
import http net/http "net/http"
import internal net/http/internal "net/http/internal"
import os os "os"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import time time "time"
indirectimport asn1 encoding/asn1
indirectimport atomic sync/atomic
indirectimport big math/big
indirectimport cipher crypto/cipher
indirectimport context context
indirectimport crypto crypto
indirectimport hash hash
indirectimport httptrace net/http/httptrace
indirectimport multipart mime/multipart
indirectimport pkix crypto/x509/pkix
indirectimport rand math/rand
indirectimport syscall syscall
indirectimport textproto net/textproto
indirectimport unsafe unsafe
indirectimport url net/url
init httptest net..z2fhttp..z2fhttptest..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import gzip compress..z2fgzip..import context context..import crypto crypto..import cipher crypto..z2fcipher..import des crypto..z2fdes..import dsa crypto..z2fdsa..import ecdsa crypto..z2fecdsa..import elliptic crypto..z2felliptic..import randutil crypto..z2finternal..z2frandutil..import md5 crypto..z2fmd5..import rand crypto..z2frand..import rsa crypto..z2frsa..import sha1 crypto..z2fsha1..import sha256 crypto..z2fsha256..import sha512 crypto..z2fsha512..import tls crypto..z2ftls..import x509 crypto..z2fx509..import pkix crypto..z2fx509..z2fpkix..import asn1 encoding..z2fasn1..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import hex encoding..z2fhex..import pem encoding..z2fpem..import flag flag..import fmt fmt..import crc32 hash..z2fcrc32..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import chacha20poly1305 internal..z2fx..z2fcrypto..z2fchacha20poly1305..import cryptobyte internal..z2fx..z2fcrypto..z2fcryptobyte..import chacha20 internal..z2fx..z2fcrypto..z2finternal..z2fchacha20..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import httpguts internal..z2fx..z2fnet..z2fhttp..z2fhttpguts..import httpproxy internal..z2fx..z2fnet..z2fhttp..z2fhttpproxy..import hpack internal..z2fx..z2fnet..z2fhttp2..z2fhpack..import idna internal..z2fx..z2fnet..z2fidna..import bidirule internal..z2fx..z2ftext..z2fsecure..z2fbidirule..import transform internal..z2fx..z2ftext..z2ftransform..import bidi internal..z2fx..z2ftext..z2funicode..z2fbidi..import norm internal..z2fx..z2ftext..z2funicode..z2fnorm..import io io..import ioutil io..z2fioutil..import log log..import big math..z2fbig..import rand math..z2frand..import mime mime..import multipart mime..z2fmultipart..import quotedprintable mime..z2fquotedprintable..import net net..import http net..z2fhttp..import internal net..z2fhttp..z2finternal..import textproto net..z2ftextproto..import os os..import path path..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 1 2 1 30 1 45 1 61 1 62 1 64 1 67 2 30 2 45 2 61 2 62 2 64 2 67 3 1 3 2 3 28 3 30 3 31 3 32 3 45 3 57 3 60 3 61 3 62 3 63 3 64 3 65 3 66 3 67 4 1 4 2 4 3 4 24 4 28 4 29 4 30 4 31 4 32 4 45 4 57 4 60 4 61 4 62 4 63 4 64 4 65 4 66 4 67 5 28 5 30 5 31 5 32 5 45 5 57 5 60 5 61 5 62 5 63 5 64 5 65 5 66 5 67 6 30 6 45 6 61 6 62 6 63 6 64 7 24 7 30 7 45 7 60 7 61 7 62 7 63 7 64 7 67 8 7 8 24 8 30 8 45 8 60 8 61 8 62 8 63 8 64 8 67 9 2 9 12 9 24 9 28 9 30 9 31 9 32 9 45 9 48 9 49 9 57 9 60 9 61 9 62 9 63 9 64 9 65 9 66 9 67 10 2 10 6 10 7 10 11 10 12 10 18 10 22 10 24 10 28 10 30 10 31 10 32 10 45 10 48 10 49 10 57 10 60 10 61 10 62 10 63 10 64 10 65 10 66 10 67 11 2 11 24 11 28 11 30 11 31 11 32 11 45 11 48 11 49 11 57 11 60 11 61 11 62 11 63 11 64 11 65 11 66 11 67 12 30 12 45 12 61 12 62 12 64 13 6 13 24 13 30 13 45 13 60 13 61 13 62 13 63 13 64 13 67 14 1 14 2 14 7 14 24 14 28 14 30 14 31 14 32 14 45 14 48 14 49 14 57 14 60 14 61 14 62 14 63 14 64 14 65 14 66 14 67 15 1 15 2 15 6 15 7 15 12 15 14 15 24 15 28 15 30 15 31 15 32 15 45 15 48 15 49 15 57 15 60 15 61 15 62 15 63 15 64 15 65 15 66 15 67 16 6 16 30 16 45 16 61 16 62 16 63 16 64 17 6 17 30 17 45 17 61 17 62 17 63 17 64 18 6 18 30 18 45 18 61 18 62 18 63 18 64 19 1 19 2 19 5 19 6 19 7 19 8 19 9 19 10 19 11 19 12 19 13 19 14 19 15 19 16 19 17 19 18 19 20 19 21 19 22 19 23 19 24 19 25 19 26 19 28 19 30 19 31 19 32 19 33 19 34 19 35 19 36 19 45 19 46 19 48 19 49 19 53 19 57 19 59 19 60 19 61 19 62 19 63 19 64 19 65 19 66 19 67 20 1 20 2 20 5 20 6 20 7 20 8 20 9 20 10 20 11 20 12 20 13 20 14 20 15 20 16 20 17 20 18 20 21 20 22 20 23 20 24 20 25 20 26 20 28 20 30 20 31 20 32 20 34 20 36 20 45 20 46 20 48 20 49 20 53 20 57 20 59 20 60 20 61 20 62 20 63 20 64 20 65 20 66 20 67 21 2 21 22 21 24 21 25 21 28 21 30 21 31 21 32 21 45 21 48 21 49 21 57 21 60 21 61 21 62 21 63 21 64 21 65 21 66 21 67 22 2 22 24 22 28 22 30 22 31 22 32 22 45 22 48 22 49 22 57 22 60 22 61 22 62 22 63 22 64 22 65 22 66 22 67 23 24 23 30 23 45 23 60 23 61 23 62 23 63 23 64 23 67 24 30 24 45 24 60 24 61 24 62 24 63 24 64 24 67 25 28 25 30 25 31 25 32 25 45 25 57 25 60 25 61 25 62 25 63 25 64 25 65 25 66 25 67 26 2 26 23 26 24 26 30 26 45 26 60 26 61 26 62 26 63 26 64 26 67 27 28 27 30 27 31 27 32 27 45 27 57 27 60 27 61 27 62 27 63 27 64 27 65 27 66 27 67 28 30 28 31 28 32 28 45 28 57 28 60 28 61 28 62 28 63 28 64 28 65 28 66 28 67 29 30 29 45 29 61 29 62 29 64 31 30 31 45 31 61 31 62 31 64 31 65 31 66 33 7 33 24 33 30 33 35 33 45 33 60 33 61 33 62 33 63 33 64 33 67 34 2 34 22 34 24 34 28 34 30 34 31 34 32 34 45 34 48 34 49 34 57 34 60 34 61 34 62 34 63 34 64 34 65 34 66 34 67 35 7 35 24 35 30 35 45 35 60 35 61 35 62 35 63 35 64 35 67 37 1 37 2 37 5 37 28 37 30 37 31 37 32 37 36 37 40 37 41 37 42 37 43 37 44 37 45 37 46 37 47 37 49 37 53 37 56 37 57 37 59 37 60 37 61 37 62 37 63 37 64 37 65 37 66 37 67 38 2 38 5 38 28 38 30 38 31 38 32 38 36 38 40 38 41 38 42 38 43 38 44 38 45 38 47 38 49 38 53 38 57 38 60 38 61 38 62 38 63 38 64 38 65 38 66 38 67 39 2 39 28 39 30 39 31 39 32 39 45 39 57 39 60 39 61 39 62 39 63 39 64 39 65 39 66 39 67 40 2 40 28 40 30 40 31 40 32 40 41 40 42 40 43 40 44 40 45 40 47 40 57 40 60 40 61 40 62 40 63 40 64 40 65 40 66 40 67 41 2 41 28 41 30 41 31 41 32 41 42 41 43 41 45 41 47 41 57 41 60 41 61 41 62 41 63 41 64 41 65 41 66 41 67 42 2 42 30 42 45 42 61 42 62 42 64 42 67 43 28 43 30 43 31 43 32 43 45 43 47 43 57 43 60 43 61 43 62 43 63 43 64 43 65 43 66 43 67 44 2 44 28 44 30 44 31 44 32 44 42 44 45 44 57 44 60 44 61 44 62 44 63 44 64 44 65 44 66 44 67 45 30 45 61 45 62 45 64 46 2 46 30 46 31 46 32 46 45 46 57 46 59 46 60 46 61 46 62 46 63 46 64 46 65 46 66 46 67 47 28 47 30 47 31 47 32 47 45 47 57 47 60 47 61 47 62 47 63 47 64 47 65 47 66 47 67 48 2 48 24 48 28 48 30 48 31 48 32 48 45 48 49 48 57 48 60 48 61 48 62 48 63 48 64 48 65 48 66 48 67 49 30 49 61 49 62 49 64 50 1 50 2 50 23 50 24 50 28 50 30 50 31 50 32 50 45 50 57 50 60 50 61 50 62 50 63 50 64 50 65 50 66 50 67 51 1 51 2 51 5 51 7 51 14 51 23 51 24 51 28 51 30 51 31 51 32 51 36 51 45 51 46 51 48 51 49 51 50 51 52 51 53 51 56 51 57 51 59 51 60 51 61 51 62 51 63 51 64 51 65 51 66 51 67 52 1 52 2 52 28 52 30 52 31 52 32 52 45 52 57 52 60 52 61 52 62 52 63 52 64 52 65 52 66 52 67 53 5 53 28 53 30 53 31 53 32 53 36 53 45 53 49 53 57 53 60 53 61 53 62 53 63 53 64 53 65 53 66 53 67 54 1 54 2 54 3 54 4 54 5 54 6 54 7 54 8 54 9 54 10 54 11 54 12 54 13 54 14 54 15 54 16 54 17 54 18 54 19 54 20 54 21 54 22 54 23 54 24 54 25 54 26 54 28 54 29 54 30 54 31 54 32 54 33 54 34 54 35 54 36 54 37 54 38 54 39 54 40 54 41 54 42 54 43 54 44 54 45 54 46 54 47 54 48 54 49 54 50 54 51 54 52 54 53 54 55 54 56 54 57 54 58 54 59 54 60 54 61 54 62 54 63 54 64 54 65 54 66 54 67 55 1 55 2 55 28 55 30 55 31 55 32 55 45 55 57 55 60 55 61 55 62 55 63 55 64 55 65 55 66 55 67 56 1 56 2 56 5 56 28 56 30 56 31 56 32 56 36 56 45 56 46 56 49 56 53 56 57 56 59 56 60 56 61 56 62 56 63 56 64 56 65 56 66 56 67 57 30 57 31 57 32 57 45 57 61 57 62 57 64 57 65 57 66 58 30 58 45 58 61 58 62 58 64 58 67 59 30 59 31 59 32 59 45 59 57 59 60 59 61 59 62 59 63 59 64 59 65 59 66 59 67 60 30 60 61 60 62 60 63 60 64 60 67 61 30 61 62 63 30 63 61 63 62 64 30 64 61 64 62 65 30 65 61 65 62 65 64 66 30 66 61 66 62 66 64 66 65
types 414 3 517 696 17 28 71 21 17 2161 39 73 32 89 30 94 30 43 19 112 144 316 35 22 36 142 3300 19 73 356 19 525 165 21 31 91 21 36 112 19 75 83 26 19 22 19 492 19 94 52 35 21 19 415 311 36 285 19 1429 30 73 185 1036 36 19 191 415 30 22 51 94 29 316 29 67 25 11 55 22 52 36 22 51 74 21 488 19 37 91 19 43 50 40 53 24 24 38 40 34 197 51 1078 157 21 47 63 38 187 21 374 23 21 1783 23 58 114 21 5347 36 295 35 23 36 32 195 37 63 36 65 21 1041 23 38 134 39 66 41 58 72 4256 23 40 104 23 49 92 184 21 141 102 58 301 45 59 85 45 113 103 23 68 23 61 54 161 58 21 48 167 21 499 21 123 37 23 46 23 21 89 37 158 1176 98 362 21 21 269 43 23 23 23 21 816 363 194 21 220 113 23 21 224 52 92 43 24 58 36 23 42 74 21 235 46 23 21 90 249 40 23 470 36 48 41 21 515 310 39 61 46 130 19 217 21 1830 92 35 316 35 102 21 1177 21 49 226 22 23 40 22 23 48 21 45 145 39 23 44 115 26 23 26 804 22 23 37 53 53 21 56 75 53 69 48 52 132 21 52 359 54 80 21 62 93 21 65 224 21 34 43 151 21 1966 21 650 83 21 1321 28 21 39 47 21 725 106 795 40 297 21 139 135 21 26 26 25 25 424 21 702 246 25 21 126 110 114 21 39 135 37 14 76 21 124 21 46 48 21 24 22 569 37 52 21 3595 21 203 200 21 352 998 23 43 77 23 46 91 50 114 21 193 751 102 77 25 122 44 21 191 86 1376 26 778 21 46 120 21 868 32 118 135 56 39 81 41 273 210 320 25 26 841 21 87 37 21 1112 19 125 36 36 22 228 21 20 20 70 24 36 21 1077 22 21 44 76 103 51 41 105 27
type 1 "ResponseRecorder" <type 229>
 func (rw <esc:0x2a> <type 3>) Header () <type 61>
 func (rw <esc:0x9> <type 3>) .net/http/httptest.writeHeader (b <type 6>, str <esc:0x1> <type -16>)
 func (rw <esc:0x9> <type 3>) Write (buf <type 6>) (? <type -11>, ? <type -19>)
 func (rw <esc:0x9> <type 3>) WriteString (str <esc:0x1> <type -16>) (? <type -11>, ? <type -19>)
 func (rw <esc:0x1> <type 3>) WriteHeader (code <type -11>)
 func (rw <esc:0x1> <type 3>) Flush ()
 func (rw <esc:0x2a> <type 3>) Result () <type 221>
type 2 "Server" <type 234>
 func (s <type 228>) Start ()
 func (s <type 228>) StartTLS ()
 func (s <type 228>) Close ()
 func (s <type 228>) .net/http/httptest.logCloseHangDebugInfo ()
 func (s <type 228>) CloseClientConnections ()
 func (s <esc:0x22> <type 228>) Certificate () <type 110>
 func (s <esc:0x22> <type 228>) Client () <type 403>
 func (s <type 228>) .net/http/httptest.goServe ()
 func (s <type 228>) .net/http/httptest.wrap ()
 func (s <esc:0x1> <type 228>) .net/http/httptest.closeConn (c <type 70>)
 func (s <esc:0x1> <type 228>) .net/http/httptest.closeConnChan (c <type 70>, done <esc:0x1> <type 413>)
 func (s <type 228>) .net/http/httptest.forgetConn (c <esc:0x1> <type 70>)
type 3 *<type 1>
type 4 "io.Reader" <type 5>
type 5 interface { Read (p <type 6>) (n <type -11>, err <type -19>); }
type 6 [] <type -20>
type 7 *<type 8>
type 8 "net/http.Request" <type 217>
 func (r <esc:0x1> <type 7>) .net/http.requiresHTTP1 () <type -15>
 func (r <esc:0x1> <type 7>) .net/http.wantsHttp10KeepAlive () <type -15>
 func (r <esc:0x9> <type 7>) FormFile (key <esc:0x1> <type -16>) (? <type 9>, ? <type 17>, ? <type -19>)
 func (r <esc:0x1> <type 7>) .net/http.outgoingLength () <type -4>
 func (r <esc:0x1> <type 7>) .net/http.expectsContinue () <type -15>
 func (r <esc:0x9> <type 7>) PostFormValue (key <esc:0x1> <type -16>) <type -16>
 func (r <esc:0x1> <type 7>) .net/http.wantsClose () <type -15>
 func (r <esc:0x9> <type 7>) ParseMultipartForm (maxMemory <type -4>) <type -19>
 func (r <esc:0x9> <type 7>) ParseForm () <type -19>
 func (r <esc:0x1> <type 7>) BasicAuth () (username <type -16>, password <type -16>, ok <type -15>)
 func (r <esc:0x1> <type 7>) SetBasicAuth (username <esc:0x1> <type -16>, password <esc:0x1> <type -16>)
 func (r <esc:0x22> <type 7>) Context () <type 23>
 func (r <esc:0x9> <type 7>) .net/http.multipartReader (allowMixed <type -15>) (? <type 44>, ? <type -19>)
 func (r <esc:0x9> <type 7>) WithContext (ctx <type 23>) <type 7>
 func (r <esc:0x1> <type 7>) .net/http.isH2Upgrade () <type -15>
 func (r <esc:0x1> <type 7>) ProtoAtLeast (major <type -11>, minor <type -11>) <type -15>
 func (r <esc:0x1> <type 7>) UserAgent () <type -16>
 func (r <esc:0x1> <type 7>) .net/http.isReplayable () <type -15>
 func (r <esc:0x9> <type 7>) .net/http.closeBody ()
 func (r <esc:0x9> <type 7>) .net/http.write (w <type 58>, usingProxy <type -15>, extraHeaders <esc:0x1> <type 61>, waitForContinue <esc:0x1> <type 211>) (err <type -19>)
 func (r <esc:0x1> <type 7>) Referer () <type -16>
 func (r <esc:0x9> <type 7>) Write (w <type 58>) <type -19>
 func (r <esc:0x9> <type 7>) FormValue (key <esc:0x1> <type -16>) <type -16>
 func (r <esc:0x1> <type 7>) AddCookie (c <esc:0x9> <type 212>)
 func (r <esc:0x1> <type 7>) Cookies () <type 216>
 func (r <esc:0x1> <type 7>) Cookie (name <esc:0x1> <type -16>) (? <type 212>, ? <type -19>)
 func (r <esc:0x9> <type 7>) MultipartReader () (? <type 44>, ? <type -19>)
 func (r <esc:0x9> <type 7>) WriteProxy (w <type 58>) <type -19>
type 9 "mime/multipart.File" <type 10>
type 10 interface { ? <type 4>; ? <type 11>; ? <type 13>; ? <type 15>; }
type 11 "io.ReaderAt" <type 12>
type 12 interface { ReadAt (p <type 6>, off <type -4>) (n <type -11>, err <type -19>); }
type 13 "io.Seeker" <type 14>
type 14 interface { Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>); }
type 15 "io.Closer" <type 16>
type 16 interface { Close () <type -19>; }
type 17 *<type 18>
type 18 "mime/multipart.FileHeader" <type 19>
 func (fh <esc:0x9> <type 17>) Open () (? <type 9>, ? <type -19>)
type 19 struct { Filename <type -16>; Header <type 20>; Size <type -4>; .mime/multipart.content <type 6>; .mime/multipart.tmpfile <type -16>; }
type 20 "net/textproto.MIMEHeader" <type 21>
 func (h <esc:0x1> <type 20>) Del (key <esc:0x1> <type -16>)
 func (h <esc:0x1> <type 20>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 20>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x9> <type 20>) Add (key <type -16>, value <type -16>)
type 21 map [<type -16>] <type 22>
type 22 [] <type -16>
type 23 "context.Context" <type 24>
type 24 interface { Deadline () (deadline <type 25>, ok <type -15>); Done () <type 41>; Err () <type -19>; Value (key <type 43>) <type 43>; }
type 25 "time.Time" <type 40>
 func (t <esc:0x1> <type 26>) .time.sec () <type -4>
 func (t <type 25>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 25>
 func (t <esc:0x1> <type 25>) .time.date (full <type -15>) (year <type -11>, month <type 27>, day <type -11>, yday <type -11>)
 func (t <esc:0x1> <type 25>) MarshalJSON () (? <type 6>, ? <type -19>)
 func (t <esc:0x1> <type 26>) .time.stripMono ()
 func (t <esc:0x1> <type 25>) MarshalText () (? <type 6>, ? <type -19>)
 func (t <esc:0x1> <type 26>) .time.mono () <type -4>
 func (t <esc:0x1> <type 25>) Sub (u <esc:0x1> <type 25>) <type 28>
 func (t <esc:0x32> <type 25>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x12> <type 25>) UTC () <type 25>
 func (t <esc:0x1> <type 25>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 25>) In (loc <type 29>) <type 25>
 func (t <esc:0x1> <type 25>) Equal (u <esc:0x1> <type 25>) <type -15>
 func (t <esc:0x1> <type 25>) IsZero () <type -15>
 func (t <esc:0x12> <type 25>) Local () <type 25>
 func (t <esc:0x1> <type 25>) YearDay () <type -11>
 func (t <esc:0x1> <type 25>) Unix () <type -4>
 func (t <esc:0x1> <type 25>) Weekday () <type 39>
 func (t <esc:0x1> <type 25>) Date () (year <type -11>, month <type 27>, day <type -11>)
 func (t <esc:0x1> <type 26>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 25>) MarshalBinary () (? <type 6>, ? <type -19>)
 func (t <esc:0x1> <type 25>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 25>) Day () <type -11>
 func (t <esc:0x1> <type 26>) GobDecode (data <esc:0x1> <type 6>) <type -19>
 func (t <esc:0x1> <type 25>) After (u <esc:0x1> <type 25>) <type -15>
 func (t <esc:0x1> <type 25>) UnixNano () <type -4>
 func (t <esc:0x1> <type 26>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 25>) Minute () <type -11>
 func (t <esc:0x1> <type 25>) AppendFormat (b <esc:0x12> <type 6>, layout <esc:0x1> <type -16>) <type 6>
 func (t <esc:0x12> <type 25>) Truncate (d <type 28>) <type 25>
 func (t <esc:0x12> <type 25>) Add (d <type 28>) <type 25>
 func (t <esc:0x1> <type 25>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 25>) String () <type -16>
 func (t <esc:0x12> <type 25>) Round (d <type 28>) <type 25>
 func (t <esc:0x1> <type 26>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 25>) Before (u <esc:0x1> <type 25>) <type -15>
 func (t <esc:0x32> <type 25>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 26>) .time.setLoc (loc <type 29>)
 func (t <esc:0x1> <type 26>) UnmarshalText (data <esc:0x1> <type 6>) <type -19>
 func (t <esc:0x1> <type 26>) UnmarshalBinary (data <esc:0x1> <type 6>) <type -19>
 func (t <esc:0x1> <type 25>) Hour () <type -11>
 func (t <esc:0x1> <type 25>) .time.abs () <type -8>
 func (t <esc:0x1> <type 25>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 25>) Year () <type -11>
 func (t <esc:0x1> <type 26>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 26>) UnmarshalJSON (data <esc:0x1> <type 6>) <type -19>
 func (t <esc:0x1> <type 25>) Second () <type -11>
 func (t <esc:0x1> <type 25>) Month () <type 27>
 func (t <esc:0x12> <type 25>) Location () <type 29>
 func (t <esc:0x1> <type 25>) GobEncode () (? <type 6>, ? <type -19>)
type 26 *<type 25>
type 27 "time.Month" <type -11>
 func (m <type 27>) String () <type -16>
type 28 "time.Duration" <type -4>
 func (d <type 28>) String () <type -16>
 func (d <type 28>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 28>) Seconds () <type -10>
 func (d <type 28>) Minutes () <type -10>
 func (d <type 28>) Hours () <type -10>
 func (d <type 28>) Truncate (m <type 28>) <type 28>
 func (d <type 28>) Round (m <type 28>) <type 28>
type 29 *<type 30>
type 30 "time.Location" <type 31>
 func (l <esc:0x12> <type 29>) .time.get () <type 29>
 func (l <esc:0x22> <type 29>) String () <type -16>
 func (l <esc:0x32> <type 29>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 29>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 29>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 29>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 31 struct { .time.name <type -16>; .time.zone <type 32>; .time.tx <type 35>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 38>; }
type 32 [] <type 33>
type 33 ".time.zone" <type 34>
type 34 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 35 [] <type 36>
type 36 ".time.zoneTrans" <type 37>
type 37 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 38 *<type 33>
type 39 "time.Weekday" <type -11>
 func (d <type 39>) String () <type -16>
type 40 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 29>; }
type 41 chan <- <type 42>
type 42 struct { }
type 43 interface { }
type 44 *<type 45>
type 45 "mime/multipart.Reader" <type 55>
 func (r <type 44>) ReadForm (maxMemory <type -4>) (? <type 46>, ? <type -19>)
 func (r <type 44>) .mime/multipart.readForm (maxMemory <type -4>) (_ <type 46>, err <type -19>)
 func (mr <esc:0x1> <type 44>) .mime/multipart.isBoundaryDelimiterLine (line <esc:0x1> <type 6>) (ret <type -15>)
 func (r <type 44>) NextPart () (? <type 51>, ? <type -19>)
 func (mr <esc:0x1> <type 44>) .mime/multipart.isFinalBoundary (line <esc:0x1> <type 6>) <type -15>
type 46 *<type 47>
type 47 "mime/multipart.Form" <type 48>
 func (f <esc:0x1> <type 46>) RemoveAll () <type -19>
type 48 struct { Value <type 21>; File <type 49>; }
type 49 map [<type -16>] <type 50>
type 50 [] <type 17>
type 51 *<type 52>
type 52 "mime/multipart.Part" <type 53>
 func (p <esc:0x1> <type 51>) FormName () <type -16>
 func (p <esc:0x1> <type 51>) FileName () <type -16>
 func (bp <esc:0x9> <type 51>) .mime/multipart.populateHeaders () <type -19>
 func (p <esc:0x1> <type 51>) .mime/multipart.parseContentDisposition ()
 func (p <esc:0x9> <type 51>) Read (d <type 6>) (n <type -11>, err <type -19>)
 func (p <type 51>) Close () <type -19>
type 53 struct { Header <type 20>; .mime/multipart.mr <type 44>; .mime/multipart.disposition <type -16>; .mime/multipart.dispositionParams <type 54>; .mime/multipart.r <type 4>; .mime/multipart.n <type -11>; .mime/multipart.total <type -4>; .mime/multipart.err <type -19>; .mime/multipart.readErr <type -19>; }
type 54 map [<type -16>] <type -16>
type 55 struct { .mime/multipart.bufReader <type 56>; .mime/multipart.currentPart <type 51>; .mime/multipart.partsRead <type -11>; .mime/multipart.nl <type 6>; .mime/multipart.nlDashBoundary <type 6>; .mime/multipart.dashBoundaryDash <type 6>; .mime/multipart.dashBoundary <type 6>; }
type 56 *<type 57>
type 57 "bufio.Reader" <type 60>
 func (b <esc:0x9> <type 56>) .bufio.writeBuf (w <type 58>) (? <type -4>, ? <type -19>)
 func (b <esc:0x10a> <type 56>) WriteTo (w <type 58>) (n <type -4>, err <type -19>)
 func (b <esc:0x10a> <type 56>) ReadString (delim <type -20>) (? <type -16>, ? <type -19>)
 func (b <esc:0x82a> <type 56>) ReadLine () (line <type 6>, isPrefix <type -15>, err <type -19>)
 func (b <esc:0x1> <type 56>) Size () <type -11>
 func (b <esc:0x9> <type 56>) Reset (r <type 4>)
 func (b <esc:0x9> <type 56>) .bufio.fill ()
 func (b <esc:0x1> <type 56>) UnreadByte () <type -19>
 func (b <esc:0x80a> <type 56>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x1> <type 56>) .bufio.reset (buf <type 6>, r <type 4>)
 func (b <esc:0x22> <type 56>) .bufio.readErr () <type -19>
 func (b <esc:0x1> <type 56>) UnreadRune () <type -19>
 func (b <esc:0x12a> <type 56>) ReadSlice (delim <type -20>) (line <type 6>, err <type -19>)
 func (b <esc:0x12a> <type 56>) Peek (n <type -11>) (? <type 6>, ? <type -19>)
 func (b <esc:0x10a> <type 56>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x10a> <type 56>) Discard (n <type -11>) (discarded <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 56>) Read (p <type 6>) (n <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 56>) ReadBytes (delim <type -20>) (? <type 6>, ? <type -19>)
 func (b <esc:0x1> <type 56>) Buffered () <type -11>
type 58 "io.Writer" <type 59>
type 59 interface { Write (p <type 6>) (n <type -11>, err <type -19>); }
type 60 struct { .bufio.buf <type 6>; .bufio.rd <type 4>; .bufio.r <type -11>; .bufio.w <type -11>; .bufio.err <type -19>; .bufio.lastByte <type -11>; .bufio.lastRuneSize <type -11>; }
type 61 "net/http.Header" <type 21>
 func (h <esc:0x1> <type 61>) .net/http.writeSubset (w <type 58>, exclude <esc:0x1> <type 62>, trace <esc:0x1> <type 63>) <type -19>
 func (h <esc:0x1> <type 61>) .net/http.sortedKeyValues (exclude <esc:0x1> <type 62>) (kvs <type 205>, hs <type 208>)
 func (h <esc:0x1> <type 61>) Write (w <type 58>) <type -19>
 func (h <esc:0x1> <type 61>) Del (key <esc:0x1> <type -16>)
 func (h <esc:0x1> <type 61>) .net/http.has (key <esc:0x1> <type -16>) <type -15>
 func (h <esc:0x1> <type 61>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 61>) WriteSubset (w <type 58>, exclude <esc:0x1> <type 62>) <type -19>
 func (h <esc:0x1> <type 61>) .net/http.clone () <type 61>
 func (h <esc:0x1> <type 61>) .net/http.write (w <type 58>, trace <esc:0x1> <type 63>) <type -19>
 func (h <esc:0x1> <type 61>) .net/http.get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 61>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x9> <type 61>) Add (key <type -16>, value <type -16>)
type 62 map [<type -16>] <type -15>
type 63 *<type 64>
type 64 "net/http/httptrace.ClientTrace" <type 65>
 func (t <type 63>) .net/http/httptrace.compose (old <type 63>)
 func (t <esc:0x1> <type 63>) .net/http/httptrace.hasNetHooks () <type -15>
type 65 struct { GetConn <type 66>; GotConn <type 67>; PutIdleConn <type 74>; GotFirstResponseByte <type 75>; Got100Continue <type 75>; Got1xxResponse <type 76>; DNSStart <type 77>; DNSDone <type 80>; ConnectStart <type 103>; ConnectDone <type 104>; TLSHandshakeStart <type 75>; TLSHandshakeDone <type 105>; WroteHeaderField <type 201>; WroteHeaders <type 75>; Wait100Continue <type 75>; WroteRequest <type 202>; }
type 66 (hostPort <type -16>)
type 67 (? <type 68>)
type 68 "net/http/httptrace.GotConnInfo" <type 69>
type 69 struct { Conn <type 70>; Reused <type -15>; WasIdle <type -15>; IdleTime <type 28>; }
type 70 "net.Conn" <type 71>
type 71 interface { Close () <type -19>; LocalAddr () <type 72>; Read (b <type 6>) (n <type -11>, err <type -19>); RemoteAddr () <type 72>; SetDeadline (t <type 25>) <type -19>; SetReadDeadline (t <type 25>) <type -19>; SetWriteDeadline (t <type 25>) <type -19>; Write (b <type 6>) (n <type -11>, err <type -19>); }
type 72 "net.Addr" <type 73>
type 73 interface { Network () <type -16>; String () <type -16>; }
type 74 (err <type -19>)
type 75 ()
type 76 (code <type -11>, header <type 20>) <type -19>
type 77 (? <type 78>)
type 78 "net/http/httptrace.DNSStartInfo" <type 79>
type 79 struct { Host <type -16>; }
type 80 (? <type 81>)
type 81 "net/http/httptrace.DNSDoneInfo" <type 82>
type 82 struct { Addrs <type 83>; Err <type -19>; Coalesced <type -15>; }
type 83 [] <type 84>
type 84 "net.IPAddr" <type 99>
 func (a <esc:0x1> <type 85>) Network () ($ret189 <type -16>)
 func (a <esc:0x1> <type 85>) String () <type -16>
 func (a <esc:0x1> <type 85>) .net.isWildcard () <type -15>
 func (a <esc:0x12> <type 85>) .net.opAddr () <type 72>
 func (a <esc:0x1> <type 85>) .net.family () <type -11>
 func (a <esc:0x1> <type 85>) .net.sockaddr (family <type -11>) (? <type 86>, ? <type -19>)
 func (a <esc:0xa> <type 85>) .net.toLocal (net <esc:0x1> <type -16>) <type 97>
type 85 *<type 84>
type 86 "syscall.Sockaddr" <type 87>
type 87 interface { .syscall.sockaddr () (ptr <type 88>, len <type 95>, err <type -19>); }
type 88 *<type 89>
type 89 "syscall.RawSockaddrAny" <type 90>
type 90 struct { Addr <type 91>; Pad <type 94>; }
type 91 "syscall.RawSockaddr" <type 92>
type 92 struct { Family <type -6>; Data <type 93>; }
type 93 [14 ] <type -1>
type 94 [96 ] <type -1>
type 95 "syscall.Socklen_t" <type 96>
type 96 ".syscall._socklen_t" <type -7>
type 97 ".net.sockaddr" <type 98>
type 98 interface { ? <type 72>; .net.family () <type -11>; .net.isWildcard () <type -15>; .net.sockaddr (family <type -11>) (? <type 86>, ? <type -19>); .net.toLocal (net <type -16>) <type 97>; }
type 99 struct { IP <type 100>; Zone <type -16>; }
type 100 "net.IP" <type 6>
 func (ip <esc:0x1> <type 100>) Equal (x <esc:0x1> <type 100>) <type -15>
 func (ip <esc:0x1> <type 100>) Mask (mask <esc:0x1> <type 101>) <type 100>
 func (ip <esc:0x1> <type 100>) IsLinkLocalUnicast () <type -15>
 func (ip <esc:0x1> <type 100>) MarshalText () (? <type 6>, ? <type -19>)
 func (ip <esc:0x1> <type 100>) String () <type -16>
 func (ip <esc:0x1> <type 100>) DefaultMask () <type 101>
 func (ip <esc:0x1> <type 100>) .net.matchAddrFamily (x <esc:0x1> <type 100>) <type -15>
 func (ip <esc:0x1> <type 102>) UnmarshalText (text <esc:0x1> <type 6>) <type -19>
 func (ip <esc:0x1> <type 100>) IsGlobalUnicast () <type -15>
 func (ip <esc:0x12> <type 100>) To4 () <type 100>
 func (ip <esc:0x12> <type 100>) To16 () <type 100>
 func (ip <esc:0x1> <type 100>) IsLoopback () <type -15>
 func (ip <esc:0x1> <type 100>) IsMulticast () <type -15>
 func (ip <esc:0x1> <type 100>) IsUnspecified () <type -15>
 func (ip <esc:0x1> <type 100>) IsInterfaceLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 100>) IsLinkLocalMulticast () <type -15>
type 101 "net.IPMask" <type 6>
 func (m <esc:0x1> <type 101>) String () <type -16>
 func (m <esc:0x1> <type 101>) Size () (ones <type -11>, bits <type -11>)
type 102 *<type 100>
type 103 (network <type -16>, addr <type -16>)
type 104 (network <type -16>, addr <type -16>, err <type -19>)
type 105 (? <type 106>, ? <type -19>)
type 106 "crypto/tls.ConnectionState" <type 108>
 func (cs <esc:0x1b2> <type 107>) ExportKeyingMaterial (label <type -16>, context <type 6>, length <type -11>) (? <type 6>, ? <type -19>)
type 107 *<type 106>
type 108 struct { Version <type -6>; HandshakeComplete <type -15>; DidResume <type -15>; CipherSuite <type -6>; NegotiatedProtocol <type -16>; NegotiatedProtocolIsMutual <type -15>; ServerName <type -16>; PeerCertificates <type 109>; VerifiedChains <type 174>; SignedCertificateTimestamps <type 169>; OCSPResponse <type 6>; .crypto/tls.ekm <type 200>; TLSUnique <type 6>; }
type 109 [] <type 110>
type 110 *<type 111>
type 111 "crypto/x509.Certificate" <type 179>
 func (c <esc:0x32> <type 110>) .crypto/x509.getSANExtension () <type 6>
 func (c <esc:0x9> <type 110>) CreateCRL (rand <type 4>, priv <type 43>, revokedCerts <esc:0x9> <type 112>, now <type 25>, expiry <type 25>) (crlBytes <type 6>, err <type -19>)
 func (c <esc:0x9> <type 110>) .crypto/x509.commonNameAsHostname () <type -15>
 func (c <esc:0x9> <type 110>) CheckCRLSignature (crl <esc:0x9> <type 146>) <type -19>
 func (c <type 110>) .crypto/x509.isValid (certType <type -11>, currentChain <esc:0x9> <type 109>, opts <esc:0x1> <type 164>) <type -19>
 func (c <esc:0x1> <type 110>) .crypto/x509.systemVerify (opts <esc:0x1> <type 164>) (chains <type 174>, err <type -19>)
 func (c <esc:0x12> <type 110>) .crypto/x509.checkNameConstraints (count <esc:0x1> <type 175>, maxConstraintComparisons <type -11>, nameType <type -16>, name <type -16>, parsedName <type 43>, match <esc:0x9> <type 176>, permitted <type 43>, excluded <type 43>) <type -19>
 func (c <type 110>) Verify (opts <type 165>) (chains <type 174>, err <type -19>)
 func (c <type 110>) .crypto/x509.buildChains (cache <esc:0x1> <type 177>, currentChain <esc:0x9> <type 109>, sigChecks <esc:0x1> <type 175>, opts <esc:0x9> <type 164>) (chains <type 174>, err <type -19>)
 func (c <esc:0x1a> <type 110>) VerifyHostname (h <type -16>) <type -19>
 func (c <esc:0x1> <type 110>) .crypto/x509.hasNameConstraints () <type -15>
 func (c <esc:0x1> <type 110>) .crypto/x509.hasSANExtension () <type -15>
 func (c <esc:0x1> <type 110>) Equal (other <esc:0x1> <type 110>) <type -15>
 func (c <esc:0x9> <type 110>) CheckSignatureFrom (parent <esc:0x9> <type 110>) <type -19>
 func (c <esc:0x9> <type 110>) CheckSignature (algo <type 178>, signed <type 6>, signature <type 6>) <type -19>
type 112 [] <type 113>
type 113 "crypto/x509/pkix.RevokedCertificate" <type 114>
type 114 struct { SerialNumber <type 115>; RevocationTime <type 25>; Extensions <type 142> "asn1:\"optional\""; }
type 115 *<type 116>
type 116 "math/big.Int" <type 137>
 func (z <esc:0x9> <type 115>) Scan (s <type 117>, ch <type -21>) <type -19>
 func (x <esc:0x1> <type 115>) Text (base <type -11>) <type -16>
 func (x <esc:0x1> <type 115>) String () <type -16>
 func (z <esc:0x12> <type 115>) SetBits (abs <type 120>) <type 115>
 func (x <esc:0x1> <type 115>) IsInt64 () <type -15>
 func (z <esc:0x1a> <type 115>) Quo (x <esc:0x1> <type 115>, y <esc:0x1> <type 115>) <type 115>
 func (x <esc:0x1> <type 115>) Cmp (y <esc:0x1> <type 115>) (r <type -11>)
 func (z <esc:0x1a> <type 115>) Exp (x <esc:0x9> <type 115>, y <esc:0x1> <type 115>, m <esc:0x1> <type 115>) <type 115>
 func (x <esc:0x1> <type 115>) MarshalText () (text <type 6>, err <type -19>)
 func (x <esc:0x9> <type 115>) ProbablyPrime (n <type -11>) <type -15>
 func (z <esc:0x1a> <type 115>) Abs (x <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) Neg (x <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x9> <type 115>) UnmarshalText (text <type 6>) <type -19>
 func (x <esc:0x1> <type 115>) Format (s <type 122>, ch <type -21>)
 func (z <esc:0x1a> <type 115>) .math/big.modSqrt3Mod4Prime (x <esc:0x9> <type 115>, p <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) Add (x <esc:0x1> <type 115>, y <esc:0x1> <type 115>) <type 115>
 func (x <esc:0x22> <type 115>) Bits () <type 120>
 func (z <esc:0x1a> <type 115>) ModInverse (g <esc:0x1> <type 115>, n <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) Set (x <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) .math/big.modSqrtTonelliShanks (x <esc:0x9> <type 115>, p <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) SetBytes (buf <esc:0x1> <type 6>) <type 115>
 func (z <esc:0x1a> <type 115>) SetUint64 (x <type -8>) <type 115>
 func (x <esc:0x1> <type 115>) Int64 () <type -4>
 func (z <esc:0x1a> <type 115>) ModSqrt (x <esc:0x9> <type 115>, p <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) Rsh (x <esc:0x1> <type 115>, n <type -12>) <type 115>
 func (z <esc:0x1a> <type 115>) SetInt64 (x <type -4>) <type 115>
 func (x <esc:0x1> <type 115>) MarshalJSON () (? <type 6>, ? <type -19>)
 func (z <esc:0x1a> <type 115>) MulRange (a <type -4>, b <type -4>) <type 115>
 func (x <esc:0x1> <type 115>) Sign () <type -11>
 func (z <esc:0x9> <type 115>) UnmarshalJSON (text <type 6>) <type -19>
 func (z <esc:0x1a> <type 115>) QuoRem (x <esc:0x1> <type 115>, y <esc:0x1> <type 115>, r <esc:0x8a> <type 115>) (? <type 115>, ? <type 115>)
 func (z <esc:0x9> <type 115>) GobDecode (buf <esc:0x1> <type 6>) <type -19>
 func (z <esc:0x1a> <type 115>) .math/big.scan (r <type 124>, base <type -11>) (? <type 115>, ? <type -11>, ? <type -19>)
 func (z <esc:0x1a> <type 115>) SetString (s <type -16>, base <type -11>) (? <type 115>, ? <type -15>)
 func (z <esc:0x1a> <type 115>) Mul (x <esc:0x1> <type 115>, y <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) Mod (x <esc:0x1> <type 115>, y <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) .math/big.setFromScanner (r <type 124>, base <type -11>) (? <type 115>, ? <type -15>)
 func (z <esc:0x1a> <type 115>) And (x <esc:0x1> <type 115>, y <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) Sub (x <esc:0x1> <type 115>, y <esc:0x1> <type 115>) <type 115>
 func (x <esc:0x1> <type 115>) CmpAbs (y <esc:0x1> <type 115>) <type -11>
 func (z <esc:0x1a> <type 115>) Div (x <esc:0x1> <type 115>, y <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) Rem (x <esc:0x1> <type 115>, y <esc:0x1> <type 115>) <type 115>
 func (x <esc:0x1> <type 115>) IsUint64 () <type -15>
 func (z <esc:0x1a> <type 115>) DivMod (x <esc:0x1> <type 115>, y <esc:0x1> <type 115>, m <esc:0x8a> <type 115>) (? <type 115>, ? <type 115>)
 func (z <esc:0x1a> <type 115>) Binomial (n <type -4>, k <type -4>) <type 115>
 func (x <esc:0x1> <type 115>) Uint64 () <type -8>
 func (x <esc:0x1> <type 115>) BitLen () <type -11>
 func (z <esc:0x1a> <type 115>) GCD (x <esc:0x9> <type 115>, y <esc:0x9> <type 115>, a <esc:0x1> <type 115>, b <esc:0x1> <type 115>) <type 115>
 func (x <esc:0x1> <type 115>) Bit (i <type -11>) <type -12>
 func (z <esc:0x1a> <type 115>) Or (x <esc:0x1> <type 115>, y <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x12> <type 115>) .math/big.lehmerGCD (x <esc:0x1> <type 115>, y <esc:0x9> <type 115>, a <esc:0x1> <type 115>, b <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) Rand (rnd <esc:0x9> <type 128>, n <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) Xor (x <esc:0x1> <type 115>, y <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) Sqrt (x <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) .math/big.modSqrt5Mod8Prime (x <esc:0x1> <type 115>, p <esc:0x1> <type 115>) <type 115>
 func (z <esc:0x1a> <type 115>) Lsh (x <esc:0x1> <type 115>, n <type -12>) <type 115>
 func (z <esc:0x1a> <type 115>) SetBit (x <esc:0x1> <type 115>, i <type -11>, b <type -12>) <type 115>
 func (z <esc:0x1a> <type 115>) AndNot (x <esc:0x1> <type 115>, y <esc:0x1> <type 115>) <type 115>
 func (x <esc:0x1> <type 115>) Bytes () <type 6>
 func (z <esc:0x1a> <type 115>) Not (x <esc:0x1> <type 115>) <type 115>
 func (x <esc:0x1> <type 115>) GobEncode () (? <type 6>, ? <type -19>)
 func (x <esc:0x1> <type 115>) Append (buf <esc:0x12> <type 6>, base <type -11>) <type 6>
type 117 "fmt.ScanState" <type 118>
type 118 interface { Read (buf <type 6>) (n <type -11>, err <type -19>); ReadRune () (r <type -21>, size <type -11>, err <type -19>); SkipSpace (); Token (skipSpace <type -15>, f <type 119>) (token <type 6>, err <type -19>); UnreadRune () <type -19>; Width () (wid <type -11>, ok <type -15>); }
type 119 (? <type -21>) <type -15>
type 120 [] <type 121>
type 121 "math/big.Word" <type -12>
type 122 "fmt.State" <type 123>
type 123 interface { Flag (c <type -11>) <type -15>; Precision () (prec <type -11>, ok <type -15>); Width () (wid <type -11>, ok <type -15>); Write (b <type 6>) (n <type -11>, err <type -19>); }
type 124 "io.ByteScanner" <type 125>
type 125 interface { ? <type 126>; UnreadByte () <type -19>; }
type 126 "io.ByteReader" <type 127>
type 127 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 128 *<type 129>
type 129 "math/rand.Rand" <type 132>
 func (r <esc:0x9> <type 128>) Perm (n <type -11>) <type 130>
 func (r <esc:0x9> <type 128>) Uint64 () <type -8>
 func (r <esc:0x9> <type 128>) .math/rand.int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 128>) Float32 () <type -9>
 func (r <esc:0x9> <type 128>) Seed (seed <type -4>)
 func (r <esc:0x9> <type 128>) Float64 () <type -10>
 func (r <esc:0x9> <type 128>) Int63 () <type -4>
 func (r <esc:0x9> <type 128>) NormFloat64 () <type -10>
 func (r <esc:0x9> <type 128>) ExpFloat64 () <type -10>
 func (r <esc:0x9> <type 128>) Int63n (n <type -4>) <type -4>
 func (r <esc:0x9> <type 128>) Int () <type -11>
 func (r <esc:0x9> <type 128>) Intn (n <type -11>) <type -11>
 func (r <esc:0x9> <type 128>) Int31n (n <type -3>) <type -3>
 func (r <type 128>) Read (p <esc:0x1> <type 6>) (n <type -11>, err <type -19>)
 func (r <esc:0x9> <type 128>) Int31 () <type -3>
 func (r <esc:0x9> <type 128>) Shuffle (n <type -11>, swap <esc:0x1> <type 131>)
 func (r <esc:0x9> <type 128>) Uint32 () <type -7>
type 130 [] <type -11>
type 131 (i <type -11>, j <type -11>)
type 132 struct { .math/rand.src <type 133>; .math/rand.s64 <type 135>; .math/rand.readVal <type -4>; .math/rand.readPos <type -1>; }
type 133 "math/rand.Source" <type 134>
type 134 interface { Int63 () <type -4>; Seed (seed <type -4>); }
type 135 "math/rand.Source64" <type 136>
type 136 interface { ? <type 133>; Uint64 () <type -8>; }
type 137 struct { .math/big.neg <type -15>; .math/big.abs <type 138>; }
type 138 ".math/big.nat" <type 120>
 func (z <esc:0x12> <type 138>) .math/big.set (x <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x12> <type 138>) .math/big.random (rand <esc:0x9> <type 128>, limit <esc:0x1> <type 138>, n <type -11>) <type 138>
 func (z <esc:0x12> <type 138>) .math/big.setBytes (buf <esc:0x1> <type 6>) <type 138>
 func (n <esc:0x1> <type 138>) .math/big.probablyPrimeMillerRabin (reps <type -11>, force2 <type -15>) <type -15>
 func (z <esc:0x12> <type 138>) .math/big.scan (r <type 124>, base <type -11>, fracOk <type -15>) (res <type 138>, b <type -11>, count <type -11>, err <type -19>)
 func (z <esc:0x12> <type 138>) .math/big.expNNMontgomery (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>, m <esc:0x1> <type 138>) <type 138>
 func (z <type 138>) .math/big.add (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (q <esc:0x1> <type 138>) .math/big.convertWords (s <esc:0x1> <type 6>, b <type 121>, ndigits <type -11>, bb <type 121>, table <esc:0x1> <type 139>)
 func (z <type 138>) .math/big.expNNWindowed (x <type 138>, y <esc:0x1> <type 138>, m <esc:0x1> <type 138>) <type 138>
 func (z <type 138>) .math/big.expWW (x <type 121>, y <type 121>) <type 138>
 func (z <esc:0x12> <type 138>) .math/big.montgomery (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>, m <esc:0x1> <type 138>, k <type 121>, n <type -11>) <type 138>
 func (z <esc:0x12> <type 138>) .math/big.shr (x <esc:0x1> <type 138>, s <type -12>) <type 138>
 func (x <esc:0x1> <type 138>) .math/big.bitLen () <type -11>
 func (z <esc:0x12> <type 138>) .math/big.divLarge (u <esc:0x82> <type 138>, uIn <esc:0x1> <type 138>, vIn <esc:0x1> <type 138>) (q <type 138>, r <type 138>)
 func (x <esc:0x1> <type 138>) .math/big.cmp (y <esc:0x1> <type 138>) (r <type -11>)
 func (z <esc:0x12> <type 138>) .math/big.sub (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x12> <type 138>) .math/big.shl (x <esc:0x1> <type 138>, s <type -12>) <type 138>
 func (x <esc:0x1> <type 138>) .math/big.sticky (i <type -12>) <type -12>
 func (z <type 138>) .math/big.sqrt (x <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x12> <type 138>) .math/big.make (n <type -11>) <type 138>
 func (z <type 138>) .math/big.mulRange (a <type -8>, b <type -8>) <type 138>
 func (n <type 138>) .math/big.probablyPrimeLucas () <type -15>
 func (z <esc:0x12> <type 138>) .math/big.setWord (x <type 121>) <type 138>
 func (z <esc:0x12> <type 138>) .math/big.divW (x <esc:0x1> <type 138>, y <type 121>) (q <type 138>, r <type 121>)
 func (x <esc:0x1> <type 138>) .math/big.itoa (neg <type -15>, base <type -11>) <type 6>
 func (z <esc:0x1> <type 138>) .math/big.clear ()
 func (z <esc:0x12> <type 138>) .math/big.div (z2 <esc:0x82> <type 138>, u <esc:0x1> <type 138>, v <esc:0x1> <type 138>) (q <type 138>, r <type 138>)
 func (z <esc:0x12> <type 138>) .math/big.setUint64 (x <type -8>) <type 138>
 func (z <esc:0x12> <type 138>) .math/big.and (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x12> <type 138>) .math/big.setBit (x <esc:0x1> <type 138>, i <type -12>, b <type -12>) <type 138>
 func (x <esc:0x1> <type 138>) .math/big.utoa (base <type -11>) <type 6>
 func (z <esc:0x12> <type 138>) .math/big.norm () <type 138>
 func (z <type 138>) .math/big.sqr (x <esc:0x1> <type 138>) <type 138>
 func (x <esc:0x1> <type 138>) .math/big.trailingZeroBits () <type -12>
 func (x <esc:0x1> <type 138>) .math/big.bit (i <type -12>) <type -12>
 func (z <type 138>) .math/big.expNN (x <type 138>, y <esc:0x1> <type 138>, m <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x12> <type 138>) .math/big.mulAddWW (x <esc:0x1> <type 138>, y <type 121>, r <type 121>) <type 138>
 func (z <type 138>) .math/big.mul (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x12> <type 138>) .math/big.andNot (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x12> <type 138>) .math/big.or (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1> <type 138>) .math/big.bytes (buf <esc:0x1> <type 6>) (i <type -11>)
 func (z <esc:0x12> <type 138>) .math/big.xor (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (x <esc:0x1> <type 138>) .math/big.modW (d <type 121>) (r <type 121>)
type 139 [] <type 140>
type 140 ".math/big.divisor" <type 141>
type 141 struct { .math/big.bbb <type 138>; .math/big.nbits <type -11>; .math/big.ndigits <type -11>; }
type 142 [] <type 143>
type 143 "crypto/x509/pkix.Extension" <type 144>
type 144 struct { Id <type 145>; Critical <type -15> "asn1:\"optional\""; Value <type 6>; }
type 145 "encoding/asn1.ObjectIdentifier" <type 130>
 func (oi <esc:0x1> <type 145>) Equal (other <esc:0x1> <type 145>) <type -15>
 func (oi <esc:0x1> <type 145>) String () <type -16>
type 146 *<type 147>
type 147 "crypto/x509/pkix.CertificateList" <type 148>
 func (certList <esc:0x1> <type 146>) HasExpired (now <esc:0x1> <type 25>) <type -15>
type 148 struct { TBSCertList <type 149>; SignatureAlgorithm <type 152>; SignatureValue <type 162>; }
type 149 "crypto/x509/pkix.TBSCertificateList" <type 150>
type 150 struct { Raw <type 151>; Version <type -11> "asn1:\"optional,default:0\""; Signature <type 152>; Issuer <type 156>; ThisUpdate <type 25>; NextUpdate <type 25> "asn1:\"optional\""; RevokedCertificates <type 112> "asn1:\"optional\""; Extensions <type 142> "asn1:\"tag:0,optional,explicit\""; }
type 151 "encoding/asn1.RawContent" <type 6>
type 152 "crypto/x509/pkix.AlgorithmIdentifier" <type 153>
type 153 struct { Algorithm <type 145>; Parameters <type 154> "asn1:\"optional\""; }
type 154 "encoding/asn1.RawValue" <type 155>
type 155 struct { Class <type -11>; Tag <type -11>; IsCompound <type -15>; Bytes <type 6>; FullBytes <type 6>; }
type 156 "crypto/x509/pkix.RDNSequence" <type 157>
 func (r <esc:0x9> <type 156>) String () <type -16>
type 157 [] <type 158>
type 158 "crypto/x509/pkix.RelativeDistinguishedNameSET" <type 159>
type 159 [] <type 160>
type 160 "crypto/x509/pkix.AttributeTypeAndValue" <type 161>
type 161 struct { Type <type 145>; Value <type 43>; }
type 162 "encoding/asn1.BitString" <type 163>
 func (b <esc:0x1> <type 162>) At (i <type -11>) <type -11>
 func (b <esc:0x12> <type 162>) RightAlign () <type 6>
type 163 struct { Bytes <type 6>; BitLength <type -11>; }
type 164 *<type 165>
type 165 "crypto/x509.VerifyOptions" <type 166>
type 166 struct { DNSName <type -16>; Intermediates <type 167>; Roots <type 167>; CurrentTime <type 25>; KeyUsages <type 172>; MaxConstraintComparisions <type -11>; }
type 167 *<type 168>
type 168 "crypto/x509.CertPool" <type 170>
 func (s <esc:0x9> <type 167>) .crypto/x509.copy () <type 167>
 func (s <esc:0x1> <type 167>) .crypto/x509.findPotentialParents (cert <esc:0x1> <type 110>) <type 130>
 func (s <esc:0x1> <type 167>) .crypto/x509.contains (cert <esc:0x1> <type 110>) <type -15>
 func (s <esc:0x9> <type 167>) AddCert (cert <type 110>)
 func (s <esc:0x9> <type 167>) AppendCertsFromPEM (pemCerts <type 6>) (ok <type -15>)
 func (s <esc:0x9> <type 167>) Subjects () <type 169>
type 169 [] <type 6>
type 170 struct { .crypto/x509.bySubjectKeyId <type 171>; .crypto/x509.byName <type 171>; .crypto/x509.certs <type 109>; }
type 171 map [<type -16>] <type 130>
type 172 [] <type 173>
type 173 "crypto/x509.ExtKeyUsage" <type -11>
type 174 [] <type 109>
type 175 *<type -11>
type 176 (parsedName <type 43>, constraint <type 43>) (match <type -15>, err <type -19>)
type 177 map [<type 110>] <type 174>
type 178 "crypto/x509.SignatureAlgorithm" <type -11>
 func (algo <type 178>) .crypto/x509.isRSAPSS () <type -15>
 func (algo <type 178>) String () <type -16>
type 179 struct { Raw <type 6>; RawTBSCertificate <type 6>; RawSubjectPublicKeyInfo <type 6>; RawSubject <type 6>; RawIssuer <type 6>; Signature <type 6>; SignatureAlgorithm <type 178>; PublicKeyAlgorithm <type 180>; PublicKey <type 43>; Version <type -11>; SerialNumber <type 115>; Issuer <type 181>; Subject <type 181>; NotBefore <type 25>; NotAfter <type 25>; KeyUsage <type 185>; Extensions <type 142>; ExtraExtensions <type 142>; UnhandledCriticalExtensions <type 186>; ExtKeyUsage <type 172>; UnknownExtKeyUsage <type 186>; BasicConstraintsValid <type -15>; IsCA <type -15>; MaxPathLen <type -11>; MaxPathLenZero <type -15>; SubjectKeyId <type 6>; AuthorityKeyId <type 6>; OCSPServer <type 22>; IssuingCertificateURL <type 22>; DNSNames <type 22>; EmailAddresses <type 22>; IPAddresses <type 187>; URIs <type 188>; PermittedDNSDomainsCritical <type -15>; PermittedDNSDomains <type 22>; ExcludedDNSDomains <type 22>; PermittedIPRanges <type 196>; ExcludedIPRanges <type 196>; PermittedEmailAddresses <type 22>; ExcludedEmailAddresses <type 22>; PermittedURIDomains <type 22>; ExcludedURIDomains <type 22>; CRLDistributionPoints <type 22>; PolicyIdentifiers <type 186>; }
type 180 "crypto/x509.PublicKeyAlgorithm" <type -11>
 func (algo <type 180>) String () <type -16>
type 181 "crypto/x509/pkix.Name" <type 184>
 func (n <type 181>) String () <type -16>
 func (n <type 181>) ToRDNSequence () (ret <type 156>)
 func (n <esc:0x1> <type 181>) .crypto/x509/pkix.appendRDNs (in <esc:0x1a> <type 156>, values <esc:0x9> <type 22>, oid <type 145>) <type 156>
 func (n <esc:0x9> <type 182>) FillFromRDNSequence (rdns <esc:0x9> <type 183>)
type 182 *<type 181>
type 183 *<type 156>
type 184 struct { Country <type 22>; Organization <type 22>; OrganizationalUnit <type 22>; Locality <type 22>; Province <type 22>; StreetAddress <type 22>; PostalCode <type 22>; SerialNumber <type -16>; CommonName <type -16>; Names <type 159>; ExtraNames <type 159>; }
type 185 "crypto/x509.KeyUsage" <type -11>
type 186 [] <type 145>
type 187 [] <type 100>
type 188 [] <type 189>
type 189 *<type 190>
type 190 "net/url.URL" <type 192>
 func (u <esc:0x1> <type 189>) UnmarshalBinary (text <esc:0x1> <type 6>) <type -19>
 func (u <esc:0x1> <type 189>) MarshalBinary () (text <type 6>, err <type -19>)
 func (u <esc:0x9> <type 189>) Query () <type 191>
 func (u <esc:0xa> <type 189>) ResolveReference (ref <esc:0xa> <type 189>) <type 189>
 func (u <esc:0x22> <type 189>) RequestURI () <type -16>
 func (u <esc:0x9> <type 189>) Parse (ref <type -16>) (? <type 189>, ? <type -19>)
 func (u <esc:0x1> <type 189>) IsAbs () <type -15>
 func (u <esc:0x1> <type 189>) String () <type -16>
 func (u <esc:0x22> <type 189>) Hostname () <type -16>
 func (u <esc:0x22> <type 189>) EscapedPath () <type -16>
 func (u <esc:0x22> <type 189>) Port () <type -16>
 func (u <esc:0x1> <type 189>) .net/url.setPath (p <type -16>) <type -19>
type 191 "net/url.Values" <type 21>
 func (v <esc:0x1> <type 191>) Encode () <type -16>
 func (v <esc:0x1> <type 191>) Del (key <esc:0x1> <type -16>)
 func (v <esc:0x9> <type 191>) Add (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 191>) Set (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 191>) Get (key <esc:0x1> <type -16>) <type -16>
type 192 struct { Scheme <type -16>; Opaque <type -16>; User <type 193>; Host <type -16>; Path <type -16>; RawPath <type -16>; ForceQuery <type -15>; RawQuery <type -16>; Fragment <type -16>; }
type 193 *<type 194>
type 194 "net/url.Userinfo" <type 195>
 func (u <esc:0x22> <type 193>) Password () (? <type -16>, ? <type -15>)
 func (u <esc:0x22> <type 193>) String () <type -16>
 func (u <esc:0x22> <type 193>) Username () <type -16>
type 195 struct { .net/url.username <type -16>; .net/url.password <type -16>; .net/url.passwordSet <type -15>; }
type 196 [] <type 197>
type 197 *<type 198>
type 198 "net.IPNet" <type 199>
 func (n <esc:0x1> <type 197>) String () <type -16>
 func (n <esc:0x1> <type 197>) Network () ($ret178 <type -16>)
 func (n <esc:0x1> <type 197>) Contains (ip <esc:0x1> <type 100>) <type -15>
type 199 struct { IP <type 100>; Mask <type 101>; }
type 200 (label <type -16>, context <type 6>, length <type -11>) (? <type 6>, ? <type -19>)
type 201 (key <type -16>, value <type 22>)
type 202 (? <type 203>)
type 203 "net/http/httptrace.WroteRequestInfo" <type 204>
type 204 struct { Err <type -19>; }
type 205 [] <type 206>
type 206 ".net/http.keyValues" <type 207>
type 207 struct { .net/http.key <type -16>; .net/http.values <type 22>; }
type 208 *<type 209>
type 209 ".net/http.headerSorter" <type 210>
 func (s <esc:0x1> <type 208>) Less (i <type -11>, j <type -11>) <type -15>
 func (s <esc:0x9> <type 208>) Swap (i <type -11>, j <type -11>)
 func (s <esc:0x1> <type 208>) Len () <type -11>
type 210 struct { .net/http.kvs <type 205>; }
type 211 () <type -15>
type 212 *<type 213>
type 213 "net/http.Cookie" <type 214>
 func (c <esc:0x9> <type 212>) String () <type -16>
type 214 struct { Name <type -16>; Value <type -16>; Path <type -16>; Domain <type -16>; Expires <type 25>; RawExpires <type -16>; MaxAge <type -11>; Secure <type -15>; HttpOnly <type -15>; SameSite <type 215>; Raw <type -16>; Unparsed <type 22>; }
type 215 "net/http.SameSite" <type -11>
type 216 [] <type 212>
type 217 struct { Method <type -16>; URL <type 189>; Proto <type -16>; ProtoMajor <type -11>; ProtoMinor <type -11>; Header <type 61>; Body <type 218>; GetBody <type 220>; ContentLength <type -4>; TransferEncoding <type 22>; Close <type -15>; Host <type -16>; Form <type 191>; PostForm <type 191>; MultipartForm <type 46>; Trailer <type 61>; RemoteAddr <type -16>; RequestURI <type -16>; TLS <type 107>; Cancel <type 41>; Response <type 221>; .net/http.ctx <type 23>; }
type 218 "io.ReadCloser" <type 219>
type 219 interface { ? <type 4>; ? <type 15>; }
type 220 () (? <type 218>, ? <type -19>)
type 221 *<type 222>
type 222 "net/http.Response" <type 223>
 func (r <esc:0x1> <type 221>) .net/http.isProtocolSwitch () <type -15>
 func (r <esc:0x1> <type 221>) .net/http.bodyIsWritable () <type -15>
 func (r <esc:0x1> <type 221>) ProtoAtLeast (major <type -11>, minor <type -11>) <type -15>
 func (r <esc:0x9> <type 221>) Write (w <type 58>) <type -19>
 func (r <esc:0x9> <type 221>) Location () (? <type 189>, ? <type -19>)
 func (r <esc:0x9> <type 221>) .net/http.closeBody ()
 func (r <esc:0x1> <type 221>) Cookies () <type 216>
type 223 struct { Status <type -16>; StatusCode <type -11>; Proto <type -16>; ProtoMajor <type -11>; ProtoMinor <type -11>; Header <type 61>; Body <type 218>; ContentLength <type -4>; TransferEncoding <type 22>; Close <type -15>; Uncompressed <type -15>; Trailer <type 61>; Request <type 7>; TLS <type 107>; }
type 224 "net/http.Handler" <type 225>
type 225 interface { ServeHTTP (? <type 226>, ? <type 7>); }
type 226 "net/http.ResponseWriter" <type 227>
type 227 interface { Header () <type 61>; Write (? <type 6>) (? <type -11>, ? <type -19>); WriteHeader (statusCode <type -11>); }
type 228 *<type 2>
type 229 struct { Code <type -11>; HeaderMap <type 61>; Body <type 230>; Flushed <type -15>; .net/http/httptest.result <type 221>; .net/http/httptest.snapHeader <type 61>; .net/http/httptest.wroteHeader <type -15>; }
type 230 *<type 231>
type 231 "bytes.Buffer" <type 232>
 func (b <esc:0x22> <type 230>) .bytes.readSlice (delim <type -20>) (line <type 6>, err <type -19>)
 func (b <esc:0x1> <type 230>) ReadBytes (delim <type -20>) (line <type 6>, err <type -19>)
 func (b <esc:0x1> <type 230>) UnreadByte () <type -19>
 func (b <esc:0x1> <type 230>) UnreadRune () <type -19>
 func (b <esc:0x1> <type 230>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x1> <type 230>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x9> <type 230>) WriteTo (w <type 58>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 230>) Read (p <esc:0x1> <type 6>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 230>) Truncate (n <type -11>)
 func (b <esc:0x1> <type 230>) .bytes.tryGrowByReslice (n <type -11>) (? <type -11>, ? <type -15>)
 func (b <esc:0x1> <type 230>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x22> <type 230>) Bytes () <type 6>
 func (b <esc:0x1> <type 230>) String () <type -16>
 func (b <esc:0x1> <type 230>) Cap () <type -11>
 func (b <esc:0x1> <type 230>) Len () <type -11>
 func (b <esc:0x1> <type 230>) WriteRune (r <type -21>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 230>) .bytes.empty () <type -15>
 func (b <esc:0x1> <type 230>) Reset ()
 func (b <esc:0x22> <type 230>) Next (n <type -11>) <type 6>
 func (b <esc:0x1> <type 230>) .bytes.grow (n <type -11>) <type -11>
 func (b <esc:0x1> <type 230>) Grow (n <type -11>)
 func (b <esc:0x1> <type 230>) Write (p <esc:0x1> <type 6>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 230>) ReadString (delim <type -20>) (line <type -16>, err <type -19>)
 func (b <esc:0x1> <type 230>) WriteString (s <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (b <esc:0x9> <type 230>) ReadFrom (r <type 4>) (n <type -4>, err <type -19>)
type 232 struct { .bytes.buf <type 6>; .bytes.off <type -11>; .bytes.lastRead <type 233>; }
type 233 ".bytes.readOp" <type -1>
type 234 struct { URL <type -16>; Listener <type 235>; TLS <type 237>; Config <type 287>; .net/http/httptest.certificate <type 110>; .net/http/httptest.wg <type 396>; .net/http/httptest.mu <type 279>; .net/http/httptest.closed <type -15>; .net/http/httptest.conns <type 402>; .net/http/httptest.client <type 403>; }
type 235 "net.Listener" <type 236>
type 236 interface { Accept () (? <type 70>, ? <type -19>); Addr () <type 72>; Close () <type -19>; }
type 237 *<type 238>
type 238 "crypto/tls.Config" <type 258>
 func (c <esc:0x9> <type 237>) .crypto/tls.writeKeyLog (label <type -16>, clientRandom <type 6>, secret <type 6>) <type -19>
 func (c <type 237>) Clone () <type 237>
 func (c <esc:0x1a2> <type 237>) .crypto/tls.getCertificate (clientHello <type 239>) (? <type 248>, ? <type -19>)
 func (c <esc:0x9> <type 237>) BuildNameToCertificate ()
 func (c <type 237>) .crypto/tls.serverInit (originalConfig <type 237>)
 func (c <type 237>) .crypto/tls.ticketKeys () <type 252>
 func (c <esc:0x1> <type 237>) .crypto/tls.mutualVersion (isClient <type -15>, peerVersions <esc:0x1> <type 242>) (? <type -6>, ? <type -15>)
 func (c <type 237>) SetSessionTicketKeys (keys <esc:0x1> <type 256>)
 func (c <esc:0x22> <type 237>) .crypto/tls.rand () <type 4>
 func (c <esc:0x32> <type 237>) .crypto/tls.time () <type 25>
 func (c <esc:0x22> <type 237>) .crypto/tls.cipherSuites () <type 242>
 func (c <esc:0x22> <type 237>) .crypto/tls.curvePreferences () <type 243>
 func (c <esc:0x1> <type 237>) .crypto/tls.supportedVersions (isClient <type -15>) <type 242>
 func (c <esc:0x1> <type 237>) .crypto/tls.maxSupportedVersion (isClient <type -15>) <type -6>
type 239 *<type 240>
type 240 "crypto/tls.ClientHelloInfo" <type 241>
type 241 struct { CipherSuites <type 242>; ServerName <type -16>; SupportedCurves <type 243>; SupportedPoints <type 245>; SignatureSchemes <type 246>; SupportedProtos <type 22>; SupportedVersions <type 242>; Conn <type 70>; }
type 242 [] <type -6>
type 243 [] <type 244>
type 244 "crypto/tls.CurveID" <type -6>
type 245 [] <type -5>
type 246 [] <type 247>
type 247 "crypto/tls.SignatureScheme" <type -6>
type 248 *<type 249>
type 249 "crypto/tls.Certificate" <type 250>
type 250 struct { Certificate <type 169>; PrivateKey <type 251>; OCSPStaple <type 6>; SignedCertificateTimestamps <type 169>; Leaf <type 110>; }
type 251 "crypto.PrivateKey" <type 43>
type 252 [] <type 253>
type 253 ".crypto/tls.ticketKey" <type 254>
type 254 struct { .crypto/tls.keyName <type 255>; .crypto/tls.aesKey <type 255>; .crypto/tls.hmacKey <type 255>; }
type 255 [16 ] <type -20>
type 256 [] <type 257>
type 257 [32 ] <type -20>
type 258 struct { Rand <type 4>; Time <type 259>; Certificates <type 260>; NameToCertificate <type 261>; GetCertificate <type 262>; GetClientCertificate <type 263>; GetConfigForClient <type 267>; VerifyPeerCertificate <type 268>; RootCAs <type 167>; NextProtos <type 22>; ServerName <type -16>; ClientAuth <type 269>; ClientCAs <type 167>; InsecureSkipVerify <type -15>; CipherSuites <type 242>; PreferServerCipherSuites <type -15>; SessionTicketsDisabled <type -15>; SessionTicketKey <type 257>; ClientSessionCache <type 270>; MinVersion <type -6>; MaxVersion <type -6>; CurvePreferences <type 243>; DynamicRecordSizingDisabled <type -15>; Renegotiation <type 275>; KeyLogWriter <type 58>; .crypto/tls.serverInitOnce <type 276>; .crypto/tls.mutex <type 282>; .crypto/tls.sessionTicketKeys <type 252>; }
type 259 () <type 25>
type 260 [] <type 249>
type 261 map [<type -16>] <type 248>
type 262 (? <type 239>) (? <type 248>, ? <type -19>)
type 263 (? <type 264>) (? <type 248>, ? <type -19>)
type 264 *<type 265>
type 265 "crypto/tls.CertificateRequestInfo" <type 266>
type 266 struct { AcceptableCAs <type 169>; SignatureSchemes <type 246>; }
type 267 (? <type 239>) (? <type 237>, ? <type -19>)
type 268 (rawCerts <type 169>, verifiedChains <type 174>) <type -19>
type 269 "crypto/tls.ClientAuthType" <type -11>
type 270 "crypto/tls.ClientSessionCache" <type 271>
type 271 interface { Get (sessionKey <type -16>) (session <type 272>, ok <type -15>); Put (sessionKey <type -16>, cs <type 272>); }
type 272 *<type 273>
type 273 "crypto/tls.ClientSessionState" <type 274>
type 274 struct { .crypto/tls.sessionTicket <type 245>; .crypto/tls.vers <type -6>; .crypto/tls.cipherSuite <type -6>; .crypto/tls.masterSecret <type 6>; .crypto/tls.serverCertificates <type 109>; .crypto/tls.verifiedChains <type 174>; .crypto/tls.receivedAt <type 25>; .crypto/tls.nonce <type 6>; .crypto/tls.useBy <type 25>; .crypto/tls.ageAdd <type -7>; }
type 275 "crypto/tls.RenegotiationSupport" <type -11>
type 276 "sync.Once" <type 278>
 func (o <type 277>) Do (f <esc:0x1> <type 75>)
type 277 *<type 276>
type 278 struct { .sync.m <type 279>; .sync.done <type -7>; }
type 279 "sync.Mutex" <type 281>
 func (m <type 280>) Unlock ()
 func (m <type 280>) Lock ()
type 280 *<type 279>
type 281 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 282 "sync.RWMutex" <type 286>
 func (rw <type 283>) RLock ()
 func (rw <type 283>) RUnlock ()
 func (rw <type 283>) Lock ()
 func (rw <type 283>) Unlock ()
 func (rw <esc:0x12> <type 283>) RLocker () ($ret8 <type 284>)
type 283 *<type 282>
type 284 "sync.Locker" <type 285>
type 285 interface { Lock (); Unlock (); }
type 286 struct { .sync.w <type 279>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 287 *<type 288>
type 288 "net/http.Server" <type 335>
 func (srv <type 287>) .net/http.onceSetNextProtoDefaults_Serve ()
 func (srv <type 287>) .net/http.setupHTTP2_ServeTLS () <type -19>
 func (srv <type 287>) SetKeepAlivesEnabled (v <type -15>)
 func (s <type 287>) .net/http.shuttingDown () <type -15>
 func (s <esc:0x1> <type 287>) .net/http.readHeaderTimeout () <type 28>
 func (srv <type 287>) .net/http.setupHTTP2_Serve () <type -19>
 func (s <type 287>) .net/http.doKeepAlives () <type -15>
 func (s <esc:0x1> <type 287>) .net/http.idleTimeout () <type 28>
 func (s <type 287>) .net/http.trackConn (c <type 289>, add <type -15>)
 func (srv <type 287>) .net/http.onceSetNextProtoDefaults ()
 func (srv <type 287>) Serve (l <type 235>) <type -19>
 func (srv <type 287>) .net/http.newConn (rwc <type 70>) <type 289>
 func (srv <esc:0x1> <type 287>) .net/http.initialReadLimitSize () <type -4>
 func (s <type 287>) .net/http.trackListener (ln <type 332>, add <type -15>) <type -15>
 func (s <esc:0x1> <type 287>) .net/http.closeListenersLocked () <type -19>
 func (s <type 287>) .net/http.getDoneChan () <type 41>
 func (srv <esc:0x1> <type 287>) .net/http.shouldConfigureHTTP2ForServe () <type -15>
 func (srv <type 287>) ListenAndServeTLS (certFile <type -16>, keyFile <type -16>) <type -19>
 func (s <esc:0x22> <type 287>) .net/http.getDoneChanLocked () <type 333>
 func (s <esc:0x1> <type 287>) .net/http.closeDoneChanLocked ()
 func (srv <type 287>) Close () <type -19>
 func (srv <esc:0x1> <type 287>) .net/http.maxHeaderBytes () <type -11>
 func (srv <type 287>) Shutdown (ctx <type 23>) <type -19>
 func (srv <type 287>) ServeTLS (l <type 235>, certFile <type -16>, keyFile <type -16>) <type -19>
 func (srv <type 287>) RegisterOnShutdown (f <type 75>)
 func (s <type 287>) .net/http.closeIdleConns () <type -15>
 func (s <esc:0x9> <type 287>) .net/http.logf (format <esc:0x1> <type -16>, args <esc:0x9> ...<type 43>)
 func (srv <type 287>) ListenAndServe () <type -19>
type 289 *<type 290>
type 290 ".net/http.conn" <type 312>
 func (c <type 289>) .net/http.getState () (state <type 291>, unixSec <type -4>)
 func (c <esc:0x9> <type 289>) .net/http.closeWriteAndWait ()
 func (c <esc:0x9> <type 289>) .net/http.close ()
 func (c <esc:0x9> <type 289>) .net/http.finalFlush ()
 func (c <type 289>) .net/http.serve (ctx <type 23>)
 func (c <type 289>) .net/http.setState (nc <type 70>, state <type 291>)
 func (c <type 289>) .net/http.readRequest (ctx <type 23>) (w <type 292>, err <type -19>)
 func (c <type 289>) .net/http.hijackLocked () (rwc <type 70>, buf <type 295>, err <type -19>)
 func (c <type 289>) .net/http.hijacked () <type -15>
type 291 "net/http.ConnState" <type -11>
 func (c <type 291>) String () <type -16>
type 292 *<type 293>
type 293 ".net/http.response" <type 301>
 func (w <type 292>) CloseNotify () <type 294>
 func (w <type 292>) .net/http.sendExpectationFailed ()
 func (w <esc:0x9> <type 292>) Flush ()
 func (w <esc:0x9> <type 292>) .net/http.closedRequestBodyEarly () <type -15>
 func (w <esc:0x9> <type 292>) .net/http.finalTrailers () <type 61>
 func (w <esc:0x9> <type 292>) .net/http.declareTrailer (k <type -16>)
 func (w <esc:0x1> <type 292>) .net/http.requestTooLarge ()
 func (w <esc:0x9> <type 292>) WriteHeader (code <type -11>)
 func (w <esc:0x18a> <type 292>) Write (data <type 6>) (n <type -11>, err <type -19>)
 func (w <type 292>) Hijack () (rwc <type 70>, buf <type 295>, err <type -19>)
 func (w <esc:0x1> <type 292>) .net/http.needsSniff () <type -15>
 func (w <esc:0x22> <type 292>) Header () <type 61>
 func (w <esc:0x1> <type 292>) .net/http.bodyAllowed () <type -15>
 func (w <type 292>) ReadFrom (src <type 4>) (n <type -4>, err <type -19>)
 func (w <esc:0x18a> <type 292>) WriteString (data <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (w <esc:0x18a> <type 292>) .net/http.write (lenData <type -11>, dataB <type 6>, dataS <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (w <type 292>) .net/http.finishRequest ()
 func (w <esc:0x9> <type 292>) .net/http.shouldReuseConnection () <type -15>
type 294 chan <- <type -15>
type 295 *<type 296>
type 296 "bufio.ReadWriter" <type 297>
type 297 struct { ? <type 56>; ? <type 298>; }
type 298 *<type 299>
type 299 "bufio.Writer" <type 300>
 func (b <esc:0x10a> <type 298>) WriteRune (r <type -21>) (size <type -11>, err <type -19>)
 func (b <esc:0x2a> <type 298>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x10a> <type 298>) Write (p <type 6>) (nn <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 298>) ReadFrom (r <type 4>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 298>) Buffered () <type -11>
 func (b <esc:0x10a> <type 298>) WriteString (s <esc:0x1> <type -16>) (? <type -11>, ? <type -19>)
 func (b <esc:0x1> <type 298>) Available () <type -11>
 func (b <esc:0x2a> <type 298>) Flush () <type -19>
 func (b <esc:0x1> <type 298>) Reset (w <type 58>)
 func (b <esc:0x1> <type 298>) Size () <type -11>
type 300 struct { .bufio.err <type -19>; .bufio.buf <type 6>; .bufio.n <type -11>; .bufio.wr <type 58>; }
type 301 struct { .net/http.conn <type 289>; .net/http.req <type 7>; .net/http.reqBody <type 218>; .net/http.cancelCtx <type 302>; .net/http.wroteHeader <type -15>; .net/http.wroteContinue <type -15>; .net/http.wants10KeepAlive <type -15>; .net/http.wantsClose <type -15>; .net/http.w <type 298>; .net/http.cw <type 303>; .net/http.handlerHeader <type 61>; .net/http.calledHeader <type -15>; .net/http.written <type -4>; .net/http.contentLength <type -4>; .net/http.status <type -11>; .net/http.closeAfterReply <type -15>; .net/http.requestBodyLimitHit <type -15>; .net/http.trailers <type 22>; .net/http.handlerDone <type 306>; .net/http.dateBuf <type 308>; .net/http.clenBuf <type 309>; .net/http.statusBuf <type 310>; .net/http.closeNotifyCh <type 311>; .net/http.didCloseNotify <type -3>; }
type 302 "context.CancelFunc" <type 75>
type 303 ".net/http.chunkWriter" <type 305>
 func (cw <esc:0x9> <type 304>) .net/http.writeHeader (p <type 6>)
 func (cw <esc:0x9> <type 304>) .net/http.close ()
 func (cw <esc:0x9> <type 304>) .net/http.flush ()
 func (cw <esc:0x28a> <type 304>) Write (p <type 6>) (n <type -11>, err <type -19>)
type 304 *<type 303>
type 305 struct { .net/http.res <type 292>; .net/http.header <type 61>; .net/http.wroteHeader <type -15>; .net/http.chunking <type -15>; }
type 306 ".net/http.atomicBool" <type -3>
 func (b <type 307>) .net/http.setTrue ()
 func (b <type 307>) .net/http.isSet () <type -15>
type 307 *<type 306>
type 308 [29 ] <type -20>
type 309 [10 ] <type -20>
type 310 [3 ] <type -20>
type 311 chan <type -15>
type 312 struct { .net/http.server <type 287>; .net/http.cancelCtx <type 302>; .net/http.rwc <type 70>; .net/http.remoteAddr <type -16>; .net/http.tlsState <type 107>; .net/http.werr <type -19>; .net/http.r <type 313>; .net/http.bufr <type 56>; .net/http.bufw <type 298>; .net/http.lastMethod <type -16>; .net/http.curReq <type 328>; .net/http.curState <type 331>; .net/http.mu <type 279>; .net/http.hijackedv <type -15>; }
type 313 *<type 314>
type 314 ".net/http.connReader" <type 315>
 func (cr <esc:0x9> <type 313>) .net/http.closeNotify ()
 func (cr <esc:0x9> <type 313>) .net/http.handleReadError (_ <esc:0x1> <type -19>)
 func (cr <esc:0x1> <type 313>) .net/http.setReadLimit (remain <type -4>)
 func (cr <type 313>) .net/http.abortPendingRead ()
 func (cr <type 313>) .net/http.backgroundRead ()
 func (cr <esc:0x1> <type 313>) .net/http.hitReadLimit () <type -15>
 func (cr <esc:0x1> <type 313>) .net/http.setInfiniteReadLimit ()
 func (cr <type 313>) .net/http.unlock ()
 func (cr <type 313>) Read (p <type 6>) (n <type -11>, err <type -19>)
 func (cr <type 313>) .net/http.startBackgroundRead ()
 func (cr <type 313>) .net/http.lock ()
type 315 struct { .net/http.conn <type 289>; .net/http.mu <type 279>; .net/http.hasByte <type -15>; .net/http.byteBuf <type 316>; .net/http.cond <type 317>; .net/http.inRead <type -15>; .net/http.aborted <type -15>; .net/http.remain <type -4>; }
type 316 [1 ] <type -20>
type 317 *<type 318>
type 318 "sync.Cond" <type 319>
 func (c <type 317>) Wait ()
 func (c <type 317>) Signal ()
 func (c <type 317>) Broadcast ()
type 319 struct { .sync.noCopy <type 320>; L <type 284>; .sync.notify <type 322>; .sync.checker <type 326>; }
type 320 ".sync.noCopy" <type 42>
 func (? <esc:0x1> <type 321>) Unlock ()
 func (? <esc:0x1> <type 321>) Lock ()
type 321 *<type 320>
type 322 ".sync.notifyList" <type 323>
type 323 struct { .sync.wait <type -7>; .sync.notify <type -7>; .sync.lock <type -13>; .sync.head <type 324>; .sync.tail <type 324>; }
type 324 "unsafe.Pointer" <type 325>
type 325 *any
type 326 ".sync.copyChecker" <type -13>
 func (c <type 327>) .sync.check ()
type 327 *<type 326>
type 328 "sync/atomic.Value" <type 330>
 func (v <type 329>) Store (x <type 43>)
 func (v <type 329>) Load () (x <type 43>)
type 329 *<type 328>
type 330 struct { .sync/atomic.v <type 43>; }
type 331 struct { .net/http.atomic <type -8>; }
type 332 *<type 235>
type 333 chan <type 42>
type 334 [] <type 43>
type 335 struct { Addr <type -16>; Handler <type 224>; TLSConfig <type 237>; ReadTimeout <type 28>; ReadHeaderTimeout <type 28>; WriteTimeout <type 28>; IdleTimeout <type 28>; MaxHeaderBytes <type -11>; TLSNextProto <type 336>; ConnState <type 388>; ErrorLog <type 389>; .net/http.disableKeepAlives <type -3>; .net/http.inShutdown <type -3>; .net/http.nextProtoOnce <type 276>; .net/http.nextProtoErr <type -19>; .net/http.mu <type 279>; .net/http.listeners <type 393>; .net/http.activeConn <type 394>; .net/http.doneChan <type 333>; .net/http.onShutdown <type 395>; }
type 336 map [<type -16>] <type 337>
type 337 (? <type 287>, ? <type 338>, ? <type 224>)
type 338 *<type 339>
type 339 "crypto/tls.Conn" <type 365>
 func (c <type 338>) .crypto/tls.processCertsFromClient (certificate <type 249>) <type -19>
 func (c <esc:0x9> <type 338>) .crypto/tls.decryptTicket (encrypted <type 6>) (plaintext <type 6>, usedOldKey <type -15>)
 func (c <type 338>) .crypto/tls.handleNewSessionTicket (msg <esc:0x9> <type 340>) <type -19>
 func (c <type 338>) .crypto/tls.getClientCertificate (cri <type 264>) (? <type 248>, ? <type -19>)
 func (c <type 338>) .crypto/tls.readClientHello () (? <type 343>, ? <type -19>)
 func (c <esc:0x3a> <type 338>) .crypto/tls.loadSession (hello <esc:0x9> <type 343>) (cacheKey <type -16>, session <type 272>, earlySecret <type 6>, binderKey <type 6>)
 func (c <type 338>) .crypto/tls.handshakeComplete () <type -15>
 func (c <type 338>) VerifyHostname (host <type -16>) <type -19>
 func (c <type 338>) OCSPResponse () <type 6>
 func (c <type 338>) .crypto/tls.serverHandshake () <type -19>
 func (c <type 338>) .crypto/tls.makeClientHello () (? <type 343>, ? <type 352>, ? <type -19>)
 func (c <esc:0x9> <type 338>) SetDeadline (t <type 25>) <type -19>
 func (c <type 338>) .crypto/tls.pickTLSVersion (serverHello <esc:0x1> <type 354>) <type -19>
 func (c <type 338>) Close () <type -19>
 func (c <type 338>) .crypto/tls.verifyServerCertificate (certificates <type 169>) <type -19>
 func (c <esc:0x1> <type 338>) .crypto/tls.newRecordHeaderError (conn <esc:0x12> <type 70>, msg <esc:0x12> <type -16>) (err <type 357>)
 func (c <type 338>) Handshake () <type -19>
 func (c <type 338>) .crypto/tls.sendAlertLocked (err <type 360>) <type -19>
 func (c <type 338>) .crypto/tls.handlePostHandshakeMessage () <type -19>
 func (c <type 338>) .crypto/tls.readRecordOrCCS (expectChangeCipherSpec <type -15>) <type -19>
 func (c <type 338>) .crypto/tls.readChangeCipherSpec () <type -19>
 func (c <type 338>) ConnectionState () <type 106>
 func (c <esc:0x9> <type 338>) .crypto/tls.readFromUntil (r <type 4>, n <type -11>) <type -19>
 func (c <type 338>) .crypto/tls.retryReadRecord (expectChangeCipherSpec <type -15>) <type -19>
 func (c <type 338>) Write (b <type 6>) (? <type -11>, ? <type -19>)
 func (c <esc:0x9> <type 338>) .crypto/tls.encryptTicket (state <type 6>) (? <type 6>, ? <type -19>)
 func (c <type 338>) .crypto/tls.sendAlert (err <type 360>) <type -19>
 func (c <esc:0x9> <type 338>) LocalAddr () <type 72>
 func (c <type 338>) .crypto/tls.clientHandshake () (err <type -19>)
 func (c <esc:0x9> <type 338>) .crypto/tls.flush () (? <type -11>, ? <type -19>)
 func (c <type 338>) .crypto/tls.writeRecordLocked (typ <type 361>, data <type 6>) (? <type -11>, ? <type -19>)
 func (c <type 338>) .crypto/tls.writeRecord (typ <type 361>, data <type 6>) (? <type -11>, ? <type -19>)
 func (c <esc:0x9> <type 338>) .crypto/tls.write (data <type 6>) (? <type -11>, ? <type -19>)
 func (c <esc:0x9> <type 338>) SetWriteDeadline (t <type 25>) <type -19>
 func (c <type 338>) .crypto/tls.readHandshake () (? <type 43>, ? <type -19>)
 func (c <type 338>) .crypto/tls.handleRenegotiation () <type -19>
 func (c <esc:0x9> <type 338>) SetReadDeadline (t <type 25>) <type -19>
 func (c <type 338>) .crypto/tls.readRecord () <type -19>
 func (c <esc:0x9> <type 338>) .crypto/tls.maxPayloadSizeForWrite (typ <type 361>) <type -11>
 func (c <type 338>) .crypto/tls.handleKeyUpdate (keyUpdate <esc:0x1> <type 362>) <type -19>
 func (c <type 338>) Read (b <esc:0x1> <type 6>) (? <type -11>, ? <type -19>)
 func (c <esc:0x9> <type 338>) RemoteAddr () <type 72>
 func (c <type 338>) CloseWrite () <type -19>
 func (c <type 338>) .crypto/tls.closeNotify () <type -19>
type 340 *<type 341>
type 341 ".crypto/tls.newSessionTicketMsgTLS13" <type 342>
 func (m <esc:0x1> <type 340>) .crypto/tls.unmarshal (data <type 6>) <type -15>
 func (m <esc:0x22> <type 340>) .crypto/tls.marshal () <type 6>
type 342 struct { .crypto/tls.raw <type 6>; .crypto/tls.lifetime <type -7>; .crypto/tls.ageAdd <type -7>; .crypto/tls.nonce <type 6>; .crypto/tls.label <type 6>; .crypto/tls.maxEarlyData <type -7>; }
type 343 *<type 344>
type 344 ".crypto/tls.clientHelloMsg" <type 345>
 func (m <esc:0x9> <type 343>) .crypto/tls.unmarshal (data <type 6>) <type -15>
 func (m <esc:0x9> <type 343>) .crypto/tls.updateBinders (pskBinders <type 169>)
 func (m <esc:0x2a> <type 343>) .crypto/tls.marshalWithoutBinders () <type 6>
 func (m <esc:0x2a> <type 343>) .crypto/tls.marshal () <type 6>
type 345 struct { .crypto/tls.raw <type 6>; .crypto/tls.vers <type -6>; .crypto/tls.random <type 6>; .crypto/tls.sessionId <type 6>; .crypto/tls.cipherSuites <type 242>; .crypto/tls.compressionMethods <type 245>; .crypto/tls.nextProtoNeg <type -15>; .crypto/tls.serverName <type -16>; .crypto/tls.ocspStapling <type -15>; .crypto/tls.supportedCurves <type 243>; .crypto/tls.supportedPoints <type 245>; .crypto/tls.ticketSupported <type -15>; .crypto/tls.sessionTicket <type 245>; .crypto/tls.supportedSignatureAlgorithms <type 246>; .crypto/tls.supportedSignatureAlgorithmsCert <type 246>; .crypto/tls.secureRenegotiationSupported <type -15>; .crypto/tls.secureRenegotiation <type 6>; .crypto/tls.alpnProtocols <type 22>; .crypto/tls.scts <type -15>; .crypto/tls.supportedVersions <type 242>; .crypto/tls.cookie <type 6>; .crypto/tls.keyShares <type 346>; .crypto/tls.earlyData <type -15>; .crypto/tls.pskModes <type 245>; .crypto/tls.pskIdentities <type 349>; .crypto/tls.pskBinders <type 169>; }
type 346 [] <type 347>
type 347 ".crypto/tls.keyShare" <type 348>
type 348 struct { .crypto/tls.group <type 244>; .crypto/tls.data <type 6>; }
type 349 [] <type 350>
type 350 ".crypto/tls.pskIdentity" <type 351>
type 351 struct { .crypto/tls.label <type 6>; .crypto/tls.obfuscatedTicketAge <type -7>; }
type 352 ".crypto/tls.ecdheParameters" <type 353>
type 353 interface { CurveID () <type 244>; PublicKey () <type 6>; SharedKey (peerPublicKey <type 6>) <type 6>; }
type 354 *<type 355>
type 355 ".crypto/tls.serverHelloMsg" <type 356>
 func (m <esc:0x9> <type 354>) .crypto/tls.unmarshal (data <type 6>) <type -15>
 func (m <esc:0x2a> <type 354>) .crypto/tls.marshal () <type 6>
type 356 struct { .crypto/tls.raw <type 6>; .crypto/tls.vers <type -6>; .crypto/tls.random <type 6>; .crypto/tls.sessionId <type 6>; .crypto/tls.cipherSuite <type -6>; .crypto/tls.compressionMethod <type -5>; .crypto/tls.nextProtoNeg <type -15>; .crypto/tls.nextProtos <type 22>; .crypto/tls.ocspStapling <type -15>; .crypto/tls.ticketSupported <type -15>; .crypto/tls.secureRenegotiationSupported <type -15>; .crypto/tls.secureRenegotiation <type 6>; .crypto/tls.alpnProtocol <type -16>; .crypto/tls.scts <type 169>; .crypto/tls.supportedVersion <type -6>; .crypto/tls.serverShare <type 347>; .crypto/tls.selectedIdentityPresent <type -15>; .crypto/tls.selectedIdentity <type -6>; .crypto/tls.cookie <type 6>; .crypto/tls.selectedGroup <type 244>; }
type 357 "crypto/tls.RecordHeaderError" <type 358>
 func (e <esc:0x1> <type 357>) Error () <type -16>
type 358 struct { Msg <type -16>; RecordHeader <type 359>; Conn <type 70>; }
type 359 [5 ] <type -20>
type 360 ".crypto/tls.alert" <type -5>
 func (e <type 360>) Error () <type -16>
 func (e <type 360>) String () <type -16>
type 361 ".crypto/tls.recordType" <type -5>
type 362 *<type 363>
type 363 ".crypto/tls.keyUpdateMsg" <type 364>
 func (m <esc:0x1> <type 362>) .crypto/tls.unmarshal (data <type 6>) <type -15>
 func (m <esc:0x22> <type 362>) .crypto/tls.marshal () <type 6>
type 364 struct { .crypto/tls.raw <type 6>; .crypto/tls.updateRequested <type -15>; }
type 365 struct { .crypto/tls.conn <type 70>; .crypto/tls.isClient <type -15>; .crypto/tls.handshakeStatus <type -7>; .crypto/tls.handshakeMutex <type 279>; .crypto/tls.handshakeErr <type -19>; .crypto/tls.vers <type -6>; .crypto/tls.haveVers <type -15>; .crypto/tls.config <type 237>; .crypto/tls.handshakes <type -11>; .crypto/tls.didResume <type -15>; .crypto/tls.cipherSuite <type -6>; .crypto/tls.ocspResponse <type 6>; .crypto/tls.scts <type 169>; .crypto/tls.peerCertificates <type 109>; .crypto/tls.verifiedChains <type 174>; .crypto/tls.serverName <type -16>; .crypto/tls.secureRenegotiation <type -15>; .crypto/tls.ekm <type 200>; .crypto/tls.resumptionSecret <type 6>; .crypto/tls.clientFinishedIsFirst <type -15>; .crypto/tls.closeNotifyErr <type -19>; .crypto/tls.closeNotifySent <type -15>; .crypto/tls.clientFinished <type 366>; .crypto/tls.serverFinished <type 366>; .crypto/tls.clientProtocol <type -16>; .crypto/tls.clientProtocolFallback <type -15>; .crypto/tls.in <type 367>; .crypto/tls.out <type 367>; .crypto/tls.rawInput <type 231>; .crypto/tls.input <type 385>; .crypto/tls.hand <type 231>; .crypto/tls.outBuf <type 6>; .crypto/tls.buffering <type -15>; .crypto/tls.sendBuf <type 6>; .crypto/tls.bytesSent <type -4>; .crypto/tls.packetsSent <type -4>; .crypto/tls.retryCount <type -11>; .crypto/tls.activeCall <type -3>; .crypto/tls.tmp <type 255>; }
type 366 [12 ] <type -20>
type 367 ".crypto/tls.halfConn" <type 382>
 func (hc <type 368>) .crypto/tls.encrypt (record <type 6>, payload <type 6>, rand <type 4>) (? <type 6>, ? <type -19>)
 func (hc <type 368>) .crypto/tls.decrypt (record <type 6>) (? <type 6>, ? <type 361>, ? <type -19>)
 func (hc <esc:0x1> <type 368>) .crypto/tls.incSeq ()
 func (hc <esc:0x9> <type 368>) .crypto/tls.explicitNonceLen () <type -11>
 func (hc <esc:0x9> <type 368>) .crypto/tls.changeCipherSpec () <type -19>
 func (hc <esc:0x1> <type 368>) .crypto/tls.prepareCipherSpec (version <type -6>, cipher <type 43>, mac <type 369>)
 func (hc <esc:0x1> <type 368>) .crypto/tls.setTrafficSecret (suite <esc:0x9> <type 371>, secret <type 6>)
 func (hc <esc:0x1> <type 368>) .crypto/tls.setErrorLocked (err <type -19>) <type -19>
type 368 *<type 367>
type 369 ".crypto/tls.macFunction" <type 370>
type 370 interface { MAC (seq <type 6>, header <type 6>, data <type 6>, extra <type 6>) <type 6>; Size () <type -11>; }
type 371 *<type 372>
type 372 ".crypto/tls.cipherSuiteTLS13" <type 375>
 func (c <type 371>) .crypto/tls.exportKeyingMaterial (masterSecret <type 6>, transcript <type 373>) <type 200>
 func (c <esc:0x1> <type 371>) .crypto/tls.finishedHash (baseKey <type 6>, transcript <type 373>) <type 6>
 func (c <esc:0x1> <type 371>) .crypto/tls.nextTrafficSecret (trafficSecret <type 6>) <type 6>
 func (c <esc:0x1> <type 371>) .crypto/tls.trafficKey (trafficSecret <type 6>) (key <type 6>, iv <type 6>)
 func (c <esc:0x1> <type 371>) .crypto/tls.extract (newSecret <type 6>, currentSecret <type 6>) <type 6>
 func (c <esc:0x1> <type 371>) .crypto/tls.deriveSecret (secret <type 6>, label <esc:0x1> <type -16>, transcript <type 373>) <type 6>
 func (c <esc:0x1> <type 371>) .crypto/tls.expandLabel (secret <type 6>, label <esc:0x1> <type -16>, context <esc:0x1> <type 6>, length <type -11>) <type 6>
type 373 "hash.Hash" <type 374>
type 374 interface { ? <type 58>; BlockSize () <type -11>; Reset (); Size () <type -11>; Sum (b <type 6>) <type 6>; }
type 375 struct { .crypto/tls.id <type -6>; .crypto/tls.keyLen <type -11>; .crypto/tls.aead <type 376>; .crypto/tls.hash <type 381>; }
type 376 (key <type 6>, fixedNonce <type 6>) <type 377>
type 377 ".crypto/tls.aead" <type 378>
type 378 interface { ? <type 379>; .crypto/tls.explicitNonceLen () <type -11>; }
type 379 "crypto/cipher.AEAD" <type 380>
type 380 interface { NonceSize () <type -11>; Open (dst <type 6>, nonce <type 6>, ciphertext <type 6>, additionalData <type 6>) (? <type 6>, ? <type -19>); Overhead () <type -11>; Seal (dst <type 6>, nonce <type 6>, plaintext <type 6>, additionalData <type 6>) <type 6>; }
type 381 "crypto.Hash" <type -12>
 func (h <type 381>) HashFunc () ($ret0 <type 381>)
 func (h <type 381>) Size () <type -11>
 func (h <type 381>) New () <type 373>
 func (h <type 381>) Available () <type -15>
type 382 struct { ? <type 279>; .crypto/tls.err <type -19>; .crypto/tls.version <type -6>; .crypto/tls.cipher <type 43>; .crypto/tls.mac <type 369>; .crypto/tls.seq <type 383>; .crypto/tls.additionalData <type 384>; .crypto/tls.nextCipher <type 43>; .crypto/tls.nextMac <type 369>; .crypto/tls.trafficSecret <type 6>; }
type 383 [8 ] <type -20>
type 384 [13 ] <type -20>
type 385 "bytes.Reader" <type 387>
 func (r <esc:0x9> <type 386>) WriteTo (w <type 58>) (n <type -4>, err <type -19>)
 func (r <esc:0x1> <type 386>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (r <esc:0x1> <type 386>) UnreadRune () <type -19>
 func (r <esc:0x1> <type 386>) ReadByte () (? <type -20>, ? <type -19>)
 func (r <esc:0x1> <type 386>) ReadAt (b <esc:0x1> <type 6>, off <type -4>) (n <type -11>, err <type -19>)
 func (r <esc:0x1> <type 386>) Read (b <esc:0x1> <type 6>) (n <type -11>, err <type -19>)
 func (r <esc:0x1> <type 386>) Size () <type -4>
 func (r <esc:0x1> <type 386>) Reset (b <type 6>)
 func (r <esc:0x1> <type 386>) ReadRune () (ch <type -21>, size <type -11>, err <type -19>)
 func (r <esc:0x1> <type 386>) UnreadByte () <type -19>
 func (r <esc:0x1> <type 386>) Len () <type -11>
type 386 *<type 385>
type 387 struct { .bytes.s <type 6>; .bytes.i <type -4>; .bytes.prevRune <type -11>; }
type 388 (? <type 70>, ? <type 291>)
type 389 *<type 390>
type 390 "log.Logger" <type 392>
 func (l <type 389>) Flags () <type -11>
 func (l <type 389>) Println (v <esc:0x9> ...<type 43>)
 func (l <type 389>) Fatalf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 43>)
 func (l <type 389>) Panicln (v <esc:0x9> ...<type 43>)
 func (l <type 389>) Writer () <type 58>
 func (l <type 389>) SetPrefix (prefix <type -16>)
 func (l <type 389>) Prefix () <type -16>
 func (l <type 389>) SetFlags (flag <type -11>)
 func (l <esc:0x1> <type 389>) .log.formatHeader (buf <esc:0x9> <type 391>, t <esc:0x1> <type 25>, file <esc:0x1> <type -16>, line <type -11>)
 func (l <type 389>) Panicf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 43>)
 func (l <type 389>) Output (calldepth <type -11>, s <esc:0x1> <type -16>) <type -19>
 func (l <type 389>) Panic (v <esc:0x9> ...<type 43>)
 func (l <type 389>) SetOutput (w <type 58>)
 func (l <type 389>) Printf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 43>)
 func (l <type 389>) Print (v <esc:0x9> ...<type 43>)
 func (l <type 389>) Fatalln (v <esc:0x9> ...<type 43>)
 func (l <type 389>) Fatal (v <esc:0x9> ...<type 43>)
type 391 *<type 6>
type 392 struct { .log.mu <type 279>; .log.prefix <type -16>; .log.flag <type -11>; .log.out <type 58>; .log.buf <type 6>; }
type 393 map [<type 332>] <type 42>
type 394 map [<type 289>] <type 42>
type 395 [] <type 75>
type 396 "sync.WaitGroup" <type 400>
 func (wg <type 397>) Wait ()
 func (wg <type 397>) Done ()
 func (wg <type 397>) Add (delta <type -11>)
 func (wg <esc:0x92> <type 397>) .sync.state () (statep <type 398>, semap <type 399>)
type 397 *<type 396>
type 398 *<type -8>
type 399 *<type -7>
type 400 struct { .sync.noCopy <type 320>; .sync.state1 <type 401>; }
type 401 [3 ] <type -7>
type 402 map [<type 70>] <type 291>
type 403 *<type 404>
type 404 "net/http.Client" <type 409>
 func (c <type 403>) PostForm (url <type -16>, data <esc:0x1> <type 191>) (resp <type 221>, err <type -19>)
 func (c <type 403>) Head (url <type -16>) (resp <type 221>, err <type -19>)
 func (c <type 403>) Post (url <type -16>, contentType <type -16>, body <type 4>) (resp <type 221>, err <type -19>)
 func (c <type 403>) .net/http.do (req <type 7>) (retres <type 221>, reterr <type -19>)
 func (c <esc:0x9> <type 403>) CloseIdleConnections ()
 func (c <type 403>) .net/http.makeHeadersCopier (ireq <type 7>) <type 405>
 func (c <type 403>) Do (req <type 7>) (? <type 221>, ? <type -19>)
 func (c <esc:0x32> <type 403>) .net/http.checkRedirect (req <type 7>, via <type 406>) <type -19>
 func (c <type 403>) Get (url <type -16>) (resp <type 221>, err <type -19>)
 func (c <esc:0x22> <type 403>) .net/http.transport () <type 407>
 func (c <esc:0x1> <type 403>) .net/http.deadline () <type 25>
 func (c <esc:0x9> <type 403>) .net/http.send (req <type 7>, deadline <esc:0x1> <type 25>) (resp <type 221>, didTimeout <type 211>, err <type -19>)
type 405 (? <type 7>)
type 406 [] <type 7>
type 407 "net/http.RoundTripper" <type 408>
type 408 interface { RoundTrip (? <type 7>) (? <type 221>, ? <type -19>); }
type 409 struct { Transport <type 407>; CheckRedirect <type 410>; Jar <type 411>; Timeout <type 28>; }
type 410 (req <type 7>, via <type 406>) <type -19>
type 411 "net/http.CookieJar" <type 412>
type 412 interface { Cookies (u <type 189>) <type 216>; SetCookies (u <type 189>, cookies <type 216>); }
type 413 chan -< <type 42>
const DefaultRemoteAddr = "1.2.3.4"
func NewRecorder () <type 3>
func NewRequest (method <esc:0x1> <type -16>, target <esc:0x1> <type -16>, body <type 4>) <type 7>
func NewServer (handler <type 224>) <type 228>
func NewTLSServer (handler <type 224>) <type 228>
func NewUnstartedServer (handler <type 224>) <type 228>
checksum 0BB851AA95001A244BCFF0FB8C7B32099D32149E
v3;
package httptrace
pkgpath net/http/httptrace
import context context "context"
import tls crypto/tls "crypto/tls"
import nettrace internal/nettrace "internal/nettrace"
import net net "net"
import textproto net/textproto "net/textproto"
import reflect reflect "reflect"
import time time "time"
indirectimport asn1 encoding/asn1
indirectimport big math/big
indirectimport fmt fmt
indirectimport io io
indirectimport pkix crypto/x509/pkix
indirectimport rand math/rand
indirectimport syscall syscall
indirectimport url net/url
indirectimport x509 crypto/x509
init bufio bufio..import bytes bytes..import context context..import crypto crypto..import cipher crypto..z2fcipher..import des crypto..z2fdes..import dsa crypto..z2fdsa..import ecdsa crypto..z2fecdsa..import elliptic crypto..z2felliptic..import randutil crypto..z2finternal..z2frandutil..import md5 crypto..z2fmd5..import rand crypto..z2frand..import rsa crypto..z2frsa..import sha1 crypto..z2fsha1..import sha256 crypto..z2fsha256..import sha512 crypto..z2fsha512..import tls crypto..z2ftls..import x509 crypto..z2fx509..import pkix crypto..z2fx509..z2fpkix..import asn1 encoding..z2fasn1..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import hex encoding..z2fhex..import pem encoding..z2fpem..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import chacha20poly1305 internal..z2fx..z2fcrypto..z2fchacha20poly1305..import cryptobyte internal..z2fx..z2fcrypto..z2fcryptobyte..import chacha20 internal..z2fx..z2fcrypto..z2finternal..z2fchacha20..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import io io..import ioutil io..z2fioutil..import big math..z2fbig..import rand math..z2frand..import net net..import textproto net..z2ftextproto..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph
types 170 6 173 32 33 32 37 408 29 20 24 11 55 316 35 22 21 21 46 62 36 186 19 22 374 21 19 1762 30 73 22 21 56 111 19 5185 34 295 34 21 35 30 195 35 61 34 64 19 1021 22 37 131 37 65 39 56 70 4127 21 38 102 3310 75 19 73 19 525 165 21 31 91 21 36 112 19 356 83 21 47 91 179 19 138 98 56 295 45 57 82 43 114 100 21 66 21 59 52 158 58 19 47 167 21 496 22 122 36 23 46 22 21 89 36 158 1181 98 358 21 20 267 43 22 23 1081 158 21 23 21 818 363 194 21 220 113 23 21 224 52 94 43 22 19 38 144 28 20 76 23 500 21 31 68 39 94 21 45 53 42 55 25 25 40 41 36 201 52 37 96 31 321 36
type 1 "ClientTrace" <type 6>
 func (t <type 140>) .net/http/httptrace.compose (old <type 140>)
 func (t <esc:0x1> <type 140>) .net/http/httptrace.hasNetHooks () <type -15>
type 2 "DNSDoneInfo" <type 145>
type 3 "DNSStartInfo" <type 165>
type 4 "GotConnInfo" <type 166>
type 5 "WroteRequestInfo" <type 169>
type 6 struct { GetConn <type 7>; GotConn <type 8>; PutIdleConn <type 9>; GotFirstResponseByte <type 10>; Got100Continue <type 10>; Got1xxResponse <type 11>; DNSStart <type 15>; DNSDone <type 16>; ConnectStart <type 17>; ConnectDone <type 18>; TLSHandshakeStart <type 10>; TLSHandshakeDone <type 19>; WroteHeaderField <type 138>; WroteHeaders <type 10>; Wait100Continue <type 10>; WroteRequest <type 139>; }
type 7 (hostPort <type -16>)
type 8 (? <type 4>)
type 9 (err <type -19>)
type 10 ()
type 11 (code <type -11>, header <type 12>) <type -19>
type 12 "net/textproto.MIMEHeader" <type 13>
 func (h <esc:0x1> <type 12>) Del (key <esc:0x1> <type -16>)
 func (h <esc:0x1> <type 12>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 12>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x9> <type 12>) Add (key <type -16>, value <type -16>)
type 13 map [<type -16>] <type 14>
type 14 [] <type -16>
type 15 (? <type 3>)
type 16 (? <type 2>)
type 17 (network <type -16>, addr <type -16>)
type 18 (network <type -16>, addr <type -16>, err <type -19>)
type 19 (? <type 20>, ? <type -19>)
type 20 "crypto/tls.ConnectionState" <type 23>
 func (cs <esc:0x1b2> <type 21>) ExportKeyingMaterial (label <type -16>, context <type 22>, length <type -11>) (? <type 22>, ? <type -19>)
type 21 *<type 20>
type 22 [] <type -20>
type 23 struct { Version <type -6>; HandshakeComplete <type -15>; DidResume <type -15>; CipherSuite <type -6>; NegotiatedProtocol <type -16>; NegotiatedProtocolIsMutual <type -15>; ServerName <type -16>; PeerCertificates <type 24>; VerifiedChains <type 108>; SignedCertificateTimestamps <type 103>; OCSPResponse <type 22>; .crypto/tls.ekm <type 137>; TLSUnique <type 22>; }
type 24 [] <type 25>
type 25 *<type 26>
type 26 "crypto/x509.Certificate" <type 113>
 func (c <esc:0x32> <type 25>) .crypto/x509.getSANExtension () <type 22>
 func (c <esc:0x9> <type 25>) CreateCRL (rand <type 27>, priv <type 29>, revokedCerts <esc:0x9> <type 30>, now <type 60>, expiry <type 60>) (crlBytes <type 22>, err <type -19>)
 func (c <esc:0x9> <type 25>) .crypto/x509.commonNameAsHostname () <type -15>
 func (c <esc:0x9> <type 25>) CheckCRLSignature (crl <esc:0x9> <type 80>) <type -19>
 func (c <type 25>) .crypto/x509.isValid (certType <type -11>, currentChain <esc:0x9> <type 24>, opts <esc:0x1> <type 98>) <type -19>
 func (c <esc:0x1> <type 25>) .crypto/x509.systemVerify (opts <esc:0x1> <type 98>) (chains <type 108>, err <type -19>)
 func (c <esc:0x12> <type 25>) .crypto/x509.checkNameConstraints (count <esc:0x1> <type 109>, maxConstraintComparisons <type -11>, nameType <type -16>, name <type -16>, parsedName <type 29>, match <esc:0x9> <type 110>, permitted <type 29>, excluded <type 29>) <type -19>
 func (c <type 25>) Verify (opts <type 99>) (chains <type 108>, err <type -19>)
 func (c <type 25>) .crypto/x509.buildChains (cache <esc:0x1> <type 111>, currentChain <esc:0x9> <type 24>, sigChecks <esc:0x1> <type 109>, opts <esc:0x9> <type 98>) (chains <type 108>, err <type -19>)
 func (c <esc:0x1a> <type 25>) VerifyHostname (h <type -16>) <type -19>
 func (c <esc:0x1> <type 25>) .crypto/x509.hasNameConstraints () <type -15>
 func (c <esc:0x1> <type 25>) .crypto/x509.hasSANExtension () <type -15>
 func (c <esc:0x1> <type 25>) Equal (other <esc:0x1> <type 25>) <type -15>
 func (c <esc:0x9> <type 25>) CheckSignatureFrom (parent <esc:0x9> <type 25>) <type -19>
 func (c <esc:0x9> <type 25>) CheckSignature (algo <type 112>, signed <type 22>, signature <type 22>) <type -19>
type 27 "io.Reader" <type 28>
type 28 interface { Read (p <type 22>) (n <type -11>, err <type -19>); }
type 29 interface { }
type 30 [] <type 31>
type 31 "crypto/x509/pkix.RevokedCertificate" <type 32>
type 32 struct { SerialNumber <type 33>; RevocationTime <type 60>; Extensions <type 76> "asn1:\"optional\""; }
type 33 *<type 34>
type 34 "math/big.Int" <type 55>
 func (z <esc:0x9> <type 33>) Scan (s <type 35>, ch <type -21>) <type -19>
 func (x <esc:0x1> <type 33>) Text (base <type -11>) <type -16>
 func (x <esc:0x1> <type 33>) String () <type -16>
 func (z <esc:0x12> <type 33>) SetBits (abs <type 38>) <type 33>
 func (x <esc:0x1> <type 33>) IsInt64 () <type -15>
 func (z <esc:0x1a> <type 33>) Quo (x <esc:0x1> <type 33>, y <esc:0x1> <type 33>) <type 33>
 func (x <esc:0x1> <type 33>) Cmp (y <esc:0x1> <type 33>) (r <type -11>)
 func (z <esc:0x1a> <type 33>) Exp (x <esc:0x9> <type 33>, y <esc:0x1> <type 33>, m <esc:0x1> <type 33>) <type 33>
 func (x <esc:0x1> <type 33>) MarshalText () (text <type 22>, err <type -19>)
 func (x <esc:0x9> <type 33>) ProbablyPrime (n <type -11>) <type -15>
 func (z <esc:0x1a> <type 33>) Abs (x <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) Neg (x <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x9> <type 33>) UnmarshalText (text <type 22>) <type -19>
 func (x <esc:0x1> <type 33>) Format (s <type 40>, ch <type -21>)
 func (z <esc:0x1a> <type 33>) .math/big.modSqrt3Mod4Prime (x <esc:0x9> <type 33>, p <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) Add (x <esc:0x1> <type 33>, y <esc:0x1> <type 33>) <type 33>
 func (x <esc:0x22> <type 33>) Bits () <type 38>
 func (z <esc:0x1a> <type 33>) ModInverse (g <esc:0x1> <type 33>, n <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) Set (x <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) .math/big.modSqrtTonelliShanks (x <esc:0x9> <type 33>, p <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) SetBytes (buf <esc:0x1> <type 22>) <type 33>
 func (z <esc:0x1a> <type 33>) SetUint64 (x <type -8>) <type 33>
 func (x <esc:0x1> <type 33>) Int64 () <type -4>
 func (z <esc:0x1a> <type 33>) ModSqrt (x <esc:0x9> <type 33>, p <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) Rsh (x <esc:0x1> <type 33>, n <type -12>) <type 33>
 func (z <esc:0x1a> <type 33>) SetInt64 (x <type -4>) <type 33>
 func (x <esc:0x1> <type 33>) MarshalJSON () (? <type 22>, ? <type -19>)
 func (z <esc:0x1a> <type 33>) MulRange (a <type -4>, b <type -4>) <type 33>
 func (x <esc:0x1> <type 33>) Sign () <type -11>
 func (z <esc:0x9> <type 33>) UnmarshalJSON (text <type 22>) <type -19>
 func (z <esc:0x1a> <type 33>) QuoRem (x <esc:0x1> <type 33>, y <esc:0x1> <type 33>, r <esc:0x8a> <type 33>) (? <type 33>, ? <type 33>)
 func (z <esc:0x9> <type 33>) GobDecode (buf <esc:0x1> <type 22>) <type -19>
 func (z <esc:0x1a> <type 33>) .math/big.scan (r <type 42>, base <type -11>) (? <type 33>, ? <type -11>, ? <type -19>)
 func (z <esc:0x1a> <type 33>) SetString (s <type -16>, base <type -11>) (? <type 33>, ? <type -15>)
 func (z <esc:0x1a> <type 33>) Mul (x <esc:0x1> <type 33>, y <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) Mod (x <esc:0x1> <type 33>, y <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) .math/big.setFromScanner (r <type 42>, base <type -11>) (? <type 33>, ? <type -15>)
 func (z <esc:0x1a> <type 33>) And (x <esc:0x1> <type 33>, y <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) Sub (x <esc:0x1> <type 33>, y <esc:0x1> <type 33>) <type 33>
 func (x <esc:0x1> <type 33>) CmpAbs (y <esc:0x1> <type 33>) <type -11>
 func (z <esc:0x1a> <type 33>) Div (x <esc:0x1> <type 33>, y <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) Rem (x <esc:0x1> <type 33>, y <esc:0x1> <type 33>) <type 33>
 func (x <esc:0x1> <type 33>) IsUint64 () <type -15>
 func (z <esc:0x1a> <type 33>) DivMod (x <esc:0x1> <type 33>, y <esc:0x1> <type 33>, m <esc:0x8a> <type 33>) (? <type 33>, ? <type 33>)
 func (z <esc:0x1a> <type 33>) Binomial (n <type -4>, k <type -4>) <type 33>
 func (x <esc:0x1> <type 33>) Uint64 () <type -8>
 func (x <esc:0x1> <type 33>) BitLen () <type -11>
 func (z <esc:0x1a> <type 33>) GCD (x <esc:0x9> <type 33>, y <esc:0x9> <type 33>, a <esc:0x1> <type 33>, b <esc:0x1> <type 33>) <type 33>
 func (x <esc:0x1> <type 33>) Bit (i <type -11>) <type -12>
 func (z <esc:0x1a> <type 33>) Or (x <esc:0x1> <type 33>, y <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x12> <type 33>) .math/big.lehmerGCD (x <esc:0x1> <type 33>, y <esc:0x9> <type 33>, a <esc:0x1> <type 33>, b <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) Rand (rnd <esc:0x9> <type 46>, n <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) Xor (x <esc:0x1> <type 33>, y <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) Sqrt (x <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) .math/big.modSqrt5Mod8Prime (x <esc:0x1> <type 33>, p <esc:0x1> <type 33>) <type 33>
 func (z <esc:0x1a> <type 33>) Lsh (x <esc:0x1> <type 33>, n <type -12>) <type 33>
 func (z <esc:0x1a> <type 33>) SetBit (x <esc:0x1> <type 33>, i <type -11>, b <type -12>) <type 33>
 func (z <esc:0x1a> <type 33>) AndNot (x <esc:0x1> <type 33>, y <esc:0x1> <type 33>) <type 33>
 func (x <esc:0x1> <type 33>) Bytes () <type 22>
 func (z <esc:0x1a> <type 33>) Not (x <esc:0x1> <type 33>) <type 33>
 func (x <esc:0x1> <type 33>) GobEncode () (? <type 22>, ? <type -19>)
 func (x <esc:0x1> <type 33>) Append (buf <esc:0x12> <type 22>, base <type -11>) <type 22>
type 35 "fmt.ScanState" <type 36>
type 36 interface { Read (buf <type 22>) (n <type -11>, err <type -19>); ReadRune () (r <type -21>, size <type -11>, err <type -19>); SkipSpace (); Token (skipSpace <type -15>, f <type 37>) (token <type 22>, err <type -19>); UnreadRune () <type -19>; Width () (wid <type -11>, ok <type -15>); }
type 37 (? <type -21>) <type -15>
type 38 [] <type 39>
type 39 "math/big.Word" <type -12>
type 40 "fmt.State" <type 41>
type 41 interface { Flag (c <type -11>) <type -15>; Precision () (prec <type -11>, ok <type -15>); Width () (wid <type -11>, ok <type -15>); Write (b <type 22>) (n <type -11>, err <type -19>); }
type 42 "io.ByteScanner" <type 43>
type 43 interface { ? <type 44>; UnreadByte () <type -19>; }
type 44 "io.ByteReader" <type 45>
type 45 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 46 *<type 47>
type 47 "math/rand.Rand" <type 50>
 func (r <esc:0x9> <type 46>) Perm (n <type -11>) <type 48>
 func (r <esc:0x9> <type 46>) Uint64 () <type -8>
 func (r <esc:0x9> <type 46>) .math/rand.int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 46>) Float32 () <type -9>
 func (r <esc:0x9> <type 46>) Seed (seed <type -4>)
 func (r <esc:0x9> <type 46>) Float64 () <type -10>
 func (r <esc:0x9> <type 46>) Int63 () <type -4>
 func (r <esc:0x9> <type 46>) NormFloat64 () <type -10>
 func (r <esc:0x9> <type 46>) ExpFloat64 () <type -10>
 func (r <esc:0x9> <type 46>) Int63n (n <type -4>) <type -4>
 func (r <esc:0x9> <type 46>) Int () <type -11>
 func (r <esc:0x9> <type 46>) Intn (n <type -11>) <type -11>
 func (r <esc:0x9> <type 46>) Int31n (n <type -3>) <type -3>
 func (r <type 46>) Read (p <esc:0x1> <type 22>) (n <type -11>, err <type -19>)
 func (r <esc:0x9> <type 46>) Int31 () <type -3>
 func (r <esc:0x9> <type 46>) Shuffle (n <type -11>, swap <esc:0x1> <type 49>)
 func (r <esc:0x9> <type 46>) Uint32 () <type -7>
type 48 [] <type -11>
type 49 (i <type -11>, j <type -11>)
type 50 struct { .math/rand.src <type 51>; .math/rand.s64 <type 53>; .math/rand.readVal <type -4>; .math/rand.readPos <type -1>; }
type 51 "math/rand.Source" <type 52>
type 52 interface { Int63 () <type -4>; Seed (seed <type -4>); }
type 53 "math/rand.Source64" <type 54>
type 54 interface { ? <type 51>; Uint64 () <type -8>; }
type 55 struct { .math/big.neg <type -15>; .math/big.abs <type 56>; }
type 56 ".math/big.nat" <type 38>
 func (z <esc:0x12> <type 56>) .math/big.set (x <esc:0x1> <type 56>) <type 56>
 func (z <esc:0x12> <type 56>) .math/big.random (rand <esc:0x9> <type 46>, limit <esc:0x1> <type 56>, n <type -11>) <type 56>
 func (z <esc:0x12> <type 56>) .math/big.setBytes (buf <esc:0x1> <type 22>) <type 56>
 func (n <esc:0x1> <type 56>) .math/big.probablyPrimeMillerRabin (reps <type -11>, force2 <type -15>) <type -15>
 func (z <esc:0x12> <type 56>) .math/big.scan (r <type 42>, base <type -11>, fracOk <type -15>) (res <type 56>, b <type -11>, count <type -11>, err <type -19>)
 func (z <esc:0x12> <type 56>) .math/big.expNNMontgomery (x <esc:0x1> <type 56>, y <esc:0x1> <type 56>, m <esc:0x1> <type 56>) <type 56>
 func (z <type 56>) .math/big.add (x <esc:0x1> <type 56>, y <esc:0x1> <type 56>) <type 56>
 func (q <esc:0x1> <type 56>) .math/big.convertWords (s <esc:0x1> <type 22>, b <type 39>, ndigits <type -11>, bb <type 39>, table <esc:0x1> <type 57>)
 func (z <type 56>) .math/big.expNNWindowed (x <type 56>, y <esc:0x1> <type 56>, m <esc:0x1> <type 56>) <type 56>
 func (z <type 56>) .math/big.expWW (x <type 39>, y <type 39>) <type 56>
 func (z <esc:0x12> <type 56>) .math/big.montgomery (x <esc:0x1> <type 56>, y <esc:0x1> <type 56>, m <esc:0x1> <type 56>, k <type 39>, n <type -11>) <type 56>
 func (z <esc:0x12> <type 56>) .math/big.shr (x <esc:0x1> <type 56>, s <type -12>) <type 56>
 func (x <esc:0x1> <type 56>) .math/big.bitLen () <type -11>
 func (z <esc:0x12> <type 56>) .math/big.divLarge (u <esc:0x82> <type 56>, uIn <esc:0x1> <type 56>, vIn <esc:0x1> <type 56>) (q <type 56>, r <type 56>)
 func (x <esc:0x1> <type 56>) .math/big.cmp (y <esc:0x1> <type 56>) (r <type -11>)
 func (z <esc:0x12> <type 56>) .math/big.sub (x <esc:0x1> <type 56>, y <esc:0x1> <type 56>) <type 56>
 func (z <esc:0x12> <type 56>) .math/big.shl (x <esc:0x1> <type 56>, s <type -12>) <type 56>
 func (x <esc:0x1> <type 56>) .math/big.sticky (i <type -12>) <type -12>
 func (z <type 56>) .math/big.sqrt (x <esc:0x1> <type 56>) <type 56>
 func (z <esc:0x12> <type 56>) .math/big.make (n <type -11>) <type 56>
 func (z <type 56>) .math/big.mulRange (a <type -8>, b <type -8>) <type 56>
 func (n <type 56>) .math/big.probablyPrimeLucas () <type -15>
 func (z <esc:0x12> <type 56>) .math/big.setWord (x <type 39>) <type 56>
 func (z <esc:0x12> <type 56>) .math/big.divW (x <esc:0x1> <type 56>, y <type 39>) (q <type 56>, r <type 39>)
 func (x <esc:0x1> <type 56>) .math/big.itoa (neg <type -15>, base <type -11>) <type 22>
 func (z <esc:0x1> <type 56>) .math/big.clear ()
 func (z <esc:0x12> <type 56>) .math/big.div (z2 <esc:0x82> <type 56>, u <esc:0x1> <type 56>, v <esc:0x1> <type 56>) (q <type 56>, r <type 56>)
 func (z <esc:0x12> <type 56>) .math/big.setUint64 (x <type -8>) <type 56>
 func (z <esc:0x12> <type 56>) .math/big.and (x <esc:0x1> <type 56>, y <esc:0x1> <type 56>) <type 56>
 func (z <esc:0x12> <type 56>) .math/big.setBit (x <esc:0x1> <type 56>, i <type -12>, b <type -12>) <type 56>
 func (x <esc:0x1> <type 56>) .math/big.utoa (base <type -11>) <type 22>
 func (z <esc:0x12> <type 56>) .math/big.norm () <type 56>
 func (z <type 56>) .math/big.sqr (x <esc:0x1> <type 56>) <type 56>
 func (x <esc:0x1> <type 56>) .math/big.trailingZeroBits () <type -12>
 func (x <esc:0x1> <type 56>) .math/big.bit (i <type -12>) <type -12>
 func (z <type 56>) .math/big.expNN (x <type 56>, y <esc:0x1> <type 56>, m <esc:0x1> <type 56>) <type 56>
 func (z <esc:0x12> <type 56>) .math/big.mulAddWW (x <esc:0x1> <type 56>, y <type 39>, r <type 39>) <type 56>
 func (z <type 56>) .math/big.mul (x <esc:0x1> <type 56>, y <esc:0x1> <type 56>) <type 56>
 func (z <esc:0x12> <type 56>) .math/big.andNot (x <esc:0x1> <type 56>, y <esc:0x1> <type 56>) <type 56>
 func (z <esc:0x12> <type 56>) .math/big.or (x <esc:0x1> <type 56>, y <esc:0x1> <type 56>) <type 56>
 func (z <esc:0x1> <type 56>) .math/big.bytes (buf <esc:0x1> <type 22>) (i <type -11>)
 func (z <esc:0x12> <type 56>) .math/big.xor (x <esc:0x1> <type 56>, y <esc:0x1> <type 56>) <type 56>
 func (x <esc:0x1> <type 56>) .math/big.modW (d <type 39>) (r <type 39>)
type 57 [] <type 58>
type 58 ".math/big.divisor" <type 59>
type 59 struct { .math/big.bbb <type 56>; .math/big.nbits <type -11>; .math/big.ndigits <type -11>; }
type 60 "time.Time" <type 75>
 func (t <esc:0x1> <type 60>) YearDay () <type -11>
 func (t <esc:0x1> <type 60>) Unix () <type -4>
 func (t <esc:0x1> <type 60>) Weekday () <type 61>
 func (t <esc:0x1> <type 60>) Second () <type -11>
 func (t <esc:0x1> <type 60>) Year () <type -11>
 func (t <esc:0x1> <type 62>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 62>) UnmarshalJSON (data <esc:0x1> <type 22>) <type -19>
 func (t <esc:0x1> <type 60>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 60>) Month () <type 63>
 func (t <esc:0x12> <type 60>) Location () <type 64>
 func (t <esc:0x1> <type 60>) GobEncode () (? <type 22>, ? <type -19>)
 func (t <esc:0x1> <type 60>) Date () (year <type -11>, month <type 63>, day <type -11>)
 func (t <esc:0x1> <type 60>) Hour () <type -11>
 func (t <esc:0x1> <type 60>) .time.abs () <type -8>
 func (t <esc:0x1> <type 60>) IsZero () <type -15>
 func (t <esc:0x1> <type 60>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 60>) UTC () <type 60>
 func (t <esc:0x12> <type 60>) In (loc <type 64>) <type 60>
 func (t <esc:0x32> <type 60>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 60>) Sub (u <esc:0x1> <type 60>) <type 74>
 func (t <esc:0x1> <type 60>) Equal (u <esc:0x1> <type 60>) <type -15>
 func (t <esc:0x1> <type 62>) .time.mono () <type -4>
 func (t <esc:0x1> <type 60>) MarshalText () (? <type 22>, ? <type -19>)
 func (t <esc:0x1> <type 62>) .time.stripMono ()
 func (t <esc:0x1> <type 60>) MarshalJSON () (? <type 22>, ? <type -19>)
 func (t <esc:0x1> <type 60>) .time.date (full <type -15>) (year <type -11>, month <type 63>, day <type -11>, yday <type -11>)
 func (t <type 60>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 60>
 func (t <esc:0x1> <type 62>) .time.sec () <type -4>
 func (t <esc:0x12> <type 60>) Local () <type 60>
 func (t <esc:0x1> <type 62>) UnmarshalBinary (data <esc:0x1> <type 22>) <type -19>
 func (t <esc:0x1> <type 62>) UnmarshalText (data <esc:0x1> <type 22>) <type -19>
 func (t <esc:0x12> <type 60>) Truncate (d <type 74>) <type 60>
 func (t <esc:0x1> <type 62>) .time.setLoc (loc <type 64>)
 func (t <esc:0x32> <type 60>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 60>) Before (u <esc:0x1> <type 60>) <type -15>
 func (t <esc:0x1> <type 62>) .time.nsec () <type -3>
 func (t <esc:0x12> <type 60>) Round (d <type 74>) <type 60>
 func (t <esc:0x1> <type 62>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 60>) Day () <type -11>
 func (t <esc:0x1> <type 62>) GobDecode (data <esc:0x1> <type 22>) <type -19>
 func (t <esc:0x1> <type 60>) UnixNano () <type -4>
 func (t <esc:0x1> <type 60>) After (u <esc:0x1> <type 60>) <type -15>
 func (t <esc:0x1> <type 60>) MarshalBinary () (? <type 22>, ? <type -19>)
 func (t <esc:0x1> <type 60>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 62>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 60>) Minute () <type -11>
 func (t <esc:0x1> <type 60>) AppendFormat (b <esc:0x12> <type 22>, layout <esc:0x1> <type -16>) <type 22>
 func (t <esc:0x12> <type 60>) Add (d <type 74>) <type 60>
 func (t <esc:0x1> <type 60>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 60>) String () <type -16>
type 61 "time.Weekday" <type -11>
 func (d <type 61>) String () <type -16>
type 62 *<type 60>
type 63 "time.Month" <type -11>
 func (m <type 63>) String () <type -16>
type 64 *<type 65>
type 65 "time.Location" <type 66>
 func (l <esc:0x12> <type 64>) .time.get () <type 64>
 func (l <esc:0x22> <type 64>) String () <type -16>
 func (l <esc:0x32> <type 64>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 64>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 64>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 64>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 66 struct { .time.name <type -16>; .time.zone <type 67>; .time.tx <type 70>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 73>; }
type 67 [] <type 68>
type 68 ".time.zone" <type 69>
type 69 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 70 [] <type 71>
type 71 ".time.zoneTrans" <type 72>
type 72 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 73 *<type 68>
type 74 "time.Duration" <type -4>
 func (d <type 74>) String () <type -16>
 func (d <type 74>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 74>) Seconds () <type -10>
 func (d <type 74>) Minutes () <type -10>
 func (d <type 74>) Hours () <type -10>
 func (d <type 74>) Truncate (m <type 74>) <type 74>
 func (d <type 74>) Round (m <type 74>) <type 74>
type 75 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 64>; }
type 76 [] <type 77>
type 77 "crypto/x509/pkix.Extension" <type 78>
type 78 struct { Id <type 79>; Critical <type -15> "asn1:\"optional\""; Value <type 22>; }
type 79 "encoding/asn1.ObjectIdentifier" <type 48>
 func (oi <esc:0x1> <type 79>) Equal (other <esc:0x1> <type 79>) <type -15>
 func (oi <esc:0x1> <type 79>) String () <type -16>
type 80 *<type 81>
type 81 "crypto/x509/pkix.CertificateList" <type 82>
 func (certList <esc:0x1> <type 80>) HasExpired (now <esc:0x1> <type 60>) <type -15>
type 82 struct { TBSCertList <type 83>; SignatureAlgorithm <type 86>; SignatureValue <type 96>; }
type 83 "crypto/x509/pkix.TBSCertificateList" <type 84>
type 84 struct { Raw <type 85>; Version <type -11> "asn1:\"optional,default:0\""; Signature <type 86>; Issuer <type 90>; ThisUpdate <type 60>; NextUpdate <type 60> "asn1:\"optional\""; RevokedCertificates <type 30> "asn1:\"optional\""; Extensions <type 76> "asn1:\"tag:0,optional,explicit\""; }
type 85 "encoding/asn1.RawContent" <type 22>
type 86 "crypto/x509/pkix.AlgorithmIdentifier" <type 87>
type 87 struct { Algorithm <type 79>; Parameters <type 88> "asn1:\"optional\""; }
type 88 "encoding/asn1.RawValue" <type 89>
type 89 struct { Class <type -11>; Tag <type -11>; IsCompound <type -15>; Bytes <type 22>; FullBytes <type 22>; }
type 90 "crypto/x509/pkix.RDNSequence" <type 91>
 func (r <esc:0x9> <type 90>) String () <type -16>
type 91 [] <type 92>
type 92 "crypto/x509/pkix.RelativeDistinguishedNameSET" <type 93>
type 93 [] <type 94>
type 94 "crypto/x509/pkix.AttributeTypeAndValue" <type 95>
type 95 struct { Type <type 79>; Value <type 29>; }
type 96 "encoding/asn1.BitString" <type 97>
 func (b <esc:0x1> <type 96>) At (i <type -11>) <type -11>
 func (b <esc:0x12> <type 96>) RightAlign () <type 22>
type 97 struct { Bytes <type 22>; BitLength <type -11>; }
type 98 *<type 99>
type 99 "crypto/x509.VerifyOptions" <type 100>
type 100 struct { DNSName <type -16>; Intermediates <type 101>; Roots <type 101>; CurrentTime <type 60>; KeyUsages <type 106>; MaxConstraintComparisions <type -11>; }
type 101 *<type 102>
type 102 "crypto/x509.CertPool" <type 104>
 func (s <esc:0x9> <type 101>) .crypto/x509.copy () <type 101>
 func (s <esc:0x1> <type 101>) .crypto/x509.findPotentialParents (cert <esc:0x1> <type 25>) <type 48>
 func (s <esc:0x1> <type 101>) .crypto/x509.contains (cert <esc:0x1> <type 25>) <type -15>
 func (s <esc:0x9> <type 101>) AddCert (cert <type 25>)
 func (s <esc:0x9> <type 101>) AppendCertsFromPEM (pemCerts <type 22>) (ok <type -15>)
 func (s <esc:0x9> <type 101>) Subjects () <type 103>
type 103 [] <type 22>
type 104 struct { .crypto/x509.bySubjectKeyId <type 105>; .crypto/x509.byName <type 105>; .crypto/x509.certs <type 24>; }
type 105 map [<type -16>] <type 48>
type 106 [] <type 107>
type 107 "crypto/x509.ExtKeyUsage" <type -11>
type 108 [] <type 24>
type 109 *<type -11>
type 110 (parsedName <type 29>, constraint <type 29>) (match <type -15>, err <type -19>)
type 111 map [<type 25>] <type 108>
type 112 "crypto/x509.SignatureAlgorithm" <type -11>
 func (algo <type 112>) .crypto/x509.isRSAPSS () <type -15>
 func (algo <type 112>) String () <type -16>
type 113 struct { Raw <type 22>; RawTBSCertificate <type 22>; RawSubjectPublicKeyInfo <type 22>; RawSubject <type 22>; RawIssuer <type 22>; Signature <type 22>; SignatureAlgorithm <type 112>; PublicKeyAlgorithm <type 114>; PublicKey <type 29>; Version <type -11>; SerialNumber <type 33>; Issuer <type 115>; Subject <type 115>; NotBefore <type 60>; NotAfter <type 60>; KeyUsage <type 119>; Extensions <type 76>; ExtraExtensions <type 76>; UnhandledCriticalExtensions <type 120>; ExtKeyUsage <type 106>; UnknownExtKeyUsage <type 120>; BasicConstraintsValid <type -15>; IsCA <type -15>; MaxPathLen <type -11>; MaxPathLenZero <type -15>; SubjectKeyId <type 22>; AuthorityKeyId <type 22>; OCSPServer <type 14>; IssuingCertificateURL <type 14>; DNSNames <type 14>; EmailAddresses <type 14>; IPAddresses <type 121>; URIs <type 125>; PermittedDNSDomainsCritical <type -15>; PermittedDNSDomains <type 14>; ExcludedDNSDomains <type 14>; PermittedIPRanges <type 133>; ExcludedIPRanges <type 133>; PermittedEmailAddresses <type 14>; ExcludedEmailAddresses <type 14>; PermittedURIDomains <type 14>; ExcludedURIDomains <type 14>; CRLDistributionPoints <type 14>; PolicyIdentifiers <type 120>; }
type 114 "crypto/x509.PublicKeyAlgorithm" <type -11>
 func (algo <type 114>) String () <type -16>
type 115 "crypto/x509/pkix.Name" <type 118>
 func (n <type 115>) String () <type -16>
 func (n <type 115>) ToRDNSequence () (ret <type 90>)
 func (n <esc:0x1> <type 115>) .crypto/x509/pkix.appendRDNs (in <esc:0x1a> <type 90>, values <esc:0x9> <type 14>, oid <type 79>) <type 90>
 func (n <esc:0x9> <type 116>) FillFromRDNSequence (rdns <esc:0x9> <type 117>)
type 116 *<type 115>
type 117 *<type 90>
type 118 struct { Country <type 14>; Organization <type 14>; OrganizationalUnit <type 14>; Locality <type 14>; Province <type 14>; StreetAddress <type 14>; PostalCode <type 14>; SerialNumber <type -16>; CommonName <type -16>; Names <type 93>; ExtraNames <type 93>; }
type 119 "crypto/x509.KeyUsage" <type -11>
type 120 [] <type 79>
type 121 [] <type 122>
type 122 "net.IP" <type 22>
 func (ip <esc:0x1> <type 122>) Equal (x <esc:0x1> <type 122>) <type -15>
 func (ip <esc:0x1> <type 122>) Mask (mask <esc:0x1> <type 123>) <type 122>
 func (ip <esc:0x1> <type 122>) IsLinkLocalUnicast () <type -15>
 func (ip <esc:0x1> <type 122>) MarshalText () (? <type 22>, ? <type -19>)
 func (ip <esc:0x1> <type 122>) String () <type -16>
 func (ip <esc:0x1> <type 122>) DefaultMask () <type 123>
 func (ip <esc:0x1> <type 122>) .net.matchAddrFamily (x <esc:0x1> <type 122>) <type -15>
 func (ip <esc:0x1> <type 124>) UnmarshalText (text <esc:0x1> <type 22>) <type -19>
 func (ip <esc:0x1> <type 122>) IsGlobalUnicast () <type -15>
 func (ip <esc:0x12> <type 122>) To4 () <type 122>
 func (ip <esc:0x12> <type 122>) To16 () <type 122>
 func (ip <esc:0x1> <type 122>) IsLoopback () <type -15>
 func (ip <esc:0x1> <type 122>) IsMulticast () <type -15>
 func (ip <esc:0x1> <type 122>) IsUnspecified () <type -15>
 func (ip <esc:0x1> <type 122>) IsInterfaceLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 122>) IsLinkLocalMulticast () <type -15>
type 123 "net.IPMask" <type 22>
 func (m <esc:0x1> <type 123>) String () <type -16>
 func (m <esc:0x1> <type 123>) Size () (ones <type -11>, bits <type -11>)
type 124 *<type 122>
type 125 [] <type 126>
type 126 *<type 127>
type 127 "net/url.URL" <type 129>
 func (u <esc:0x1> <type 126>) UnmarshalBinary (text <esc:0x1> <type 22>) <type -19>
 func (u <esc:0x1> <type 126>) MarshalBinary () (text <type 22>, err <type -19>)
 func (u <esc:0x9> <type 126>) Query () <type 128>
 func (u <esc:0xa> <type 126>) ResolveReference (ref <esc:0xa> <type 126>) <type 126>
 func (u <esc:0x22> <type 126>) RequestURI () <type -16>
 func (u <esc:0x9> <type 126>) Parse (ref <type -16>) (? <type 126>, ? <type -19>)
 func (u <esc:0x1> <type 126>) IsAbs () <type -15>
 func (u <esc:0x1> <type 126>) String () <type -16>
 func (u <esc:0x22> <type 126>) Hostname () <type -16>
 func (u <esc:0x22> <type 126>) EscapedPath () <type -16>
 func (u <esc:0x22> <type 126>) Port () <type -16>
 func (u <esc:0x1> <type 126>) .net/url.setPath (p <type -16>) <type -19>
type 128 "net/url.Values" <type 13>
 func (v <esc:0x1> <type 128>) Encode () <type -16>
 func (v <esc:0x1> <type 128>) Del (key <esc:0x1> <type -16>)
 func (v <esc:0x9> <type 128>) Add (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 128>) Set (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 128>) Get (key <esc:0x1> <type -16>) <type -16>
type 129 struct { Scheme <type -16>; Opaque <type -16>; User <type 130>; Host <type -16>; Path <type -16>; RawPath <type -16>; ForceQuery <type -15>; RawQuery <type -16>; Fragment <type -16>; }
type 130 *<type 131>
type 131 "net/url.Userinfo" <type 132>
 func (u <esc:0x22> <type 130>) Password () (? <type -16>, ? <type -15>)
 func (u <esc:0x22> <type 130>) String () <type -16>
 func (u <esc:0x22> <type 130>) Username () <type -16>
type 132 struct { .net/url.username <type -16>; .net/url.password <type -16>; .net/url.passwordSet <type -15>; }
type 133 [] <type 134>
type 134 *<type 135>
type 135 "net.IPNet" <type 136>
 func (n <esc:0x1> <type 134>) String () <type -16>
 func (n <esc:0x1> <type 134>) Network () ($ret178 <type -16>)
 func (n <esc:0x1> <type 134>) Contains (ip <esc:0x1> <type 122>) <type -15>
type 136 struct { IP <type 122>; Mask <type 123>; }
type 137 (label <type -16>, context <type 22>, length <type -11>) (? <type 22>, ? <type -19>)
type 138 (key <type -16>, value <type 14>)
type 139 (? <type 5>)
type 140 *<type 1>
type 141 "context.Context" <type 142>
type 142 interface { Deadline () (deadline <type 60>, ok <type -15>); Done () <type 143>; Err () <type -19>; Value (key <type 29>) <type 29>; }
type 143 chan <- <type 144>
type 144 struct { }
type 145 struct { Addrs <type 146>; Err <type -19>; Coalesced <type -15>; }
type 146 [] <type 147>
type 147 "net.IPAddr" <type 164>
 func (a <esc:0x1> <type 148>) Network () ($ret189 <type -16>)
 func (a <esc:0x1> <type 148>) String () <type -16>
 func (a <esc:0x1> <type 148>) .net.isWildcard () <type -15>
 func (a <esc:0x12> <type 148>) .net.opAddr () <type 149>
 func (a <esc:0x1> <type 148>) .net.family () <type -11>
 func (a <esc:0x1> <type 148>) .net.sockaddr (family <type -11>) (? <type 151>, ? <type -19>)
 func (a <esc:0xa> <type 148>) .net.toLocal (net <esc:0x1> <type -16>) <type 162>
type 148 *<type 147>
type 149 "net.Addr" <type 150>
type 150 interface { Network () <type -16>; String () <type -16>; }
type 151 "syscall.Sockaddr" <type 152>
type 152 interface { .syscall.sockaddr () (ptr <type 153>, len <type 160>, err <type -19>); }
type 153 *<type 154>
type 154 "syscall.RawSockaddrAny" <type 155>
type 155 struct { Addr <type 156>; Pad <type 159>; }
type 156 "syscall.RawSockaddr" <type 157>
type 157 struct { Family <type -6>; Data <type 158>; }
type 158 [14 ] <type -1>
type 159 [96 ] <type -1>
type 160 "syscall.Socklen_t" <type 161>
type 161 ".syscall._socklen_t" <type -7>
type 162 ".net.sockaddr" <type 163>
type 163 interface { ? <type 149>; .net.family () <type -11>; .net.isWildcard () <type -15>; .net.sockaddr (family <type -11>) (? <type 151>, ? <type -19>); .net.toLocal (net <type -16>) <type 162>; }
type 164 struct { IP <type 122>; Zone <type -16>; }
type 165 struct { Host <type -16>; }
type 166 struct { Conn <type 167>; Reused <type -15>; WasIdle <type -15>; IdleTime <type 74>; }
type 167 "net.Conn" <type 168>
type 168 interface { Close () <type -19>; LocalAddr () <type 149>; Read (b <type 22>) (n <type -11>, err <type -19>); RemoteAddr () <type 149>; SetDeadline (t <type 60>) <type -19>; SetReadDeadline (t <type 60>) <type -19>; SetWriteDeadline (t <type 60>) <type -19>; Write (b <type 22>) (n <type -11>, err <type -19>); }
type 169 struct { Err <type -19>; }
func ContextClientTrace (ctx <type 141>) <type 140>
func WithClientTrace (ctx <type 141>, trace <type 140>) <type 141>
checksum 44399239211C76412E913D958689E00B90B43E46
v3;
package httputil
pkgpath net/http/httputil
import bufio bufio "bufio"
import bytes bytes "bytes"
import context context "context"
import errors errors "errors"
import fmt fmt "fmt"
import httpguts internal/x/net/http/httpguts "internal/x/net/http/httpguts"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import log log "log"
import net net "net"
import http net/http "net/http"
import internal net/http/internal "net/http/internal"
import textproto net/textproto "net/textproto"
import url net/url "net/url"
import strings strings "strings"
import sync sync "sync"
import time time "time"
indirectimport asn1 encoding/asn1
indirectimport big math/big
indirectimport httptrace net/http/httptrace
indirectimport multipart mime/multipart
indirectimport pkix crypto/x509/pkix
indirectimport rand math/rand
indirectimport syscall syscall
indirectimport tls crypto/tls
indirectimport x509 crypto/x509
init httputil net..z2fhttp..z2fhttputil..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import gzip compress..z2fgzip..import context context..import crypto crypto..import cipher crypto..z2fcipher..import des crypto..z2fdes..import dsa crypto..z2fdsa..import ecdsa crypto..z2fecdsa..import elliptic crypto..z2felliptic..import randutil crypto..z2finternal..z2frandutil..import md5 crypto..z2fmd5..import rand crypto..z2frand..import rsa crypto..z2frsa..import sha1 crypto..z2fsha1..import sha256 crypto..z2fsha256..import sha512 crypto..z2fsha512..import tls crypto..z2ftls..import x509 crypto..z2fx509..import pkix crypto..z2fx509..z2fpkix..import asn1 encoding..z2fasn1..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import hex encoding..z2fhex..import pem encoding..z2fpem..import fmt fmt..import crc32 hash..z2fcrc32..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import chacha20poly1305 internal..z2fx..z2fcrypto..z2fchacha20poly1305..import cryptobyte internal..z2fx..z2fcrypto..z2fcryptobyte..import chacha20 internal..z2fx..z2fcrypto..z2finternal..z2fchacha20..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import httpguts internal..z2fx..z2fnet..z2fhttp..z2fhttpguts..import httpproxy internal..z2fx..z2fnet..z2fhttp..z2fhttpproxy..import hpack internal..z2fx..z2fnet..z2fhttp2..z2fhpack..import idna internal..z2fx..z2fnet..z2fidna..import bidirule internal..z2fx..z2ftext..z2fsecure..z2fbidirule..import transform internal..z2fx..z2ftext..z2ftransform..import bidi internal..z2fx..z2ftext..z2funicode..z2fbidi..import norm internal..z2fx..z2ftext..z2funicode..z2fnorm..import io io..import ioutil io..z2fioutil..import log log..import big math..z2fbig..import rand math..z2frand..import mime mime..import multipart mime..z2fmultipart..import quotedprintable mime..z2fquotedprintable..import net net..import http net..z2fhttp..import internal net..z2fhttp..z2finternal..import textproto net..z2ftextproto..import os os..import path path..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 1 2 1 29 1 44 1 60 1 61 1 63 1 66 2 29 2 44 2 60 2 61 2 63 2 66 3 1 3 2 3 27 3 29 3 30 3 31 3 44 3 56 3 59 3 60 3 61 3 62 3 63 3 64 3 65 3 66 4 1 4 2 4 3 4 24 4 27 4 28 4 29 4 30 4 31 4 44 4 56 4 59 4 60 4 61 4 62 4 63 4 64 4 65 4 66 5 27 5 29 5 30 5 31 5 44 5 56 5 59 5 60 5 61 5 62 5 63 5 64 5 65 5 66 6 29 6 44 6 60 6 61 6 62 6 63 7 24 7 29 7 44 7 59 7 60 7 61 7 62 7 63 7 66 8 7 8 24 8 29 8 44 8 59 8 60 8 61 8 62 8 63 8 66 9 2 9 12 9 24 9 27 9 29 9 30 9 31 9 44 9 47 9 48 9 56 9 59 9 60 9 61 9 62 9 63 9 64 9 65 9 66 10 2 10 6 10 7 10 11 10 12 10 18 10 22 10 24 10 27 10 29 10 30 10 31 10 44 10 47 10 48 10 56 10 59 10 60 10 61 10 62 10 63 10 64 10 65 10 66 11 2 11 24 11 27 11 29 11 30 11 31 11 44 11 47 11 48 11 56 11 59 11 60 11 61 11 62 11 63 11 64 11 65 11 66 12 29 12 44 12 60 12 61 12 63 13 6 13 24 13 29 13 44 13 59 13 60 13 61 13 62 13 63 13 66 14 1 14 2 14 7 14 24 14 27 14 29 14 30 14 31 14 44 14 47 14 48 14 56 14 59 14 60 14 61 14 62 14 63 14 64 14 65 14 66 15 1 15 2 15 6 15 7 15 12 15 14 15 24 15 27 15 29 15 30 15 31 15 44 15 47 15 48 15 56 15 59 15 60 15 61 15 62 15 63 15 64 15 65 15 66 16 6 16 29 16 44 16 60 16 61 16 62 16 63 17 6 17 29 17 44 17 60 17 61 17 62 17 63 18 6 18 29 18 44 18 60 18 61 18 62 18 63 19 1 19 2 19 5 19 6 19 7 19 8 19 9 19 10 19 11 19 12 19 13 19 14 19 15 19 16 19 17 19 18 19 20 19 21 19 22 19 23 19 24 19 25 19 26 19 27 19 29 19 30 19 31 19 32 19 33 19 34 19 35 19 44 19 45 19 47 19 48 19 52 19 56 19 58 19 59 19 60 19 61 19 62 19 63 19 64 19 65 19 66 20 1 20 2 20 5 20 6 20 7 20 8 20 9 20 10 20 11 20 12 20 13 20 14 20 15 20 16 20 17 20 18 20 21 20 22 20 23 20 24 20 25 20 26 20 27 20 29 20 30 20 31 20 33 20 35 20 44 20 45 20 47 20 48 20 52 20 56 20 58 20 59 20 60 20 61 20 62 20 63 20 64 20 65 20 66 21 2 21 22 21 24 21 25 21 27 21 29 21 30 21 31 21 44 21 47 21 48 21 56 21 59 21 60 21 61 21 62 21 63 21 64 21 65 21 66 22 2 22 24 22 27 22 29 22 30 22 31 22 44 22 47 22 48 22 56 22 59 22 60 22 61 22 62 22 63 22 64 22 65 22 66 23 24 23 29 23 44 23 59 23 60 23 61 23 62 23 63 23 66 24 29 24 44 24 59 24 60 24 61 24 62 24 63 24 66 25 27 25 29 25 30 25 31 25 44 25 56 25 59 25 60 25 61 25 62 25 63 25 64 25 65 25 66 26 2 26 23 26 24 26 29 26 44 26 59 26 60 26 61 26 62 26 63 26 66 27 29 27 30 27 31 27 44 27 56 27 59 27 60 27 61 27 62 27 63 27 64 27 65 27 66 28 29 28 44 28 60 28 61 28 63 30 29 30 44 30 60 30 61 30 63 30 64 30 65 32 7 32 24 32 29 32 34 32 44 32 59 32 60 32 61 32 62 32 63 32 66 33 2 33 22 33 24 33 27 33 29 33 30 33 31 33 44 33 47 33 48 33 56 33 59 33 60 33 61 33 62 33 63 33 64 33 65 33 66 34 7 34 24 34 29 34 44 34 59 34 60 34 61 34 62 34 63 34 66 36 1 36 2 36 5 36 27 36 29 36 30 36 31 36 35 36 39 36 40 36 41 36 42 36 43 36 44 36 45 36 46 36 48 36 52 36 55 36 56 36 58 36 59 36 60 36 61 36 62 36 63 36 64 36 65 36 66 37 2 37 5 37 27 37 29 37 30 37 31 37 35 37 39 37 40 37 41 37 42 37 43 37 44 37 46 37 48 37 52 37 56 37 59 37 60 37 61 37 62 37 63 37 64 37 65 37 66 38 2 38 27 38 29 38 30 38 31 38 44 38 56 38 59 38 60 38 61 38 62 38 63 38 64 38 65 38 66 39 2 39 27 39 29 39 30 39 31 39 40 39 41 39 42 39 43 39 44 39 46 39 56 39 59 39 60 39 61 39 62 39 63 39 64 39 65 39 66 40 2 40 27 40 29 40 30 40 31 40 41 40 42 40 44 40 46 40 56 40 59 40 60 40 61 40 62 40 63 40 64 40 65 40 66 41 2 41 29 41 44 41 60 41 61 41 63 41 66 42 27 42 29 42 30 42 31 42 44 42 46 42 56 42 59 42 60 42 61 42 62 42 63 42 64 42 65 42 66 43 2 43 27 43 29 43 30 43 31 43 41 43 44 43 56 43 59 43 60 43 61 43 62 43 63 43 64 43 65 43 66 44 29 44 60 44 61 44 63 45 2 45 29 45 30 45 31 45 44 45 56 45 58 45 59 45 60 45 61 45 62 45 63 45 64 45 65 45 66 46 27 46 29 46 30 46 31 46 44 46 56 46 59 46 60 46 61 46 62 46 63 46 64 46 65 46 66 47 2 47 24 47 27 47 29 47 30 47 31 47 44 47 48 47 56 47 59 47 60 47 61 47 62 47 63 47 64 47 65 47 66 48 29 48 60 48 61 48 63 49 1 49 2 49 23 49 24 49 27 49 29 49 30 49 31 49 44 49 56 49 59 49 60 49 61 49 62 49 63 49 64 49 65 49 66 50 1 50 2 50 5 50 7 50 14 50 23 50 24 50 27 50 29 50 30 50 31 50 35 50 44 50 45 50 47 50 48 50 49 50 51 50 52 50 55 50 56 50 58 50 59 50 60 50 61 50 62 50 63 50 64 50 65 50 66 51 1 51 2 51 27 51 29 51 30 51 31 51 44 51 56 51 59 51 60 51 61 51 62 51 63 51 64 51 65 51 66 52 5 52 27 52 29 52 30 52 31 52 35 52 44 52 48 52 56 52 59 52 60 52 61 52 62 52 63 52 64 52 65 52 66 53 1 53 2 53 3 53 4 53 5 53 6 53 7 53 8 53 9 53 10 53 11 53 12 53 13 53 14 53 15 53 16 53 17 53 18 53 19 53 20 53 21 53 22 53 23 53 24 53 25 53 26 53 27 53 28 53 29 53 30 53 31 53 32 53 33 53 34 53 35 53 36 53 37 53 38 53 39 53 40 53 41 53 42 53 43 53 44 53 45 53 46 53 47 53 48 53 49 53 50 53 51 53 52 53 54 53 55 53 56 53 57 53 58 53 59 53 60 53 61 53 62 53 63 53 64 53 65 53 66 54 1 54 2 54 27 54 29 54 30 54 31 54 44 54 56 54 59 54 60 54 61 54 62 54 63 54 64 54 65 54 66 55 1 55 2 55 5 55 27 55 29 55 30 55 31 55 35 55 44 55 45 55 48 55 52 55 56 55 58 55 59 55 60 55 61 55 62 55 63 55 64 55 65 55 66 56 29 56 30 56 31 56 44 56 60 56 61 56 63 56 64 56 65 57 29 57 44 57 60 57 61 57 63 57 66 58 29 58 30 58 31 58 44 58 56 58 59 58 60 58 61 58 62 58 63 58 64 58 65 58 66 59 29 59 60 59 61 59 62 59 63 59 66 60 29 60 61 62 29 62 60 62 61 63 29 63 60 63 61 64 29 64 60 64 61 64 63 65 29 65 60 65 61 65 63 65 64
types 262 5 29 376 1038 326 56 21 412 86 17 64 29 316 29 67 3300 19 73 356 19 525 165 21 31 91 21 36 112 19 75 83 19 1431 30 73 30 72 186 34 48 30 43 35 19 2192 40 74 32 89 30 94 19 113 144 316 35 22 36 142 26 19 22 19 492 19 94 52 35 21 19 415 312 36 285 1036 36 19 191 415 30 22 51 94 25 11 55 22 52 36 22 51 74 21 489 19 34 197 37 92 20 45 53 42 55 25 25 40 41 52 1078 21 157 47 63 38 187 21 374 23 21 1784 158 23 58 114 21 5347 23 36 32 195 36 295 35 37 63 36 65 21 1041 38 23 134 39 66 41 58 72 4256 23 40 104 23 49 92 184 21 141 102 58 301 45 59 85 45 113 103 23 68 23 61 54 161 58 21 48 167 21 499 21 123 37 23 46 23 21 89 37 1176 98 362 21 21 269 43 23 23 23 21 816 363 194 21 220 113 23 21 224 52 92 43 24 58 36 23 42 74 21 235 46 23 21 90 249 40 23 469 40 21 515 310 283 21 149 131 21 110 37 25 47 19 21 98 44 37 49 19 19 182 23 44 77 21 1112 22 19 123 35 51 46 130 374
type 1 "BufferPool" <type 5>
type 2 "ClientConn" <type 7>
 func (cc <type 240>) Hijack () (c <type 11>, r <type 31>)
 func (cc <type 240>) Close () <type -19>
 func (cc <type 240>) Write (req <type 43>) <type -19>
 func (cc <type 240>) Pending () <type -11>
 func (cc <type 240>) Read (req <type 43>) (resp <type 228>, err <type -19>)
 func (cc <type 240>) Do (req <type 43>) (? <type 228>, ? <type -19>)
type 3 "ReverseProxy" <type 248>
 func (p <esc:0x9> <type 247>) .net/http/httputil.defaultErrorHandler (rw <type 259>, req <esc:0x1> <type 43>, err <type -19>)
 func (p <type 247>) .net/http/httputil.getErrorHandler () <type 258>
 func (p <type 247>) .net/http/httputil.modifyResponse (rw <type 259>, res <type 228>, req <type 43>) <type -15>
 func (p <type 247>) ServeHTTP (rw <type 259>, req <esc:0x9> <type 43>)
 func (p <esc:0x1> <type 247>) .net/http/httputil.flushInterval (req <esc:0x1> <type 43>, res <esc:0x1> <type 228>) <type 18>
 func (p <esc:0x9> <type 247>) .net/http/httputil.copyResponse (dst <type 33>, src <type 35>, flushInterval <type 18>) <type -19>
 func (p <esc:0x9> <type 247>) .net/http/httputil.copyBuffer (dst <type 33>, src <type 35>, buf <type 6>) (? <type -4>, ? <type -19>)
 func (p <esc:0x9> <type 247>) .net/http/httputil.logf (format <esc:0x1> <type -16>, args <esc:0x9> ...<type 61>)
 func (p <type 247>) .net/http/httputil.handleUpgradeResponse (rw <type 259>, req <type 43>, res <esc:0x9> <type 228>)
type 4 "ServerConn" <type 261>
 func (sc <type 246>) Hijack () (? <type 11>, ? <type 31>)
 func (sc <type 246>) Close () <type -19>
 func (sc <type 246>) Read () (? <type 43>, ? <type -19>)
 func (sc <type 246>) Pending () <type -11>
 func (sc <type 246>) Write (req <esc:0x1> <type 43>, resp <esc:0x9> <type 228>) <type -19>
type 5 interface { Get () <type 6>; Put (? <type 6>); }
type 6 [] <type -20>
type 7 struct { .net/http/httputil.mu <type 8>; .net/http/httputil.c <type 11>; .net/http/httputil.r <type 31>; .net/http/httputil.re <type -19>; .net/http/httputil.we <type -19>; .net/http/httputil.lastbody <type 38>; .net/http/httputil.nread <type -11>; .net/http/httputil.nwritten <type -11>; .net/http/httputil.pipereq <type 42>; .net/http/httputil.pipe <type 231>; .net/http/httputil.writeReq <type 239>; }
type 8 "sync.Mutex" <type 10>
 func (m <type 9>) Lock ()
 func (m <type 9>) Unlock ()
type 9 *<type 8>
type 10 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 11 "net.Conn" <type 12>
type 12 interface { Close () <type -19>; LocalAddr () <type 13>; Read (b <type 6>) (n <type -11>, err <type -19>); RemoteAddr () <type 13>; SetDeadline (t <type 15>) <type -19>; SetReadDeadline (t <type 15>) <type -19>; SetWriteDeadline (t <type 15>) <type -19>; Write (b <type 6>) (n <type -11>, err <type -19>); }
type 13 "net.Addr" <type 14>
type 14 interface { Network () <type -16>; String () <type -16>; }
type 15 "time.Time" <type 30>
 func (t <esc:0x1> <type 16>) .time.sec () <type -4>
 func (t <type 15>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 15>
 func (t <esc:0x1> <type 15>) .time.date (full <type -15>) (year <type -11>, month <type 17>, day <type -11>, yday <type -11>)
 func (t <esc:0x1> <type 15>) MarshalJSON () (? <type 6>, ? <type -19>)
 func (t <esc:0x1> <type 16>) .time.stripMono ()
 func (t <esc:0x1> <type 15>) MarshalText () (? <type 6>, ? <type -19>)
 func (t <esc:0x1> <type 16>) .time.mono () <type -4>
 func (t <esc:0x1> <type 15>) Sub (u <esc:0x1> <type 15>) <type 18>
 func (t <esc:0x32> <type 15>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x12> <type 15>) UTC () <type 15>
 func (t <esc:0x1> <type 15>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 15>) In (loc <type 19>) <type 15>
 func (t <esc:0x1> <type 15>) Equal (u <esc:0x1> <type 15>) <type -15>
 func (t <esc:0x1> <type 15>) IsZero () <type -15>
 func (t <esc:0x12> <type 15>) Local () <type 15>
 func (t <esc:0x1> <type 15>) YearDay () <type -11>
 func (t <esc:0x1> <type 15>) Unix () <type -4>
 func (t <esc:0x1> <type 15>) Weekday () <type 29>
 func (t <esc:0x1> <type 15>) Date () (year <type -11>, month <type 17>, day <type -11>)
 func (t <esc:0x1> <type 16>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 15>) MarshalBinary () (? <type 6>, ? <type -19>)
 func (t <esc:0x1> <type 15>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 15>) Day () <type -11>
 func (t <esc:0x1> <type 16>) GobDecode (data <esc:0x1> <type 6>) <type -19>
 func (t <esc:0x1> <type 15>) After (u <esc:0x1> <type 15>) <type -15>
 func (t <esc:0x1> <type 15>) UnixNano () <type -4>
 func (t <esc:0x1> <type 16>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 15>) Minute () <type -11>
 func (t <esc:0x1> <type 15>) AppendFormat (b <esc:0x12> <type 6>, layout <esc:0x1> <type -16>) <type 6>
 func (t <esc:0x12> <type 15>) Truncate (d <type 18>) <type 15>
 func (t <esc:0x12> <type 15>) Add (d <type 18>) <type 15>
 func (t <esc:0x1> <type 15>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 15>) String () <type -16>
 func (t <esc:0x12> <type 15>) Round (d <type 18>) <type 15>
 func (t <esc:0x1> <type 16>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 15>) Before (u <esc:0x1> <type 15>) <type -15>
 func (t <esc:0x32> <type 15>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 16>) .time.setLoc (loc <type 19>)
 func (t <esc:0x1> <type 16>) UnmarshalText (data <esc:0x1> <type 6>) <type -19>
 func (t <esc:0x1> <type 16>) UnmarshalBinary (data <esc:0x1> <type 6>) <type -19>
 func (t <esc:0x1> <type 15>) Hour () <type -11>
 func (t <esc:0x1> <type 15>) .time.abs () <type -8>
 func (t <esc:0x1> <type 15>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 15>) Year () <type -11>
 func (t <esc:0x1> <type 16>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 16>) UnmarshalJSON (data <esc:0x1> <type 6>) <type -19>
 func (t <esc:0x1> <type 15>) Second () <type -11>
 func (t <esc:0x1> <type 15>) Month () <type 17>
 func (t <esc:0x12> <type 15>) Location () <type 19>
 func (t <esc:0x1> <type 15>) GobEncode () (? <type 6>, ? <type -19>)
type 16 *<type 15>
type 17 "time.Month" <type -11>
 func (m <type 17>) String () <type -16>
type 18 "time.Duration" <type -4>
 func (d <type 18>) String () <type -16>
 func (d <type 18>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 18>) Seconds () <type -10>
 func (d <type 18>) Minutes () <type -10>
 func (d <type 18>) Hours () <type -10>
 func (d <type 18>) Truncate (m <type 18>) <type 18>
 func (d <type 18>) Round (m <type 18>) <type 18>
type 19 *<type 20>
type 20 "time.Location" <type 21>
 func (l <esc:0x12> <type 19>) .time.get () <type 19>
 func (l <esc:0x22> <type 19>) String () <type -16>
 func (l <esc:0x32> <type 19>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 19>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 19>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 19>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 21 struct { .time.name <type -16>; .time.zone <type 22>; .time.tx <type 25>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 28>; }
type 22 [] <type 23>
type 23 ".time.zone" <type 24>
type 24 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 25 [] <type 26>
type 26 ".time.zoneTrans" <type 27>
type 27 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 28 *<type 23>
type 29 "time.Weekday" <type -11>
 func (d <type 29>) String () <type -16>
type 30 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 19>; }
type 31 *<type 32>
type 32 "bufio.Reader" <type 37>
 func (b <esc:0x9> <type 31>) .bufio.writeBuf (w <type 33>) (? <type -4>, ? <type -19>)
 func (b <esc:0x10a> <type 31>) WriteTo (w <type 33>) (n <type -4>, err <type -19>)
 func (b <esc:0x10a> <type 31>) ReadString (delim <type -20>) (? <type -16>, ? <type -19>)
 func (b <esc:0x82a> <type 31>) ReadLine () (line <type 6>, isPrefix <type -15>, err <type -19>)
 func (b <esc:0x1> <type 31>) Size () <type -11>
 func (b <esc:0x9> <type 31>) Reset (r <type 35>)
 func (b <esc:0x9> <type 31>) .bufio.fill ()
 func (b <esc:0x1> <type 31>) UnreadByte () <type -19>
 func (b <esc:0x80a> <type 31>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x1> <type 31>) .bufio.reset (buf <type 6>, r <type 35>)
 func (b <esc:0x22> <type 31>) .bufio.readErr () <type -19>
 func (b <esc:0x1> <type 31>) UnreadRune () <type -19>
 func (b <esc:0x12a> <type 31>) ReadSlice (delim <type -20>) (line <type 6>, err <type -19>)
 func (b <esc:0x12a> <type 31>) Peek (n <type -11>) (? <type 6>, ? <type -19>)
 func (b <esc:0x10a> <type 31>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x10a> <type 31>) Discard (n <type -11>) (discarded <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 31>) Read (p <type 6>) (n <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 31>) ReadBytes (delim <type -20>) (? <type 6>, ? <type -19>)
 func (b <esc:0x1> <type 31>) Buffered () <type -11>
type 33 "io.Writer" <type 34>
type 34 interface { Write (p <type 6>) (n <type -11>, err <type -19>); }
type 35 "io.Reader" <type 36>
type 36 interface { Read (p <type 6>) (n <type -11>, err <type -19>); }
type 37 struct { .bufio.buf <type 6>; .bufio.rd <type 35>; .bufio.r <type -11>; .bufio.w <type -11>; .bufio.err <type -19>; .bufio.lastByte <type -11>; .bufio.lastRuneSize <type -11>; }
type 38 "io.ReadCloser" <type 39>
type 39 interface { ? <type 35>; ? <type 40>; }
type 40 "io.Closer" <type 41>
type 41 interface { Close () <type -19>; }
type 42 map [<type 43>] <type -12>
type 43 *<type 44>
type 44 "net/http.Request" <type 226>
 func (r <esc:0x1> <type 43>) .net/http.requiresHTTP1 () <type -15>
 func (r <esc:0x1> <type 43>) .net/http.wantsHttp10KeepAlive () <type -15>
 func (r <esc:0x9> <type 43>) FormFile (key <esc:0x1> <type -16>) (? <type 45>, ? <type 51>, ? <type -19>)
 func (r <esc:0x1> <type 43>) .net/http.outgoingLength () <type -4>
 func (r <esc:0x1> <type 43>) .net/http.expectsContinue () <type -15>
 func (r <esc:0x9> <type 43>) PostFormValue (key <esc:0x1> <type -16>) <type -16>
 func (r <esc:0x1> <type 43>) .net/http.wantsClose () <type -15>
 func (r <esc:0x9> <type 43>) ParseMultipartForm (maxMemory <type -4>) <type -19>
 func (r <esc:0x9> <type 43>) ParseForm () <type -19>
 func (r <esc:0x1> <type 43>) BasicAuth () (username <type -16>, password <type -16>, ok <type -15>)
 func (r <esc:0x1> <type 43>) SetBasicAuth (username <esc:0x1> <type -16>, password <esc:0x1> <type -16>)
 func (r <esc:0x22> <type 43>) Context () <type 57>
 func (r <esc:0x9> <type 43>) .net/http.multipartReader (allowMixed <type -15>) (? <type 62>, ? <type -19>)
 func (r <esc:0x9> <type 43>) WithContext (ctx <type 57>) <type 43>
 func (r <esc:0x1> <type 43>) .net/http.isH2Upgrade () <type -15>
 func (r <esc:0x1> <type 43>) ProtoAtLeast (major <type -11>, minor <type -11>) <type -15>
 func (r <esc:0x1> <type 43>) UserAgent () <type -16>
 func (r <esc:0x1> <type 43>) .net/http.isReplayable () <type -15>
 func (r <esc:0x9> <type 43>) .net/http.closeBody ()
 func (r <esc:0x9> <type 43>) .net/http.write (w <type 33>, usingProxy <type -15>, extraHeaders <esc:0x1> <type 74>, waitForContinue <esc:0x1> <type 220>) (err <type -19>)
 func (r <esc:0x1> <type 43>) Referer () <type -16>
 func (r <esc:0x9> <type 43>) Write (w <type 33>) <type -19>
 func (r <esc:0x9> <type 43>) FormValue (key <esc:0x1> <type -16>) <type -16>
 func (r <esc:0x1> <type 43>) AddCookie (c <esc:0x9> <type 221>)
 func (r <esc:0x1> <type 43>) Cookies () <type 225>
 func (r <esc:0x1> <type 43>) Cookie (name <esc:0x1> <type -16>) (? <type 221>, ? <type -19>)
 func (r <esc:0x9> <type 43>) MultipartReader () (? <type 62>, ? <type -19>)
 func (r <esc:0x9> <type 43>) WriteProxy (w <type 33>) <type -19>
type 45 "mime/multipart.File" <type 46>
type 46 interface { ? <type 35>; ? <type 47>; ? <type 49>; ? <type 40>; }
type 47 "io.ReaderAt" <type 48>
type 48 interface { ReadAt (p <type 6>, off <type -4>) (n <type -11>, err <type -19>); }
type 49 "io.Seeker" <type 50>
type 50 interface { Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>); }
type 51 *<type 52>
type 52 "mime/multipart.FileHeader" <type 53>
 func (fh <esc:0x9> <type 51>) Open () (? <type 45>, ? <type -19>)
type 53 struct { Filename <type -16>; Header <type 54>; Size <type -4>; .mime/multipart.content <type 6>; .mime/multipart.tmpfile <type -16>; }
type 54 "net/textproto.MIMEHeader" <type 55>
 func (h <esc:0x1> <type 54>) Del (key <esc:0x1> <type -16>)
 func (h <esc:0x1> <type 54>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 54>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x9> <type 54>) Add (key <type -16>, value <type -16>)
type 55 map [<type -16>] <type 56>
type 56 [] <type -16>
type 57 "context.Context" <type 58>
type 58 interface { Deadline () (deadline <type 15>, ok <type -15>); Done () <type 59>; Err () <type -19>; Value (key <type 61>) <type 61>; }
type 59 chan <- <type 60>
type 60 struct { }
type 61 interface { }
type 62 *<type 63>
type 63 "mime/multipart.Reader" <type 73>
 func (r <type 62>) ReadForm (maxMemory <type -4>) (? <type 64>, ? <type -19>)
 func (r <type 62>) .mime/multipart.readForm (maxMemory <type -4>) (_ <type 64>, err <type -19>)
 func (mr <esc:0x1> <type 62>) .mime/multipart.isBoundaryDelimiterLine (line <esc:0x1> <type 6>) (ret <type -15>)
 func (r <type 62>) NextPart () (? <type 69>, ? <type -19>)
 func (mr <esc:0x1> <type 62>) .mime/multipart.isFinalBoundary (line <esc:0x1> <type 6>) <type -15>
type 64 *<type 65>
type 65 "mime/multipart.Form" <type 66>
 func (f <esc:0x1> <type 64>) RemoveAll () <type -19>
type 66 struct { Value <type 55>; File <type 67>; }
type 67 map [<type -16>] <type 68>
type 68 [] <type 51>
type 69 *<type 70>
type 70 "mime/multipart.Part" <type 71>
 func (p <esc:0x1> <type 69>) FormName () <type -16>
 func (p <esc:0x1> <type 69>) FileName () <type -16>
 func (bp <esc:0x9> <type 69>) .mime/multipart.populateHeaders () <type -19>
 func (p <esc:0x1> <type 69>) .mime/multipart.parseContentDisposition ()
 func (p <esc:0x9> <type 69>) Read (d <type 6>) (n <type -11>, err <type -19>)
 func (p <type 69>) Close () <type -19>
type 71 struct { Header <type 54>; .mime/multipart.mr <type 62>; .mime/multipart.disposition <type -16>; .mime/multipart.dispositionParams <type 72>; .mime/multipart.r <type 35>; .mime/multipart.n <type -11>; .mime/multipart.total <type -4>; .mime/multipart.err <type -19>; .mime/multipart.readErr <type -19>; }
type 72 map [<type -16>] <type -16>
type 73 struct { .mime/multipart.bufReader <type 31>; .mime/multipart.currentPart <type 69>; .mime/multipart.partsRead <type -11>; .mime/multipart.nl <type 6>; .mime/multipart.nlDashBoundary <type 6>; .mime/multipart.dashBoundaryDash <type 6>; .mime/multipart.dashBoundary <type 6>; }
type 74 "net/http.Header" <type 55>
 func (h <esc:0x1> <type 74>) .net/http.writeSubset (w <type 33>, exclude <esc:0x1> <type 75>, trace <esc:0x1> <type 76>) <type -19>
 func (h <esc:0x1> <type 74>) .net/http.sortedKeyValues (exclude <esc:0x1> <type 75>) (kvs <type 214>, hs <type 217>)
 func (h <esc:0x1> <type 74>) Write (w <type 33>) <type -19>
 func (h <esc:0x1> <type 74>) Del (key <esc:0x1> <type -16>)
 func (h <esc:0x1> <type 74>) .net/http.has (key <esc:0x1> <type -16>) <type -15>
 func (h <esc:0x1> <type 74>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 74>) WriteSubset (w <type 33>, exclude <esc:0x1> <type 75>) <type -19>
 func (h <esc:0x1> <type 74>) .net/http.clone () <type 74>
 func (h <esc:0x1> <type 74>) .net/http.write (w <type 33>, trace <esc:0x1> <type 76>) <type -19>
 func (h <esc:0x1> <type 74>) .net/http.get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 74>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x9> <type 74>) Add (key <type -16>, value <type -16>)
type 75 map [<type -16>] <type -15>
type 76 *<type 77>
type 77 "net/http/httptrace.ClientTrace" <type 78>
 func (t <type 76>) .net/http/httptrace.compose (old <type 76>)
 func (t <esc:0x1> <type 76>) .net/http/httptrace.hasNetHooks () <type -15>
type 78 struct { GetConn <type 79>; GotConn <type 80>; PutIdleConn <type 83>; GotFirstResponseByte <type 84>; Got100Continue <type 84>; Got1xxResponse <type 85>; DNSStart <type 86>; DNSDone <type 89>; ConnectStart <type 112>; ConnectDone <type 113>; TLSHandshakeStart <type 84>; TLSHandshakeDone <type 114>; WroteHeaderField <type 210>; WroteHeaders <type 84>; Wait100Continue <type 84>; WroteRequest <type 211>; }
type 79 (hostPort <type -16>)
type 80 (? <type 81>)
type 81 "net/http/httptrace.GotConnInfo" <type 82>
type 82 struct { Conn <type 11>; Reused <type -15>; WasIdle <type -15>; IdleTime <type 18>; }
type 83 (err <type -19>)
type 84 ()
type 85 (code <type -11>, header <type 54>) <type -19>
type 86 (? <type 87>)
type 87 "net/http/httptrace.DNSStartInfo" <type 88>
type 88 struct { Host <type -16>; }
type 89 (? <type 90>)
type 90 "net/http/httptrace.DNSDoneInfo" <type 91>
type 91 struct { Addrs <type 92>; Err <type -19>; Coalesced <type -15>; }
type 92 [] <type 93>
type 93 "net.IPAddr" <type 108>
 func (a <esc:0xa> <type 94>) .net.toLocal (net <esc:0x1> <type -16>) <type 95>
 func (a <esc:0x1> <type 94>) .net.sockaddr (family <type -11>) (? <type 97>, ? <type -19>)
 func (a <esc:0x1> <type 94>) .net.family () <type -11>
 func (a <esc:0x12> <type 94>) .net.opAddr () <type 13>
 func (a <esc:0x1> <type 94>) .net.isWildcard () <type -15>
 func (a <esc:0x1> <type 94>) String () <type -16>
 func (a <esc:0x1> <type 94>) Network () ($ret189 <type -16>)
type 94 *<type 93>
type 95 ".net.sockaddr" <type 96>
type 96 interface { ? <type 13>; .net.family () <type -11>; .net.isWildcard () <type -15>; .net.sockaddr (family <type -11>) (? <type 97>, ? <type -19>); .net.toLocal (net <type -16>) <type 95>; }
type 97 "syscall.Sockaddr" <type 98>
type 98 interface { .syscall.sockaddr () (ptr <type 99>, len <type 106>, err <type -19>); }
type 99 *<type 100>
type 100 "syscall.RawSockaddrAny" <type 101>
type 101 struct { Addr <type 102>; Pad <type 105>; }
type 102 "syscall.RawSockaddr" <type 103>
type 103 struct { Family <type -6>; Data <type 104>; }
type 104 [14 ] <type -1>
type 105 [96 ] <type -1>
type 106 "syscall.Socklen_t" <type 107>
type 107 ".syscall._socklen_t" <type -7>
type 108 struct { IP <type 109>; Zone <type -16>; }
type 109 "net.IP" <type 6>
 func (ip <esc:0x1> <type 109>) .net.matchAddrFamily (x <esc:0x1> <type 109>) <type -15>
 func (ip <esc:0x1> <type 110>) UnmarshalText (text <esc:0x1> <type 6>) <type -19>
 func (ip <esc:0x12> <type 109>) To4 () <type 109>
 func (ip <esc:0x1> <type 109>) IsMulticast () <type -15>
 func (ip <esc:0x1> <type 109>) IsUnspecified () <type -15>
 func (ip <esc:0x1> <type 109>) IsInterfaceLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 109>) IsLinkLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 109>) IsLinkLocalUnicast () <type -15>
 func (ip <esc:0x1> <type 109>) IsGlobalUnicast () <type -15>
 func (ip <esc:0x1> <type 109>) IsLoopback () <type -15>
 func (ip <esc:0x12> <type 109>) To16 () <type 109>
 func (ip <esc:0x1> <type 109>) Equal (x <esc:0x1> <type 109>) <type -15>
 func (ip <esc:0x1> <type 109>) Mask (mask <esc:0x1> <type 111>) <type 109>
 func (ip <esc:0x1> <type 109>) DefaultMask () <type 111>
 func (ip <esc:0x1> <type 109>) String () <type -16>
 func (ip <esc:0x1> <type 109>) MarshalText () (? <type 6>, ? <type -19>)
type 110 *<type 109>
type 111 "net.IPMask" <type 6>
 func (m <esc:0x1> <type 111>) String () <type -16>
 func (m <esc:0x1> <type 111>) Size () (ones <type -11>, bits <type -11>)
type 112 (network <type -16>, addr <type -16>)
type 113 (network <type -16>, addr <type -16>, err <type -19>)
type 114 (? <type 115>, ? <type -19>)
type 115 "crypto/tls.ConnectionState" <type 117>
 func (cs <esc:0x1b2> <type 116>) ExportKeyingMaterial (label <type -16>, context <type 6>, length <type -11>) (? <type 6>, ? <type -19>)
type 116 *<type 115>
type 117 struct { Version <type -6>; HandshakeComplete <type -15>; DidResume <type -15>; CipherSuite <type -6>; NegotiatedProtocol <type -16>; NegotiatedProtocolIsMutual <type -15>; ServerName <type -16>; PeerCertificates <type 118>; VerifiedChains <type 184>; SignedCertificateTimestamps <type 179>; OCSPResponse <type 6>; .crypto/tls.ekm <type 209>; TLSUnique <type 6>; }
type 118 [] <type 119>
type 119 *<type 120>
type 120 "crypto/x509.Certificate" <type 188>
 func (c <esc:0x9> <type 119>) CheckSignature (algo <type 121>, signed <type 6>, signature <type 6>) <type -19>
 func (c <esc:0x9> <type 119>) CheckSignatureFrom (parent <esc:0x9> <type 119>) <type -19>
 func (c <esc:0x32> <type 119>) .crypto/x509.getSANExtension () <type 6>
 func (c <esc:0x9> <type 119>) CreateCRL (rand <type 35>, priv <type 61>, revokedCerts <esc:0x9> <type 122>, now <type 15>, expiry <type 15>) (crlBytes <type 6>, err <type -19>)
 func (c <esc:0x9> <type 119>) .crypto/x509.commonNameAsHostname () <type -15>
 func (c <esc:0x9> <type 119>) CheckCRLSignature (crl <esc:0x9> <type 156>) <type -19>
 func (c <type 119>) .crypto/x509.isValid (certType <type -11>, currentChain <esc:0x9> <type 118>, opts <esc:0x1> <type 174>) <type -19>
 func (c <esc:0x1> <type 119>) .crypto/x509.systemVerify (opts <esc:0x1> <type 174>) (chains <type 184>, err <type -19>)
 func (c <esc:0x12> <type 119>) .crypto/x509.checkNameConstraints (count <esc:0x1> <type 185>, maxConstraintComparisons <type -11>, nameType <type -16>, name <type -16>, parsedName <type 61>, match <esc:0x9> <type 186>, permitted <type 61>, excluded <type 61>) <type -19>
 func (c <type 119>) Verify (opts <type 175>) (chains <type 184>, err <type -19>)
 func (c <type 119>) .crypto/x509.buildChains (cache <esc:0x1> <type 187>, currentChain <esc:0x9> <type 118>, sigChecks <esc:0x1> <type 185>, opts <esc:0x9> <type 174>) (chains <type 184>, err <type -19>)
 func (c <esc:0x1a> <type 119>) VerifyHostname (h <type -16>) <type -19>
 func (c <esc:0x1> <type 119>) .crypto/x509.hasSANExtension () <type -15>
 func (c <esc:0x1> <type 119>) .crypto/x509.hasNameConstraints () <type -15>
 func (c <esc:0x1> <type 119>) Equal (other <esc:0x1> <type 119>) <type -15>
type 121 "crypto/x509.SignatureAlgorithm" <type -11>
 func (algo <type 121>) String () <type -16>
 func (algo <type 121>) .crypto/x509.isRSAPSS () <type -15>
type 122 [] <type 123>
type 123 "crypto/x509/pkix.RevokedCertificate" <type 124>
type 124 struct { SerialNumber <type 125>; RevocationTime <type 15>; Extensions <type 152> "asn1:\"optional\""; }
type 125 *<type 126>
type 126 "math/big.Int" <type 147>
 func (x <esc:0x1> <type 125>) Append (buf <esc:0x12> <type 6>, base <type -11>) <type 6>
 func (x <esc:0x1> <type 125>) GobEncode () (? <type 6>, ? <type -19>)
 func (x <esc:0x1> <type 125>) MarshalText () (text <type 6>, err <type -19>)
 func (x <esc:0x9> <type 125>) ProbablyPrime (n <type -11>) <type -15>
 func (z <esc:0x1a> <type 125>) SetInt64 (x <type -4>) <type 125>
 func (z <esc:0x1a> <type 125>) ModSqrt (x <esc:0x9> <type 125>, p <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) Rsh (x <esc:0x1> <type 125>, n <type -12>) <type 125>
 func (x <esc:0x1> <type 125>) Int64 () <type -4>
 func (z <esc:0x1a> <type 125>) SetUint64 (x <type -8>) <type 125>
 func (x <esc:0x1> <type 125>) MarshalJSON () (? <type 6>, ? <type -19>)
 func (z <esc:0x1a> <type 125>) SetBytes (buf <esc:0x1> <type 6>) <type 125>
 func (z <esc:0x1a> <type 125>) .math/big.modSqrtTonelliShanks (x <esc:0x9> <type 125>, p <type 125>) <type 125>
 func (x <esc:0x22> <type 125>) Bits () <type 127>
 func (z <esc:0x1a> <type 125>) Add (x <esc:0x1> <type 125>, y <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) .math/big.modSqrt3Mod4Prime (x <esc:0x9> <type 125>, p <esc:0x1> <type 125>) <type 125>
 func (x <esc:0x1> <type 125>) Format (s <type 129>, ch <type -21>)
 func (z <esc:0x1a> <type 125>) ModInverse (g <esc:0x1> <type 125>, n <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) Set (x <esc:0x1> <type 125>) <type 125>
 func (x <esc:0x1> <type 125>) String () <type -16>
 func (z <esc:0x9> <type 125>) Scan (s <type 131>, ch <type -21>) <type -19>
 func (x <esc:0x1> <type 125>) Text (base <type -11>) <type -16>
 func (x <esc:0x1> <type 125>) IsInt64 () <type -15>
 func (x <esc:0x1> <type 125>) Cmp (y <esc:0x1> <type 125>) (r <type -11>)
 func (z <esc:0x1a> <type 125>) Quo (x <esc:0x1> <type 125>, y <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) Exp (x <esc:0x9> <type 125>, y <esc:0x1> <type 125>, m <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) Not (x <esc:0x1> <type 125>) <type 125>
 func (x <esc:0x1> <type 125>) Bytes () <type 6>
 func (z <esc:0x12> <type 125>) SetBits (abs <type 127>) <type 125>
 func (z <esc:0x1a> <type 125>) MulRange (a <type -4>, b <type -4>) <type 125>
 func (x <esc:0x1> <type 125>) Sign () <type -11>
 func (z <esc:0x1a> <type 125>) Abs (x <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) Neg (x <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x9> <type 125>) UnmarshalText (text <type 6>) <type -19>
 func (z <esc:0x1a> <type 125>) QuoRem (x <esc:0x1> <type 125>, y <esc:0x1> <type 125>, r <esc:0x8a> <type 125>) (? <type 125>, ? <type 125>)
 func (z <esc:0x9> <type 125>) UnmarshalJSON (text <type 6>) <type -19>
 func (z <esc:0x9> <type 125>) GobDecode (buf <esc:0x1> <type 6>) <type -19>
 func (z <esc:0x1a> <type 125>) .math/big.scan (r <type 134>, base <type -11>) (? <type 125>, ? <type -11>, ? <type -19>)
 func (z <esc:0x1a> <type 125>) SetString (s <type -16>, base <type -11>) (? <type 125>, ? <type -15>)
 func (z <esc:0x1a> <type 125>) Mul (x <esc:0x1> <type 125>, y <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) Mod (x <esc:0x1> <type 125>, y <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) .math/big.setFromScanner (r <type 134>, base <type -11>) (? <type 125>, ? <type -15>)
 func (z <esc:0x1a> <type 125>) And (x <esc:0x1> <type 125>, y <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) Sub (x <esc:0x1> <type 125>, y <esc:0x1> <type 125>) <type 125>
 func (x <esc:0x1> <type 125>) CmpAbs (y <esc:0x1> <type 125>) <type -11>
 func (z <esc:0x1a> <type 125>) Div (x <esc:0x1> <type 125>, y <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) Rem (x <esc:0x1> <type 125>, y <esc:0x1> <type 125>) <type 125>
 func (x <esc:0x1> <type 125>) IsUint64 () <type -15>
 func (z <esc:0x1a> <type 125>) DivMod (x <esc:0x1> <type 125>, y <esc:0x1> <type 125>, m <esc:0x8a> <type 125>) (? <type 125>, ? <type 125>)
 func (z <esc:0x1a> <type 125>) Binomial (n <type -4>, k <type -4>) <type 125>
 func (x <esc:0x1> <type 125>) Uint64 () <type -8>
 func (x <esc:0x1> <type 125>) BitLen () <type -11>
 func (z <esc:0x1a> <type 125>) GCD (x <esc:0x9> <type 125>, y <esc:0x9> <type 125>, a <esc:0x1> <type 125>, b <esc:0x1> <type 125>) <type 125>
 func (x <esc:0x1> <type 125>) Bit (i <type -11>) <type -12>
 func (z <esc:0x1a> <type 125>) Or (x <esc:0x1> <type 125>, y <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x12> <type 125>) .math/big.lehmerGCD (x <esc:0x1> <type 125>, y <esc:0x9> <type 125>, a <esc:0x1> <type 125>, b <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) Rand (rnd <esc:0x9> <type 138>, n <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) Xor (x <esc:0x1> <type 125>, y <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) Sqrt (x <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) .math/big.modSqrt5Mod8Prime (x <esc:0x1> <type 125>, p <esc:0x1> <type 125>) <type 125>
 func (z <esc:0x1a> <type 125>) Lsh (x <esc:0x1> <type 125>, n <type -12>) <type 125>
 func (z <esc:0x1a> <type 125>) SetBit (x <esc:0x1> <type 125>, i <type -11>, b <type -12>) <type 125>
 func (z <esc:0x1a> <type 125>) AndNot (x <esc:0x1> <type 125>, y <esc:0x1> <type 125>) <type 125>
type 127 [] <type 128>
type 128 "math/big.Word" <type -12>
type 129 "fmt.State" <type 130>
type 130 interface { Flag (c <type -11>) <type -15>; Precision () (prec <type -11>, ok <type -15>); Width () (wid <type -11>, ok <type -15>); Write (b <type 6>) (n <type -11>, err <type -19>); }
type 131 "fmt.ScanState" <type 132>
type 132 interface { Read (buf <type 6>) (n <type -11>, err <type -19>); ReadRune () (r <type -21>, size <type -11>, err <type -19>); SkipSpace (); Token (skipSpace <type -15>, f <type 133>) (token <type 6>, err <type -19>); UnreadRune () <type -19>; Width () (wid <type -11>, ok <type -15>); }
type 133 (? <type -21>) <type -15>
type 134 "io.ByteScanner" <type 135>
type 135 interface { ? <type 136>; UnreadByte () <type -19>; }
type 136 "io.ByteReader" <type 137>
type 137 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 138 *<type 139>
type 139 "math/rand.Rand" <type 142>
 func (r <esc:0x9> <type 138>) Uint32 () <type -7>
 func (r <esc:0x9> <type 138>) Shuffle (n <type -11>, swap <esc:0x1> <type 140>)
 func (r <esc:0x9> <type 138>) Int31 () <type -3>
 func (r <type 138>) Read (p <esc:0x1> <type 6>) (n <type -11>, err <type -19>)
 func (r <esc:0x9> <type 138>) Float32 () <type -9>
 func (r <esc:0x9> <type 138>) Perm (n <type -11>) <type 141>
 func (r <esc:0x9> <type 138>) Uint64 () <type -8>
 func (r <esc:0x9> <type 138>) .math/rand.int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 138>) Seed (seed <type -4>)
 func (r <esc:0x9> <type 138>) Float64 () <type -10>
 func (r <esc:0x9> <type 138>) Int63 () <type -4>
 func (r <esc:0x9> <type 138>) NormFloat64 () <type -10>
 func (r <esc:0x9> <type 138>) ExpFloat64 () <type -10>
 func (r <esc:0x9> <type 138>) Int63n (n <type -4>) <type -4>
 func (r <esc:0x9> <type 138>) Int () <type -11>
 func (r <esc:0x9> <type 138>) Intn (n <type -11>) <type -11>
 func (r <esc:0x9> <type 138>) Int31n (n <type -3>) <type -3>
type 140 (i <type -11>, j <type -11>)
type 141 [] <type -11>
type 142 struct { .math/rand.src <type 143>; .math/rand.s64 <type 145>; .math/rand.readVal <type -4>; .math/rand.readPos <type -1>; }
type 143 "math/rand.Source" <type 144>
type 144 interface { Int63 () <type -4>; Seed (seed <type -4>); }
type 145 "math/rand.Source64" <type 146>
type 146 interface { ? <type 143>; Uint64 () <type -8>; }
type 147 struct { .math/big.neg <type -15>; .math/big.abs <type 148>; }
type 148 ".math/big.nat" <type 127>
 func (x <esc:0x1> <type 148>) .math/big.modW (d <type 128>) (r <type 128>)
 func (z <esc:0x12> <type 148>) .math/big.xor (x <esc:0x1> <type 148>, y <esc:0x1> <type 148>) <type 148>
 func (z <esc:0x1> <type 148>) .math/big.bytes (buf <esc:0x1> <type 6>) (i <type -11>)
 func (z <esc:0x12> <type 148>) .math/big.or (x <esc:0x1> <type 148>, y <esc:0x1> <type 148>) <type 148>
 func (z <esc:0x12> <type 148>) .math/big.andNot (x <esc:0x1> <type 148>, y <esc:0x1> <type 148>) <type 148>
 func (z <type 148>) .math/big.mul (x <esc:0x1> <type 148>, y <esc:0x1> <type 148>) <type 148>
 func (z <esc:0x12> <type 148>) .math/big.mulAddWW (x <esc:0x1> <type 148>, y <type 128>, r <type 128>) <type 148>
 func (z <type 148>) .math/big.expNN (x <type 148>, y <esc:0x1> <type 148>, m <esc:0x1> <type 148>) <type 148>
 func (x <esc:0x1> <type 148>) .math/big.bit (i <type -12>) <type -12>
 func (x <esc:0x1> <type 148>) .math/big.trailingZeroBits () <type -12>
 func (z <type 148>) .math/big.sqr (x <esc:0x1> <type 148>) <type 148>
 func (z <esc:0x12> <type 148>) .math/big.norm () <type 148>
 func (x <esc:0x1> <type 148>) .math/big.utoa (base <type -11>) <type 6>
 func (z <esc:0x12> <type 148>) .math/big.setBit (x <esc:0x1> <type 148>, i <type -12>, b <type -12>) <type 148>
 func (z <type 148>) .math/big.expNNWindowed (x <type 148>, y <esc:0x1> <type 148>, m <esc:0x1> <type 148>) <type 148>
 func (z <esc:0x12> <type 148>) .math/big.shr (x <esc:0x1> <type 148>, s <type -12>) <type 148>
 func (z <type 148>) .math/big.expWW (x <type 128>, y <type 128>) <type 148>
 func (z <esc:0x12> <type 148>) .math/big.montgomery (x <esc:0x1> <type 148>, y <esc:0x1> <type 148>, m <esc:0x1> <type 148>, k <type 128>, n <type -11>) <type 148>
 func (q <esc:0x1> <type 148>) .math/big.convertWords (s <esc:0x1> <type 6>, b <type 128>, ndigits <type -11>, bb <type 128>, table <esc:0x1> <type 149>)
 func (z <type 148>) .math/big.add (x <esc:0x1> <type 148>, y <esc:0x1> <type 148>) <type 148>
 func (z <esc:0x12> <type 148>) .math/big.expNNMontgomery (x <esc:0x1> <type 148>, y <esc:0x1> <type 148>, m <esc:0x1> <type 148>) <type 148>
 func (z <esc:0x12> <type 148>) .math/big.scan (r <type 134>, base <type -11>, fracOk <type -15>) (res <type 148>, b <type -11>, count <type -11>, err <type -19>)
 func (n <esc:0x1> <type 148>) .math/big.probablyPrimeMillerRabin (reps <type -11>, force2 <type -15>) <type -15>
 func (z <esc:0x12> <type 148>) .math/big.setBytes (buf <esc:0x1> <type 6>) <type 148>
 func (z <esc:0x12> <type 148>) .math/big.random (rand <esc:0x9> <type 138>, limit <esc:0x1> <type 148>, n <type -11>) <type 148>
 func (z <esc:0x12> <type 148>) .math/big.set (x <esc:0x1> <type 148>) <type 148>
 func (z <esc:0x12> <type 148>) .math/big.make (n <type -11>) <type 148>
 func (z <type 148>) .math/big.mulRange (a <type -8>, b <type -8>) <type 148>
 func (x <esc:0x1> <type 148>) .math/big.bitLen () <type -11>
 func (z <esc:0x12> <type 148>) .math/big.divLarge (u <esc:0x82> <type 148>, uIn <esc:0x1> <type 148>, vIn <esc:0x1> <type 148>) (q <type 148>, r <type 148>)
 func (z <esc:0x12> <type 148>) .math/big.shl (x <esc:0x1> <type 148>, s <type -12>) <type 148>
 func (x <esc:0x1> <type 148>) .math/big.cmp (y <esc:0x1> <type 148>) (r <type -11>)
 func (z <esc:0x12> <type 148>) .math/big.sub (x <esc:0x1> <type 148>, y <esc:0x1> <type 148>) <type 148>
 func (x <esc:0x1> <type 148>) .math/big.sticky (i <type -12>) <type -12>
 func (z <type 148>) .math/big.sqrt (x <esc:0x1> <type 148>) <type 148>
 func (n <type 148>) .math/big.probablyPrimeLucas () <type -15>
 func (z <esc:0x12> <type 148>) .math/big.setWord (x <type 128>) <type 148>
 func (z <esc:0x12> <type 148>) .math/big.divW (x <esc:0x1> <type 148>, y <type 128>) (q <type 148>, r <type 128>)
 func (x <esc:0x1> <type 148>) .math/big.itoa (neg <type -15>, base <type -11>) <type 6>
 func (z <esc:0x1> <type 148>) .math/big.clear ()
 func (z <esc:0x12> <type 148>) .math/big.div (z2 <esc:0x82> <type 148>, u <esc:0x1> <type 148>, v <esc:0x1> <type 148>) (q <type 148>, r <type 148>)
 func (z <esc:0x12> <type 148>) .math/big.and (x <esc:0x1> <type 148>, y <esc:0x1> <type 148>) <type 148>
 func (z <esc:0x12> <type 148>) .math/big.setUint64 (x <type -8>) <type 148>
type 149 [] <type 150>
type 150 ".math/big.divisor" <type 151>
type 151 struct { .math/big.bbb <type 148>; .math/big.nbits <type -11>; .math/big.ndigits <type -11>; }
type 152 [] <type 153>
type 153 "crypto/x509/pkix.Extension" <type 154>
type 154 struct { Id <type 155>; Critical <type -15> "asn1:\"optional\""; Value <type 6>; }
type 155 "encoding/asn1.ObjectIdentifier" <type 141>
 func (oi <esc:0x1> <type 155>) String () <type -16>
 func (oi <esc:0x1> <type 155>) Equal (other <esc:0x1> <type 155>) <type -15>
type 156 *<type 157>
type 157 "crypto/x509/pkix.CertificateList" <type 158>
 func (certList <esc:0x1> <type 156>) HasExpired (now <esc:0x1> <type 15>) <type -15>
type 158 struct { TBSCertList <type 159>; SignatureAlgorithm <type 162>; SignatureValue <type 172>; }
type 159 "crypto/x509/pkix.TBSCertificateList" <type 160>
type 160 struct { Raw <type 161>; Version <type -11> "asn1:\"optional,default:0\""; Signature <type 162>; Issuer <type 166>; ThisUpdate <type 15>; NextUpdate <type 15> "asn1:\"optional\""; RevokedCertificates <type 122> "asn1:\"optional\""; Extensions <type 152> "asn1:\"tag:0,optional,explicit\""; }
type 161 "encoding/asn1.RawContent" <type 6>
type 162 "crypto/x509/pkix.AlgorithmIdentifier" <type 163>
type 163 struct { Algorithm <type 155>; Parameters <type 164> "asn1:\"optional\""; }
type 164 "encoding/asn1.RawValue" <type 165>
type 165 struct { Class <type -11>; Tag <type -11>; IsCompound <type -15>; Bytes <type 6>; FullBytes <type 6>; }
type 166 "crypto/x509/pkix.RDNSequence" <type 167>
 func (r <esc:0x9> <type 166>) String () <type -16>
type 167 [] <type 168>
type 168 "crypto/x509/pkix.RelativeDistinguishedNameSET" <type 169>
type 169 [] <type 170>
type 170 "crypto/x509/pkix.AttributeTypeAndValue" <type 171>
type 171 struct { Type <type 155>; Value <