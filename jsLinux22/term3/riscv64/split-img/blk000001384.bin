sh ()
 func (w <esc:0x1> <type 49>) .compress/flate.dynamicSize (litEnc <esc:0x1> <type 55>, offEnc <esc:0x1> <type 55>, extraBits <type -11>) (size <type -11>, numCodegens <type -11>)
 func (w <type 49>) .compress/flate.writeBlockDynamic (tokens <esc:0x1> <type 44>, eof <type -15>, input <type 9>)
 func (w <type 49>) .compress/flate.writeBlock (tokens <esc:0x1> <type 44>, eof <type -15>, input <type 9>)
 func (w <esc:0x9> <type 49>) .compress/flate.write (b <type 9>)
 func (w <type 49>) .compress/flate.writeBits (b <type -3>, nb <type -12>)
 func (w <type 49>) .compress/flate.writeStoredHeader (length <type -11>, isEof <type -15>)
 func (w <type 49>) .compress/flate.writeBytes (bytes <type 9>)
 func (w <esc:0x1> <type 49>) .compress/flate.storedSize (in <esc:0x1> <type 9>) (? <type -11>, ? <type -15>)
 func (w <esc:0x1> <type 49>) .compress/flate.reset (writer <type 22>)
 func (w <esc:0x1> <type 49>) .compress/flate.fixedSize (extraBits <type -11>) <type -11>
 func (w <esc:0x1> <type 49>) .compress/flate.generateCodegen (numLiterals <type -11>, numOffsets <type -11>, litEnc <esc:0x1> <type 55>, offEnc <esc:0x1> <type 55>)
 func (w <type 49>) .compress/flate.writeBlockHuff (eof <type -15>, input <type 9>)
type 51 ".compress/flate.hcode" <type 53>
 func (h <esc:0x1> <type 52>) .compress/flate.set (code <type -6>, length <type -6>)
type 52 *<type 51>
type 53 struct { .compress/flate.code <type -6>; .compress/flate.len <type -6>; }
type 54 [] <type 51>
type 55 *<type 56>
type 56 ".compress/flate.huffmanEncoder" <type 61>
 func (h <esc:0x1> <type 55>) .compress/flate.bitLength (freq <esc:0x1> <type 57>) <type -11>
 func (h <esc:0x12> <type 55>) .compress/flate.bitCounts (list <esc:0x1> <type 58>, maxBits <type -3>) <type 57>
 func (h <type 55>) .compress/flate.assignEncodingAndSize (bitCount <esc:0x1> <type 57>, list <type 58>)
 func (h <type 55>) .compress/flate.generate (freq <esc:0x1> <type 57>, maxBits <type -3>)
type 57 [] <type -3>
type 58 [] <type 59>
type 59 ".compress/flate.literalNode" <type 60>
type 60 struct { .compress/flate.literal <type -6>; .compress/flate.freq <type -3>; }
type 61 struct { .compress/flate.codes <type 54>; .compress/flate.freqcache <type 58>; .compress/flate.bitCount <type 62>; .compress/flate.lns <type 63>; .compress/flate.lfs <type 65>; }
type 62 [17 ] <type -3>
type 63 ".compress/flate.byLiteral" <type 58>
 func (s <type 64>) .compress/flate.sort (a <type 58>)
 func (s <esc:0x1> <type 63>) Len () <type -11>
 func (s <esc:0x1> <type 63>) Less (i <type -11>, j <type -11>) <type -15>
 func (s <esc:0x1> <type 63>) Swap (i <type -11>, j <type -11>)
type 64 *<type 63>
type 65 ".compress/flate.byFreq" <type 58>
 func (s <type 66>) .compress/flate.sort (a <type 58>)
 func (s <esc:0x1> <type 65>) Len () <type -11>
 func (s <esc:0x1> <type 65>) Less (i <type -11>, j <type -11>) <type -15>
 func (s <esc:0x1> <type 65>) Swap (i <type -11>, j <type -11>)
type 66 *<type 65>
type 67 struct { .compress/flate.writer <type 22>; .compress/flate.bits <type -8>; .compress/flate.nbits <type -12>; .compress/flate.bytes <type 68>; .compress/flate.codegenFreq <type 69>; .compress/flate.nbytes <type -11>; .compress/flate.literalFreq <type 57>; .compress/flate.offsetFreq <type 57>; .compress/flate.codegen <type 35>; .compress/flate.literalEncoding <type 55>; .compress/flate.offsetEncoding <type 55>; .compress/flate.codegenEncoding <type 55>; .compress/flate.err <type -19>; }
type 68 [248 ] <type -20>
type 69 [19 ] <type -3>
type 70 (? <type 9>, ? <type 71>)
type 71 [] <type -7>
type 72 (? <type 43>, ? <type 9>) <type -11>
type 73 (? <type 43>)
type 74 *<type 75>
type 75 ".compress/flate.deflateFast" <type 76>
 func (e <esc:0x1> <type 74>) .compress/flate.encode (dst <esc:0x12> <type 44>, src <esc:0x1> <type 9>) <type 44>
 func (e <esc:0x1> <type 74>) .compress/flate.matchLen (s <type -3>, t <type -3>, src <esc:0x1> <type 9>) <type -3>
 func (e <esc:0x1> <type 74>) .compress/flate.reset ()
 func (e <esc:0x1> <type 74>) .compress/flate.resetAll ()
type 76 struct { .compress/flate.table <type 77>; .compress/flate.prev <type 9>; .compress/flate.cur <type -3>; }
type 77 [16384 ] <type 78>
type 78 ".compress/flate.tableEntry" <type 79>
type 79 struct { .compress/flate.val <type -7>; .compress/flate.offset <type -3>; }
type 80 [131072 ] <type -7>
type 81 [32768 ] <type -7>
type 82 [257 ] <type -7>
type 83 "hash.Hash32" <type 84>
type 84 interface { ? <type 85>; Sum32 () <type -7>; }
type 85 "hash.Hash" <type 86>
type 86 interface { ? <type 22>; BlockSize () <type -11>; Reset (); Size () <type -11>; Sum (b <type 9>) <type 9>; }
type 87 *<type 88>
type 88 "bufio.Writer" <type 89>
 func (b <esc:0x10a> <type 87>) WriteRune (r <type -21>) (size <type -11>, err <type -19>)
 func (b <esc:0x2a> <type 87>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x10a> <type 87>) Write (p <type 9>) (nn <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 87>) ReadFrom (r <type 7>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 87>) Buffered () <type -11>
 func (b <esc:0x10a> <type 87>) WriteString (s <esc:0x1> <type -16>) (? <type -11>, ? <type -19>)
 func (b <esc:0x1> <type 87>) Available () <type -11>
 func (b <esc:0x2a> <type 87>) Flush () <type -19>
 func (b <esc:0x1> <type 87>) Reset (w <type 22>)
 func (b <esc:0x1> <type 87>) Size () <type -11>
type 89 struct { .bufio.err <type -19>; .bufio.buf <type 9>; .bufio.n <type -11>; .bufio.wr <type 22>; }
type 90 interface { Get () <type 91>; Put (? <type 91>); }
type 91 *<type 3>
const BestCompression <type 1> = -3 
const BestSpeed <type 1> = -2 
func Decode (r <type 7>) (? <type 10>, ? <type -19>)
func DecodeConfig (r <type 7>) (? <type 20>, ? <type -19>)
const DefaultCompression <type 1> = 0 
func Encode (w <type 22>, m <type 10>) <type -19>
const NoCompression <type 1> = -1 
checksum DAB472E60054085E27405F2CB671F3C6761DB472
v3;
package suffixarray
pkgpath index/suffixarray
import bytes bytes "bytes"
import binary encoding/binary "encoding/binary"
import io io "io"
import regexp regexp "regexp"
import sort sort "sort"
indirectimport syntax regexp/syntax
init bytes bytes..import binary encoding..z2fbinary..import cpu internal..z2fcpu..import io io..import reflect reflect..import regexp regexp..import syntax regexp..z2fsyntax..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 2 0 3 0 7 0 8 0 10 0 11 1 2 1 3 1 4 1 7 1 8 1 9 1 10 1 11 3 2 3 7 3 8 3 10 4 2 4 7 4 8 4 9 4 10 4 11 5 0 5 2 5 3 5 4 5 6 5 7 5 8 5 9 5 10 5 11 6 2 6 3 6 4 6 7 6 8 6 9 6 10 6 11 7 2 7 8 9 2 9 7 9 8 10 2 10 7 10 8
types 76 2 536 84 21 21 17 28 71 28 72 19 3904 22 20 20 34 83 21 21 19 666 19 34 70 21 21 34 62 19 35 65 19 381 82 79 22 19 97 42 34 270 211 19 303 72 21 21 412 19 96 448 19 41 449 19 43 449 19 90 19 347 169 21 32 89 34 44 30 21 450 19 40 72 21 40 48
type 1 "Index" <type 2>
 func (x <esc:0x9> <type 5>) Read (r <type 6>) <type -19>
 func (x <esc:0x9> <type 5>) Write (w <type 8>) <type -19>
 func (x <esc:0x22> <type 5>) Bytes () <type 3>
 func (x <esc:0x22> <type 5>) .index/suffixarray.at (i <type -11>) <type 3>
 func (x <esc:0x22> <type 5>) .index/suffixarray.lookupAll (s <esc:0x1> <type 3>) <type 4>
 func (x <esc:0x1> <type 5>) Lookup (s <esc:0x1> <type 3>, n <type -11>) (result <type 4>)
 func (x <esc:0x9> <type 5>) FindAllIndex (r <type 10>, n <type -11>) (result <type 13>)
type 2 struct { .index/suffixarray.data <type 3>; .index/suffixarray.sa <type 4>; }
type 3 [] <type -20>
type 4 [] <type -11>
type 5 *<type 1>
type 6 "io.Reader" <type 7>
type 7 interface { Read (p <type 3>) (n <type -11>, err <type -19>); }
type 8 "io.Writer" <type 9>
type 9 interface { Write (p <type 3>) (n <type -11>, err <type -19>); }
type 10 *<type 11>
type 11 "regexp.Regexp" <type 69>
 func (re <type 10>) Split (s <type -16>, n <type -11>) <type 12>
 func (re <type 10>) FindAllStringSubmatchIndex (s <type -16>, n <type -11>) <type 13>
 func (re <type 10>) FindAllStringIndex (s <type -16>, n <type -11>) <type 13>
 func (re <type 10>) FindAll (b <type 3>, n <type -11>) <type 14>
 func (re <type 10>) FindReaderSubmatchIndex (r <type 15>) <type 4>
 func (re <type 10>) FindSubmatchIndex (b <type 3>) <type 4>
 func (re <type 10>) FindAllSubmatch (b <type 3>, n <type -11>) <type 17>
 func (re <esc:0x1> <type 10>) .regexp.expand (dst <esc:0x12> <type 3>, template <esc:0x1> <type -16>, bsrc <esc:0x1> <type 3>, src <esc:0x1> <type -16>, match <esc:0x1> <type 4>) <type 3>
 func (re <esc:0x1> <type 10>) Expand (dst <esc:0x12> <type 3>, template <esc:0x1> <type 3>, src <esc:0x1> <type 3>, match <esc:0x1> <type 4>) <type 3>
 func (re <type 10>) FindAllString (s <type -16>, n <type -11>) <type 12>
 func (re <type 10>) FindSubmatch (b <type 3>) <type 14>
 func (re <type 10>) FindReaderIndex (r <type 15>) (loc <type 4>)
 func (re <esc:0x22> <type 10>) LiteralPrefix () (prefix <type -16>, complete <type -15>)
 func (re <type 10>) FindAllStringSubmatch (s <type -16>, n <type -11>) <type 18>
 func (re <esc:0x1> <type 10>) .regexp.put (m <type 19>)
 func (re <type 10>) FindStringSubmatch (s <type -16>) <type 12>
 func (re <esc:0xa> <type 10>) Copy () <type 10>
 func (re <type 10>) Find (b <type 3>) <type 3>
 func (re <esc:0x1> <type 10>) NumSubexp () <type -11>
 func (re <type 10>) .regexp.doExecute (r <type 15>, b <type 3>, s <type -16>, pos <type -11>, ncap <type -11>, dstCap <esc:0x12> <type 4>) <type 4>
 func (re <type 10>) FindAllIndex (b <type 3>, n <type -11>) <type 13>
 func (re <type 10>) Match (b <type 3>) <type -15>
 func (re <type 10>) .regexp.get () <type 19>
 func (re <esc:0x1> <type 10>) ExpandString (dst <esc:0x12> <type 3>, template <esc:0x1> <type -16>, src <esc:0x1> <type -16>, match <esc:0x1> <type 4>) <type 3>
 func (re <type 10>) .regexp.doMatch (r <type 15>, b <type 3>, s <type -16>) <type -15>
 func (re <esc:0x22> <type 10>) SubexpNames () <type 12>
 func (re <type 10>) FindAllSubmatchIndex (b <type 3>, n <type -11>) <type 13>
 func (re <esc:0x22> <type 10>) String () <type -16>
 func (re <type 10>) .regexp.backtrack (ib <type 3>, is <type -16>, pos <type -11>, ncap <type -11>, dstCap <esc:0x12> <type 4>) <type 4>
 func (re <esc:0x1> <type 10>) .regexp.pad (a <esc:0x12> <type 4>) <type 4>
 func (re <esc:0x1> <type 10>) .regexp.tryBacktrack (b <esc:0x9> <type 59>, i <type 39>, pc <type -7>, pos <type -11>) <type -15>
 func (re <type 10>) MatchReader (r <type 15>) <type -15>
 func (re <type 10>) MatchString (s <type -16>) <type -15>
 func (re <type 10>) ReplaceAllString (src <type -16>, repl <type -16>) <type -16>
 func (re <type 10>) ReplaceAllLiteralString (src <type -16>, repl <type -16>) <type -16>
 func (re <type 10>) ReplaceAllStringFunc (src <type -16>, repl <type 65>) <type -16>
 func (re <type 10>) .regexp.doOnePass (ir <type 15>, ib <type 3>, is <type -16>, pos <type -11>, ncap <type -11>, dstCap <esc:0x12> <type 4>) <type 4>
 func (re <type 10>) .regexp.replaceAll (bsrc <type 3>, src <type -16>, nmatch <type -11>, repl <esc:0x2a> <type 66>) <type 3>
 func (re <type 10>) ReplaceAll (src <type 3>, repl <type 3>) <type 3>
 func (re <esc:0x1> <type 10>) Longest ()
 func (re <type 10>) ReplaceAllLiteral (src <type 3>, repl <type 3>) <type 3>
 func (re <type 10>) ReplaceAllFunc (src <type 3>, repl <type 67>) <type 3>
 func (re <type 10>) .regexp.allMatches (s <type -16>, b <type 3>, n <type -11>, deliver <esc:0x1> <type 68>)
 func (re <type 10>) FindIndex (b <type 3>) (loc <type 4>)
 func (re <type 10>) FindString (s <type -16>) <type -16>
 func (re <type 10>) FindStringSubmatchIndex (s <type -16>) <type 4>
 func (re <type 10>) FindStringIndex (s <type -16>) (loc <type 4>)
type 12 [] <type -16>
type 13 [] <type 4>
type 14 [] <type 3>
type 15 "io.RuneReader" <type 16>
type 16 interface { ReadRune () (r <type -21>, size <type -11>, err <type -19>); }
type 17 [] <type 14>
type 18 [] <type 12>
type 19 *<type 20>
type 20 ".regexp.machine" <type 41>
 func (m <esc:0x3a> <type 19>) .regexp.add (q <esc:0x1> <type 21>, pc <type -7>, pos <type -11>, cap <esc:0x1> <type 4>, cond <esc:0x1> <type 36>, t <type 28>) <type 28>
 func (m <esc:0x9> <type 19>) .regexp.step (runq <esc:0x9> <type 21>, nextq <esc:0x1> <type 21>, pos <type -11>, nextPos <type -11>, c <type -21>, nextCond <esc:0x1> <type 36>)
 func (m <esc:0x9> <type 19>) .regexp.clear (q <esc:0x9> <type 21>)
 func (m <esc:0x9> <type 19>) .regexp.match (i <type 39>, pos <type -11>) <type -15>
 func (m <esc:0x32> <type 19>) .regexp.alloc (i <type 31>) <type 28>
 func (m <esc:0x1> <type 19>) .regexp.init (ncap <type -11>)
type 21 *<type 22>
type 22 ".regexp.queue" <type 23>
type 23 struct { .regexp.sparse <type 24>; .regexp.dense <type 25>; }
type 24 [] <type -7>
type 25 [] <type 26>
type 26 ".regexp.entry" <type 27>
type 27 struct { .regexp.pc <type -7>; .regexp.t <type 28>; }
type 28 *<type 29>
type 29 ".regexp.thread" <type 30>
type 30 struct { .regexp.inst <type 31>; .regexp.cap <type 4>; }
type 31 *<type 32>
type 32 "regexp/syntax.Inst" <type 34>
 func (i <esc:0x1> <type 31>) .regexp/syntax.op () <type 33>
 func (i <esc:0x1> <type 31>) MatchRune (r <type -21>) <type -15>
 func (i <esc:0x1> <type 31>) MatchRunePos (r <type -21>) <type -11>
 func (i <esc:0x1> <type 31>) MatchEmptyWidth (before <type -21>, after <type -21>) <type -15>
 func (i <esc:0x1> <type 31>) String () <type -16>
type 33 "regexp/syntax.InstOp" <type -5>
 func (i <type 33>) String () <type -16>
type 34 struct { Op <type 33>; Out <type -7>; Arg <type -7>; Rune <type 35>; }
type 35 [] <type -21>
type 36 *<type 37>
type 37 ".regexp.lazyFlag" <type -8>
 func (f <type 37>) .regexp.match (op <type 38>) <type -15>
type 38 "regexp/syntax.EmptyOp" <type -5>
type 39 ".regexp.input" <type 40>
type 40 interface { .regexp.canCheckPrefix () <type -15>; .regexp.context (pos <type -11>) <type 37>; .regexp.hasPrefix (re <type 10>) <type -15>; .regexp.index (re <type 10>, pos <type -11>) <type -11>; .regexp.step (pos <type -11>) (r <type -21>, width <type -11>); }
type 41 struct { .regexp.re <type 10>; .regexp.p <type 42>; .regexp.q0 <type 22>; .regexp.q1 <type 22>; .regexp.pool <type 46>; .regexp.matched <type -15>; .regexp.matchcap <type 4>; .regexp.inputs <type 47>; }
type 42 *<type 43>
type 43 "regexp/syntax.Prog" <type 44>
 func (p <esc:0x1> <type 42>) String () <type -16>
 func (p <esc:0x22> <type 42>) .regexp/syntax.skipNop (pc <type -7>) <type 31>
 func (p <esc:0x1> <type 42>) Prefix () (prefix <type -16>, complete <type -15>)
 func (p <esc:0x1> <type 42>) StartCond () <type 38>
type 44 struct { Inst <type 45>; Start <type -11>; NumCap <type -11>; }
type 45 [] <type 32>
type 46 [] <type 28>
type 47 ".regexp.inputs" <type 49>
 func (i <esc:0x12> <type 48>) .regexp.init (r <type 15>, b <type 3>, s <type -16>) (? <type 39>, ? <type -11>)
 func (i <esc:0x12> <type 48>) .regexp.newReader (r <type 15>) <type 39>
 func (i <esc:0x1> <type 48>) .regexp.clear ()
 func (i <esc:0x12> <type 48>) .regexp.newString (s <type -16>) <type 39>
 func (i <esc:0x12> <type 48>) .regexp.newBytes (b <type 3>) <type 39>
type 48 *<type 47>
type 49 struct { .regexp.bytes <type 50>; .regexp.string <type 53>; .regexp.reader <type 56>; }
type 50 ".regexp.inputBytes" <type 52>
 func (i <esc:0x1> <type 51>) .regexp.context (pos <type -11>) <type 37>
 func (i <esc:0x1> <type 51>) .regexp.index (re <esc:0x1> <type 10>, pos <type -11>) <type -11>
 func (i <esc:0x1> <type 51>) .regexp.hasPrefix (re <esc:0x1> <type 10>) <type -15>
 func (i <esc:0x1> <type 51>) .regexp.canCheckPrefix () <type -15>
 func (i <esc:0x1> <type 51>) .regexp.step (pos <type -11>) (? <type -21>, ? <type -11>)
type 51 *<type 50>
type 52 struct { .regexp.str <type 3>; }
type 53 ".regexp.inputString" <type 55>
 func (i <esc:0x1> <type 54>) .regexp.context (pos <type -11>) <type 37>
 func (i <esc:0x1> <type 54>) .regexp.index (re <esc:0x1> <type 10>, pos <type -11>) <type -11>
 func (i <esc:0x1> <type 54>) .regexp.hasPrefix (re <esc:0x1> <type 10>) <type -15>
 func (i <esc:0x1> <type 54>) .regexp.canCheckPrefix () <type -15>
 func (i <esc:0x1> <type 54>) .regexp.step (pos <type -11>) (? <type -21>, ? <type -11>)
type 54 *<type 53>
type 55 struct { .regexp.str <type -16>; }
type 56 ".regexp.inputReader" <type 58>
 func (i <esc:0x1> <type 57>) .regexp.context (pos <type -11>) <type 37>
 func (i <esc:0x1> <type 57>) .regexp.index (re <esc:0x1> <type 10>, pos <type -11>) <type -11>
 func (i <esc:0x1> <type 57>) .regexp.hasPrefix (re <esc:0x1> <type 10>) <type -15>
 func (i <esc:0x1> <type 57>) .regexp.canCheckPrefix () <type -15>
 func (i <esc:0x9> <type 57>) .regexp.step (pos <type -11>) (? <type -21>, ? <type -11>)
type 57 *<type 56>
type 58 struct { .regexp.r <type 15>; .regexp.atEOT <type -15>; .regexp.pos <type -11>; }
type 59 *<type 60>
type 60 ".regexp.bitState" <type 61>
 func (b <esc:0x9> <type 59>) .regexp.push (re <esc:0x1> <type 10>, pc <type -7>, pos <type -11>, arg <type -15>)
 func (b <esc:0x1> <type 59>) .regexp.shouldVisit (pc <type -7>, pos <type -11>) <type -15>
 func (b <esc:0x1> <type 59>) .regexp.reset (prog <esc:0x1> <type 42>, end <type -11>, ncap <type -11>)
type 61 struct { .regexp.end <type -11>; .regexp.cap <type 4>; .regexp.matchcap <type 4>; .regexp.jobs <type 62>; .regexp.visited <type 24>; .regexp.inputs <type 47>; }
type 62 [] <type 63>
type 63 ".regexp.job" <type 64>
type 64 struct { .regexp.pc <type -7>; .regexp.arg <type -15>; .regexp.pos <type -11>; }
type 65 (? <type -16>) <type -16>
type 66 (dst <type 3>, m <type 4>) <type 3>
type 67 (? <type 3>) <type 3>
type 68 (? <type 4>)
type 69 struct { .regexp.expr <type -16>; .regexp.prog <type 42>; .regexp.onepass <type 70>; .regexp.numSubexp <type -11>; .regexp.maxBitStateLen <type -11>; .regexp.subexpNames <type 12>; .regexp.prefix <type -16>; .regexp.prefixBytes <type 3>; .regexp.prefixRune <type -21>; .regexp.prefixEnd <type -7>; .regexp.mpool <type -11>; .regexp.matchcap <type -11>; .regexp.prefixComplete <type -15>; .regexp.cond <type 38>; .regexp.longest <type -15>; }
type 70 *<type 71>
type 71 ".regexp.onePassProg" <type 72>
type 72 struct { Inst <type 73>; Start <type -11>; NumCap <type -11>; }
type 73 [] <type 74>
type 74 ".regexp.onePassInst" <type 75>
type 75 struct { ? <type 32>; Next <type 24>; }
func New (data <type 3>) <type 5>
checksum B3D150933C90C94544A6A1D0AFE6372B3BB04C8D
v3;
package bytealg
pkgpath internal/bytealg
import unsafe unsafe "unsafe"
types 2 1 21
type 1 [] <type -20>
func Compare (a <esc:0x1> <type 1>, b <esc:0x1> <type 1>) <type -11>
func Count (b <esc:0x1> <type 1>, c <type -20>) <type -11>
func CountString (s <esc:0x1> <type -16>, c <type -20>) <type -11>
func Cutover (n <type -11>) <type -11>
func Equal (a <esc:0x1> <type 1>, b <esc:0x1> <type 1>) <type -15>
func Index (a <esc:0x1> <type 1>, b <esc:0x1> <type 1>) <type -11>
func IndexByte (b <esc:0x1> <type 1>, c <type -20>) <type -11>
func IndexByteString (s <esc:0x1> <type -16>, c <type -20>) <type -11>
func IndexString (a <esc:0x1> <type -16>, b <esc:0x1> <type -16>) <type -11>
const MaxBruteForce = 64 
var MaxLen <type -11>
checksum F7494D76A3FFD521F11240F9A0A5D7FE789D638D
v3;
package cpu
pkgpath internal/cpu
init cpu internal..z2fcpu..import
types 14 2 31 36 112 38 573 44 24 38 151 40 427 38 400
type 1 "CacheLinePad" <type 6>
type 2 ".internal/cpu.arm" <type 3>
type 3 struct { .internal/cpu._ <type 1>; HasVFPv4 <type -15>; HasIDIVA <type -15>; .internal/cpu._ <type 1>; }
type 4 ".internal/cpu.arm64" <type 5>
type 5 struct { .internal/cpu._ <type 1>; HasFP <type -15>; HasASIMD <type -15>; HasEVTSTRM <type -15>; HasAES <type -15>; HasPMULL <type -15>; HasSHA1 <type -15>; HasSHA2 <type -15>; HasCRC32 <type -15>; HasATOMICS <type -15>; HasFPHP <type -15>; HasASIMDHP <type -15>; HasCPUID <type -15>; HasASIMDRDM <type -15>; HasJSCVT <type -15>; HasFCMA <type -15>; HasLRCPC <type -15>; HasDCPOP <type -15>; HasSHA3 <type -15>; HasSM3 <type -15>; HasSM4 <type -15>; HasASIMDDP <type -15>; HasSHA512 <type -15>; HasSVE <type -15>; HasASIMDFHM <type -15>; .internal/cpu._ <type 1>; }
type 6 struct { .internal/cpu._ <type 7>; }
type 7 [64 ] <type -20>
type 8 ".internal/cpu.ppc64" <type 9>
type 9 struct { .internal/cpu._ <type 1>; HasDARN <type -15>; HasSCV <type -15>; IsPOWER8 <type -15>; IsPOWER9 <type -15>; .internal/cpu._ <type 1>; }
type 10 ".internal/cpu.s390x" <type 11>
type 11 struct { .internal/cpu._ <type 1>; HasZArch <type -15>; HasSTFLE <type -15>; HasLDisp <type -15>; HasEImm <type -15>; HasDFP <type -15>; HasETF3Enhanced <type -15>; HasMSA <type -15>; HasAES <type -15>; HasAESCBC <type -15>; HasAESCTR <type -15>; HasAESGCM <type -15>; HasGHASH <type -15>; HasSHA1 <type -15>; HasSHA256 <type -15>; HasSHA512 <type -15>; HasVX <type -15>; HasVE1 <type -15>; .internal/cpu._ <type 1>; }
type 12 ".internal/cpu.x86" <type 13>
type 13 struct { .internal/cpu._ <type 1>; HasAES <type -15>; HasADX <type -15>; HasAVX <type -15>; HasAVX2 <type -15>; HasBMI1 <type -15>; HasBMI2 <type -15>; HasERMS <type -15>; HasFMA <type -15>; HasOSXSAVE <type -15>; HasPCLMULQDQ <type -15>; HasPOPCNT <type -15>; HasSSE2 <type -15>; HasSSE3 <type -15>; HasSSSE3 <type -15>; HasSSE41 <type -15>; HasSSE42 <type -15>; .internal/cpu._ <type 1>; }
var ARM <type 2>
var ARM64 <type 4>
const CacheLinePadSize = 64 
var CacheLineSize <type -13>
var DebugOptions <type -15>
const FunctionDescriptors = $false
func Initialize (env <esc:0x1> <type -16>)
var PPC64 <type 8>
var S390X <type 10>
var X86 <type 12>
checksum 2AF07C9D1A5CE5169AE578FDC71A67BC034E92FA
v3;
package fmtsort
pkgpath internal/fmtsort
import reflect reflect "reflect"
import sort sort "sort"
indirectimport unsafe unsafe
init cpu internal..z2fcpu..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 1 0 1 2 1 3 1 4 1 5 1 6 2 0 2 3 4 0 4 2 4 3 5 0 5 2 5 3
types 41 2 216 3825 31 958 76 38 141 212 21 34 75 35 104 19 2071 21 36 145 20 35 13 355 47 46 20 19 274 100 24 22 20 22 22 19 182 63 80 280 18 51
type 1 "SortedMap" <type 40>
 func (o <esc:0x1> <type 39>) Len () <type -11>
 func (o <esc:0x9> <type 39>) Less (i <type -11>, j <type -11>) <type -15>
 func (o <esc:0x9> <type 39>) Swap (i <type -11>, j <type -11>)
type 2 "reflect.Value" <type 37>
 func (v <type 2>) Convert (t <type 3>) <type 2>
 func (v <type 2>) .reflect.assignTo (context <esc:0x1> <type -16>, dst <type 14>, target <type 20>) <type 2>
 func (v <esc:0x12> <type 2>) UnsafeAddr () <type -13>
 func (v <esc:0x1> <type 2>) Uint () <type -8>
 func (v <esc:0x9> <type 2>) TrySend (x <type 2>) <type -15>
 func (v <type 2>) String () <type -16>
 func (v <esc:0x1> <type 2>) IsNil () <type -15>
 func (v <esc:0x1> <type 2>) InterfaceData () <type 29>
 func (v <esc:0x1> <type 2>) SetInt (x <type -4>)
 func (v <type 2>) Len () <type -11>
 func (v <esc:0x1> <type 2>) SetPointer (x <type 20>)
 func (v <esc:0x1> <type 2>) Int () <type -4>
 func (v <esc:0x1> <type 2>) SetLen (n <type -11>)
 func (v <esc:0x12> <type 2>) Index (i <type -11>) <type 2>
 func (v <esc:0x1> <type 2>) SetFloat (x <type -10>)
 func (v <esc:0x1> <type 2>) SetCap (n <type -11>)
 func (v <esc:0x9> <type 2>) SetMapIndex (key <type 2>, val <type 2>)
 func (v <esc:0x1a> <type 2>) Elem () <type 2>
 func (v <type 2>) Type () <type 3>
 func (v <esc:0x9> <type 2>) NumMethod () <type -11>
 func (v <esc:0x1> <type 2>) IsValid () <type -15>
 func (v <type 2>) Set (x <type 2>)
 func (v <esc:0x1> <type 2>) CanAddr () <type -15>
 func (v <type 2>) FieldByName (name <esc:0x1> <type -16>) <type 2>
 func (v <esc:0x12> <type 2>) Field (i <type -11>) <type 2>
 func (v <esc:0x1> <type 2>) OverflowComplex (x <type -18>) <type -15>
 func (v <esc:0x1> <type 2>) Float () <type -10>
 func (v <esc:0x1> <type 2>) Kind () <type 11>
 func (v <esc:0x1> <type 2>) SetString (x <type -16>)
 func (v <esc:0x12> <type 2>) .reflect.pointer () <type 20>
 func (v <type 2>) Interface () (i <type 30>)
 func (v <esc:0x9> <type 2>) MapKeys () <type 31>
 func (v <esc:0x9> <type 2>) .reflect.send (x <type 2>, nb <type -15>) (selected <type -15>)
 func (v <type 2>) Addr () <type 2>
 func (v <type 2>) TryRecv () (x <type 2>, ok <type -15>)
 func (v <esc:0x1> <type 2>) Bool () <type -15>
 func (v <esc:0x1a> <type 2>) Method (i <type -11>) <type 2>
 func (v <type 2>) Call (in <esc:0x9> <type 31>) <type 31>
 func (v <type 2>) Close ()
 func (v <esc:0x2a> <type 2>) .reflect.runes () <type 32>
 func (v <esc:0x9> <type 2>) SetBytes (x <type 33>)
 func (v <esc:0x1> <type 2>) CanSet () <type -15>
 func (v <esc:0x1> <type 2>) CanInterface () <type -15>
 func (v <esc:0x9> <type 2>) MapIndex (key <type 2>) <type 2>
 func (v <esc:0x2a> <type 2>) Bytes () <type 33>
 func (v <type 2>) Slice (i <type -11>, j <type -11>) <type 2>
 func (v <type 2>) Cap () <type -11>
 func (v <esc:0x1a> <type 2>) FieldByIndex (index <esc:0x1> <type 9>) <type 2>
 func (v <type 2>) CallSlice (in <esc:0x9> <type 31>) <type 31>
 func (v <esc:0x1> <type 2>) Complex () <type -18>
 func (v <type 2>) MapRange () <type 34>
 func (v <esc:0x1a> <type 2>) MethodByName (name <esc:0x1> <type -16>) <type 2>
 func (v <esc:0x1> <type 2>) NumField () <type -11>
 func (v <esc:0x1> <type 2>) OverflowInt (x <type -4>) <type -15>
 func (v <esc:0x12> <type 2>) Pointer () <type -13>
 func (v <esc:0x1> <type 2>) OverflowFloat (x <type -10>) <type -15>
 func (v <esc:0x9> <type 2>) .reflect.setRunes (x <type 32>)
 func (v <esc:0x1> <type 2>) OverflowUint (x <type -8>) <type -15>
 func (v <type 2>) .reflect.recv (nb <type -15>) (val <type 2>, ok <type -15>)
 func (v <type 2>) Recv () (x <type 2>, ok <type -15>)
 func (v <type 2>) FieldByNameFunc (match <esc:0x1> <type 10>) <type 2>
 func (v <type 2>) .reflect.call (op <esc:0x1> <type -16>, in <esc:0x9> <type 31>) <type 31>
 func (v <esc:0x9> <type 2>) Send (x <type 2>)
 func (v <esc:0x1> <type 2>) SetComplex (x <type -18>)
 func (v <esc:0x1> <type 2>) SetBool (x <type -15>)
 func (v <type 2>) Slice3 (i <type -11>, j <type -11>, k <type -11>) <type 2>
 func (v <esc:0x1> <type 2>) SetUint (x <type -8>)
type 3 "reflect.Type" <type 4>
type 4 interface { Align () <type -11>; AssignableTo (u <type 3>) <type -15>; Bits () <type -11>; ChanDir () <type 5>; Comparable () <type -15>; ConvertibleTo (u <type 3>) <type -15>; Elem () <type 3>; Field (i <type -11>) <type 6>; FieldAlign () <type -11>; FieldByIndex (index <type 9>) <type 6>; FieldByName (name <type -16>) (? <type 6>, ? <type -15>); FieldByNameFunc (match <type 10>) (? <type 6>, ? <type -15>); Implements (u <type 3>) <type -15>; In (i <type -11>) <type 3>; IsVariadic () <type -15>; Key () <type 3>; Kind () <type 11>; Len () <type -11>; Method (? <type -11>) <type 12>; MethodByName (? <type -16>) (? <type 12>, ? <type -15>); Name () <type -16>; NumField () <type -11>; NumIn () <type -11>; NumMethod () <type -11>; NumOut () <type -11>; Out (i <type -11>) <type 3>; PkgPath () <type -16>; Size () <type -13>; String () <type -16>; .reflect.common () <type 14>; .reflect.rawString () <type -16>; .reflect.uncommon () <type 26>; }
type 5 "reflect.ChanDir" <type -11>
 func (d <type 5>) String () <type -16>
type 6 "reflect.StructField" <type 7>
type 7 struct { Name <type -16>; PkgPath <type -16>; Type <type 3>; Tag <type 8>; Offset <type -13>; Index <type 9>; Anonymous <type -15>; }
type 8 "reflect.StructTag" <type -16>
 func (tag <esc:0x12> <type 8>) Lookup (key <esc:0x1> <type -16>) (value <type -16>, ok <type -15>)
 func (tag <esc:0x12> <type 8>) Get (key <esc:0x1> <type -16>) <type -16>
type 9 [] <type -11>
type 10 (? <type -16>) <type -15>
type 11 "reflect.Kind" <type -12>
 func (k <type 11>) String () <type -16>
type 12 "reflect.Method" <type 13>
type 13 struct { Name <type -16>; PkgPath <type -16>; Type <type 3>; Func <type 2>; Index <type -11>; }
type 14 *<type 15>
type 15 ".reflect.rtype" <type 22>
 func (t <esc:0x1> <type 14>) Comparable () <type -15>
 func (t <esc:0x9> <type 14>) AssignableTo (u <esc:0x9> <type 3>) <type -15>
 func (t <esc:0x4a> <type 14>) MethodByName (name <esc:0x1> <type -16>) (m <type 12>, ok <type -15>)
 func (t <type 14>) FieldByIndex (index <esc:0x1> <type 9>) <type 6>
 func (t <esc:0x9> <type 14>) ConvertibleTo (u <esc:0x9> <type 3>) <type -15>
 func (t <esc:0x1> <type 14>) .reflect.pointers () <type -15>
 func (t <esc:0x32> <type 14>) .reflect.rawString () <type -16>
 func (t <esc:0x4a> <type 14>) Method (i <type -11>) (m <type 12>)
 func (t <esc:0x9> <type 14>) Out (i <type -11>) <type 3>
 func (t <esc:0x9> <type 14>) NumMethod () <type -11>
 func (t <type 14>) FieldByName (name <esc:0x1> <type -16>) (? <type 6>, ? <type -15>)
 func (t <esc:0x1> <type 14>) Align () <type -11>
 func (t <esc:0x1> <type 14>) Kind () <type 11>
 func (t <esc:0x9> <type 14>) Elem () <type 3>
 func (t <esc:0x1> <type 14>) FieldAlign () <type -11>
 func (t <esc:0x1> <type 14>) Size () <type -13>
 func (t <esc:0x42> <type 14>) Name () <type -16>
 func (t <esc:0x1> <type 14>) Bits () <type -11>
 func (t <esc:0x9> <type 14>) .reflect.exportedMethods () <type 16>
 func (t <esc:0x1> <type 14>) String () <type -16>
 func (t <esc:0x12> <type 14>) .reflect.common () ($ret23 <type 14>)
 func (t <esc:0x9> <type 14>) In (i <type -11>) <type 3>
 func (t <esc:0x1> <type 14>) Len () <type -11>
 func (t <esc:0x1> <type 14>) NumField () <type -11>
 func (t <esc:0x42> <type 14>) PkgPath () <type -16>
 func (t <esc:0x1> <type 14>) ChanDir () <type 5>
 func (t <type 14>) .reflect.ptrTo () <type 14>
 func (t <esc:0x1> <type 14>) NumIn () <type -11>
 func (t <esc:0x1> <type 14>) IsVariadic () <type -15>
 func (t <type 14>) FieldByNameFunc (match <esc:0x1> <type 10>) (? <type 6>, ? <type -15>)
 func (t <esc:0x4a> <type 14>) Field (i <type -11>) <type 6>
 func (t <esc:0x9> <type 14>) Key () <type 3>
 func (t <esc:0x9> <type 14>) Implements (u <type 3>) <type -15>
 func (t <esc:0x1> <type 14>) NumOut () <type -11>
type 16 [] <type 17>
type 17 ".reflect.method" <type 18>
type 18 struct { .reflect.name <type 19>; .reflect.pkgPath <type 19>; .reflect.mtyp <type 14>; .reflect.typ <type 14>; .reflect.tfn <type 20>; }
type 19 *<type -16>
type 20 "unsafe.Pointer" <type 21>
type 21 *any
type 22 struct { .reflect.size <type -13>; .reflect.ptrdata <type -13>; .reflect.hash <type -7>; .reflect.kind <type -5>; .reflect.align <type -1>; .reflect.fieldAlign <type -5>; .reflect._ <type -5>; .reflect.hashfn <type 23>; .reflect.equalfn <type 24>; .reflect.gcdata <type 25>; .reflect.string <type 19>; ? <type 26>; .reflect.ptrToThis <type 14>; }
type 23 (? <type 20>, ? <type -13>) <type -13>
type 24 (? <type 20>, ? <type 20>) <type -15>
type 25 *<type -20>
type 26 *<type 27>
type 27 ".reflect.uncommonType" <type 28>
 func (t <esc:0x32> <type 26>) Name () <type -16>
 func (t <esc:0x32> <type 26>) PkgPath () <type -16>
 func (t <type 26>) .reflect.exportedMethods () <type 16>
 func (t <esc:0x12> <type 26>) .reflect.uncommon () ($ret11 <type 26>)
type 28 struct { .reflect.name <type 19>; .reflect.pkgPath <type 19>; .reflect.methods <type 16>; }
type 29 [2 ] <type -13>
type 30 interface { }
type 31 [] <type 2>
type 32 [] <type -21>
type 33 [] <type -20>
type 34 *<type 35>
type 35 "reflect.MapIter" <type 36>
 func (it <esc:0x9> <type 34>) Value () <type 2>
 func (it <esc:0x1> <type 34>) Next () <type -15>
 func (it <esc:0x9> <type 34>) Key () <type 2>
type 36 struct { .reflect.m <type 2>; .reflect.it <type 20>; }
type 37 struct { .reflect.typ <type 14>; .reflect.ptr <type 20>; ? <type 38>; }
type 38 ".reflect.flag" <type -13>
 func (f <type 38>) .reflect.mustBeAssignable ()
 func (f <type 38>) .reflect.mustBeExported ()
 func (f <type 38>) .reflect.mustBe (expected <type 11>)
 func (f <type 38>) .reflect.ro () <type 38>
 func (f <type 38>) .reflect.kind () <type 11>
type 39 *<type 1>
type 40 struct { Key <type 31>; Value <type 31>; }
func Sort (mapValue <type 2>) <type 39>
checksum 6FBFFA5D0747BA7036FB4878E6996A50E67C03B4
v3;
package goroot
pkgpath internal/goroot
import os os "os"
import filepath path/filepath "path/filepath"
init goroot internal..z2fgoroot..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 2 1 2 4 2 8 2 9 2 11 2 12 2 13 4 1 4 8 4 9 4 11 5 1 5 2 5 3 5 4 5 8 5 9 5 11 5 12 5 13 6 1 6 2 6 3 6 4 6 5 6 7 6 8 6 9 6 10 6 11 6 12 6 13 6 14 7 1 7 8 7 9 7 10 7 11 7 14 8 1 8 9 10 1 10 8 10 9 11 1 11 8 11 9 12 1 12 8 12 9 12 11 13 1 13 8 13 9 13 11 13 12
types 1 1
func IsStandardPackage (goroot <type -16>, compiler <esc:0x1> <type -16>, path <type -16>) <type -15>
checksum 24373D0D7E8D2E87DCBAB34785A2DF76F99F8AE5
v3;
package nettrace
pkgpath internal/nettrace
types 12 4 41 24 27 18 102 25 63 19 21 46 62
type 1 "LookupIPAltResolverKey" <type 4>
type 2 "Trace" <type 5>
type 3 "TraceKey" <type 4>
type 4 struct { }
type 5 struct { DNSStart <type 6>; DNSDone <type 7>; ConnectStart <type 10>; ConnectDone <type 11>; }
type 6 (name <type -16>)
type 7 (netIPs <type 8>, coalesced <type -15>, err <type -19>)
type 8 [] <type 9>
type 9 interface { }
type 10 (network <type -16>, addr <type -16>)
type 11 (network <type -16>, addr <type -16>, err <type -19>)
checksum 7E1120F40F1ACBAC5B5C617AE64C23B822755224
v3;
package poll
pkgpath internal/poll
import errors errors "errors"
import io io "io"
import runtime runtime "runtime"
import sync sync "sync"
import atomic sync/atomic "sync/atomic"
import syscall syscall "syscall"
import time time "time"
import unsafe unsafe "unsafe"
init poll internal..z2fpoll..import cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import syscall syscall..import time time..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 2 1 2 3 2 4 2 5 3 1 3 4 5 1 5 3 5 4 6 1 6 3 6 4 6 5 7 1 7 3 7 4 7 5 7 6
types 79 3 3595 413 77 35 89 17 41 48 39 53 24 24 38 40 64 34 280 368 19 115 940 19 18 57 19 21 93 19 50 20 40 3310 356 19 22 73 19 525 165 21 31 91 21 36 112 19 75 83 19 35 320 157 19 50 43 44 23 23 34 24 19 35 54 19 36 78 19 35 61 19 37 61 25 19 21 27 19 18
type 1 "FD" <type 17>
 func (fd <type 23>) Fsync () <type -19>
 func (fd <type 23>) .internal/poll.incref () <type -19>
 func (fd <type 23>) .internal/poll.decref () <type -19>
 func (fd <type 23>) .internal/poll.readLock () <type -19>
 func (fd <type 23>) .internal/poll.readUnlock ()
 func (fd <type 23>) .internal/poll.writeLock () <type -19>
 func (fd <type 23>) .internal/poll.writeUnlock ()
 func (fd <type 23>) SetDeadline (t <esc:0x1> <type 32>) <type -19>
 func (fd <type 23>) SetReadDeadline (t <esc:0x1> <type 32>) <type -19>
 func (fd <type 23>) SetWriteDeadline (t <esc:0x1> <type 32>) <type -19>
 func (fd <esc:0x1> <type 23>) .internal/poll.eofError (n <type -11>, err <esc:0x12> <type -19>) <type -19>
 func (fd <type 23>) Fchmod (mode <type -7>) <type -19>
 func (fd <type 23>) Fchown (uid <type -11>, gid <type -11>) <type -19>
 func (fd <type 23>) Ftruncate (size <type -4>) <type -19>
 func (fd <esc:0x1> <type 23>) Init (net <esc:0x1> <type -16>, pollable <type -15>) <type -19>
 func (fd <type 23>) .internal/poll.destroy () <type -19>
 func (fd <type 23>) Close () <type -19>
 func (fd <type 23>) Shutdown (how <type -11>) <type -19>
 func (fd <type 23>) SetBlocking () <type -19>
 func (fd <type 23>) Read (p <type 35>) (? <type -11>, ? <type -19>)
 func (fd <type 23>) Pread (p <esc:0x1> <type 35>, off <type -4>) (? <type -11>, ? <type -19>)
 func (fd <type 23>) ReadFrom (p <esc:0x1> <type 35>) (? <type -11>, ? <type 4>, ? <type -19>)
 func (fd <type 23>) ReadMsg (p <esc:0x1> <type 35>, oob <esc:0x1> <type 35>) (? <type -11>, ? <type -11>, ? <type -11>, ? <type 4>, ? <type -19>)
 func (fd <type 23>) Write (p <type 35>) (? <type -11>, ? <type -19>)
 func (fd <type 23>) Pwrite (p <esc:0x1> <type 35>, off <type -4>) (? <type -11>, ? <type -19>)
 func (fd <type 23>) WriteTo (p <esc:0x1> <type 35>, sa <type 4>) (? <type -11>, ? <type -19>)
 func (fd <type 23>) WriteMsg (p <esc:0x1> <type 35>, oob <esc:0x1> <type 35>, sa <type 4>) (? <type -11>, ? <type -11>, ? <type -19>)
 func (fd <type 23>) Accept () (? <type -11>, ? <type 4>, ? <type -16>, ? <type -19>)
 func (fd <type 23>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (fd <type 23>) ReadDirent (buf <esc:0x1> <type 35>) (? <type -11>, ? <type -19>)
 func (fd <type 23>) Fchdir () <type -19>
 func (fd <type 23>) Fstat (s <esc:0x1> <type 49>) <type -19>
 func (fd <type 23>) Dup () (? <type -11>, ? <type -16>, ? <type -19>)
 func (fd <esc:0x1> <type 23>) WaitWrite () <type -19>
 func (fd <type 23>) WriteOnce (p <type 35>) (? <type -11>, ? <type -19>)
 func (fd <type 23>) RawControl (f <esc:0x1> <type 58>) <type -19>
 func (fd <type 23>) RawRead (f <esc:0x1> <type 59>) <type -19>
 func (fd <type 23>) RawWrite (f <esc:0x1> <type 59>) <type -19>
 func (fd <type 23>) SetsockoptInt (level <type -11>, name <type -11>, arg <type -11>) <type -19>
 func (fd <type 23>) SetsockoptInet4Addr (level <type -11>, name <type -11>, arg <type 60>) <type -19>
 func (fd <type 23>) SetsockoptLinger (level <type -11>, name <type -11>, l <esc:0x1> <type 61>) <type -19>
 func (fd <type 23>) SetsockoptIPMreqn (level <type -11>, name <type -11>, mreq <esc:0x1> <type 64>) <type -19>
 func (fd <type 23>) SetsockoptByte (level <type -11>, name <type -11>, arg <type -20>) <type -19>
 func (fd <type 23>) SetsockoptIPMreq (level <type -11>, name <type -11>, mreq <esc:0x1> <type 67>) <type -19>
 func (fd <type 23>) SetsockoptIPv6Mreq (level <type -11>, name <type -11>, mreq <esc:0x1> <type 70>) <type -19>
 func (fd <type 23>) Writev (v <esc:0x9> <type 74>) (? <type -4>, ? <type -19>)
type 2 "TimeoutError" <type 77>
 func (e <esc:0x1> <type 78>) Error () ($ret1 <type -16>) <inl:207>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/poll/fd.go:43
  { //43
   $ret1 = "i/o timeout" //43
   return //43
  } //0
 func (e <esc:0x1> <type 78>) Timeout () <type -15>
 func (e <esc:0x1> <type 78>) Temporary () <type -15>
type 3 (? <type -11>, ? <type -11>) (? <type -11>, ? <type 4>, ? <type -19>)
type 4 "syscall.Sockaddr" <type 5>
type 5 interface { .syscall.sockaddr () (ptr <type 6>, len <type 13>, err <type -19>); }
type 6 *<type 7>
type 7 "syscall.RawSockaddrAny" <type 8>
type 8 struct { Addr <type 9>; Pad <type 12>; }
type 9 "syscall.RawSockaddr" <type 10>
type 10 struct { Family <type -6>; Data <type 11>; }
type 11 [14 ] <type -1>
type 12 [96 ] <type -1>
type 13 "syscall.Socklen_t" <type 14>
type 14 ".syscall._socklen_t" <type -7>
type 15 (? <type -11>) (? <type -11>, ? <type 4>, ? <type -19>)
type 16 (? <type -11>) <type -19>
type 17 struct { .internal/poll.fdmu <type 18>; Sysfd <type -11>; .internal/poll.pd <type 21>; .internal/poll.iovecs <type 25>; .internal/poll.csema <type -7>; .internal/poll.isBlocking <type -7>; IsStream <type -15>; ZeroReadIsEOF <type -15>; .internal/poll.isFile <type -15>; }
type 18 ".internal/poll.fdMutex" <type 20>
 func (mu <type 19>) .internal/poll.incref () <type -15>
 func (mu <type 19>) .internal/poll.increfAndClose () <type -15>
 func (mu <type 19>) .internal/poll.decref () <type -15>
 func (mu <type 19>) .internal/poll.rwlock (read <type -15>) <type -15>
 func (mu <type 19>) .internal/poll.rwunlock (read <type -15>) <type -15>
type 19 *<type 18>
type 20 struct { .internal/poll.state <type -8>; .internal/poll.rsema <type -7>; .internal/poll.wsema <type -7>; }
type 21 ".internal/poll.pollDesc" <type 24>
 func (pd <esc:0x1> <type 22>) .internal/poll.init (fd <esc:0x1> <type 23>) <type -19>
 func (pd <esc:0x1> <type 22>) .internal/poll.close ()
 func (pd <esc:0x1> <type 22>) .internal/poll.evict ()
 func (pd <esc:0x1> <type 22>) .internal/poll.prepare (mode <type -11>, isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 22>) .internal/poll.prepareRead (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 22>) .internal/poll.prepareWrite (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 22>) .internal/poll.wait (mode <type -11>, isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 22>) .internal/poll.waitRead (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 22>) .internal/poll.waitWrite (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 22>) .internal/poll.waitCanceled (mode <type -11>)
 func (pd <esc:0x1> <type 22>) .internal/poll.pollable () <type -15>
type 22 *<type 21>
type 23 *<type 1>
type 24 struct { .internal/poll.runtimeCtx <type -13>; }
type 25 *<type 26>
type 26 [] <type 27>
type 27 "syscall.Iovec" <type 29>
 func (iov <esc:0x1> <type 28>) SetLen (length <type -11>)
type 28 *<type 27>
type 29 struct { Base <type 30>; Len <type 31>; }
type 30 *<type -20>
type 31 "syscall.Iovec_len_t" <type -8>
type 32 "time.Time" <type 48>
 func (t <esc:0x12> <type 32>) Round (d <type 33>) <type 32>
 func (t <esc:0x12> <type 32>) Truncate (d <type 33>) <type 32>
 func (t <esc:0x1> <type 34>) UnmarshalText (data <esc:0x1> <type 35>) <type -19>
 func (t <esc:0x1> <type 34>) UnmarshalBinary (data <esc:0x1> <type 35>) <type -19>
 func (t <esc:0x12> <type 32>) Local () <type 32>
 func (t <esc:0x1> <type 32>) MarshalJSON () (? <type 35>, ? <type -19>)
 func (t <esc:0x1> <type 32>) .time.date (full <type -15>) (year <type -11>, month <type 36>, day <type -11>, yday <type -11>)
 func (t <type 32>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 32>
 func (t <esc:0x1> <type 34>) .time.mono () <type -4>
 func (t <esc:0x1> <type 32>) MarshalText () (? <type 35>, ? <type -19>)
 func (t <esc:0x1> <type 34>) .time.stripMono ()
 func (t <esc:0x32> <type 32>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 34>) .time.setLoc (loc <type 37>)
 func (t <esc:0x1> <type 34>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 34>) GobDecode (data <esc:0x1> <type 35>) <type -19>
 func (t <esc:0x1> <type 32>) UnixNano () <type -4>
 func (t <esc:0x1> <type 32>) After (u <esc:0x1> <type 32>) <type -15>
 func (t <esc:0x1> <type 32>) MarshalBinary () (? <type 35>, ? <type -19>)
 func (t <esc:0x1> <type 32>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 34>) .time.sec () <type -4>
 func (t <esc:0x1> <type 32>) Before (u <esc:0x1> <type 32>) <type -15>
 func (t <esc:0x1> <type 34>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 34>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 32>) Minute () <type -11>
 func (t <esc:0x1> <type 32>) AppendFormat (b <esc:0x12> <type 35>, layout <esc:0x1> <type -16>) <type 35>
 func (t <esc:0x1> <type 32>) Day () <type -11>
 func (t <esc:0x12> <type 32>) Add (d <type 33>) <type 32>
 func (t <esc:0x1> <type 32>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 32>) String () <type -16>
 func (t <esc:0x1> <type 32>) Equal (u <esc:0x1> <type 32>) <type -15>
 func (t <esc:0x1> <type 32>) Sub (u <esc:0x1> <type 32>) <type 33>
 func (t <esc:0x32> <type 32>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x12> <type 32>) In (loc <type 37>) <type 32>
 func (t <esc:0x12> <type 32>) UTC () <type 32>
 func (t <esc:0x1> <type 32>) Nanosecond () <type -11>
 func (t <esc:0x1> <type 32>) IsZero () <type -15>
 func (t <esc:0x1> <type 32>) .time.abs () <type -8>
 func (t <esc:0x1> <type 32>) Hour () <type -11>
 func (t <esc:0x1> <type 32>) Date () (year <type -11>, month <type 36>, day <type -11>)
 func (t <esc:0x1> <type 32>) GobEncode () (? <type 35>, ? <type -19>)
 func (t <esc:0x12> <type 32>) Location () <type 37>
 func (t <esc:0x1> <type 32>) Month () <type 36>
 func (t <esc:0x1> <type 32>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 34>) UnmarshalJSON (data <esc:0x1> <type 35>) <type -19>
 func (t <esc:0x1> <type 34>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 32>) Year () <type -11>
 func (t <esc:0x1> <type 32>) Second () <type -11>
 func (t <esc:0x1> <type 32>) Weekday () <type 47>
 func (t <esc:0x1> <type 32>) Unix () <type -4>
 func (t <esc:0x1> <type 32>) YearDay () <type -11>
type 33 "time.Duration" <type -4>
 func (d <type 33>) Round (m <type 33>) <type 33>
 func (d <type 33>) Truncate (m <type 33>) <type 33>
 func (d <type 33>) Hours () <type -10>
 func (d <type 33>) Minutes () <type -10>
 func (d <type 33>) Seconds () <type -10>
 func (d <type 33>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 33>) String () <type -16>
type 34 *<type 32>
type 35 [] <type -20>
type 36 "time.Month" <type -11>
 func (m <type 36>) String () <type -16>
type 37 *<type 38>
type 38 "time.Location" <type 39>
 func (l <esc:0x1> <type 37>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 37>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 37>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 37>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 37>) String () <type -16>
 func (l <esc:0x12> <type 37>) .time.get () <type 37>
type 39 struct { .time.name <type -16>; .time.zone <type 40>; .time.tx <type 43>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 46>; }
type 40 [] <type 41>
type 41 ".time.zone" <type 42>
type 42 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 43 [] <type 44>
type 44 ".time.zoneTrans" <type 45>
type 45 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 46 *<type 41>
type 47 "time.Weekday" <type -11>
 func (d <type 47>) String () <type -16>
type 48 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 37>; }
type 49 *<type 50>
type 50 "syscall.Stat_t" <type 51>
type 51 struct { Dev <type -8>; Ino <type -8>; Mode <type -7>; Nlink <type -7>; Uid <type -7>; Gid <type -7>; Rdev <type -8>; .syscall.__pad1 <type -8>; Size <type -4>; Blksize <type -3>; .syscall.__pad2 <type -3>; Blocks <type -4>; Atim <type 52>; Mtim <type 52>; Ctim <type 52>; .syscall.__glibc_reserved <type 57>; }
type 52 "syscall.Timespec" <type 54>
 func (ts <esc:0x1> <type 53>) Nano () <type -4>
 func (ts <esc:0x1> <type 53>) Unix () (sec <type -4>, nsec <type -4>)
type 53 *<type 52>
type 54 struct { Sec <type 55>; Nsec <type 56>; }
type 55 "syscall.Timespec_sec_t" <type -4>
type 56 "syscall.Timespec_nsec_t" <type -4>
type 57 [2 ] <type -3>
type 58 (? <type -13>)
type 59 (? <type -13>) <type -15>
type 60 [4 ] <type -20>
type 61 *<type 62>
type 62 "syscall.Linger" <type 63>
type 63 struct { Onoff <type -3>; Linger <type -3>; }
type 64 *<type 65>
type 65 "syscall.IPMreqn" <type 66>
type 66 struct { Multiaddr <type 60>; Address <type 60>; Ifindex <type -3>; }
type 67 *<type 68>
type 68 "syscall.IPMreq" <type 69>
type 69 struct { Multiaddr <type 60>; Interface <type 60>; }
type 70 *<type 71>
type 71 "syscall.IPv6Mreq" <type 72>
type 72 struct { Multiaddr <type 73>; Interface <type -7>; }
type 73 [16 ] <type -20>
type 74 *<type 75>
type 75 [] <type 35>
type 76 (wrote <type -11>)
type 77 struct { }
type 78 *<type 2>
var Accept4Func <type 3>
var AcceptFunc <type 15>
var CloseFunc <type 16>
func DupCloseOnExec (fd <type -11>) (? <type -11>, ? <type -16>, ? <type -19>)
var ErrFileClosing <type -19>
var ErrNetClosing <type -19>
var ErrNoDeadline <type -19>
var ErrTimeout <type -19>
func IsPollDescriptor (fd <type -13>) <type -15>
func SendFile (dstFD <type 23>, src <type -11>, remain <type -4>) (? <type -4>, ? <type -19>)
func Splice (dst <type 23>, src <type 23>, remain <type -4>) (written <type -4>, handled <type -15>, sc <type -16>, err <type -19>)
var TestHookDidWritev <type 76>
checksum CE7EE5477EC8B7674A9BBE44203084FB54895199
v3;
package race
pkgpath internal/race
import unsafe unsafe "unsafe"
types 3 1 33 12
type 1 "unsafe.Pointer" <type 2>
type 2 *any
func Acquire (addr <esc:0x1> <type 1>) <inl:148>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/race/norace.go:15
func Disable () <inl:148>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/race/norace.go:24
func Enable () <inl:148>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/race/norace.go:27
const Enabled = $false
func Errors () <type -11>
func Read (addr <esc:0x1> <type 1>) <inl:148>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/race/norace.go:30
func ReadRange (addr <esc:0x1> <type 1>, len <type -11>) <inl:148>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/race/norace.go:36
func Release (addr <esc:0x1> <type 1>) <inl:148>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/race/norace.go:18
func ReleaseMerge (addr <esc:0x1> <type 1>) <inl:148>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/race/norace.go:21
func Write (addr <esc:0x1> <type 1>) <inl:148>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/race/norace.go:33
func WriteRange (addr <esc:0x1> <type 1>, len <type -11>) <inl:148>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/race/norace.go:39
checksum 9A53972354995DFE417359ED343110F1594D2D69
v3;
package singleflight
pkgpath internal/singleflight
import sync sync "sync"
init cpu internal..z2fcpu..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import
init_graph 1 0 1 2 3 0 3 1 3 2
types 27 3 409 26 89 85 17 63 33 17 47 213 220 19 19 19 67 111 19 19 23 22 21 25 18 39 25 69
type 1 "Group" <type 3>
 func (g <type 23>) Do (key <type -16>, fn <esc:0x9> <type 24>) (v <type 20>, err <type -19>, shared <type -15>)
 func (g <type 23>) DoChan (key <type -16>, fn <type 24>) (? <type 25>, ? <type -15>)
 func (g <type 23>) .internal/singleflight.doCall (c <type 8>, key <esc:0x1> <type -16>, fn <esc:0x9> <type 24>)
 func (g <type 23>) ForgetUnshared (key <esc:0x1> <type -16>) <type -15>
type 2 "Result" <type 26>
type 3 struct { .internal/singleflight.mu <type 4>; .internal/singleflight.m <type 7>; }
type 4 "sync.Mutex" <type 6>
 func (m <type 5>) Unlock ()
 func (m <type 5>) Lock ()
type 5 *<type 4>
type 6 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 7 map [<type -16>] <type 8>
type 8 *<type 9>
type 9 ".internal/singleflight.call" <type 10>
type 10 struct { .internal/singleflight.wg <type 11>; .internal/singleflight.val <type 20>; .internal/singleflight.err <type -19>; .internal/singleflight.dups <type -11>; .internal/singleflight.chans <type 21>; }
type 11 "sync.WaitGroup" <type 15>
 func (wg <type 12>) Wait ()
 func (wg <type 12>) Done ()
 func (wg <type 12>) Add (delta <type -11>)
 func (wg <esc:0x92> <type 12>) .sync.state () (statep <type 13>, semap <type 14>)
type 12 *<type 11>
type 13 *<type -8>
type 14 *<type -7>
type 15 struct { .sync.noCopy <type 16>; .sync.state1 <type 19>; }
type 16 ".sync.noCopy" <type 18>
 func (? <esc:0x1> <type 17>) Unlock ()
 func (? <esc:0x1> <type 17>) Lock ()
type 17 *<type 16>
type 18 struct { }
type 19 [3 ] <type -7>
type 20 interface { }
type 21 [] <type 22>
type 22 chan -< <type 2>
type 23 *<type 1>
type 24 () (? <type 20>, ? <type -19>)
type 25 chan <- <type 2>
type 26 struct { Val <type 20>; Err <type -19>; Shared <type -15>; }
checksum 9C21EE07C4009C51586138798681EAEE1CCB1B8C
v3;
package unix
pkgpath internal/syscall/unix
import atomic sync/atomic "sync/atomic"
import syscall syscall "syscall"
import unsafe unsafe "unsafe"
init cpu internal..z2fcpu..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import syscall syscall..import
init_graph 1 0 1 2 3 0 3 1 3 2 4 0 4 1 4 2 4 3
types 12 2 34 17 33 316 153 17 47 42 43 23 22
type 1 "GetRandomFlag" <type -13>
type 2 *<type 3>
type 3 "syscall.Stat_t" <type 4>
type 4 struct { Dev <type -8>; Ino <type -8>; Mode <type -7>; Nlink <type -7>; Uid <type -7>; Gid <type -7>; Rdev <type -8>; .syscall.__pad1 <type -8>; Size <type -4>; Blksize <type -3>; .syscall.__pad2 <type -3>; Blocks <type -4>; Atim <type 5>; Mtim <type 5>; Ctim <type 5>; .syscall.__glibc_reserved <type 10>; }
type 5 "syscall.Timespec" <type 7>
 func (ts <esc:0x1> <type 6>) Nano () <type -4>
 func (ts <esc:0x1> <type 6>) Unix () (sec <type -4>, nsec <type -4>)
type 6 *<type 5>
type 7 struct { Sec <type 8>; Nsec <type 9>; }
type 8 "syscall.Timespec_sec_t" <type -4>
type 9 "syscall.Timespec_nsec_t" <type -4>
type 10 [2 ] <type -3>
type 11 [] <type -20>
const AT_REMOVEDIR = 512 
const AT_SYMLINK_NOFOLLOW = 256 
func Fstatat (dirfd <type -11>, path <esc:0x1> <type -16>, stat <type 2>, flags <type -11>) <type -19>
const GRND_NONBLOCK <type 1> = 1 
const GRND_RANDOM <type 1> = 2 
func GetRandom (p <esc:0x1> <type 11>, flags <type 1>) (n <type -11>, err <type -19>)
func IsNonblock (fd <type -11>) (nonblocking <type -15>, err <type -19>)
func Openat (dirfd <type -11>, path <esc:0x1> <type -16>, flags <type -11>, perm <type -7>) (? <type -11>, ? <type -19>)
func Unlinkat (dirfd <type -11>, path <esc:0x1> <type -16>, flags <type -11>) <type -19>
checksum F5FD75DCCE9EB4F6BD3456F57D35A2C3F03DE498
v3;
package testenv
pkgpath internal/testenv
import errors errors "errors"
import flag flag "flag"
import os os "os"
import exec os/exec "os/exec"
import filepath path/filepath "path/filepath"
import runtime runtime "runtime"
import strconv strconv "strconv"
import strings strings "strings"
import testing testing "testing"
indirectimport context context
indirectimport io io
indirectimport poll internal/poll
indirectimport sync sync
indirectimport syscall syscall
indirectimport time time
init testenv internal..z2ftestenv..import bytes bytes..import context context..import flag flag..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import exec os..z2fexec..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import debug runtime..z2fdebug..import sys runtime..z2finternal..z2fsys..import trace runtime..z2ftrace..import strconv strconv..import sync sync..import syscall syscall..import testing testing..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 1 5 1 8 1 13 1 15 1 18 1 22 2 4 2 5 2 6 2 7 2 8 2 9 2 12 2 13 2 15 2 17 2 18 2 19 2 21 2 22 3 4 3 5 3 6 3 7 3 8 3 9 3 12 3 13 3 15 3 17 3 18 3 19 3 21 3 22 4 5 4 6 4 7 4 8 4 9 4 12 4 13 4 15 4 17 4 18 4 19 4 21 4 22 6 5 6 8 6 13 6 15 6 18 6 19 6 21 8 5 8 13 8 15 8 18 9 5 9 6 9 7 9 8 9 13 9 15 9 18 9 19 9 21 10 1 10 2 10 4 10 5 10 6 10 7 10 8 10 9 10 11 10 12 10 13 10 15 10 17 10 18 10 19 10 21 10 22 11 5 11 6 11 7 11 8 11 9 11 12 11 13 11 15 11 17 11 18 11 19 11 21 11 22 12 5 12 13 12 15 12 17 12 18 12 22 13 5 13 15 14 5 14 6 14 7 14 8 14 9 14 12 14 13 14 15 14 17 14 18 14 19 14 21 14 22 16 2 16 4 16 5 16 6 16 7 16 8 16 9 16 12 16 13 16 15 16 17 16 18 16 19 16 21 16 22 17 5 17 13 17 15 18 5 18 13 18 15 19 5 19 13 19 15 19 18 20 1 20 2 20 3 20 4 20 5 20 6 20 7 20 8 20 9 20 12 20 13 20 14 20 15 20 16 20 17 20 18 20 19 20 21 20 22 21 5 21 13 21 15 21 18 21 19
types 155 1 17 1011 32 45 28 71 21 28 42 22 19 2800 32 141 3300 356 19 19 525 165 21 31 91 21 36 112 19 73 75 83 195 22 21 36 119 23 34 32 19 76 135 3603 19 37 91 19 43 50 40 53 24 24 38 40 19 35 61 24 19 20 19 36 78 19 35 54 19 37 61 25 19 35 320 157 19 50 43 44 23 280 368 19 115 940 19 57 19 21 93 19 50 20 40 19 32 56 19 32 35 20 32 74 21 37 49 511 22 21 42 397 21 41 93 22 110 23 43 80 23 21 632 21 847 86 437 21 37 307 160 21 53 43 44 32 56 103 224 21 34 43 151 93 21 65 38 144 28 23 23 25 25 33 443 22
type 1 *<type 2>
type 2 "os/exec.Cmd" <type 106>
 func (c <esc:0x9> <type 1>) StdoutPipe () (? <type 3>, ? <type -19>)
 func (c <esc:0x22> <type 1>) .os/exec.envv () <type 10>
 func (c <esc:0x12> <type 1>) .os/exec.argv () <type 10>
 func (c <type 1>) .os/exec.stdin () (f <type 11>, err <type -19>)
 func (c <esc:0x9> <type 1>) Wait () <type -19>
 func (c <esc:0x3a> <type 1>) .os/exec.stderr () (f <type 11>, err <type -19>)
 func (c <esc:0x9> <type 1>) .os/exec.writerDescriptor (w <type 101>) (f <type 11>, err <type -19>)
 func (c <esc:0x1> <type 1>) .os/exec.closeDescriptors (closers <esc:0x9> <type 103>)
 func (c <type 1>) Run () <type -19>
 func (c <type 1>) Start () <type -19>
 func (c <esc:0x9> <type 1>) .os/exec.stdout () (f <type 11>, err <type -19>)
 func (c <type 1>) Output () (? <type 7>, ? <type -19>)
 func (c <esc:0x9> <type 1>) StderrPipe () (? <type 3>, ? <type -19>)
 func (c <esc:0x9> <type 1>) StdinPipe () (? <type 104>, ? <type -19>)
 func (c <type 1>) CombinedOutput () (? <type 7>, ? <type -19>)
type 3 "io.ReadCloser" <type 4>
type 4 interface { ? <type 5>; ? <type 8>; }
type 5 "io.Reader" <type 6>
type 6 interface { Read (p <type 7>) (n <type -11>, err <type -19>); }
type 7 [] <type -20>
type 8 "io.Closer" <type 9>
type 9 interface { Close () <type -19>; }
type 10 [] <type -16>
type 11 *<type 12>
type 12 "os.File" <type 38>
 func (f <esc:0x10a> <type 11>) Stat () (? <type 13>, ? <type -19>)
 func (f <esc:0x10a> <type 11>) .os.readdir (n <type -11>) (fi <type 33>, err <type -19>)
 func (f <esc:0x9> <type 11>) .os.seek (offset <type -4>, whence <type -11>) (ret <type -4>, err <type -19>)
 func (f <esc:0x9> <type 11>) .os.pwrite (b <esc:0x1> <type 7>, off <type -4>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 11>) .os.write (b <type 7>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 11>) SetDeadline (t <esc:0x1> <type 15>) <type -19>
 func (f <esc:0x10a> <type 11>) WriteString (s <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (f <esc:0x10a> <type 11>) ReadAt (b <esc:0x1> <type 7>, off <type -4>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 11>) SetWriteDeadline (t <esc:0x1> <type 15>) <type -19>
 func (f <esc:0x10a> <type 11>) Read (b <type 7>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 11>) .os.pread (b <esc:0x1> <type 7>, off <type -4>) (n <type -11>, err <type -19>)
 func (f <esc:0x10a> <type 11>) Seek (offset <type -4>, whence <type -11>) (ret <type -4>, err <type -19>)
 func (f <esc:0x10a> <type 11>) Write (b <type 7>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 11>) SetReadDeadline (t <esc:0x1> <type 15>) <type -19>
 func (f <esc:0x9> <type 11>) .os.setReadDeadline (t <esc:0x1> <type 15>) <type -19>
 func (f <esc:0x22> <type 11>) .os.wrapErr (op <type -16>, err <type -19>) <type -19>
 func (f <type 11>) SyscallConn () (? <type 34>, ? <type -19>)
 func (f <esc:0x10a> <type 11>) WriteAt (b <esc:0x1> <type 7>, off <type -4>) (n <type -11>, err <type -19>)
 func (file <esc:0x10a> <type 11>) .os.readdirnames (n <type -11>) (names <type 10>, err <type -19>)
 func (f <esc:0x2a> <type 11>) Chmod (mode <type 31>) <type -19>
 func (f <esc:0x10a> <type 11>) Readdirnames (n <type -11>) (names <type 10>, err <type -19>)
 func (f <esc:0x2a> <type 11>) .os.chmod (mode <type 31>) <type -19>
 func (f <esc:0x9> <type 11>) Close () <type -19>
 func (f <esc:0x10a> <type 11>) Readdir (n <type -11>) (? <type 33>, ? <type -19>)
 func (f <esc:0x2a> <type 11>) Chown (uid <type -11>, gid <type -11>) <type -19>
 func (f <esc:0x2a> <type 11>) Truncate (size <type -4>) <type -19>
 func (f <esc:0x32> <type 11>) Name () <type -16>
 func (f <esc:0x2a> <type 11>) Sync () <type -19>
 func (f <esc:0x9> <type 11>) .os.setDeadline (t <esc:0x1> <type 15>) <type -19>
 func (f <esc:0x2a> <type 11>) Chdir () <type -19>
 func (f <esc:0x9> <type 11>) .os.setWriteDeadline (t <esc:0x1> <type 15>) <type -19>
 func (f <esc:0x1> <type 11>) .os.checkValid (op <esc:0x1> <type -16>) <type -19>
 func (f <esc:0x9> <type 11>) Fd () <type -13>
 func (f <esc:0x9> <type 11>) .os.read (b <type 7>) (n <type -11>, err <type -19>)
type 13 "os.FileInfo" <type 14>
type 14 interface { IsDir () <type -15>; ModTime () <type 15>; Mode () <type 31>; Name () <type -16>; Size () <type -4>; Sys () <type 32>; }
type 15 "time.Time" <type 30>
 func (t <esc:0x1> <type 15>) String () <type -16>
 func (t <esc:0x1> <type 15>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x12> <type 15>) Add (d <type 16>) <type 15>
 func (t <esc:0x1> <type 15>) AppendFormat (b <esc:0x12> <type 7>, layout <esc:0x1> <type -16>) <type 7>
 func (t <esc:0x1> <type 15>) Minute () <type -11>
 func (t <esc:0x1> <type 17>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 15>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 15>) MarshalBinary () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 15>) After (u <esc:0x1> <type 15>) <type -15>
 func (t <esc:0x1> <type 15>) UnixNano () <type -4>
 func (t <esc:0x1> <type 17>) GobDecode (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 15>) Day () <type -11>
 func (t <esc:0x1> <type 17>) .time.unixSec () <type -4>
 func (t <esc:0x12> <type 15>) Round (d <type 16>) <type 15>
 func (t <esc:0x1> <type 17>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 15>) Before (u <esc:0x1> <type 15>) <type -15>
 func (t <esc:0x32> <type 15>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 17>) .time.setLoc (loc <type 18>)
 func (t <esc:0x12> <type 15>) Truncate (d <type 16>) <type 15>
 func (t <esc:0x1> <type 17>) UnmarshalText (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 17>) UnmarshalBinary (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 15>) Hour () <type -11>
 func (t <esc:0x1> <type 15>) .time.abs () <type -8>
 func (t <esc:0x1> <type 15>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x12> <type 15>) Location () <type 18>
 func (t <esc:0x1> <type 15>) Month () <type 28>
 func (t <esc:0x1> <type 15>) GobEncode () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 15>) Second () <type -11>
 func (t <esc:0x1> <type 17>) UnmarshalJSON (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 17>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 15>) Year () <type -11>
 func (t <esc:0x1> <type 15>) Date () (year <type -11>, month <type 28>, day <type -11>)
 func (t <esc:0x1> <type 15>) Weekday () <type 29>
 func (t <esc:0x1> <type 15>) Unix () <type -4>
 func (t <esc:0x1> <type 15>) YearDay () <type -11>
 func (t <esc:0x12> <type 15>) Local () <type 15>
 func (t <esc:0x1> <type 15>) IsZero () <type -15>
 func (t <esc:0x1> <type 15>) Equal (u <esc:0x1> <type 15>) <type -15>
 func (t <esc:0x12> <type 15>) In (loc <type 18>) <type 15>
 func (t <esc:0x1> <type 15>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 15>) UTC () <type 15>
 func (t <esc:0x32> <type 15>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 15>) Sub (u <esc:0x1> <type 15>) <type 16>
 func (t <esc:0x1> <type 17>) .time.mono () <type -4>
 func (t <esc:0x1> <type 15>) MarshalText () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 17>) .time.stripMono ()
 func (t <esc:0x1> <type 15>) MarshalJSON () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 15>) .time.date (full <type -15>) (year <type -11>, month <type 28>, day <type -11>, yday <type -11>)
 func (t <type 15>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 15>
 func (t <esc:0x1> <type 17>) .time.sec () <type -4>
type 16 "time.Duration" <type -4>
 func (d <type 16>) String () <type -16>
 func (d <type 16>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 16>) Seconds () <type -10>
 func (d <type 16>) Minutes () <type -10>
 func (d <type 16>) Hours () <type -10>
 func (d <type 16>) Truncate (m <type 16>) <type 16>
 func (d <type 16>) Round (m <type 16>) <type 16>
type 17 *<type 15>
type 18 *<type 19>
type 19 "time.Location" <type 20>
 func (l <esc:0x1> <type 18>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 18>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 18>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 18>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 18>) String () <type -16>
 func (l <esc:0x12> <type 18>) .time.get () <type 18>
type 20 struct { .time.name <type -16>; .time.zone <type 21>; .time.tx <type 24>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 27>; }
type 21 [] <type 22>
type 22 ".time.zone" <type 23>
type 23 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 24 [] <type 25>
type 25 ".time.zoneTrans" <type 26>
type 26 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 27 *<type 22>
type 28 "time.Month" <type -11>
 func (m <type 28>) String () <type -16>
type 29 "time.Weekday" <type -11>
 func (d <type 29>) String () <type -16>
type 30 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 18>; }
type 31 "os.FileMode" <type -7>
 func (m <type 31>) Perm () <type 31>
 func (m <type 31>) IsDir () <type -15>
 func (m <type 31>) IsRegular () <type -15>
 func (m <type 31>) String () <type -16>
type 32 interface { }
type 33 [] <type 13>
type 34 "syscall.RawConn" <type 35>
type 35 interface { Control (f <type 36>) <type -19>; Read (f <type 37>) <type -19>; Write (f <type 37>) <type -19>; }
type 36 (? <type -13>)
type 37 (? <type -13>) <type -15>
type 38 struct { ? <type 39>; }
type 39 *<type 40>
type 40 ".os.file" <type 41>
 func (file <type 39>) .os.close () <type -19>
type 41 struct { .os.pfd <type 42>; .os.name <type -16>; .os.dirinfo <type 94>; .os.nonblock <type -15>; .os.stdoutOrErr <type -15>; }
type 42 "internal/poll.FD" <type 80>
 func (fd <type 43>) Accept () (? <type -11>, ? <type 44>, ? <type -16>, ? <type -19>)
 func (fd <type 43>) Pwrite (p <esc:0x1> <type 7>, off <type -4>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) .internal/poll.writeUnlock ()
 func (fd <type 43>) Write (p <type 7>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) ReadFrom (p <esc:0x1> <type 7>) (? <type -11>, ? <type 44>, ? <type -19>)
 func (fd <type 43>) .internal/poll.readLock () <type -19>
 func (fd <type 43>) Pread (p <esc:0x1> <type 7>, off <type -4>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) Read (p <type 7>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) Shutdown (how <type -11>) <type -19>
 func (fd <type 43>) Close () <type -19>
 func (fd <type 43>) .internal/poll.destroy () <type -19>
 func (fd <type 43>) Ftruncate (size <type -4>) <type -19>
 func (fd <type 43>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (fd <esc:0x1> <type 43>) Init (net <esc:0x1> <type -16>, pollable <type -15>) <type -19>
 func (fd <type 43>) Fsync () <type -19>
 func (fd <type 43>) .internal/poll.readUnlock ()
 func (fd <type 43>) Dup () (? <type -11>, ? <type -16>, ? <type -19>)
 func (fd <type 43>) Fchmod (mode <type -7>) <type -19>
 func (fd <type 43>) Fchdir () <type -19>
 func (fd <type 43>) SetsockoptInt (level <type -11>, name <type -11>, arg <type -11>) <type -19>
 func (fd <type 43>) WriteOnce (p <type 7>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) SetsockoptIPMreq (level <type -11>, name <type -11>, mreq <esc:0x1> <type 55>) <type -19>
 func (fd <type 43>) Writev (v <esc:0x9> <type 59>) (? <type -4>, ? <type -19>)
 func (fd <type 43>) RawControl (f <esc:0x1> <type 36>) <type -19>
 func (fd <esc:0x1> <type 43>) WaitWrite () <type -19>
 func (fd <type 43>) SetsockoptIPMreqn (level <type -11>, name <type -11>, mreq <esc:0x1> <type 61>) <type -19>
 func (fd <type 43>) RawWrite (f <esc:0x1> <type 37>) <type -19>
 func (fd <type 43>) Fchown (uid <type -11>, gid <type -11>) <type -19>
 func (fd <type 43>) SetReadDeadline (t <esc:0x1> <type 15>) <type -19>
 func (fd <type 43>) SetsockoptLinger (level <type -11>, name <type -11>, l <esc:0x1> <type 64>) <type -19>
 func (fd <type 43>) SetsockoptIPv6Mreq (level <type -11>, name <type -11>, mreq <esc:0x1> <type 67>) <type -19>
 func (fd <type 43>) SetsockoptByte (level <type -11>, name <type -11>, arg <type -20>) <type -19>
 func (fd <type 43>) SetBlocking () <type -19>
 func (fd <type 43>) ReadDirent (buf <esc:0x1> <type 7>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) .internal/poll.decref () <type -19>
 func (fd <type 43>) RawRead (f <esc:0x1> <type 37>) <type -19>
 func (fd <type 43>) SetDeadline (t <esc:0x1> <type 15>) <type -19>
 func (fd <type 43>) Fstat (s <esc:0x1> <type 71>) <type -19>
 func (fd <type 43>) ReadMsg (p <esc:0x1> <type 7>, oob <esc:0x1> <type 7>) (? <type -11>, ? <type -11>, ? <type -11>, ? <type 44>, ? <type -19>)
 func (fd <type 43>) .internal/poll.writeLock () <type -19>
 func (fd <type 43>) SetsockoptInet4Addr (level <type -11>, name <type -11>, arg <type 58>) <type -19>
 func (fd <esc:0x1> <type 43>) .internal/poll.eofError (n <type -11>, err <esc:0x12> <type -19>) <type -19>
 func (fd <type 43>) WriteTo (p <esc:0x1> <type 7>, sa <type 44>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) SetWriteDeadline (t <esc:0x1> <type 15>) <type -19>
 func (fd <type 43>) .internal/poll.incref () <type -19>
 func (fd <type 43>) WriteMsg (p <esc:0x1> <type 7>, oob <esc:0x1> <type 7>, sa <type 44>) (? <type -11>, ? <type -11>, ? <type -19>)
type 43 *<type 42>
type 44 "syscall.Sockaddr" <type 45>
type 45 interface { .syscall.sockaddr () (ptr <type 46>, len <type 53>, err <type -19>); }
type 46 *<type 47>
type 47 "syscall.RawSockaddrAny" <type 48>
type 48 struct { Addr <type 49>; Pad <type 52>; }
type 49 "syscall.RawSockaddr" <type 50>
type 50 struct { Family <type -6>; Data <type 51>; }
type 51 [14 ] <type -1>
type 52 [96 ] <type -1>
type 53 "syscall.Socklen_t" <type 54>
type 54 ".syscall._socklen_t" <type -7>
type 55 *<type 56>
type 56 "syscall.IPMreq" <type 57>
type 57 struct { Multiaddr <type 58>; Interface <type 58>; }
type 58 [4 ] <type -20>
type 59 *<type 60>
type 60 [] <type 7>
type 61 *<type 62>
type 62 "syscall.IPMreqn" <type 63>
type 63 struct { Multiaddr <type 58>; Address <type 58>; Ifindex <type -3>; }
type 64 *<type 65>
type 65 "syscall.Linger" <type 66>
type 66 struct { Onoff <type -3>; Linger <type -3>; }
type 67 *<type 68>
type 68 "syscall.IPv6Mreq" <type 69>
type 69 struct { Multiaddr <type 70>; Interface <type -7>; }
type 70 [16 ] <type -20>
type 71 *<type 72>
type 72 "syscall.Stat_t" <type 73>
type 73 struct { Dev <type -8>; Ino <type -8>; Mode <type -7>; Nlink <type -7>; Uid <type -7>; Gid <type -7>; Rdev <type -8>; .syscall.__pad1 <type -8>; Size <type -4>; Blksize <type -3>; .syscall.__pad2 <type -3>; Blocks <type -4>; Atim <type 74>; Mtim <type 74>; Ctim <type 74>; .syscall.__glibc_reserved <type 79>; }
type 74 "syscall.Timespec" <type 76>
 func (ts <esc:0x1> <type 75>) Unix () (sec <type -4>, nsec <type -4>)
 func (ts <esc:0x1> <type 75>) Nano () <type -4>
type 75 *<type 74>
type 76 struct { Sec <type 77>; Nsec <type 78>; }
type 77 "syscall.Timespec_sec_t" <type -4>
type 78 "syscall.Timespec_nsec_t" <type -4>
type 79 [2 ] <type -3>
type 80 struct { .internal/poll.fdmu <type 81>; Sysfd <type -11>; .internal/poll.pd <type 84>; .internal/poll.iovecs <type 87>; .internal/poll.csema <type -7>; .internal/poll.isBlocking <type -7>; IsStream <type -15>; ZeroReadIsEOF <type -15>; .internal/poll.isFile <type -15>; }
type 81 ".internal/poll.fdMutex" <type 83>
 func (mu <type 82>) .internal/poll.incref () <type -15>
 func (mu <type 82>) .internal/poll.increfAndClose () <type -15>
 func (mu <type 82>) .internal/poll.decref () <type -15>
 func (mu <type 82>) .internal/poll.rwlock (read <type -15>) <type -15>
 func (mu <type 82>) .internal/poll.rwunlock (read <type -15>) <type -15>
type 82 *<type 81>
type 83 struct { .internal/poll.state <type -8>; .internal/poll.rsema <type -7>; .internal/poll.wsema <type -7>; }
type 84 ".internal/poll.pollDesc" <type 86>
 func (pd <esc:0x1> <type 85>) .internal/poll.init (fd <esc:0x1> <type 43>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.evict ()
 func (pd <esc:0x1> <type 85>) .internal/poll.close ()
 func (pd <esc:0x1> <type 85>) .internal/poll.wait (mode <type -11>, isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.prepare (mode <type -11>, isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.pollable () <type -15>
 func (pd <esc:0x1> <type 85>) .internal/poll.prepareRead (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.waitWrite (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.prepareWrite (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.waitRead (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.waitCanceled (mode <type -11>)
type 85 *<type 84>
type 86 struct { .internal/poll.runtimeCtx <type -13>; }
type 87 *<type 88>
type 88 [] <type 89>
type 89 "syscall.Iovec" <type 91>
 func (iov <esc:0x1> <type 90>) SetLen (length <type -11>)
type 90 *<type 89>
type 91 struct { Base <type 92>; Len <type 93>; }
type 92 *<type -20>
type 93 "syscall.Iovec_len_t" <type -8>
type 94 *<type 95>
type 95 ".os.dirInfo" <type 96>
type 96 struct { .os.buf <type 7>; .os.dir <type 97>; }
type 97 *<type 98>
type 98 "syscall.DIR" <type 99>
type 99 ".syscall._DIR" <type 100>
type 100 struct { }
type 101 "io.Writer" <type 102>
type 102 interface { Write (p <type 7>) (n <type -11>, err <type -19>); }
type 103 [] <type 8>
type 104 "io.WriteCloser" <type 105>
type 105 interface { ? <type 101>; ? <type 8>; }
type 106 struct { Path <type -16>; Args <type 10>; Env <type 10>; Dir <type -16>; Stdin <type 5>; Stdout <type 101>; Stderr <type 101>; ExtraFiles <type 107>; SysProcAttr <type 108>; Process <type 120>; ProcessState <type 122>; .os/exec.ctx <type 145>; .os/exec.lookPathErr <type -19>; .os/exec.finished <type -15>; .os/exec.childFiles <type 107>; .os/exec.closeAfterStart <type 103>; .os/exec.closeAfterWait <type 103>; .os/exec.goroutine <type 148>; .os/exec.errch <type 150>; .os/exec.waitDone <type 151>; }
type 107 [] <type 11>
type 108 *<type 109>
type 109 "syscall.SysProcAttr" <type 110>
type 110 struct { Chroot <type -16>; Credential <type 111>; Ptrace <type -15>; Setsid <type -15>; Setpgid <type -15>; Setctty <type -15>; Noctty <type -15>; Ctty <type -11>; Foreground <type -15>; Pgid <type -11>; Pdeathsig <type 115>; Cloneflags <type -13>; Unshareflags <type -13>; UidMappings <type 116>; GidMappings <type 116>; GidMappingsEnableSetgroups <type -15>; AmbientCaps <type 119>; }
type 111 *<type 112>
type 112 "syscall.Credential" <type 113>
type 113 struct { Uid <type -7>; Gid <type -7>; Groups <type 114>; NoSetGroups <type -15>; }
type 114 [] <type -7>
type 115 "syscall.Signal" <type -11>
 func (s <type 115>) Signal ()
 func (s <type 115>) String () <type -16>
type 116 [] <type 117>
type 117 "syscall.SysProcIDMap" <type 118>
type 118 struct { ContainerID <type -11>; HostID <type -11>; Size <type -11>; }
type 119 [] <type -13>
type 120 *<type 121>
type 121 "os.Process" <type 136>
 func (p <esc:0x1> <type 120>) .os.blockUntilWaitable () (? <type -15>, ? <type -19>)
 func (p <type 120>) .os.wait () (ps <type 122>, err <type -19>)
 func (p <type 120>) .os.kill () <type -19>
 func (p <type 120>) Signal (sig <esc:0x1> <type 134>) <type -19>
 func (p <type 120>) Kill () <type -19>
 func (p <type 120>) .os.signal (sig <esc:0x1> <type 134>) <type -19>
 func (p <type 120>) Release () <type -19>
 func (p <type 120>) .os.done () <type -15>
 func (p <type 120>) .os.release () <type -19>
 func (p <type 120>) Wait () (? <type 122>, ? <type -19>)
 func (p <type 120>) .os.setDone ()
type 122 *<type 123>
type 123 "os.ProcessState" <type 124>
 func (p <esc:0x1> <type 122>) .os.systemTime () <type 16>
 func (p <esc:0x1> <type 122>) UserTime () <type 16>
 func (p <esc:0x1> <type 122>) .os.userTime () <type 16>
 func (p <esc:0x1> <type 122>) SystemTime () <type 16>
 func (p <esc:0x1> <type 122>) ExitCode () <type -11>
 func (p <esc:0x1> <type 122>) Exited () <type -15>
 func (p <esc:0x1> <type 122>) Success () <type -15>
 func (p <esc:0x1> <type 122>) Sys () <type 32>
 func (p <esc:0x22> <type 122>) .os.sysUsage () <type 32>
 func (p <esc:0x22> <type 122>) SysUsage () <type 32>
 func (p <esc:0x1> <type 122>) .os.exited () <type -15>
 func (p <esc:0x1> <type 122>) .os.success () <type -15>
 func (p <esc:0x1> <type 122>) .os.sys () <type 32>
 func (p <esc:0x1> <type 122>) Pid () <type -11>
 func (p <esc:0x1> <type 122>) String () <type -16>
type 124 struct { .os.pid <type -11>; .os.status <type 125>; .os.rusage <type 126>; }
type 125 "syscall.WaitStatus" <type -7>
 func (w <type 125>) TrapCause () <type -11>
 func (w <type 125>) StopSignal () <type 115>
 func (w <type 125>) Signal () <type 115>
 func (w <type 125>) CoreDump () <type -15>
 func (w <type 125>) ExitStatus () <type -11>
 func (w <type 125>) Continued () <type -15>
 func (w <type 125>) Stopped () <type -15>
 func (w <type 125>) Signaled () <type -15>
 func (w <type 125>) Exited () <type -15>
type 126 *<type 127>
type 127 "syscall.Rusage" <type 128>
type 128 struct { Utime <type 129>; Stime <type 129>; Maxrss <type -4>; Ixrss <type -4>; Idrss <type -4>; Isrss <type -4>; Minflt <type -4>; Majflt <type -4>; Nswap <type -4>; Inblock <type -4>; Oublock <type -4>; Msgsnd <type -4>; Msgrcv <type -4>; Nsignals <type -4>; Nvcsw <type -4>; Nivcsw <type -4>; }
type 129 "syscall.Timeval" <type 131>
 func (tv <esc:0x1> <type 130>) Unix () (sec <type -4>, nsec <type -4>)
 func (tv <esc:0x1> <type 130>) Nano () <type -4>
type 130 *<type 129>
type 131 struct { Sec <type 132>; Usec <type 133>; }
type 132 "syscall.Timeval_sec_t" <type -4>
type 133 "syscall.Timeval_usec_t" <type -4>
type 134 "os.Signal" <type 135>
type 135 interface { Signal (); String () <type -16>; }
type 136 struct { Pid <type -11>; .os.handle <type -13>; .os.isdone <type -7>; .os.sigMu <type 137>; }
type 137 "sync.RWMutex" <type 141>
 func (rw <esc:0x12> <type 138>) RLocker () ($ret8 <type 139>)
 func (rw <type 138>) Unlock ()
 func (rw <type 138>) Lock ()
 func (rw <type 138>) RUnlock ()
 func (rw <type 138>) RLock ()
type 138 *<type 137>
type 139 "sync.Locker" <type 140>
type 140 interface { Lock (); Unlock (); }
type 141 struct { .sync.w <type 142>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 142 "sync.Mutex" <type 144>
 func (m <type 143>) Unlock ()
 func (m <type 143>) Lock ()
type 143 *<type 142>
type 144 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 145 "context.Context" <type 146>
type 146 interface { Deadline () (deadline <type 15>, ok <type -15>); Done () <type 147>; Err () <type -19>; Value (key <type 32>) <type 32>; }
type 147 chan <- <type 100>
type 148 [] <type 149>
type 149 () <type -19>
type 150 chan <type -19>
type 151 chan <type 100>
type 152 "testing.TB" <type 153>
type 153 interface { Error (args ...<type 32>); Errorf (format <type -16>, args ...<type 32>); Fail (); FailNow (); Failed () <type -15>; Fatal (args ...<type 32>); Fatalf (format <type -16>, args ...<type 32>); Helper (); Log (args ...<type 32>); Logf (format <type -16>, args ...<type 32>); Name () <type -16>; Skip (args ...<type 32>); SkipNow (); Skipf (format <type -16>, args ...<type 32>); Skipped () <type -15>; .testing.private (); }
type 154 [] <type 32>
func Builder () <type -16>
func CleanCmdEnv (cmd <esc:0x1a> <type 1>) <type 1>
func GoTool () (? <type -16>, ? <type -19>)
func GoToolPath (t <type 152>) <type -16>
func HasCGO () <type -15>
func HasExec () <type -15>
func HasExternalNetwork () <type -15>
func HasGoBuild () <type -15>
func HasGoRun () <type -15>
func HasLink () ($ret12 <type -15>) <inl:218>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/testenv/testenv.go:214
 { //218
  $ret12 = ($true && $true) //218
  return //218
 } //0
func HasSrc () <type -15>
func HasSymlink () <type -15>
func MustHaveCGO (t <type 152>)
func MustHaveExec (t <type 152>)
func MustHaveExternalNetwork (t <type 152>)
func MustHaveGoBuild (t <type 152>)
func MustHaveGoRun (t <type 152>)
func MustHaveLink (t <type 152>)
func MustHaveSymlink (t <type 152>)
func SkipFlaky (t <type 152>, issue <type -11>)
func SkipFlakyNet (t <type 152>)
checksum 885F29EB212398F90083B2158F75B02D0E3BFDEC
v3;
package testlog
pkgpath internal/testlog
import atomic sync/atomic "sync/atomic"
init testlog internal..z2ftestlog..import
types 3 2 28 118
type 1 "Interface" <type 2>
type 2 interface { Chdir (dir <type -16>); Getenv (key <type -16>); Open (file <type -16>); Stat (file <type -16>); }
func Getenv (name <type -16>)
func Logger () <type 1>
func Open (name <type -16>)
func SetLogger (impl <type 1>)
func Stat (name <type -16>)
checksum 6FA5358A6EB07C4F5E6EB67A3A52EA29DE543FB9
v3;
package trace
pkgpath internal/trace
import bufio bufio "bufio"
import bytes bytes "bytes"
import heap container/heap "container/heap"
import fmt fmt "fmt"
import io io "io"
import math math "math"
import rand math/rand "math/rand"
import os os "os"
import exec os/exec "os/exec"
import filepath path/filepath "path/filepath"
import runtime runtime "runtime"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import time time "time"
import unsafe unsafe "unsafe"
init trace internal..z2ftrace..import bufio bufio..import bytes bytes..import context context..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import rand math..z2frand..import os os..import exec os..z2fexec..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 1 2 1 5 1 8 1 14 1 15 1 17 1 20 2 5 2 8 2 14 2 15 2 17 2 20 3 4 3 5 3 6 3 7 3 8 3 10 3 13 3 14 3 15 3 16 3 17 3 18 3 19 3 20 4 5 4 6 4 7 4 8 4 10 4 13 4 14 4 15 4 16 4 17 4 18 4 19 4 20 6 5 6 8 6 14 6 15 6 17 6 18 6 19 8 5 8 14 8 15 8 17 9 5 9 14 9 15 9 17 10 5 10 6 10 7 10 8 10 14 10 15 10 17 10 18 10 19 11 2 11 3 11 4 11 5 11 6 11 7 11 8 11 10 11 12 11 13 11 14 11 15 11 16 11 17 11 18 11 19 11 20 12 5 12 6 12 7 12 8 12 10 12 13 12 14 12 15 12 16 12 17 12 18 12 19 12 20 13 5 13 14 13 15 13 16 13 17 13 20 14 5 14 15 16 5 16 14 16 15 17 5 17 14 17 15 18 5 18 14 18 15 18 17 19 5 19 14 19 15 19 17 19 18
types 84 12 77 25 269 99 366 31 31 34 30 31 108 205 21 18 23 22 18 24 126 82 172 21 18 19 42 349 18 186 21 34 53 21 362 19 356 21 45 122 19 214 295 328 19 22 21 19 435 236 21 41 117 27 151 20 21 385 21 44 128 208 19 80 18 22 52 21 19 30 73 22 55 34 35 98 59 32 1810 19 30 74 91 34 21
type 1 "Event" <type 12>
 func (ev <esc:0x9> <type 17>) String () <type -16>
type 2 "Frame" <type 20>
type 3 "GDesc" <type 21>
 func (g <esc:0x1> <type 27>) .internal/trace.snapshotStat (lastTs <type -4>, activeGCStartTime <type -4>) (ret <type 4>)
 func (g <esc:0x9> <type 27>) .internal/trace.finalize (lastTs <type -4>, activeGCStartTime <type -4>, trigger <type 17>)
type 4 "GExecutionStat" <type 28>
 func (s <type 4>) .internal/trace.sub (v <type 4>) (r <type 4>)
type 5 "MMUCurve" <type 31>
 func (c <esc:0x1> <type 63>) MMU (window <type 35>) (mmu <type -10>)
 func (c <esc:0x1> <type 63>) Examples (window <type 35>, n <type -11>) (worst <type 45>)
 func (c <esc:0x1> <type 63>) MUD (window <type 35>, quantiles <esc:0x1> <type 64>) <type 64>
 func (c <esc:0x1> <type 63>) .internal/trace.mmu (window <type 35>, acc <type 39>)
type 6 "MutatorUtil" <type 65>
type 7 "ParseResult" <type 71>
type 8 "UserRegionDesc" <type 74>
type 9 "UtilFlags" <type -11>
type 10 "UtilWindow" <type 75>
type 11 "Writer" <type 76>
 func (w <esc:0x1> <type 67>) Emit (typ <type -20>, args <esc:0x1> ...<type -8>)
type 12 struct { Off <type -11>; Type <type -20>; .internal/trace.seq <type -4>; Ts <type -4>; P <type -11>; G <type -8>; StkID <type -8>; Stk <type 13>; Args <type 15>; SArgs <type 16>; Link <type 17>; }
type 13 [] <type 14>
type 14 *<type 2>
type 15 [3 ] <type -8>
type 16 [] <type -16>
type 17 *<type 1>
type 18 [49 ] <type 19>
type 19 struct { Name <type -16>; .internal/trace.minVersion <type -11>; Stack <type -15>; Args <type 16>; SArgs <type 16>; }
type 20 struct { PC <type -8>; Fn <type -16>; File <type -16>; Line <type -11>; }
type 21 struct { ID <type -8>; Name <type -16>; PC <type -8>; CreationTime <type -4>; StartTime <type -4>; EndTime <type -4>; Regions <type 22>; ? <type 4>; ? <type 24>; }
type 22 [] <type 23>
type 23 *<type 8>
type 24 *<type 25>
type 25 ".internal/trace.gdesc" <type 26>
type 26 struct { .internal/trace.lastStartTime <type -4>; .internal/trace.blockNetTime <type -4>; .internal/trace.blockSyncTime <type -4>; .internal/trace.blockSyscallTime <type -4>; .internal/trace.blockSweepTime <type -4>; .internal/trace.blockGCTime <type -4>; .internal/trace.blockSchedTime <type -4>; .internal/trace.activeRegions <type 22>; }
type 27 *<type 3>
type 28 struct { ExecTime <type -4>; SchedWaitTime <type -4>; IOTime <type -4>; BlockTime <type -4>; SyscallTime <type -4>; GCTime <type -4>; SweepTime <type -4>; TotalTime <type -4>; }
type 29 [] <type 17>
type 30 map [<type -8>] <type 27>
type 31 struct { .internal/trace.series <type 32>; }
type 32 [] <type 33>
type 33 ".internal/trace.mmuSeries" <type 53>
 func (s <esc:0x1> <type 34>) .internal/trace.bandTime (i <type -11>) (start <type -4>, end <type -4>)
 func (c <esc:0x1> <type 34>) .internal/trace.mkBandUtil (series <type -11>, window <type 35>) <type 36>
 func (c <esc:0x1> <type 34>) .internal/trace.bandMMU (bandIdx <type -11>, window <type 35>, acc <type 39>)
type 34 *<type 33>
type 35 "time.Duration" <type -4>
 func (d <type 35>) Round (m <type 35>) <type 35>
 func (d <type 35>) Truncate (m <type 35>) <type 35>
 func (d <type 35>) Hours () <type -10>
 func (d <type 35>) Minutes () <type -10>
 func (d <type 35>) Seconds () <type -10>
 func (d <type 35>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 35>) String () <type -16>
type 36 [] <type 37>
type 37 ".internal/trace.bandUtil" <type 38>
type 38 struct { .internal/trace.series <type -11>; .internal/trace.i <type -11>; .internal/trace.utilBound <type -10>; }
type 39 *<type 40>
type 40 ".internal/trace.accumulator" <type 41>
 func (acc <esc:0x1> <type 39>) .internal/trace.resetTime ()
 func (acc <type 39>) .internal/trace.addMU (time <type -4>, mu <type -10>, window <type 35>) <type -15>
type 41 struct { .internal/trace.mmu <type -10>; .internal/trace.bound <type -10>; .internal/trace.nWorst <type -11>; .internal/trace.wHeap <type 42>; .internal/trace.mud <type 46>; .internal/trace.preciseMass <type -10>; .internal/trace.lastTime <type -4>; .internal/trace.lastMU <type -10>; }
type 42 ".internal/trace.utilHeap" <type 45>
 func (h <esc:0x1> <type 42>) Len () <type -11>
 func (h <esc:0x1> <type 42>) Less (i <type -11>, j <type -11>) <type -15>
 func (h <esc:0x1> <type 42>) Swap (i <type -11>, j <type -11>)
 func (h <esc:0x9> <type 43>) Push (x <type 44>)
 func (h <esc:0x1> <type 43>) Pop () <type 44>
type 43 *<type 42>
type 44 interface { }
type 45 [] <type 10>
type 46 *<type 47>
type 47 ".internal/trace.mud" <type 48>
 func (d <esc:0x9> <type 46>) .internal/trace.add (l <type -10>, r <type -10>, area <type -10>)
 func (d <esc:0x1> <type 46>) .internal/trace.setTrackMass (mass <type -10>)
 func (d <esc:0x1> <type 46>) .internal/trace.approxInvCumulativeSum () (? <type -10>, ? <type -10>, ? <type -15>)
 func (d <esc:0x9> <type 46>) .internal/trace.invCumulativeSum (y <type -10>) (? <type -10>, ? <type -15>)
type 48 struct { .internal/trace.sorted <type 49>; .internal/trace.unsorted <type 49>; .internal/trace.trackMass <type -10>; .internal/trace.trackBucket <type -11>; .internal/trace.trackSum <type -10>; .internal/trace.hist <type 52>; }
type 49 [] <type 50>
type 50 ".internal/trace.edge" <type 51>
type 51 struct { .internal/trace.x <type -10>; .internal/trace.delta <type -10>; .internal/trace.dirac <type -10>; }
type 52 [1024 ] <type -10>
type 53 struct { .internal/trace.util <type 54>; .internal/trace.sums <type 55>; .internal/trace.bands <type 57>; .internal/trace.bandDur <type -4>; }
type 54 [] <type 6>
type 55 [] <type 56>
type 56 ".internal/trace.totalUtil" <type -10>
 func (u <type 56>) .internal/trace.mean (dur <type 35>) ($ret3 <type -10>) <inl:252>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/trace/gc.go:231
  { //232
   $ret3 = ($convert(<type -10>, u) / $convert(<type -10>, dur)) //232
   return //232
  } //0
type 57 [] <type 58>
type 58 ".internal/trace.mmuBand" <type 59>
type 59 struct { .internal/trace.minUtil <type -10>; .internal/trace.cumUtil <type 56>; .internal/trace.integrator <type 60>; }
type 60 ".internal/trace.integrator" <type 62>
 func (in <esc:0x1> <type 61>) .internal/trace.advance (time <type -4>) <type 56>
 func (in <esc:0x1> <type 61>) .internal/trace.next (time <type -4>) <type -4>
type 61 *<type 60>
type 62 struct { .internal/trace.u <type 34>; .internal/trace.pos <type -11>; }
type 63 *<type 5>
type 64 [] <type -10>
type 65 struct { Time <type -4>; Util <type -10>; }
type 66 [] <type 54>
type 67 *<type 11>
type 68 "io.Reader" <type 69>
type 69 interface { Read (p <type 70>) (n <type -11>, err <type -19>); }
type 70 [] <type -20>
type 71 struct { Events <type 29>; Stacks <type 72>; }
type 72 map [<type -8>] <type 13>
type 73 map [<type -8>] <type -15>
type 74 struct { TaskID <type -8>; Name <type -16>; Start <type 17>; End <type 17>; ? <type 4>; }
type 75 struct { Time <type -4>; MutatorUtil <type -10>; }
type 76 struct { ? <type 77>; }
type 77 "bytes.Buffer" <type 81>
 func (b <esc:0x22> <type 78>) .bytes.readSlice (delim <type -20>) (line <type 70>, err <type -19>)
 func (b <esc:0x1> <type 78>) ReadBytes (delim <type -20>) (line <type 70>, err <type -19>)
 func (b <esc:0x1> <type 78>) UnreadByte () <type -19>
 func (b <esc:0x1> <type 78>) UnreadRune () <type -19>
 func (b <esc:0x1> <type 78>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x1> <type 78>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x9> <type 78>) WriteTo (w <type 79>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 78>) Read (p <esc:0x1> <type 70>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 78>) Truncate (n <type -11>)
 func (b <esc:0x1> <type 78>) .bytes.tryGrowByReslice (n <type -11>) (? <type -11>, ? <type -15>)
 func (b <esc:0x1> <type 78>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x22> <type 78>) Bytes () <type 70>
 func (b <esc:0x1> <type 78>) String () <type -16>
 func (b <esc:0x1> <type 78>) Cap () <type -11>
 func (b <esc:0x1> <type 78>) Len () <type -11>
 func (b <esc:0x1> <type 78>) WriteRune (r <type -21>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 78>) .bytes.empty () <type -15>
 func (b <esc:0x1> <type 78>) Reset ()
 func (b <esc:0x22> <type 78>) Next (n <type -11>) <type 70>
 func (b <esc:0x1> <type 78>) .bytes.grow (n <type -11>) <type -11>
 func (b <esc:0x1> <type 78>) Grow (n <type -11>)
 func (b <esc:0x1> <type 78>) Write (p <esc:0x1> <type 70>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 78>) ReadString (delim <type -20>) (line <type -16>, err <type -19>)
 func (b <esc:0x1> <type 78>) WriteString (s <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (b <esc:0x9> <type 78>) ReadFrom (r <type 68>) (n <type -4>, err <type -19>)
type 78 *<type 77>
type 79 "io.Writer" <type 80>
type 80 interface { Write (p <type 70>) (n <type -11>, err <type -19>); }
type 81 struct { .bytes.buf <type 70>; .bytes.off <type -11>; .bytes.lastRead <type 82>; }
type 82 ".bytes.readOp" <type -1>
type 83 [] <type -8>
var BreakTimestampsForTesting <type -15>
var ErrTimeOrder <type -19>
const EvBatch = 1 
const EvCount = 49 
const EvFrequency = 2 
const EvFutileWakeup = 36 
const EvGCDone = 8 
const EvGCMarkAssistDone = 44 
const EvGCMarkAssistStart = 43 
const EvGCSTWDone = 10 
const EvGCSTWStart = 9 
const EvGCStart = 7 
const EvGCSweepDone = 12 
const EvGCSweepStart = 11 
const EvGoBlock = 20 
const EvGoBlockCond = 26 
const EvGoBlockGC = 42 
const EvGoBlockNet = 27 
const EvGoBlockRecv = 23 
const EvGoBlockSelect = 24 
const EvGoBlockSend = 22 
const EvGoBlockSync = 25 
const EvGoCreate = 13 
const EvGoEnd = 15 
const EvGoInSyscall = 32 
const EvGoPreempt = 18 
const EvGoSched = 17 
const EvGoSleep = 19 
const EvGoStart = 14 
const EvGoStartLabel = 41 
const EvGoStartLocal = 38 
const EvGoStop = 16 
const EvGoSysBlock = 30 
const EvGoSysCall = 28 
const EvGoSysExit = 29 
const EvGoSysExitLocal = 40 
const EvGoUnblock = 21 
const EvGoUnblockLocal = 39 
const EvGoWaiting = 31 
const EvGomaxprocs = 4 
const EvHeapAlloc = 33 
const EvNextGC = 34 
const EvNone = 0 
const EvProcStart = 5 
const EvProcStop = 6 
const EvStack = 3 
const EvString = 37 
const EvTimerGoroutine = 35 
const EvUserLog = 48 
const EvUserRegion = 47 
const EvUserTaskCreate = 45 
const EvUserTaskEnd = 46 
var EventDescriptions <type 18>
const FakeP = 1000000 
const GCP = 1000004 
func GoroutineStats (events <type 29>) <type 30>
func MutatorUtilization (events <esc:0x9> <type 29>, flags <type 9>) <type 66>
const NetpollP = 1000002 
func NewMMUCurve (utils <esc:0x9> <type 66>) <type 63>
func NewWriter () <type 67>
func Parse (r <type 68>, bin <type -16>) (? <type 7>, ? <type -19>)
func Print (events <esc:0x9> <type 29>)
func PrintEvent (ev <type 17>)
func RelatedGoroutines (events <esc:0x1> <type 29>, goid <type -8>) <type 73>
const SyscallP = 1000003 
const TimerP = 1000001 
const UtilAssist <type 9> = 4 
const UtilBackground <type 9> = 2 
const UtilPerProc <type 9> = 16 
const UtilSTW <type 9> = 1 
const UtilSweep <type 9> = 8 
checksum 9141F33A6A6CD8070C5D27D2D4DE33C18398C5BC
v3;
package chacha20poly1305
pkgpath internal/x/crypto/chacha20poly1305
import cipher crypto/cipher "crypto/cipher"
import binary encoding/binary "encoding/binary"
import errors errors "errors"
import chacha20 internal/x/crypto/internal/chacha20 "internal/x/crypto/internal/chacha20"
import poly1305 internal/x/crypto/poly1305 "internal/x/crypto/poly1305"
init chacha20poly1305 internal..z2fx..z2fcrypto..z2fchacha20poly1305..import cipher crypto..z2fcipher..import binary encoding..z2fbinary..import cpu internal..z2fcpu..import chacha20 internal..z2fx..z2fcrypto..z2finternal..z2fchacha20..import io io..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 1 2 1 3 1 5 1 6 1 7 1 8 1 9 1 10 1 11 2 3 2 5 2 6 2 7 2 8 2 9 2 10 2 11 4 1 4 2 4 3 4 5 4 6 4 7 4 8 4 9 4 10 4 11 5 3 5 7 5 8 5 10 6 3 6 7 6 8 6 9 6 10 6 11 7 3 7 8 9 3 9 7 9 8 10 3 10 7 10 8
types 4 1 21 37 271
type 1 [] <type -20>
type 2 "crypto/cipher.AEAD" <type 3>
type 3 interface { NonceSize () <type -11>; Open (dst <type 1>, nonce <type 1>, ciphertext <type 1>, additionalData <type 1>) (? <type 1>, ? <type -19>); Overhead () <type -11>; Seal (dst <type 1>, nonce <type 1>, plaintext <type 1>, additionalData <type 1>) <type 1>; }
const KeySize = 32 
func New (key <esc:0x1> <type 1>) (? <type 2>, ? <type -19>)
const NonceSize = 12 
checksum B5C41A58265F1F6230A2549E9911F4F4858FF3B2
v3;
package cryptobyte
pkgpath internal/x/crypto/cryptobyte
import asn1 encoding/asn1 "encoding/asn1"
import errors errors "errors"
import fmt fmt "fmt"
import asn1 internal/x/crypto/cryptobyte/asn1 "internal/x/crypto/cryptobyte/asn1"
import big math/big "math/big"
import reflect reflect "reflect"
import time time "time"
indirectimport io io
indirectimport rand math/rand
init cryptobyte internal..z2fx..z2fcrypto..z2fcryptobyte..import bytes bytes..import asn1 encoding..z2fasn1..import binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import big math..z2fbig..import rand math..z2frand..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 1 5 1 8 1 13 1 14 1 16 1 19 2 1 2 3 2 4 2 5 2 6 2 7 2 8 2 9 2 10 2 11 2 12 2 13 2 14 2 15 2 16 2 17 2 18 2 19 3 5 3 8 3 12 3 13 3 14 3 15 3 16 3 19 4 5 4 6 4 7 4 8 4 11 4 12 4 13 4 14 4 15 4 16 4 17 4 18 4 19 6 5 6 8 6 13 6 14 6 16 6 17 6 18 8 5 8 13 8 14 8 16 9 1 9 3 9 4 9 5 9 6 9 7 9 8 9 10 9 11 9 12 9 13 9 14 9 15 9 16 9 17 9 18 9 19 10 5 10 13 10 14 10 16 11 5 11 6 11 7 11 8 11 13 11 14 11 16 11 17 11 18 12 5 12 13 12 14 12 15 12 16 12 19 13 5 13 14 15 5 15 13 15 14 16 5 16 13 16 14 17 5 17 13 17 14 17 16 18 5 18 13 18 14 18 16 18 17
types 72 6 29 2200 39 35 3773 34 426 21 17 20 152 19 5175 21 35 30 194 35 61 34 64 19 1020 37 22 131 37 65 39 56 34 293 34 70 4122 21 38 102 3300 356 19 73 19 525 165 21 31 91 21 36 112 19 75 83 179 22 25 55 18 19 19 20 19 19 157 57 18 19 19 19 19
type 1 "BuildError" <type 6>
type 2 "Builder" <type 7>
 func (b <esc:0x9> <type 9>) AddASN1Int64 (v <type -4>)
 func (b <esc:0x9> <type 9>) AddASN1Int64WithTag (v <type -4>, tag <type 11>)
 func (b <esc:0x9> <type 9>) AddASN1Enum (v <type -4>)
 func (b <esc:0x9> <type 9>) .internal/x/crypto/cryptobyte.addASN1Signed (tag <type 11>, v <type -4>)
 func (b <esc:0x9> <type 9>) AddASN1Uint64 (v <type -8>)
 func (b <esc:0x9> <type 9>) AddASN1BigInt (n <esc:0x1> <type 12>)
 func (b <esc:0x9> <type 9>) AddASN1OctetString (bytes <esc:0x1> <type 8>)
 func (b <esc:0x9> <type 9>) AddASN1GeneralizedTime (t <type 39>)
 func (b <esc:0x9> <type 9>) AddASN1BitString (data <esc:0x1> <type 8>)
 func (b <esc:0x9> <type 9>) .internal/x/crypto/cryptobyte.addBase128Int (n <type -4>)
 func (b <esc:0x9> <type 9>) AddASN1ObjectIdentifier (oid <type 55>)
 func (b <esc:0x9> <type 9>) AddASN1Boolean (v <type -15>)
 func (b <esc:0x9> <type 9>) AddASN1NULL ()
 func (b <esc:0x9> <type 9>) MarshalASN1 (v <type 56>)
 func (b <esc:0x9> <type 9>) AddASN1 (tag <type 11>, f <esc:0x1> <type 3>)
 func (b <esc:0x122> <type 9>) Bytes () (? <type 8>, ? <type -19>)
 func (b <esc:0x2a> <type 9>) BytesOrPanic () <type 8>
 func (b <esc:0x9> <type 9>) AddUint8 (v <type -5>)
 func (b <esc:0x9> <type 9>) AddUint16 (v <type -6>)
 func (b <esc:0x9> <type 9>) AddUint24 (v <type -7>)
 func (b <esc:0x9> <type 9>) AddUint32 (v <type -7>)
 func (b <esc:0x9> <type 9>) AddBytes (v <esc:0x1> <type 8>)
 func (b <esc:0x9> <type 9>) AddUint8LengthPrefixed (f <esc:0x1> <type 3>)
 func (b <esc:0x9> <type 9>) AddUint16LengthPrefixed (f <esc:0x1> <type 3>)
 func (b <esc:0x9> <type 9>) AddUint24LengthPrefixed (f <esc:0x1> <type 3>)
 func (b <esc:0x9> <type 9>) AddUint32LengthPrefixed (f <esc:0x1> <type 3>)
 func (b <esc:0x1> <type 9>) .internal/x/crypto/cryptobyte.callContinuation (f <esc:0x1> <type 3>, arg <type 9>)
 func (b <esc:0x9> <type 9>) .internal/x/crypto/cryptobyte.addLengthPrefixed (lenLen <type -11>, isASN1 <type -15>, f <esc:0x1> <type 3>)
 func (b <esc:0x9> <type 9>) .internal/x/crypto/cryptobyte.flushChild ()
 func (b <esc:0x9> <type 9>) .internal/x/crypto/cryptobyte.add (bytes <esc:0x1> ...<type -20>)
 func (b <type 9>) AddValue (v <type 4>)
type 3 "BuilderContinuation" <type 57>
type 4 "MarshalingValue" <type 58>
type 5 "String" <type 8>
 func (s <esc:0x9> <type 59>) ReadASN1Boolean (out <esc:0x1> <type 10>) <type -15>
 func (s <esc:0x9> <type 59>) ReadASN1Integer (out <type 56>) <type -15>
 func (s <esc:0x9> <type 59>) .internal/x/crypto/cryptobyte.readASN1BigInt (out <esc:0x9> <type 12>) <type -15>
 func (s <esc:0x9> <type 59>) .internal/x/crypto/cryptobyte.readASN1Int64 (out <esc:0x1> <type 60>) <type -15>
 func (s <esc:0x9> <type 59>) .internal/x/crypto/cryptobyte.readASN1Uint64 (out <esc:0x1> <type 61>) <type -15>
 func (s <esc:0x9> <type 59>) ReadASN1Int64WithTag (out <esc:0x1> <type 60>, tag <type 11>) <type -15>
 func (s <esc:0x9> <type 59>) ReadASN1Enum (out <esc:0x1> <type 62>) <type -15>
 func (s <esc:0x1> <type 59>) .internal/x/crypto/cryptobyte.readBase128Int (out <esc:0x1> <type 62>) <type -15>
 func (s <esc:0x9> <type 59>) ReadASN1ObjectIdentifier (out <esc:0x1> <type 63>) <type -15>
 func (s <esc:0x9> <type 59>) ReadASN1GeneralizedTime (out <esc:0x1> <type 41>) <type -15>
 func (s <esc:0x9> <type 59>) ReadASN1BitString (out <esc:0x1> <type 64>) <type -15>
 func (s <esc:0x9> <type 59>) ReadASN1BitStringAsBytes (out <esc:0x1> <type 67>) <type -15>
 func (s <esc:0x9> <type 59>) ReadASN1Bytes (out <esc:0x1> <type 67>, tag <type 11>) <type -15>
 func (s <esc:0x9> <type 59>) ReadASN1 (out <esc:0x1> <type 59>, tag <type 11>) <type -15>
 func (s <esc:0x9> <type 59>) ReadASN1Element (out <esc:0x1> <type 59>, tag <type 11>) <type -15>
 func (s <esc:0x9> <type 59>) ReadAnyASN1 (out <esc:0x1> <type 59>, outTag <esc:0x1> <type 68>) <type -15>
 func (s <esc:0x9> <type 59>) ReadAnyASN1Element (out <esc:0x1> <type 59>, outTag <esc:0x1> <type 68>) <type -15>
 func (s <esc:0x1> <type 5>) PeekASN1Tag (tag <type 11>) <type -15>
 func (s <esc:0x9> <type 59>) SkipASN1 (tag <type 11>) <type -15>
 func (s <esc:0x9> <type 59>) ReadOptionalASN1 (out <esc:0x1> <type 59>, outPresent <esc:0x1> <type 10>, tag <type 11>) <type -15>
 func (s <esc:0x9> <type 59>) SkipOptionalASN1 (tag <type 11>) <type -15>
 func (s <esc:0x9> <type 59>) ReadOptionalASN1Integer (out <type 56>, tag <type 11>, defaultValue <type 56>) <type -15>
 func (s <esc:0x9> <type 59>) ReadOptionalASN1OctetString (out <esc:0x1> <type 67>, outPresent <esc:0x1> <type 10>, tag <type 11>) <type -15>
 func (s <esc:0x9> <type 59>) ReadOptionalASN1Boolean (out <esc:0x1> <type 10>, defaultValue <type -15>) <type -15>
 func (s <esc:0x9> <type 59>) .internal/x/crypto/cryptobyte.readASN1 (out <esc:0x1> <type 59>, outTag <esc:0x1> <type 68>, skipHeader <type -15>) <type -15>
 func (s <esc:0x22> <type 59>) .internal/x/crypto/cryptobyte.read (n <type -11>) <type 8>
 func (s <esc:0x1> <type 59>) Skip (n <type -11>) <type -15>
 func (s <esc:0x1> <type 59>) ReadUint8 (out <esc:0x1> <type 69>) <type -15>
 func (s <esc:0x1> <type 59>) ReadUint16 (out <esc:0x1> <type 70>) <type -15>
 func (s <esc:0x1> <type 59>) ReadUint24 (out <esc:0x1> <type 71>) <type -15>
 func (s <esc:0x1> <type 59>) ReadUint32 (out <esc:0x1> <type 71>) <type -15>
 func (s <esc:0x1> <type 59>) .internal/x/crypto/cryptobyte.readUnsigned (out <esc:0x1> <type 71>, length <type -11>) <type -15>
 func (s <esc:0x9> <type 59>) .internal/x/crypto/cryptobyte.readLengthPrefixed (lenLen <type -11>, outChild <esc:0x1> <type 59>) <type -15>
 func (s <esc:0x9> <type 59>) ReadUint8LengthPrefixed (out <esc:0x1> <type 59>) <type -15>
 func (s <esc:0x9> <type 59>) ReadUint16LengthPrefixed (out <esc:0x1> <type 59>) <type -15>
 func (s <esc:0x9> <type 59>) ReadUint24LengthPrefixed (out <esc:0x1> <type 59>) <type -15>
 func (s <esc:0x9> <type 59>) ReadBytes (out <esc:0x1> <type 67>, n <type -11>) <type -15>
 func (s <esc:0x1> <type 59>) CopyBytes (out <esc:0x1> <type 8>) <type -15>
 func (s <esc:0x1> <type 5>) Empty () <type -15>
type 6 struct { Err <type -19>; }
type 7 struct { .internal/x/crypto/cryptobyte.err <type -19>; .internal/x/crypto/cryptobyte.result <type 8>; .internal/x/crypto/cryptobyte.fixedSize <type -15>; .internal/x/crypto/cryptobyte.child <type 9>; .internal/x/crypto/cryptobyte.offset <type -11>; .internal/x/crypto/cryptobyte.pendingLenLen <type -11>; .internal/x/crypto/cryptobyte.pendingIsASN1 <type -15>; .internal/x/crypto/cryptobyte.inContinuation <type 10>; }
type 8 [] <type -20>
type 9 *<type 2>
type 10 *<type -15>
type 11 "internal/x/crypto/cryptobyte/asn1.Tag" <type -5>
 func (t <type 11>) ContextSpecific () <type 11>
 func (t <type 11>) Constructed () <type 11>
type 12 *<type 13>
type 13 "math/big.Int" <type 34>
 func (x <esc:0x9> <type 12>) ProbablyPrime (n <type -11>) <type -15>
 func (x <esc:0x1> <type 12>) MarshalJSON () (? <type 8>, ? <type -19>)
 func (z <esc:0x1a> <type 12>) Exp (x <esc:0x9> <type 12>, y <esc:0x1> <type 12>, m <esc:0x1> <type 12>) <type 12>
 func (x <esc:0x1> <type 12>) Cmp (y <esc:0x1> <type 12>) (r <type -11>)
 func (z <esc:0x1a> <type 12>) Quo (x <esc:0x1> <type 12>, y <esc:0x1> <type 12>) <type 12>
 func (x <esc:0x1> <type 12>) IsInt64 () <type -15>
 func (z <esc:0x1a> <type 12>) ModSqrt (x <esc:0x9> <type 12>, p <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) Rsh (x <esc:0x1> <type 12>, n <type -12>) <type 12>
 func (x <esc:0x1> <type 12>) Int64 () <type -4>
 func (z <esc:0x1a> <type 12>) SetBytes (buf <esc:0x1> <type 8>) <type 12>
 func (z <esc:0x1a> <type 12>) .math/big.modSqrtTonelliShanks (x <esc:0x9> <type 12>, p <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) Mod (x <esc:0x1> <type 12>, y <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) SetInt64 (x <type -4>) <type 12>
 func (z <esc:0x1a> <type 12>) SetUint64 (x <type -8>) <type 12>
 func (z <esc:0x1a> <type 12>) Set (x <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) ModInverse (g <esc:0x1> <type 12>, n <esc:0x1> <type 12>) <type 12>
 func (x <esc:0x22> <type 12>) Bits () <type 14>
 func (z <esc:0x1a> <type 12>) Add (x <esc:0x1> <type 12>, y <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) .math/big.modSqrt3Mod4Prime (x <esc:0x9> <type 12>, p <esc:0x1> <type 12>) <type 12>
 func (x <esc:0x1> <type 12>) Format (s <type 16>, ch <type -21>)
 func (z <esc:0x1a> <type 12>) .math/big.scan (r <type 18>, base <type -11>) (? <type 12>, ? <type -11>, ? <type -19>)
 func (z <esc:0x1a> <type 12>) SetString (s <type -16>, base <type -11>) (? <type 12>, ? <type -15>)
 func (z <esc:0x1a> <type 12>) Mul (x <esc:0x1> <type 12>, y <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x12> <type 12>) SetBits (abs <type 14>) <type 12>
 func (x <esc:0x1> <type 12>) Sign () <type -11>
 func (z <esc:0x1a> <type 12>) MulRange (a <type -4>, b <type -4>) <type 12>
 func (x <esc:0x1> <type 12>) MarshalText () (text <type 8>, err <type -19>)
 func (z <esc:0x1a> <type 12>) Abs (x <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) Neg (x <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) .math/big.setFromScanner (r <type 18>, base <type -11>) (? <type 12>, ? <type -15>)
 func (z <esc:0x1a> <type 12>) And (x <esc:0x1> <type 12>, y <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) Sub (x <esc:0x1> <type 12>, y <esc:0x1> <type 12>) <type 12>
 func (x <esc:0x1> <type 12>) CmpAbs (y <esc:0x1> <type 12>) <type -11>
 func (z <esc:0x1a> <type 12>) Div (x <esc:0x1> <type 12>, y <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) Rem (x <esc:0x1> <type 12>, y <esc:0x1> <type 12>) <type 12>
 func (x <esc:0x1> <type 12>) IsUint64 () <type -15>
 func (z <esc:0x1a> <type 12>) DivMod (x <esc:0x1> <type 12>, y <esc:0x1> <type 12>, m <esc:0x8a> <type 12>) (? <type 12>, ? <type 12>)
 func (z <esc:0x1a> <type 12>) Binomial (n <type -4>, k <type -4>) <type 12>
 func (x <esc:0x1> <type 12>) Uint64 () <type -8>
 func (x <esc:0x1> <type 12>) BitLen () <type -11>
 func (z <esc:0x1a> <type 12>) GCD (x <esc:0x9> <type 12>, y <esc:0x9> <type 12>, a <esc:0x1> <type 12>, b <esc:0x1> <type 12>) <type 12>
 func (x <esc:0x1> <type 12>) Bit (i <type -11>) <type -12>
 func (z <esc:0x1a> <type 12>) Or (x <esc:0x1> <type 12>, y <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x12> <type 12>) .math/big.lehmerGCD (x <esc:0x1> <type 12>, y <esc:0x9> <type 12>, a <esc:0x1> <type 12>, b <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) Rand (rnd <esc:0x9> <type 22>, n <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) Xor (x <esc:0x1> <type 12>, y <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) Sqrt (x <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) .math/big.modSqrt5Mod8Prime (x <esc:0x1> <type 12>, p <esc:0x1> <type 12>) <type 12>
 func (z <esc:0x1a> <type 12>) Lsh (x <esc:0x1> <type 12>, n <type -12>) <type 12>
 func (z <esc:0x1a> <type 12>) SetBit (x <esc:0x1> <type 12>, i <type -11>, b <type -12>) <type 12>
 func (z <esc:0x1a> <type 12>) AndNot (x <esc:0x1> <type 12>, y <esc:0x1> <type 12>) <type 12>
 func (x <esc:0x1> <type 12>) Bytes () <type 8>
 func (z <esc:0x1a> <type 12>) Not (x <esc:0x1> <type 12>) <type 12>
 func (x <esc:0x1> <type 12>) GobEncode () (? <type 8>, ? <type -19>)
 func (x <esc:0x1> <type 12>) Append (buf <esc:0x12> <type 8>, base <type -11>) <type 8>
 func (x <esc:0x1> <type 12>) String () <type -16>
 func (x <esc:0x1> <type 12>) Text (base <type -11>) <type -16>
 func (z <esc:0x9> <type 12>) Scan (s <type 31>, ch <type -21>) <type -19>
 func (z <esc:0x9> <type 12>) UnmarshalJSON (text <type 8>) <type -19>
 func (z <esc:0x1a> <type 12>) QuoRem (x <esc:0x1> <type 12>, y <esc:0x1> <type 12>, r <esc:0x8a> <type 12>) (? <type 12>, ? <type 12>)
 func (z <esc:0x9> <type 12>) GobDecode (buf <esc:0x1> <type 8>) <type -19>
 func (z <esc:0x9> <type 12>) UnmarshalText (text <type 8>) <type -19>
type 14 [] <type 15>
type 15 "math/big.Word" <type -12>
type 16 "fmt.State" <type 17>
type 17 interface { Flag (c <type -11>) <type -15>; Precision () (prec <type -11>, ok <type -15>); Width () (wid <type -11>, ok <type -15>); Write (b <type 8>) (n <type -11>, err <type -19>); }
type 18 "io.ByteScanner" <type 19>
type 19 interface { ? <type 20>; UnreadByte () <type -19>; }
type 20 "io.ByteReader" <type 21>
type 21 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 22 *<type 23>
type 23 "math/rand.Rand" <type 26>
 func (r <esc:0x9> <type 22>) Intn (n <type -11>) <type -11>
 func (r <esc:0x9> <type 22>) Int31n (n <type -3>) <type -3>
 func (r <type 22>) Read (p <esc:0x1> <type 8>) (n <type -11>, err <type -19>)
 func (r <esc:0x9> <type 22>) Int31 () <type -3>
 func (r <esc:0x9> <type 22>) Shuffle (n <type -11>, swap <esc:0x1> <type 24>)
 func (r <esc:0x9> <type 22>) Uint32 () <type -7>
 func (r <esc:0x9> <type 22>) Float32 () <type -9>
 func (r <esc:0x9> <type 22>) .math/rand.int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 22>) Uint64 () <type -8>
 func (r <esc:0x9> <type 22>) Perm (n <type -11>) <type 25>
 func (r <esc:0x9> <type 22>) ExpFloat64 () <type -10>
 func (r <esc:0x9> <type 22>) NormFloat64 () <type -10>
 func (r <esc:0x9> <type 22>) Seed (seed <type -4>)
 func (r <esc:0x9> <type 22>) Int63 () <type -4>
 func (r <esc:0x9> <type 22>) Float64 () <type -10>
 func (r <esc:0x9> <type 22>) Int63n (n <type -4>) <type -4>
 func (r <esc:0x9> <type 22>) Int () <type -11>
type 24 (i <type -11>, j <type -11>)
type 25 [] <type -11>
type 26 struct { .math/rand.src <type 27>; .math/rand.s64 <type 29>; .math/rand.readVal <type -4>; .math/rand.readPos <type -1>; }
type 27 "math/rand.Source" <type 28>
type 28 interface { Int63 () <type -4>; Seed (seed <type -4>); }
type 29 "math/rand.Source64" <type 30>
type 30 interface { ? <type 27>; Uint64 () <type -8>; }
type 31 "fmt.ScanState" <type 32>
type 32 interface { Read (buf <type 8>) (n <type -11>, err <type -19>); ReadRune () (r <type -21>, size <type -11>, err <type -19>); SkipSpace (); Token (skipSpace <type -15>, f <type 33>) (token <type 8>, err <type -19>); UnreadRune () <type -19>; Width () (wid <type -11>, ok <type -15>); }
type 33 (? <type -21>) <type -15>
type 34 struct { .math/big.neg <type -15>; .math/big.abs <type 35>; }
type 35 ".math/big.nat" <type 14>
 func (n <esc:0x1> <type 35>) .math/big.probablyPrimeMillerRabin (reps <type -11>, force2 <type -15>) <type -15>
 func (z <esc:0x12> <type 35>) .math/big.scan (r <type 18>, base <type -11>, fracOk <type -15>) (res <type 35>, b <type -11>, count <type -11>, err <type -19>)
 func (z <type 35>) .math/big.sqrt (x <esc:0x1> <type 35>) <type 35>
 func (z <esc:0x1> <type 35>) .math/big.bytes (buf <esc:0x1> <type 8>) (i <type -11>)
 func (z <esc:0x12> <type 35>) .math/big.expNNMontgomery (x <esc:0x1> <type 35>, y <esc:0x1> <type 35>, m <esc:0x1> <type 35>) <type 35>
 func (z <type 35>) .math/big.expNNWindowed (x <type 35>, y <esc:0x1> <type 35>, m <esc:0x1> <type 35>) <type 35>
 func (z <type 35>) .math/big.expNN (x <type 35>, y <esc:0x1> <type 35>, m <esc:0x1> <type 35>) <type 35>
 func (z <type 35>) .math/big.expWW (x <type 15>, y <type 15>) <type 35>
 func (z <esc:0x12> <type 35>) .math/big.montgomery (x <esc:0x1> <type 35>, y <esc:0x1> <type 35>, m <esc:0x1> <type 35>, k <type 15>, n <type -11>) <type 35>
 func (z <esc:0x12> <type 35>) .math/big.shr (x <esc:0x1> <type 35>, s <type -12>) <type 35>
 func (z <esc:0x12> <type 35>) .math/big.norm () <type 35>
 func (q <esc:0x1> <type 35>) .math/big.convertWords (s <esc:0x1> <type 8>, b <type 15>, ndigits <type -11>, bb <type 15>, table <esc:0x1> <type 36>)
 func (z <type 35>) .math/big.add (x <esc:0x1> <type 35>, y <esc:0x1> <type 35>) <type 35>
 func (z <esc:0x12> <type 35>) .math/big.setBytes (buf <esc:0x1> <type 8>) <type 35>
 func (z <esc:0x12> <type 35>) .math/big.random (rand <esc:0x9> <type 22>, limit <esc:0x1> <type 35>, n <type -11>) <type 35>
 func (z <esc:0x12> <type 35>) .math/big.set (x <esc:0x1> <type 35>) <type 35>
 func (x <esc:0x1> <type 35>) .math/big.utoa (base <type -11>) <type 8>
 func (z <esc:0x12> <type 35>) .math/big.setBit (x <esc:0x1> <type 35>, i <type -12>, b <type -12>) <type 35>
 func (z <type 35>) .math/big.mulRange (a <type -8>, b <type -8>) <type 35>
 func (z <esc:0x12> <type 35>) .math/big.make (n <type -11>) <type 35>
 func (n <type 35>) .math/big.probablyPrimeLucas () <type -15>
 func (z <esc:0x12> <type 35>) .math/big.setWord (x <type 15>) <type 35>
 func (z <esc:0x12> <type 35>) .math/big.divW (x <esc:0x1> <type 35>, y <type 15>) (q <type 35>, r <type 15>)
 func (x <esc:0x1> <type 35>) .math/big.itoa (neg <type -15>, base <type -11>) <type 8>
 func (z <esc:0x1> <type 35>) .math/big.clear ()
 func (z <esc:0x12> <type 35>) .math/big.div (z2 <esc:0x82> <type 35>, u <esc:0x1> <type 35>, v <esc:0x1> <type 35>) (q <type 35>, r <type 35>)
 func (z <esc:0x12> <type 35>) .math/big.setUint64 (x <type -8>) <type 35>
 func (z <esc:0x12> <type 35>) .math/big.and (x <esc:0x1> <type 35>, y <esc:0x1> <type 35>) <type 35>
 func (x <esc:0x1> <type 35>) .math/big.bitLen () <type -11>
 func (z <esc:0x12> <type 35>) .math/big.divLarge (u <esc:0x82> <type 35>, uIn <esc:0x1> <type 35>, vIn <esc:0x1> <type 35>) (q <type 35>, r <type 35>)
 func (z <esc:0x12> <type 35>) .math/big.sub (x <esc:0x1> <type 35>, y <esc:0x1> <type 35>) <type 35>
 func (x <esc:0x1> <type 35>) .math/big.cmp (y <esc:0x1> <type 35>) (r <type -11>)
 func (z <esc:0x12> <type 35>) .math/big.shl (x <esc:0x1> <type 35>, s <type -12>) <type 35>
 func (z <type 35>) .math/big.sqr (x <esc:0x1> <type 35>) <type 35>
 func (x <esc:0x1> <type 35>) .math/big.trailingZeroBits () <type -12>
 func (x <esc:0x1> <type 35>) .math/big.bit (i <type -12>) <type -12>
 func (x <esc:0x1> <type 35>) .math/big.sticky (i <type -12>) <type -12>
 func (z <type 35>) .math/big.mul (x <esc:0x1> <type 35>, y <esc:0x1> <type 35>) <type 35>
 func (z <esc:0x12> <type 35>) .math/big.mulAddWW (x <esc:0x1> <type 35>, y <type 15>, r <type 15>) <type 35>
 func (z <esc:0x12> <type 35>) .math/big.andNot (x <esc:0x1> <type 35>, y <esc:0x1> <type 35>) <type 35>
 func (z <esc:0x12> <type 35>) .math/big.or (x <esc:0x1> <type 35>, y <esc:0x1> <type 35>) <type 35>
 func (z <esc:0x12> <type 35>) .math/big.xor (x <esc:0x1> <type 35>, y <esc:0x1> <type 35>) <type 35>
 func (x <esc:0x1> <type 35>) .math/big.modW (d <type 15>) (r <type 15>)
type 36 [] <type 37>
type 37 ".math/big.divisor" <type 38>
type 38 struct { .math/big.bbb <type 35>; .math/big.nbits <type -11>; .math/big.ndigits <type -11>; }
type 39 "time.Time" <type 54>
 func (t <esc:0x12> <type 39>) Round (d <type 40>) <type 39>
 func (t <esc:0x12> <type 39>) Truncate (d <type 40>) <type 39>
 func (t <esc:0x1> <type 41>) UnmarshalText (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 41>) UnmarshalBinary (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x12> <type 39>) Local () <type 39>
 func (t <esc:0x1> <type 39>) MarshalJSON () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 39>) .time.date (full <type -15>) (year <type -11>, month <type 42>, day <type -11>, yday <type -11>)
 func (t <type 39>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 39>
 func (t <esc:0x1> <type 41>) .time.mono () <type -4>
 func (t <esc:0x1> <type 39>) MarshalText () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 41>) .time.stripMono ()
 func (t <esc:0x32> <type 39>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 41>) .time.setLoc (loc <type 43>)
 func (t <esc:0x1> <type 41>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 41>) GobDecode (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 39>) UnixNano () <type -4>
 func (t <esc:0x1> <type 39>) After (u <esc:0x1> <type 39>) <type -15>
 func (t <esc:0x1> <type 39>) MarshalBinary () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 39>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 41>) .time.sec () <type -4>
 func (t <esc:0x1> <type 39>) Before (u <esc:0x1> <type 39>) <type -15>
 func (t <esc:0x1> <type 41>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 41>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 39>) Minute () <type -11>
 func (t <esc:0x1> <type 39>) AppendFormat (b <esc:0x12> <type 8>, layout <esc:0x1> <type -16>) <type 8>
 func (t <esc:0x1> <type 39>) Day () <type -11>
 func (t <esc:0x12> <type 39>) Add (d <type 40>) <type 39>
 func (t <esc:0x1> <type 39>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 39>) String () <type -16>
 func (t <esc:0x1> <type 39>) Equal (u <esc:0x1> <type 39>) <type -15>
 func (t <esc:0x1> <type 39>) Sub (u <esc:0x1> <type 39>) <type 40>
 func (t <esc:0x32> <type 39>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x12> <type 39>) In (loc <type 43>) <type 39>
 func (t <esc:0x12> <type 39>) UTC () <type 39>
 func (t <esc:0x1> <type 39>) Nanosecond () <type -11>
 func (t <esc:0x1> <type 39>) IsZero () <type -15>
 func (t <esc:0x1> <type 39>) .time.abs () <type -8>
 func (t <esc:0x1> <type 39>) Hour () <type -11>
 func (t <esc:0x1> <type 39>) Date () (year <type -11>, month <type 42>, day <type -11>)
 func (t <esc:0x1> <type 39>) GobEncode () (? <type 8>, ? <type -19>)
 func (t <esc:0x12> <type 39>) Location () <type 43>
 func (t <esc:0x1> <type 39>) Month () <type 42>
 func (t <esc:0x1> <type 39>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 41>) UnmarshalJSON (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 41>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 39>) Year () <type -11>
 func (t <esc:0x1> <type 39>) Second () <type -11>
 func (t <esc:0x1> <type 39>) Weekday () <type 53>
 func (t <esc:0x1> <type 39>) Unix () <type -4>
 func (t <esc:0x1> <type 39>) YearDay () <type -11>
type 40 "time.Duration" <type -4>
 func (d <type 40>) Round (m <type 40>) <type 40>
 func (d <type 40>) Truncate (m <type 40>) <type 40>
 func (d <type 40>) Hours () <type -10>
 func (d <type 40>) Minutes () <type -10>
 func (d <type 40>) Seconds () <type -10>
 func (d <type 40>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 40>) String () <type -16>
type 41 *<type 39>
type 42 "time.Month" <type -11>
 func (m <type 42>) String () <type -16>
type 43 *<type 44>
type 44 "time.Location" <type 45>
 func (l <esc:0x1> <type 43>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 43>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 43>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 43>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 43>) String () <type -16>
 func (l <esc:0x12> <type 43>) .time.get () <type 43>
type 45 struct { .time.name <type -16>; .time.zone <type 46>; .time.tx <type 49>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 52>; }
type 46 [] <type 47>
type 47 ".time.zone" <type 48>
type 48 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 49 [] <type 50>
type 50 ".time.zoneTrans" <type 51>
type 51 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 52 *<type 47>
type 53 "time.Weekday" <type -11>
 func (d <type 53>) String () <type -16>
type 54 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 43>; }
type 55 "encoding/asn1.ObjectIdentifier" <type 25>
 func (oi <esc:0x1> <type 55>) String () <type -16>
 func (oi <esc:0x1> <type 55>) Equal (other <esc:0x1> <type 55>) <type -15>
type 56 interface { }
type 57 (child <type 9>)
type 58 interface { Marshal (b <type 9>) <type -19>; }
type 59 *<type 5>
type 60 *<type -4>
type 61 *<type -8>
type 62 *<type -11>
type 63 *<type 55>
type 64 *<type 65>
type 65 "encoding/asn1.BitString" <type 66>
 func (b <esc:0x12> <type 65>) RightAlign () <type 8>
 func (b <esc:0x1> <type 65>) At (i <type -11>) <type -11>
type 66 struct { Bytes <type 8>; BitLength <type -11>; }
type 67 *<type 8>
type 68 *<type 11>
type 69 *<type -5>
type 70 *<type -6>
type 71 *<type -7>
func NewBuilder (buffer <type 8>) <type 9>
func NewFixedBuilder (buffer <type 8>) <type 9>
checksum 2381672AC364DC62BAB8A0D13E2084D1B40DCD53
v3;
package asn1
pkgpath internal/x/crypto/cryptobyte/asn1
types 2 2 113
type 1 "Tag" <type -5>
 func (t <type 1>) Constructed () <type 1>
 func (t <type 1>) ContextSpecific () <type 1>
const BIT_STRING <type 1> = 3 
const BOOLEAN <type 1> = 1 
const ENUM <type 1> = 10 
const GeneralString <type 1> = 27 
const GeneralizedTime <type 1> = 24 
const IA5String <type 1> = 22 
const INTEGER <type 1> = 2 
const NULL <type 1> = 5 
const OBJECT_IDENTIFIER <type 1> = 6 
const OCTET_STRING <type 1> = 4 
const PrintableString <type 1> = 19 
const SEQUENCE <type 1> = 48 
const SET <type 1> = 49 
const T61String <type 1> = 20 
const UTCTime <type 1> = 23 
const UTF8String <type 1> = 12 
checksum CE75489EE13320FD7223CBF14E8439B5B38BA2C2
v3;
package curve25519
pkgpath internal/x/crypto/curve25519
import binary encoding/binary "encoding/binary"
init binary encoding..z2fbinary..import cpu internal..z2fcpu..import io io..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 2 1 2 4 2 5 2 7 3 1 3 4 3 5 3 6 3 7 3 8 4 1 4 5 6 1 6 4 6 5 7 1 7 4 7 5
types 3 1 17 24
type 1 *<type 2>
type 2 [32 ] <type -20>
func ScalarBaseMult (dst <esc:0x1> <type 1>, in <esc:0x1> <type 1>)
func ScalarMult (dst <esc:0x1> <type 1>, in <esc:0x1> <type 1>, base <esc:0x1> <type 1>)
checksum 9422E303BA05432F9F055BDFF813BDBB25C83F97
v3;
package hkdf
pkgpath internal/x/crypto/hkdf
import hmac crypto/hmac "crypto/hmac"
import errors errors "errors"
import hash hash "hash"
import io io "io"
init cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import
init_graph 1 0 1 2 1 3 1 4 2 0 2 3 4 0 4 2 4 3
types 9 1 19 28 115 28 72 21 28 71
type 1 () <type 2>
type 2 "hash.Hash" <type 3>
type 3 interface { ? <type 4>; BlockSize () <type -11>; Reset (); Size () <type -11>; Sum (b <type 6>) <type 6>; }
type 4 "io.Writer" <type 5>
type 5 interface { Write (p <type 6>) (n <type -11>, err <type -19>); }
type 6 [] <type -20>
type 7 "io.Reader" <type 8>
type 8 interface { Read (p <type 6>) (n <type -11>, err <type -19>); }
func Expand (hash <esc:0x9> <type 1>, pseudorandomKey <type 6>, info <type 6>) <type 7>
func Extract (hash <esc:0x9> <type 1>, secret <type 6>, salt <type 6>) <type 6>
func New (hash <esc:0x9> <type 1>, secret <type 6>, salt <type 6>, info <type 6>) <type 7>
checksum 1F38399785BE7B317FA35EEAC5F6CDAE5EAB2977
v3;
package chacha20
pkgpath internal/x/crypto/internal/chacha20
import cipher crypto/cipher "crypto/cipher"
import binary encoding/binary "encoding/binary"
import runtime runtime "runtime"
init chacha20 internal..z2fx..z2fcrypto..z2finternal..z2fchacha20..import cipher crypto..z2fcipher..import binary encoding..z2fbinary..import cpu internal..z2fcpu..import io io..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 2 3 2 4 2 5 2 6 2 7 2 8 2 9 2 10 4 3 4 6 4 7 4 9 5 3 5 6 5 7 5 8 5 9 5 10 6 3 6 7 8 3 8 6 8 7 9 3 9 6 9 7
types 12 2 287 282 22 22 24 17 21 17 24 19 25
type 1 "Cipher" <type 2>
 func (s <esc:0x1> <type 6>) XORKeyStream (dst <esc:0x1> <type 7>, src <esc:0x1> <type 7>)
 func (s <esc:0x1> <type 6>) Advance ()
 func (? <esc:0x1> <type 6>) .internal/x/crypto/internal/chacha20.xorKeyStreamAsm (dst <esc:0x1> <type 7>, src <esc:0x1> <type 7>)
type 2 struct { .internal/x/crypto/internal/chacha20.key <type 3>; .internal/x/crypto/internal/chacha20.counter <type -7>; .internal/x/crypto/internal/chacha20.nonce <type 4>; .internal/x/crypto/internal/chacha20.buf <type 5>; .internal/x/crypto/internal/chacha20.len <type -11>; }
type 3 [8 ] <type -7>
type 4 [3 ] <type -7>
type 5 [64 ] <type -20>
type 6 *<type 1>
type 7 [] <type -20>
type 8 *<type 9>
type 9 [16 ] <type -20>
type 10 *<type 11>
type 11 [32 ] <type -20>
func New (key <type 3>, nonce <type 4>) <type 6>
func XORKeyStream (out <esc:0x1> <type 7>, in <esc:0x1> <type 7>, counter <esc:0x1> <type 8>, key <esc:0x1> <type 10>)
checksum BF8AF3C01DA8099EB369E7B3A714C3BD317A5060
v3;
package poly1305
pkgpath internal/x/crypto/poly1305
import subtle crypto/subtle "crypto/subtle"
import binary encoding/binary "encoding/binary"
init binary encoding..z2fbinary..import cpu internal..z2fcpu..import io io..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 2 1 2 4 2 5 2 7 3 1 3 4 3 5 3 6 3 7 3 8 4 1 4 5 6 1 6 4 6 5 7 1 7 4 7 5
types 6 1 17 24 21 17 24
type 1 *<type 2>
type 2 [16 ] <type -20>
type 3 [] <type -20>
type 4 *<type 5>
type 5 [32 ] <type -20>
func Sum (out <esc:0x1> <type 1>, msg <esc:0x1> <type 3>, key <esc:0x1> <type 4>)
const TagSize = 16 
func Verify (mac <esc:0x1> <type 1>, m <esc:0x1> <type 3>, key <esc:0x1> <type 4>) <type -15>
checksum 9D8B857520096B67BE44E4CB8B862481ECA52F80
v3;
package dnsmessage
pkgpath internal/x/net/dns/dnsmessage
import errors errors "errors"
init dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import
types 70 23 296 293 1463 297 25 126 294 240 294 564 27 296 2476 210 26 189 33 532 296 296 296 25 35 25 18 22 36 32 24 18 267 59 473 19 321 18 36 18 197 18 49 18 117 21 21 18 33 18 53 26 19 34 19 370 19 67 19 53 19 207 100 19 139 19 91 19 34 22 19
type 1 "AAAAResource" <type 23>
 func (r <esc:0x1> <type 25>) .internal/x/net/dns/dnsmessage.realType () <type 22>
 func (r <esc:0x1> <type 25>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 26>, compression <esc:0x1> <type 27>, compressionOff <type -11>) (? <type 26>, ? <type -19>)
type 2 "AResource" <type 28>
 func (r <esc:0x1> <type 30>) .internal/x/net/dns/dnsmessage.realType () <type 22>
 func (r <esc:0x1> <type 30>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 26>, compression <esc:0x1> <type 27>, compressionOff <type -11>) (? <type 26>, ? <type -19>)
type 3 "Builder" <type 31>
 func (b <esc:0x1> <type 36>) EnableCompression ()
 func (b <esc:0x1> <type 36>) .internal/x/net/dns/dnsmessage.startCheck (s <type 32>) <type -19>
 func (b <esc:0x1> <type 36>) StartQuestions () <type -19>
 func (b <esc:0x1> <type 36>) StartAnswers () <type -19>
 func (b <esc:0x1> <type 36>) StartAuthorities () <type -19>
 func (b <esc:0x1> <type 36>) StartAdditionals () <type -19>
 func (b <esc:0x1> <type 36>) .internal/x/net/dns/dnsmessage.incrementSectionCount () <type -19>
 func (b <esc:0x9> <type 36>) Question (q <type 14>) <type -19>
 func (b <esc:0x1> <type 36>) .internal/x/net/dns/dnsmessage.checkResourceSection () <type -19>
 func (b <esc:0x9> <type 36>) CNAMEResource (h <type 18>, r <type 4>) <type -19>
 func (b <esc:0x9> <type 36>) MXResource (h <type 18>, r <type 7>) <type -19>
 func (b <esc:0x9> <type 36>) NSResource (h <type 18>, r <type 9>) <type -19>
 func (b <esc:0x9> <type 36>) PTRResource (h <type 18>, r <type 12>) <type -19>
 func (b <esc:0x9> <type 36>) SOAResource (h <type 18>, r <type 19>) <type -19>
 func (b <esc:0x9> <type 36>) TXTResource (h <type 18>, r <esc:0x1> <type 21>) <type -19>
 func (b <esc:0x9> <type 36>) SRVResource (h <type 18>, r <type 20>) <type -19>
 func (b <esc:0x9> <type 36>) AResource (h <type 18>, r <type 2>) <type -19>
 func (b <esc:0x9> <type 36>) AAAAResource (h <type 18>, r <type 1>) <type -19>
 func (b <esc:0x22> <type 36>) Finish () (? <type 26>, ? <type -19>)
type 4 "CNAMEResource" <type 37>
 func (r <esc:0x1> <type 38>) .internal/x/net/dns/dnsmessage.realType () <type 22>
 func (r <esc:0x1> <type 38>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 26>, compression <esc:0x1> <type 27>, compressionOff <type -11>) (? <type 26>, ? <type -19>)
type 5 "Class" <type -6>
type 6 "Header" <type 39>
 func (m <esc:0x1> <type 40>) .internal/x/net/dns/dnsmessage.pack () (id <type -6>, bits <type -6>)
type 7 "MXResource" <type 41>
 func (r <esc:0x1> <type 42>) .internal/x/net/dns/dnsmessage.realType () <type 22>
 func (r <esc:0x1> <type 42>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 26>, compression <esc:0x1> <type 27>, compressionOff <type -11>) (? <type 26>, ? <type -19>)
type 8 "Message" <type 43>
 func (m <esc:0x1> <type 46>) Unpack (msg <type 26>) <type -19>
 func (m <esc:0x9> <type 46>) Pack () (? <type 26>, ? <type -19>)
 func (m <esc:0x9> <type 46>) AppendPack (b <type 26>) (? <type 26>, ? <type -19>)
type 9 "NSResource" <type 47>
 func (r <esc:0x1> <type 48>) .internal/x/net/dns/dnsmessage.realType () <type 22>
 func (r <esc:0x1> <type 48>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 26>, compression <esc:0x1> <type 27>, compressionOff <type -11>) (? <type 26>, ? <type -19>)
type 10 "Name" <type 49>
 func (n <type 10>) String () <type -16>
 func (n <esc:0x1> <type 51>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 26>, compression <esc:0x1> <type 27>, compressionOff <type -11>) (? <type 26>, ? <type -19>)
 func (n <esc:0x1> <type 51>) .internal/x/net/dns/dnsmessage.unpack (msg <esc:0x1> <type 26>, off <type -11>) (? <type -11>, ? <type -19>)
 func (n <esc:0x1> <type 51>) .internal/x/net/dns/dnsmessage.unpackCompressed (msg <esc:0x1> <type 26>, off <type -11>, allowCompression <type -15>) (? <type -11>, ? <type -19>)
type 11 "OpCode" <type -6>
type 12 "PTRResource" <type 52>
 func (r <esc:0x1> <type 53>) .internal/x/net/dns/dnsmessage.realType () <type 22>
 func (r <esc:0x1> <type 53>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 26>, compression <esc:0x1> <type 27>, compressionOff <type -11>) (? <type 26>, ? <type -19>)
type 13 "Parser" <type 54>
 func (p <esc:0x1> <type 55>) Start (msg <type 26>) (? <type 6>, ? <type -19>)
 func (p <esc:0x1> <type 55>) .internal/x/net/dns/dnsmessage.checkAdvance (sec <type 32>) <type -19>
 func (p <esc:0x1> <type 55>) .internal/x/net/dns/dnsmessage.resource (sec <type 32>) (? <type 16>, ? <type -19>)
 func (p <esc:0x1> <type 55>) .internal/x/net/dns/dnsmessage.resourceHeader (sec <type 32>) (? <type 18>, ? <type -19>)
 func (p <esc:0x1> <type 55>) .internal/x/net/dns/dnsmessage.skipResource (sec <type 32>) <type -19>
 func (p <esc:0x1> <type 55>) Question () (? <type 14>, ? <type -19>)
 func (p <esc:0x1> <type 55>) AllQuestions () (? <type 44>, ? <type -19>)
 func (p <esc:0x1> <type 55>) SkipQuestion () <type -19>
 func (p <esc:0x1> <type 55>) SkipAllQuestions () <type -19>
 func (p <esc:0x1> <type 55>) AnswerHeader () (? <type 18>, ? <type -19>)
 func (p <esc:0x1> <type 55>) Answer () (? <type 16>, ? <type -19>)
 func (p <esc:0x1> <type 55>) AllAnswers () (? <type 45>, ? <type -19>)
 func (p <esc:0x1> <type 55>) SkipAnswer () <type -19>
 func (p <esc:0x1> <type 55>) SkipAllAnswers () <type -19>
 func (p <esc:0x1> <type 55>) AuthorityHeader () (? <type 18>, ? <type -19>)
 func (p <esc:0x1> <type 55>) Authority () (? <type 16>, ? <type -19>)
 func (p <esc:0x1> <type 55>) AllAuthorities () (? <type 45>, ? <type -19>)
 func (p <esc:0x1> <type 55>) SkipAuthority () <type -19>
 func (p <esc:0x1> <type 55>) SkipAllAuthorities () <type -19>
 func (p <esc:0x1> <type 55>) AdditionalHeader () (? <type 18>, ? <type -19>)
 func (p <esc:0x1> <type 55>) Additional () (? <type 16>, ? <type -19>)
 func (p <esc:0x1> <type 55>) AllAdditionals () (? <type 45>, ? <type -19>)
 func (p <esc:0x1> <type 55>) SkipAdditional () <type -19>
 func (p <esc:0x1> <type 55>) SkipAllAdditionals () <type -19>
 func (p <esc:0x1> <type 55>) CNAMEResource () (? <type 4>, ? <type -19>)
 func (p <esc:0x1> <type 55>) MXResource () (? <type 7>, ? <type -19>)
 func (p <esc:0x1> <type 55>) NSResource () (? <type 9>, ? <type -19>)
 func (p <esc:0x1> <type 55>) PTRResource () (? <type 12>, ? <type -19>)
 func (p <esc:0x1> <type 55>) SOAResource () (? <type 19>, ? <type -19>)
 func (p <esc:0x1> <type 55>) TXTResource () (? <type 21>, ? <type -19>)
 func (p <esc:0x1> <type 55>) SRVResource () (? <type 20>, ? <type -19>)
 func (p <esc:0x1> <type 55>) AResource () (? <type 2>, ? <type -19>)
 func (p <esc:0x1> <type 55>) AAAAResource () (? <type 1>, ? <type -19>)
type 14 "Question" <type 56>
 func (q <esc:0x1> <type 57>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 26>, compression <esc:0x1> <type 27>, compressionOff <type -11>) (? <type 26>, ? <type -19>)
type 15 "RCode" <type -6>
type 16 "Resource" <type 58>
 func (r <esc:0x9> <type 59>) .internal/x/net/dns/dnsmessage.pack (msg <type 26>, compression <type 27>, compressionOff <type -11>) (? <type 26>, ? <type -19>)
type 17 "ResourceBody" <type 60>
type 18 "ResourceHeader" <type 61>
 func (h <esc:0x1> <type 62>) .internal/x/net/dns/dnsmessage.pack (oldMsg <esc:0x92> <type 26>, compression <esc:0x1> <type 27>, compressionOff <type -11>) (msg <type 26>, length <type 26>, err <type -19>)
 func (h <esc:0x1> <type 62>) .internal/x/net/dns/dnsmessage.unpack (msg <esc:0x1> <type 26>, off <type -11>) (? <type -11>, ? <type -19>)
 func (h <esc:0x1> <type 62>) .internal/x/net/dns/dnsmessage.fixLen (msg <esc:0x1> <type 26>, length <esc:0x1> <type 26>, preLen <type -11>) <type -19>
type 19 "SOAResource" <type 63>
 func (r <esc:0x1> <type 64>) .internal/x/net/dns/dnsmessage.realType () <type 22>
 func (r <esc:0x1> <type 64>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 26>, compression <esc:0x1> <type 27>, compressionOff <type -11>) (? <type 26>, ? <type -19>)
type 20 "SRVResource" <type 65>
 func (r <esc:0x1> <type 66>) .internal/x/net/dns/dnsmessage.realType () <type 22>
 func (r <esc:0x1> <type 66>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 26>, compression <esc:0x1> <type 27>, compressionOff <type -11>) (? <type 26>, ? <type -19>)
type 21 "TXTResource" <type 67>
 func (r <esc:0x1> <type 69>) .internal/x/net/dns/dnsmessage.realType () <type 22>
 func (r <esc:0x1> <type 69>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 26>, compression <esc:0x1> <type 27>, compressionOff <type -11>) (? <type 26>, ? <type -19>)
type 22 "Type" <type -6>
type 23 struct { AAAA <type 24>; }
type 24 [16 ] <type -20>
type 25 *<type 1>
type 26 [] <type -20>
type 27 map [<type -16>] <type -11>
type 28 struct { A <type 29>; }
type 29 [4 ] <type -20>
type 30 *<type 2>
type 31 struct { .internal/x/net/dns/dnsmessage.msg <type 26>; .internal/x/net/dns/dnsmessage.section <type 32>; .internal/x/net/dns/dnsmessage.header <type 33>; .internal/x/net/dns/dnsmessage.start <type -11>; .internal/x/net/dns/dnsmessage.compression <type 27>; }
type 32 ".internal/x/net/dns/dnsmessage.section" <type -5>
type 33 ".internal/x/net/dns/dnsmessage.header" <type 35>
 func (h <esc:0x1> <type 34>) .internal/x/net/dns/dnsmessage.count (sec <type 32>) <type -6>
 func (h <esc:0x1> <type 34>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 26>) <type 26>
 func (h <esc:0x1> <type 34>) .internal/x/net/dns/dnsmessage.unpack (msg <esc:0x1> <type 26>, off <type -11>) (? <type -11>, ? <type -19>)
 func (h <esc:0x1> <type 34>) .internal/x/net/dns/dnsmessage.header () <type 6>
type 34 *<type 33>
type 35 struct { .internal/x/net/dns/dnsmessage.id <type -6>; .internal/x/net/dns/dnsmessage.bits <type -6>; .internal/x/net/dns/dnsmessage.questions <type -6>; .internal/x/net/dns/dnsmessage.answers <type -6>; .internal/x/net/dns/dnsmessage.authorities <type -6>; .internal/x/net/dns/dnsmessage.additionals <type -6>; }
type 36 *<type 3>
type 37 struct { CNAME <type 10>; }
type 38 *<type 4>
type 39 struct { ID <type -6>; Response <type -15>; OpCode <type 11>; Authoritative <type -15>; Truncated <type -15>; RecursionDesired <type -15>; RecursionAvailable <type -15>; RCode <type 15>; }
type 40 *<type 6>
type 41 struct { Pref <type -6>; MX <type 10>; }
type 42 *<type 7>
type 43 struct { ? <type 6>; Questions <type 44>; Answers <type 45>; Authorities <type 45>; Additionals <type 45>; }
type 44 [] <type 14>
type 45 [] <type 16>
type 46 *<type 8>
type 47 struct { NS <type 10>; }
type 48 *<type 9>
type 49 struct { Data <type 50>; Length <type -5>; }
type 50 [255 ] <type -20>
type 51 *<type 10>
type 52 struct { PTR <type 10>; }
type 53 *<type 12>
type 54 struct { .internal/x/net/dns/dnsmessage.msg <type 26>; .internal/x/net/dns/dnsmessage.header <type 33>; .internal/x/net/dns/dnsmessage.section <type 32>; .internal/x/net/dns/dnsmessage.off <type -11>; .internal/x/net/dns/dnsmessage.index <type -11>; .internal/x/net/dns/dnsmessage.resHeaderValid <type -15>; .internal/x/net/dns/dnsmessage.resHeader <type 18>; }
type 55 *<type 13>
type 56 struct { Name <type 10>; Type <type 22>; Class <type 5>; }
type 57 *<type 14>
type 58 struct { Header <type 18>; Body <type 17>; }
type 59 *<type 16>
type 60 interface { .internal/x/net/dns/dnsmessage.pack (msg <type 26>, compression <type 27>, compressionOff <type -11>) (? <type 26>, ? <type -19>); .internal/x/net/dns/dnsmessage.realType () <type 22>; }
type 61 struct { Name <type 10>; Type <type 22>; Class <type 5>; TTL <type -7>; Length <type -6>; }
type 62 *<type 18>
type 63 struct { NS <type 10>; MBox <type 10>; Serial <type -7>; Refresh <type -7>; Retry <type -7>; Expire <type -7>; MinTTL <type -7>; }
type 64 *<type 19>
type 65 struct { Priority <type -6>; Weight <type -6>; Port <type -6>; Target <type 10>; }
type 66 *<type 20>
type 67 struct { TXT <type 68>; }
type 68 [] <type -16>
type 69 *<type 21>
const ClassANY <type 5> = 255 
const ClassCHAOS <type 5> = 3 
const ClassCSNET <type 5> = 2 
const ClassHESIOD <type 5> = 4 
const ClassINET <type 5> = 1 
var ErrNotStarted <type -19>
var ErrSectionDone <type -19>
func NewBuilder (buf <esc:0x12> <type 26>, h <type 6>) <type 3>
func NewName (name <esc:0x1> <type -16>) (? <type 10>, ? <type -19>)
const RCodeFormatError <type 15> = 1 
const RCodeNameError <type 15> = 3 
const RCodeNotImplemented <type 15> = 4 
const RCodeRefused <type 15> = 5 
const RCodeServerFailure <type 15> = 2 
const RCodeSuccess <type 15> = 0 
const TypeA <type 22> = 1 
const TypeAAAA <type 22> = 28 
const TypeALL <type 22> = 255 
const TypeAXFR <type 22> = 252 
const TypeCNAME <type 22> = 5 
const TypeHINFO <type 22> = 13 
const TypeMINFO <type 22> = 14 
const TypeMX <type 22> = 15 
const TypeNS <type 22> = 2 
const TypePTR <type 22> = 12 
const TypeSOA <type 22> = 6 
const TypeSRV <type 22> = 33 
const TypeTXT <type 22> = 16 
const TypeWKS <type 22> = 11 
checksum C62EB39368B7135C34219C959ABA8BE5FA32AF8B
v3;
package httpguts
pkgpath internal/x/net/http/httpguts
import idna internal/x/net/idna "internal/x/net/idna"
import net net "net"
import textproto net/textproto "net/textproto"
import strings strings "strings"
import utf8 unicode/utf8 "unicode/utf8"
init httpguts internal..z2fx..z2fnet..z2fhttp..z2fhttpguts..import bufio bufio..import bytes bytes..import context context..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import idna internal..z2fx..z2fnet..z2fidna..import bidirule internal..z2fx..z2ftext..z2fsecure..z2fbidirule..import transform internal..z2fx..z2ftext..z2ftransform..import bidi internal..z2fx..z2ftext..z2funicode..z2fbidi..import norm internal..z2fx..z2ftext..z2funicode..z2fnorm..import io io..import ioutil io..z2fioutil..import log log..import rand math..z2frand..import net net..import textproto net..z2ftextproto..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 1 2 1 5 1 14 1 23 1 24 1 26 1 29 2 5 2 14 2 23 2 24 2 26 2 29 3 4 3 5 3 6 3 7 3 14 3 20 3 22 3 23 3 24 3 25 3 26 3 27 3 28 3 29 4 5 4 6 4 7 4 14 4 20 4 22 4 23 4 24 4 25 4 26 4 27 4 28 4 29 6 5 6 14 6 23 6 24 6 26 6 27 6 28 9 2 9 4 9 5 9 6 9 7 9 10 9 11 9 12 9 13 9 14 9 16 9 20 9 22 9 23 9 24 9 25 9 26 9 27 9 28 9 29 10 2 10 4 10 5 10 6 10 7 10 11 10 12 10 14 10 16 10 20 10 22 10 23 10 24 10 25 10 26 10 27 10 28 10 29 11 2 11 5 11 14 11 23 11 24 11 26 11 29 12 4 12 5 12 6 12 7 12 14 12 16 12 20 12 22 12 23 12 24 12 25 12 26 12 27 12 28 12 29 13 2 13 4 13 5 13 6 13 7 13 11 13 14 13 20 13 22 13 23 13 24 13 25 13 26 13 27 13 28 13 29 14 5 14 23 14 24 14 26 15 2 15 5 15 6 15 7 15 14 15 20 15 21 15 22 15 23 15 24 15 25 15 26 15 27 15 28 15 29 16 4 16 5 16 6 16 7 16 14 16 20 16 22 16 23 16 24 16 25 16 26 16 27 16 28 16 29 17 5 17 23 17 24 17 26 18 3 18 4 18 5 18 6 18 7 18 8 18 14 18 17 18 20 18 22 18 23 18 24 18 25 18 26 18 27 18 28 18 29 19 1 19 2 19 3 19 4 19 5 19 6 19 7 19 8 19 14 19 15 19 17 19 18 19 20 19 21 19 22 19 23 19 24 19 25 19 26 19 27 19 28 19 29 20 5 20 6 20 7 20 14 20 23 20 24 20 26 20 27 20 28 21 5 21 6 21 7 21 14 21 20 21 22 21 23 21 24 21 25 21 26 21 27 21 28 21 29 22 5 22 23 22 24 22 25 22 26 22 29 23 5 23 24 25 5 25 23 25 24 26 5 26 23 26 24 27 5 27 23 27 24 27 26 28 5 28 23 28 24 28 26 28 27
types 2 1 21
type 1 [] <type -16>
func HeaderValuesContainsToken (values <esc:0x1> <type 1>, token <esc:0x1> <type -16>) <type -15>
func IsTokenRune (r <type -21>) <type -15>
func PunycodeHostPort (v <type -16>) (? <type -16>, ? <type -19>)
func ValidHeaderFieldName (v <esc:0x1> <type -16>) <type -15>
func ValidHeaderFieldValue (v <esc:0x1> <type -16>) <type -15>
func ValidHostHeader (h <esc:0x1> <type -16>) <type -15>
func ValidTrailerHeader (name <esc:0x1> <type -16>) <type -15>
checksum 84A50753070564986C3ACB46FDBF125CB631A541
v3;
package httpproxy
pkgpath internal/x/net/http/httpproxy
import errors errors "errors"
import fmt fmt "fmt"
import idna internal/x/net/idna "internal/x/net/idna"
import net net "net"
import url net/url "net/url"
import os os "os"
import strings strings "strings"
import utf8 unicode/utf8 "unicode/utf8"
init httpproxy internal..z2fx..z2fnet..z2fhttp..z2fhttpproxy..import bytes bytes..import context context..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import idna internal..z2fx..z2fnet..z2fidna..import bidirule internal..z2fx..z2ftext..z2fsecure..z2fbidirule..import transform internal..z2fx..z2ftext..z2ftransform..import bidi internal..z2fx..z2ftext..z2funicode..z2fbidi..import norm internal..z2fx..z2ftext..z2funicode..z2fnorm..import io io..import log log..import rand math..z2frand..import net net..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 1 4 1 13 1 19 1 20 1 22 1 25 2 3 2 4 2 5 2 6 2 13 2 17 2 18 2 19 2 20 2 21 2 22 2 23 2 24 2 25 3 4 3 5 3 6 3 13 3 17 3 18 3 19 3 20 3 21 3 22 3 23 3 24 3 25 5 4 5 13 5 19 5 20 5 22 5 23 5 24 8 1 8 3 8 4 8 5 8 6 8 9 8 10 8 11 8 12 8 13 8 14 8 17 8 18 8 19 8 20 8 21 8 22 8 23 8 24 8 25 9 1 9 3 9 4 9 5 9 6 9 10 9 11 9 13 9 14 9 17 9 18 9 19 9 20 9 21 9 22 9 23 9 24 9 25 10 1 10 4 10 13 10 19 10 20 10 22 10 25 11 3 11 4 11 5 11 6 11 13 11 14 11 17 11 18 11 19 11 20 11 21 11 22 11 23 11 24 11 25 12 1 12 3 12 4 12 5 12 6 12 10 12 13 12 17 12 18 12 19 12 20 12 21 12 22 12 23 12 24 12 25 13 4 13 19 13 20 13 22 14 3 14 4 14 5 14 6 14 13 14 17 14 18 14 19 14 20 14 21 14 22 14 23 14 24 14 25 15 4 15 19 15 20 15 22 16 2 16 3 16 4 16 5 16 6 16 7 16 13 16 15 16 17 16 18 16 19 16 20 16 21 16 22 16 23 16 24 16 25 17 4 17 5 17 6 17 13 17 19 17 20 17 22 17 23 17 24 18 4 18 19 18 20 18 21 18 22 18 25 19 4 19 20 21 4 21 19 21 20 22 4 22 19 22 20 23 4 23 19 23 20 23 22 24 4 24 19 24 20 24 22 24 23
types 15 2 78 99 17 52 17 781 21 350 34 22 192 19 215 112
type 1 "Config" <type 2>
 func (cfg <esc:0x9> <type 3>) ProxyFunc () <type 4>
type 2 struct { HTTPProxy <type -16>; HTTPSProxy <type -16>; NoProxy <type -16>; CGI <type -15>; }
type 3 *<type 1>
type 4 (reqURL <type 5>) (? <type 5>, ? <type -19>)
type 5 *<type 6>
type 6 "net/url.URL" <type 11>
 func (u <esc:0x1> <type 5>) UnmarshalBinary (text <esc:0x1> <type 7>) <type -19>
 func (u <esc:0x1> <type 5>) MarshalBinary () (text <type 7>, err <type -19>)
 func (u <esc:0x9> <type 5>) Query () <type 8>
 func (u <esc:0xa> <type 5>) ResolveReference (ref <esc:0xa> <type 5>) <type 5>
 func (u <esc:0x22> <type 5>) RequestURI () <type -16>
 func (u <esc:0x9> <type 5>) Parse (ref <type -16>) (? <type 5>, ? <type -19>)
 func (u <esc:0x1> <type 5>) IsAbs () <type -15>
 func (u <esc:0x1> <type 5>) String () <type -16>
 func (u <esc:0x22> <type 5>) Hostname () <type -16>
 func (u <esc:0x22> <type 5>) EscapedPath () <type -16>
 func (u <esc:0x22> <type 5>) Port () <type -16>
 func (u <esc:0x1> <type 5>) .net/url.setPath (p <type -16>) <type -19>
type 7 [] <type -20>
type 8 "net/url.Values" <type 9>
 func (v <esc:0x1> <type 8>) Encode () <type -16>
 func (v <esc:0x1> <type 8>) Del (key <esc:0x1> <type -16>)
 func (v <esc:0x9> <type 8>) Add (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 8>) Set (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 8>) Get (key <esc:0x1> <type -16>) <type -16>
type 9 map [<type -16>] <type 10>
type 10 [] <type -16>
type 11 struct { Scheme <type -16>; Opaque <type -16>; User <type 12>; Host <type -16>; Path <type -16>; RawPath <type -16>; ForceQuery <type -15>; RawQuery <type -16>; Fragment <type -16>; }
type 12 *<type 13>
type 13 "net/url.Userinfo" <type 14>
 func (u <esc:0x22> <type 12>) Password () (? <type -16>, ? <type -15>)
 func (u <esc:0x22> <type 12>) String () <type -16>
 func (u <esc:0x22> <type 12>) Username () <type -16>
type 14 struct { .net/url.username <type -16>; .net/url.password <type -16>; .net/url.passwordSet <type -15>; }
func FromEnvironment () <type 3>
checksum CCAB420FCD562584442F9BF0CDBA2EB5D170DE40
v3;
package hpack
pkgpath internal/x/net/http2/hpack
import bytes bytes "bytes"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import sync sync "sync"
init hpack internal..z2fx..z2fnet..z2fhttp2..z2fhpack..import bytes bytes..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 1 3 1 6 1 9 1 10 1 12 1 15 2 3 2 4 2 5 2 6 2 7 2 8 2 9 2 10 2 11 2 12 2 13 2 14 2 15 4 3 4 6 4 9 4 10 4 12 4 13 4 14 6 3 6 9 6 10 6 12 7 3 7 4 7 5 7 6 7 9 7 10 7 12 7 13 7 14 8 3 8 9 8 10 8 11 8 12 8 15 9 3 9 10 11 3 11 9 11 10 12 3 12 9 12 10 13 3 13 9 13 10 13 12 14 3 14 9 14 10 14 12 14 13
types 34 6 1464 73 469 173 77 21 349 285 17 209 594 19 210 20 35 34 62 110 21 1804 19 30 73 30 72 90 34 18 201 35 302 18 76
type 1 "Decoder" <type 7>
 func (d <esc:0x1> <type 28>) SetMaxStringLength (n <type -11>)
 func (d <esc:0x1> <type 28>) SetEmitFunc (emitFunc <type 19>)
 func (d <esc:0x1> <type 28>) SetEmitEnabled (v <type -15>)
 func (d <esc:0x1> <type 28>) EmitEnabled () <type -15>
 func (d <esc:0x9> <type 28>) SetMaxDynamicTableSize (v <type -7>)
 func (d <esc:0x1> <type 28>) SetAllowedMaxDynamicTableSize (v <type -7>)
 func (d <esc:0x1> <type 28>) .internal/x/net/http2/hpack.maxTableIndex () <type -11>
 func (d <esc:0x32> <type 28>) .internal/x/net/http2/hpack.at (i <type -8>) (hf <type 4>, ok <type -15>)
 func (d <esc:0x9> <type 28>) DecodeFull (p <type 6>) (? <type 14>, ? <type -19>)
 func (d <esc:0x1> <type 28>) Close () <type -19>
 func (d <esc:0x9> <type 28>) Write (p <type 6>) (n <type -11>, err <type -19>)
 func (d <esc:0x9> <type 28>) .internal/x/net/http2/hpack.parseHeaderFieldRepr () <type -19>
 func (d <esc:0x9> <type 28>) .internal/x/net/http2/hpack.parseFieldIndexed () <type -19>
 func (d <esc:0x9> <type 28>) .internal/x/net/http2/hpack.parseFieldLiteral (n <type -5>, it <type 29>) <type -19>
 func (d <esc:0x1> <type 28>) .internal/x/net/http2/hpack.callEmit (hf <type 4>) <type -19>
 func (d <esc:0x9> <type 28>) .internal/x/net/http2/hpack.parseDynamicTableSizeUpdate () <type -19>
 func (d <esc:0x1> <type 28>) .internal/x/net/http2/hpack.readString (p <esc:0x82> <type 6>, wantStr <type -15>) (s <type -16>, remain <type 6>, err <type -19>)
type 2 "DecodingError" <type 30>
 func (de <type 2>) Error () <type -16>
type 3 "Encoder" <type 31>
 func (e <esc:0x9> <type 32>) WriteField (f <type 4>) <type -19>
 func (e <esc:0x9> <type 32>) .internal/x/net/http2/hpack.searchTable (f <esc:0x1> <type 4>) (i <type -8>, nameValueMatch <type -15>)
 func (e <esc:0x9> <type 32>) SetMaxDynamicTableSize (v <type -7>)
 func (e <esc:0x9> <type 32>) SetMaxDynamicTableSizeLimit (v <type -7>)
 func (e <esc:0x1> <type 32>) .internal/x/net/http2/hpack.shouldIndex (f <esc:0x1> <type 4>) <type -15>
type 4 "HeaderField" <type 33>
 func (hf <esc:0x1> <type 4>) IsPseudo () <type -15>
 func (hf <type 4>) String () <type -16>
 func (hf <esc:0x1> <type 4>) Size () <type -7>
type 5 "InvalidIndexError" <type -11>
 func (e <type 5>) Error () <type -16>
type 6 [] <type -20>
type 7 struct { .internal/x/net/http2/hpack.dynTab <type 8>; .internal/x/net/http2/hpack.emit <type 19>; .internal/x/net/http2/hpack.emitEnabled <type -15>; .internal/x/net/http2/hpack.maxStrLen <type -11>; .internal/x/net/http2/hpack.buf <type 6>; .internal/x/net/http2/hpack.saveBuf <type 20>; .internal/x/net/http2/hpack.firstField <type -15>; }
type 8 ".internal/x/net/http2/hpack.dynamicTable" <type 10>
 func (dt <esc:0x9> <type 9>) .internal/x/net/http2/hpack.setMaxSize (v <type -7>)
 func (dt <esc:0x9> <type 9>) .internal/x/net/http2/hpack.add (f <type 4>)
 func (dt <esc:0x9> <type 9>) .internal/x/net/http2/hpack.evict ()
type 9 *<type 8>
type 10 struct { .internal/x/net/http2/hpack.table <type 11>; .internal/x/net/http2/hpack.size <type -7>; .internal/x/net/http2/hpack.maxSize <type -7>; .internal/x/net/http2/hpack.allowedMaxSize <type -7>; }
type 11 ".internal/x/net/http2/hpack.headerFieldTable" <type 13>
 func (t <esc:0x1> <type 12>) .internal/x/net/http2/hpack.init ()
 func (t <esc:0x1> <type 12>) .internal/x/net/http2/hpack.len () <type -11>
 func (t <esc:0x9> <type 12>) .internal/x/net/http2/hpack.addEntry (f <type 4>)
 func (t <esc:0x9> <type 12>) .internal/x/net/http2/hpack.evictOldest (n <type -11>)
 func (t <esc:0x9> <type 12>) .internal/x/net/http2/hpack.search (f <esc:0x1> <type 4>) (i <type -8>, nameValueMatch <type -15>)
 func (t <esc:0x9> <type 12>) .internal/x/net/http2/hpack.idToIndex (id <type -8>) <type -8>
type 12 *<type 11>
type 13 struct { .internal/x/net/http2/hpack.ents <type 14>; .internal/x/net/http2/hpack.evictCount <type -8>; .internal/x/net/http2/hpack.byName <type 15>; .internal/x/net/http2/hpack.byNameValue <type 16>; }
type 14 [] <type 4>
type 15 map [<type -16>] <type -8>
type 16 map [<type 17>] <type -8>
type 17 ".internal/x/net/http2/hpack.pairNameValue" <type 18>
type 18 struct { .internal/x/net/http2/hpack.name <type -16>; .internal/x/net/http2/hpack.value <type -16>; }
type 19 (f <type 4>)
type 20 "bytes.Buffer" <type 26>
 func (b <esc:0x22> <type 21>) .bytes.readSlice (delim <type -20>) (line <type 6>, err <type -19>)
 func (b <esc:0x1> <type 21>) ReadBytes (delim <type -20>) (line <type 6>, err <type -19>)
 func (b <esc:0x1> <type 21>) UnreadByte () <type -19>
 func (b <esc:0x1> <type 21>) UnreadRune () <type -19>
 func (b <esc:0x1> <type 21>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x1> <type 21>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x9> <type 21>) WriteTo (w <type 22>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 21>) Read (p <esc:0x1> <type 6>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 21>) Truncate (n <type -11>)
 func (b <esc:0x1> <type 21>) .bytes.tryGrowByReslice (n <type -11>) (? <type -11>, ? <type -15>)
 func (b <esc:0x1> <type 21>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x22> <type 21>) Bytes () <type 6>
 func (b <esc:0x1> <type 21>) String () <type -16>
 func (b <esc:0x1> <type 21>) Cap () <type -11>
 func (b <esc:0x1> <type 21>) Len () <type -11>
 func (b <esc:0x1> <type 21>) WriteRune (r <type -21>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 21>) .bytes.empty () <type -15>
 func (b <esc:0x1> <type 21>) Reset ()
 func (b <esc:0x22> <type 21>) Next (n <type -11>) <type 6>
 func (b <esc:0x1> <type 21>) .bytes.grow (n <type -11>) <type -11>
 func (b <esc:0x1> <type 21>) Grow (n <type -11>)
 func (b <esc:0x1> <type 21>) Write (p <esc:0x1> <type 6>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 21>) ReadString (delim <type -20>) (line <type -16>, err <type -19>)
 func (b <esc:0x1> <type 21>) WriteString (s <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (b <esc:0x9> <type 21>) ReadFrom (r <type 24>) (n <type -4>, err <type -19>)
type 21 *<type 20>
type 22 "io.Writer" <type 23>
type 23 interface { Write (p <type 6>) (n <type -11>, err <type -19>); }
type 24 "io.Reader" <type 25>
type 25 interface { Read (p <type 6>) (n <type -11>, err <type -19>); }
type 26 struct { .bytes.buf <type 6>; .bytes.off <type -11>; .bytes.lastRead <type 27>; }
type 27 ".bytes.readOp" <type -1>
type 28 *<type 1>
type 29 ".internal/x/net/http2/hpack.indexType" <type -11>
 func (v <type 29>) .internal/x/net/http2/hpack.indexed () <type -15>
 func (v <type 29>) .internal/x/net/http2/hpack.sensitive () <type -15>
type 30 struct { Err <type -19>; }
type 31 struct { .internal/x/net/http2/hpack.dynTab <type 8>; .internal/x/net/http2/hpack.minSize <type -7>; .internal/x/net/http2/hpack.maxSizeLimit <type -7>; .internal/x/net/http2/hpack.tableSizeUpdate <type -15>; .internal/x/net/http2/hpack.w <type 22>; .internal/x/net/http2/hpack.buf <type 6>; }
type 32 *<type 3>
type 33 struct { Name <type -16>; Value <type -16>; Sensitive <type -15>; }
func AppendHuffmanString (dst <esc:0x12> <type 6>, s <esc:0x1> <type -16>) <type 6>
var ErrInvalidHuffman <type -19>
var ErrStringLength <type -19>
func HuffmanDecode (w <type 22>, v <esc:0x1> <type 6>) (? <type -11>, ? <type -19>)
func HuffmanDecodeToString (v <esc:0x1> <type 6>) (? <type -16>, ? <type -19>)
func HuffmanEncodeLength (s <esc:0x1> <type -16>) <type -8>
func NewDecoder (maxDynamicTableSize <type -7>, emitFunc <type 19>) <type 28>
func NewEncoder (w <type 22>) <type 32>
checksum 1BADCB418D749F95661419B10449E22A17E1EAFD
v3;
package idna
pkgpath internal/x/net/idna
import fmt fmt "fmt"
import bidirule internal/x/text/secure/bidirule "internal/x/text/secure/bidirule"
import bidi internal/x/text/unicode/bidi "internal/x/text/unicode/bidi"
import norm internal/x/text/unicode/norm "internal/x/text/unicode/norm"
import math math "math"
import strings strings "strings"
import utf8 unicode/utf8 "unicode/utf8"
init idna internal..z2fx..z2fnet..z2fidna..import bytes bytes..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import bidirule internal..z2fx..z2ftext..z2fsecure..z2fbidirule..import transform internal..z2fx..z2ftext..z2ftransform..import bidi internal..z2fx..z2ftext..z2funicode..z2fbidi..import norm internal..z2fx..z2ftext..z2funicode..z2fnorm..import io io..import log log..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 1 3 1 10 1 14 1 15 1 17 1 20 2 3 2 4 2 5 2 10 2 12 2 13 2 14 2 15 2 16 2 17 2 18 2 19 2 20 4 3 4 10 4 14 4 15 4 17 4 18 4 19 6 1 6 2 6 3 6 4 6 5 6 7 6 8 6 10 6 11 6 12 6 13 6 14 6 15 6 16 6 17 6 18 6 19 6 20 7 1 7 3 7 10 7 14 7 15 7 17 7 20 8 2 8 3 8 4 8 5 8 10 8 11 8 12 8 13 8 14 8 15 8 16 8 17 8 18 8 19 8 20 9 1 9 2 9 3 9 4 9 5 9 7 9 10 9 12 9 13 9 14 9 15 9 16 9 17 9 18 9 19 9 20 10 3 10 14 10 15 10 17 11 2 11 3 11 4 11 5 11 10 11 12 11 13 11 14 11 15 11 16 11 17 11 18 11 19 11 20 12 3 12 4 12 5 12 10 12 14 12 15 12 17 12 18 12 19 13 3 13 14 13 15 13 16 13 17 13 20 14 3 14 15 16 3 16 14 16 15 17 3 17 14 17 15 18 3 18 14 18 15 18 17 19 3 19 14 19 15 19 17 19 18
types 18 3 25 524 17 19 20 17 47 416 18 578 22 19 46 90 34 31 50
type 1 "Option" <type 5>
type 2 "Profile" <type 16>
 func (p <type 3>) ToASCII (s <type -16>) (? <type -16>, ? <type -19>)
 func (p <esc:0x9> <type 3>) ToUnicode (s <type -16>) (? <type -16>, ? <type -19>)
 func (p <esc:0x1> <type 3>) String () <type -16>
 func (p <type 3>) .internal/x/net/idna.process (s <type -16>, toASCII <type -15>) (? <type -16>, ? <type -19>)
 func (p <esc:0x1> <type 3>) .internal/x/net/idna.simplify (cat <type 17>) <type 17>
 func (p <esc:0x1> <type 3>) .internal/x/net/idna.validateLabel (s <type -16>) (err <type -19>)
type 3 *<type 2>
type 4 [] <type 1>
type 5 (? <type 6>)
type 6 *<type 7>
type 7 ".internal/x/net/idna.options" <type 8>
type 8 struct { .internal/x/net/idna.transitional <type -15>; .internal/x/net/idna.useSTD3Rules <type -15>; .internal/x/net/idna.validateLabels <type -15>; .internal/x/net/idna.verifyDNSLength <type -15>; .internal/x/net/idna.removeLeadingDots <type -15>; .internal/x/net/idna.trie <type 9>; .internal/x/net/idna.fromPuny <type 13>; .internal/x/net/idna.mapping <type 14>; .internal/x/net/idna.bidirule <type 15>; }
type 9 *<type 10>
type 10 ".internal/x/net/idna.idnaTrie" <type 12>
 func (t <esc:0x1> <type 9>) .internal/x/net/idna.lookup (s <esc:0x1> <type 11>) (v <type -6>, sz <type -11>)
 func (t <esc:0x1> <type 9>) .internal/x/net/idna.lookupUnsafe (s <esc:0x1> <type 11>) <type -6>
 func (t <esc:0x1> <type 9>) .internal/x/net/idna.lookupString (s <esc:0x1> <type -16>) (v <type -6>, sz <type -11>)
 func (t <esc:0x1> <type 9>) .internal/x/net/idna.lookupStringUnsafe (s <esc:0x1> <type -16>) <type -6>
 func (t <esc:0x1> <type 9>) .internal/x/net/idna.lookupValue (n <type -7>, b <type -20>) <type -6>
type 11 [] <type -20>
type 12 struct { }
type 13 (p <type 3>, s <type -16>) <type -19>
type 14 (p <type 3>, s <type -16>) (mapped <type -16>, isBidi <type -15>, err <type -19>)
type 15 (s <type -16>) <type -15>
type 16 struct { ? <type 7>; }
type 17 ".internal/x/net/idna.category" <type -6>
func BidiRule () <type 1>
var Display <type 3>
var Lookup <type 3>
func MapForLookup () <type 1>
func New (o <esc:0x1> ...<type 1>) <type 3>
var Punycode <type 3>
var Registration <type 3>
func RemoveLeadingDots (remove <type -15>) <type 1>
func StrictDomainName (use <type -15>) <type 1>
func ToASCII (s <type -16>) (? <type -16>, ? <type -19>)
func ToUnicode (s <type -16>) (? <type -16>, ? <type -19>)
func Transitional (transitional <type -15>) <type 1>
const UnicodeVersion = "10.0.0"
func ValidateForRegistration () <type 1>
func ValidateLabels (enable <type -15>) <type 1>
func VerifyDNSLength (verify <type -15>) <type 1>
checksum A129AB3C561D1709BC9F4274A4DDA6701B6F7C5C
v3;
package nettest
pkgpath internal/x/net/internal/nettest
import fmt fmt "fmt"
import ioutil io/ioutil "io/ioutil"
import net net "net"
import os os "os"
import runtime runtime "runtime"
import syscall syscall "syscall"
indirectimport time time
init nettest internal..z2fx..z2fnet..z2finternal..z2fnettest..import bytes bytes..import context context..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import io io..import ioutil io..z2fioutil..import rand math..z2frand..import net net..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 1 4 1 8 1 15 1 16 1 18 1 21 2 3 2 4 2 5 2 6 2 8 2 12 2 14 2 15 2 16 2 17 2 18 2 19 2 20 2 21 3 4 3 5 3 6 3 8 3 12 3 14 3 15 3 16 3 17 3 18 3 19 3 20 3 21 5 4 5 8 5 15 5 16 5 18 5 19 5 20 8 4 8 15 8 16 8 18 9 1 9 4 9 5 9 6 9 8 9 12 9 13 9 14 9 15 9 16 9 17 9 18 9 19 9 20 9 21 10 4 10 15 10 16 10 18 11 2 11 3 11 4 11 5 11 6 11 7 11 8 11 10 11 12 11 14 11 15 11 16 11 17 11 18 11 19 11 20 11 21 12 4 12 5 12 6 12 8 12 15 12 16 12 18 12 19 12 20 13 4 13 5 13 6 13 8 13 12 13 14 13 15 13 16 13 17 13 18 13 19 13 20 13 21 14 4 14 15 14 16 14 17 14 18 14 21 15 4 15 16 17 4 17 15 17 16 18 4 18 15 18 16 19 4 19 15 19 16 19 18 20 4 20 15 20 16 20 18 20 19
types 35 1 17 175 19 27 66 108 85 21 70 1054 19 154 33 100 29 314 3300 356 19 19 525 165 21 31 91 21 36 112 19 73 75 83 35 326
type 1 *<type 2>
type 2 "net.Interface" <type 6>
 func (ifi <esc:0x1> <type 1>) MulticastAddrs () (? <type 3>, ? <type -19>)
 func (ifi <esc:0x1> <type 1>) Addrs () (? <type 3>, ? <type -19>)
type 3 [] <type 4>
type 4 "net.Addr" <type 5>
type 5 interface { Network () <type -16>; String () <type -16>; }
type 6 struct { Index <type -11>; MTU <type -11>; Name <type -16>; HardwareAddr <type 7>; Flags <type 9>; }
type 7 "net.HardwareAddr" <type 8>
 func (a <esc:0x1> <type 7>) String () <type -16>
type 8 [] <type -20>
type 9 "net.Flags" <type -12>
 func (f <type 9>) String () <type -16>
type 10 "net.IP" <type 8>
 func (ip <esc:0x1> <type 10>) .net.matchAddrFamily (x <esc:0x1> <type 10>) <type -15>
 func (ip <esc:0x1> <type 11>) UnmarshalText (text <esc:0x1> <type 8>) <type -19>
 func (ip <esc:0x12> <type 10>) To4 () <type 10>
 func (ip <esc:0x1> <type 10>) IsMulticast () <type -15>
 func (ip <esc:0x1> <type 10>) IsUnspecified () <type -15>
 func (ip <esc:0x1> <type 10>) IsInterfaceLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 10>) IsLinkLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 10>) IsLinkLocalUnicast () <type -15>
 func (ip <esc:0x1> <type 10>) IsGlobalUnicast () <type -15>
 func (ip <esc:0x1> <type 10>) IsLoopback () <type -15>
 func (ip <esc:0x12> <type 10>) To16 () <type 10>
 func (ip <esc:0x1> <type 10>) Equal (x <esc:0x1> <type 10>) <type -15>
 func (ip <esc:0x1> <type 10>) Mask (mask <esc:0x1> <type 12>) <type 10>
 func (ip <esc:0x1> <type 10>) DefaultMask () <type 12>
 func (ip <esc:0x1> <type 10>) String () <type -16>
 func (ip <esc:0x1> <type 10>) MarshalText () (? <type 8>, ? <type -19>)
type 11 *<type 10>
type 12 "net.IPMask" <type 8>
 func (m <esc:0x1> <type 12>) String () <type -16>
 func (m <esc:0x1> <type 12>) Size () (ones <type -11>, bits <type -11>)
type 13 "net.Listener" <type 14>
type 14 interface { Accept () (? <type 15>, ? <type -19>); Addr () <type 4>; Close () <type -19>; }
type 15 "net.Conn" <type 16>
type 16 interface { Close () <type -19>; LocalAddr () <type 4>; Read (b <type 8>) (n <type -11>, err <type -19>); RemoteAddr () <type 4>; SetDeadline (t <type 17>) <type -19>; SetReadDeadline (t <type 17>) <type -19>; SetWriteDeadline (t <type 17>) <type -19>; Write (b <type 8>) (n <type -11>, err <type -19>); }
type 17 "time.Time" <type 32>
 func (t <esc:0x1> <type 17>) String () <type -16>
 func (t <esc:0x1> <type 17>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x12> <type 17>) Add (d <type 18>) <type 17>
 func (t <esc:0x1> <type 17>) AppendFormat (b <esc:0x12> <type 8>, layout <esc:0x1> <type -16>) <type 8>
 func (t <esc:0x1> <type 17>) Minute () <type -11>
 func (t <esc:0x1> <type 19>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 17>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 17>) MarshalBinary () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 17>) After (u <esc:0x1> <type 17>) <type -15>
 func (t <esc:0x1> <type 17>) UnixNano () <type -4>
 func (t <esc:0x1> <type 19>) GobDecode (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 17>) Day () <type -11>
 func (t <esc:0x1> <type 19>) .time.unixSec () <type -4>
 func (t <esc:0x12> <type 17>) Round (d <type 18>) <type 17>
 func (t <esc:0x1> <type 19>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 17>) Before (u <esc:0x1> <type 17>) <type -15>
 func (t <esc:0x32> <type 17>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 19>) .time.setLoc (loc <type 20>)
 func (t <esc:0x12> <type 17>) Truncate (d <type 18>) <type 17>
 func (t <esc:0x1> <type 19>) UnmarshalText (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 19>) UnmarshalBinary (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 17>) Hour () <type -11>
 func (t <esc:0x1> <type 17>) .time.abs () <type -8>
 func (t <esc:0x1> <type 17>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x12> <type 17>) Location () <type 20>
 func (t <esc:0x1> <type 17>) Month () <type 30>
 func (t <esc:0x1> <type 17>) GobEncode () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 17>) Second () <type -11>
 func (t <esc:0x1> <type 19>) UnmarshalJSON (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 19>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 17>) Year () <type -11>
 func (t <esc:0x1> <type 17>) Date () (year <type -11>, month <type 30>, day <type -11>)
 func (t <esc:0x1> <type 17>) Weekday () <type 31>
 func (t <esc:0x1> <type 17>) Unix () <type -4>
 func (t <esc:0x1> <type 17>) YearDay () <type -11>
 func (t <esc:0x12> <type 17>) Local () <type 17>
 func (t <esc:0x1> <type 17>) IsZero () <type -15>
 func (t <esc:0x1> <type 17>) Equal (u <esc:0x1> <type 17>) <type -15>
 func (t <esc:0x12> <type 17>) In (loc <type 20>) <type 17>
 func (t <esc:0x1> <type 17>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 17>) UTC () <type 17>
 func (t <esc:0x32> <type 17>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 17>) Sub (u <esc:0x1> <type 17>) <type 18>
 func (t <esc:0x1> <type 19>) .time.mono () <type -4>
 func (t <esc:0x1> <type 17>) MarshalText () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 19>) .time.stripMono ()
 func (t <esc:0x1> <type 17>) MarshalJSON () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 17>) .time.date (full <type -15>) (year <type -11>, month <type 30>, day <type -11>, yday <type -11>)
 func (t <type 17>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 17>
 func (t <esc:0x1> <type 19>) .time.sec () <type -4>
type 18 "time.Duration" <type -4>
 func (d <type 18>) Round (m <type 18>) <type 18>
 func (d <type 18>) Truncate (m <type 18>) <type 18>
 func (d <type 18>) Hours () <type -10>
 func (d <type 18>) Minutes () <type -10>
 func (d <type 18>) Seconds () <type -10>
 func (d <type 18>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 18>) String () <type -16>
type 19 *<type 17>
type 20 *<type 21>
type 21 "time.Location" <type 22>
 func (l <esc:0x1> <type 20>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 20>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 20>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 20>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 20>) String () <type -16>
 func (l <esc:0x12> <type 20>) .time.get () <type 20>
type 22 struct { .time.name <type -16>; .time.zone <type 23>; .time.tx <type 26>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 29>; }
type 23 [] <type 24>
type 24 ".time.zone" <type 25>
type 25 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 26 [] <type 27>
type 27 ".time.zoneTrans" <type 28>
type 28 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 29 *<type 24>
type 30 "time.Month" <type -11>
 func (m <type 30>) String () <type -16>
type 31 "time.Weekday" <type -11>
 func (d <type 31>) String () <type -16>
type 32 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 20>; }
type 33 "net.PacketConn" <type 34>
type 34 interface { Close () <type -19>; LocalAddr () <type 4>; ReadFrom (p <type 8>) (n <type -11>, addr <type 4>, err <type -19>); SetDeadline (t <type 17>) <type -19>; SetReadDeadline (t <type 17>) <type -19>; SetWriteDeadline (t <type 17>) <type -19>; WriteTo (p <type 8>, addr <type 4>) (n <type -11>, err <type -19>); }
func IsMulticastCapable (network <esc:0x1> <type -16>, ifi <esc:0x1> <type 1>) (? <type 10>, ? <type -15>)
func MaxOpenFiles () <type -11>
func NewLocalListener (network <type -16>) (? <type 13>, ? <type -19>)
func NewLocalPacketListener (network <type -16>) (? <type 33>, ? <type -19>)
func ProtocolNotSupported (err <esc:0x1> <type -19>) <type -15>
func RoutedInterface (network <esc:0x1> <type -16>, flags <type 9>) <type 1>
func SupportsIPv4 () <type -15>
func SupportsIPv6 () <type -15>
func SupportsIPv6MulticastDeliveryOnLoopback () <type -15>
func SupportsRawIPSocket () (? <type -16>, ? <type -15>)
func TestableNetwork (network <esc:0x1> <type -16>) <type -15>
checksum 62F7AF6C88473F0FE97EA88CD0D8A1C3FDE75C5A
v3;
package nettest
pkgpath internal/x/net/nettest
import bytes bytes "bytes"
import binary encoding/binary "encoding/binary"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import rand math/rand "math/rand"
import net net "net"
import runtime runtime "runtime"
import sync sync "sync"
import testing testing "testing"
import time time "time"
init nettest internal..z2fx..z2fnet..z2fnettest..import bytes bytes..import context context..import binary encoding..z2fbinary..import flag flag..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import io io..import ioutil io..z2fioutil..import rand math..z2frand..import net net..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import debug runtime..z2fdebug..import sys runtime..z2finternal..z2fsys..import trace runtime..z2ftrace..import strconv strconv..import sync sync..import syscall syscall..import testing testing..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 1 6 1 10 1 17 1 19 1 22 1 26 2 5 2 6 2 7 2 8 2 10 2 14 2 16 2 17 2 19 2 21 2 22 2 23 2 25 2 26 3 6 3 10 3 16 3 17 3 19 3 21 3 22 3 26 4 5 4 6 4 7 4 8 4 10 4 14 4 16 4 17 4 19 4 21 4 22 4 23 4 25 4 26 5 6 5 7 5 8 5 10 5 14 5 16 5 17 5 19 5 21 5 22 5 23 5 25 5 26 7 6 7 10 7 17 7 19 7 22 7 23 7 25 10 6 10 17 10 19 10 22 11 1 11 6 11 7 11 8 11 10 11 14 11 15 11 16 11 17 11 19 11 21 11 22 11 23 11 25 11 26 12 6 12 17 12 19 12 22 13 2 13 5 13 6 13 7 13 8 13 9 13 10 13 12 13 14 13 16 13 17 13 19 13 21 13 22 13 23 13 25 13 26 14 6 14 7 14 8 14 10 14 17 14 19 14 22 14 23 14 25 15 6 15 7 15 8 15 10 15 14 15 16 15 17 15 19 15 21 15 22 15 23 15 25 15 26 16 6 16 17 16 19 16 21 16 22 16 26 17 6 17 19 18 6 18 7 18 8 18 10 18 14 18 16 18 17 18 19 18 21 18 22 18 23 18 25 18 26 20 2 20 5 20 6 20 7 20 8 20 10 20 14 20 16 20 17 20 19 20 21 20 22 20 23 20 25 20 26 21 6 21 17 21 19 22 6 22 17 22 19 23 6 23 17 23 19 23 22 24 1 24 2 24 4 24 5 24 6 24 7 24 8 24 10 24 14 24 16 24 17 24 18 24 19 24 20 24 21 24 22 24 23 24 25 24 26 25 6 25 17 25 19 25 22 25 23
types 63 2 27 69 27 310 27 66 21 3238 17 73 356 19 525 165 21 31 91 21 36 112 19 75 83 11 19 167 22 92 1346 19 21 22 34 123 19 223 72 612 216 19 32 42 149 89 19 64 30 73 35 19 22 24 21 19 126 196 19 269 128 22 70 35
type 1 "MakePipe" <type 2>
type 2 () (c1 <type 3>, c2 <type 3>, stop <type 24>, err <type -19>)
type 3 "net.Conn" <type 4>
type 4 interface { Close () <type -19>; LocalAddr () <type 5>; Read (b <type 7>) (n <type -11>, err <type -19>); RemoteAddr () <type 5>; SetDeadline (t <type 8>) <type -19>; SetReadDeadline (t <type 8>) <type -19>; SetWriteDeadline (t <type 8>) <type -19>; Write (b <type 7>) (n <type -11>, err <type -19>); }
type 5 "net.Addr" <type 6>
type 6 interface { Network () <type -16>; String () <type -16>; }
type 7 [] <type -20>
type 8 "time.Time" <type 23>
 func (t <esc:0x1> <type 9>) .time.sec () <type -4>
 func (t <type 8>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 8>
 func (t <esc:0x1> <type 8>) .time.date (full <type -15>) (year <type -11>, month <type 10>, day <type -11>, yday <type -11>)
 func (t <esc:0x1> <type 8>) MarshalJSON () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 9>) .time.stripMono ()
 func (t <esc:0x1> <type 8>) MarshalText () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 9>) .time.mono () <type -4>
 func (t <esc:0x1> <type 8>) Sub (u <esc:0x1> <type 8>) <type 11>
 func (t <esc:0x32> <type 8>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x12> <type 8>) UTC () <type 8>
 func (t <esc:0x1> <type 8>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 8>) In (loc <type 12>) <type 8>
 func (t <esc:0x1> <type 8>) Equal (u <esc:0x1> <type 8>) <type -15>
 func (t <esc:0x1> <type 8>) IsZero () <type -15>
 func (t <esc:0x12> <type 8>) Local () <type 8>
 func (t <esc:0x1> <type 8>) YearDay () <type -11>
 func (t <esc:0x1> <type 8>) Unix () <type -4>
 func (t <esc:0x1> <type 8>) Weekday () <type 22>
 func (t <esc:0x1> <type 8>) Date () (year <type -11>, month <type 10>, day <type -11>)
 func (t <esc:0x1> <type 9>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 8>) MarshalBinary () (? <type 7>, ? <type -19>)
 func (t <esc:0x1> <type 8>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 8>) Day () <type -11>
 func (t <esc:0x1> <type 9>) GobDecode (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 8>) After (u <esc:0x1> <type 8>) <type -15>
 func (t <esc:0x1> <type 8>) UnixNano () <type -4>
 func (t <esc:0x1> <type 9>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 8>) Minute () <type -11>
 func (t <esc:0x1> <type 8>) AppendFormat (b <esc:0x12> <type 7>, layout <esc:0x1> <type -16>) <type 7>
 func (t <esc:0x12> <type 8>) Truncate (d <type 11>) <type 8>
 func (t <esc:0x12> <type 8>) Add (d <type 11>) <type 8>
 func (t <esc:0x1> <type 8>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 8>) String () <type -16>
 func (t <esc:0x12> <type 8>) Round (d <type 11>) <type 8>
 func (t <esc:0x1> <type 9>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 8>) Before (u <esc:0x1> <type 8>) <type -15>
 func (t <esc:0x32> <type 8>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 9>) .time.setLoc (loc <type 12>)
 func (t <esc:0x1> <type 9>) UnmarshalText (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 9>) UnmarshalBinary (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 8>) Hour () <type -11>
 func (t <esc:0x1> <type 8>) .time.abs () <type -8>
 func (t <esc:0x1> <type 8>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 8>) Year () <type -11>
 func (t <esc:0x1> <type 9>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 9>) UnmarshalJSON (data <esc:0x1> <type 7>) <type -19>
 func (t <esc:0x1> <type 8>) Second () <type -11>
 func (t <esc:0x1> <type 8>) Month () <type 10>
 func (t <esc:0x12> <type 8>) Location () <type 12>
 func (t <esc:0x1> <type 8>) GobEncode () (? <type 7>, ? <type -19>)
type 9 *<type 8>
type 10 "time.Month" <type -11>
 func (m <type 10>) String () <type -16>
type 11 "time.Duration" <type -4>
 func (d <type 11>) String () <type -16>
 func (d <type 11>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 11>) Seconds () <type -10>
 func (d <type 11>) Minutes () <type -10>
 func (d <type 11>) Hours () <type -10>
 func (d <type 11>) Truncate (m <type 11>) <type 11>
 func (d <type 11>) Round (m <type 11>) <type 11>
type 12 *<type 13>
type 13 "time.Location" <type 14>
 func (l <esc:0x12> <type 12>) .time.get () <type 12>
 func (l <esc:0x22> <type 12>) String () <type -16>
 func (l <esc:0x32> <type 12>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 12>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 12>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 12>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 14 struct { .time.name <type -16>; .time.zone <type 15>; .time.tx <type 18>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 21>; }
type 15 [] <type 16>
type 16 ".time.zone" <type 17>
type 17 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 18 [] <type 19>
type 19 ".time.zoneTrans" <type 20>
type 20 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 21 *<type 16>
type 22 "time.Weekday" <type -11>
 func (d <type 22>) String () <type -16>
type 23 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 12>; }
type 24 ()
type 25 *<type 26>
type 26 "testing.T" <type 28>
 func (t <type 25>) .testing.report ()
 func (t <type 25>) Run (name <type -16>, f <type 27>) <type -15>
 func (t <type 25>) Parallel ()
type 27 (? <type 25>)
type 28 struct { ? <type 29>; .testing.isParallel <type -15>; .testing.context <type 54>; }
type 29 ".testing.common" <type 38>
 func (c <type 30>) Helper ()
 func (c <type 30>) Skipped () <type -15>
 func (c <type 30>) SkipNow ()
 func (c <type 30>) Skip (args <esc:0x9> ...<type 32>)
 func (c <type 30>) Fatalf (format <esc:0x1> <type -16>, args <esc:0x9> ...<type 32>)
 func (c <type 30>) Fatal (args <esc:0x9> ...<type 32>)
 func (c <type 30>) Skipf (format <esc:0x1> <type -16>, args <esc:0x9> ...<type 32>)
 func (c <type 30>) .testing.frameSkip (skip <type -11>) <type 33>
 func (c <type 30>) .testing.decorate (s <type -16>, skip <type -11>) <type -16>
 func (c <type 30>) .testing.flushToParent (format <esc:0x1> <type -16>, args <esc:0x9> ...<type 32>)
 func (c <esc:0x1> <type 30>) .testing.private ()
 func (c <esc:0x22> <type 30>) Name () <type -16>
 func (c <type 30>) Fail ()
 func (c <type 30>) .testing.logDepth (s <type -16>, depth <type -11>)
 func (c <type 30>) .testing.setRan ()
 func (c <type 30>) Failed () <type -15>
 func (c <type 30>) .testing.skip ()
 func (c <type 30>) Error (args <esc:0x9> ...<type 32>)
 func (c <type 30>) FailNow ()
 func (c <type 30>) .testing.log (s <type -16>)
 func (c <type 30>) Errorf (format <esc:0x1> <type -16>, args <esc:0x9> ...<type 32>)
 func (c <type 30>) Log (args <esc:0x9> ...<type 32>)
 func (c <type 30>) Logf (format <esc:0x1> <type -16>, args <esc:0x9> ...<type 32>)
type 30 *<type 29>
type 31 [] <type 32>
type 32 interface { }
type 33 "runtime.Frame" <type 34>
type 34 struct { PC <type -13>; Func <type 35>; Function <type -16>; File <type -16>; Line <type -11>; Entry <type -13>; }
type 35 *<type 36>
type 36 "runtime.Func" <type 37>
 func (f <esc:0x1> <type 35>) FileLine (pc <type -13>) (file <type -16>, line <type -11>)
 func (f <esc:0x1> <type 35>) Entry () <type -13>
 func (f <esc:0x22> <type 35>) Name () <type -16>
type 37 struct { .runtime.name <type -16>; .runtime.entry <type -13>; }
type 38 struct { .testing.mu <type 39>; .testing.output <type 7>; .testing.w <type 47>; .testing.ran <type -15>; .testing.failed <type -15>; .testing.skipped <type -15>; .testing.done <type -15>; .testing.helpers <type 49>; .testing.chatty <type -15>; .testing.finished <type -15>; .testing.hasSub <type -3>; .testing.raceErrors <type -11>; .testing.runner <type -16>; .testing.parent <type 30>; .testing.level <type -11>; .testing.creator <type 51>; .testing.name <type -16>; .testing.start <type 8>; .testing.duration <type 11>; .testing.barrier <type 52>; .testing.signal <type 52>; .testing.sub <type 53>; }
type 39 "sync.RWMutex" <type 43>
 func (rw <esc:0x12> <type 40>) RLocker () ($ret8 <type 41>)
 func (rw <type 40>) Unlock ()
 func (rw <type 40>) Lock ()
 func (rw <type 40>) RUnlock ()
 func (rw <type 40>) RLock ()
type 40 *<type 39>
type 41 "sync.Locker" <type 42>
type 42 interface { Lock (); Unlock (); }
type 43 struct { .sync.w <type 44>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 44 "sync.Mutex" <type 46>
 func (m <type 45>) Lock ()
 func (m <type 45>) Unlock ()
type 45 *<type 44>
type 46 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 47 "io.Writer" <type 48>
type 48 interface { Write (p <type 7>) (n <type -11>, err <type -19>); }
type 49 map [<type -16>] <type 50>
type 50 struct { }
type 51 [] <type -13>
type 52 chan <type -15>
type 53 [] <type 25>
type 54 *<type 55>
type 55 ".testing.testContext" <type 56>
 func (c <type 54>) .testing.release ()
 func (c <type 54>) .testing.waitParallel ()
type 56 struct { .testing.match <type 57>; .testing.mu <type 44>; .testing.startParallel <type 52>; .testing.running <type -11>; .testing.numWaiting <type -11>; .testing.maxParallel <type -11>; }
type 57 *<type 58>
type 58 ".testing.matcher" <type 59>
 func (m <esc:0x1> <type 57>) .testing.unique (parent <type -16>, subname <type -16>) <type -16>
 func (m <type 57>) .testing.fullName (c <esc:0x9> <type 30>, subname <type -16>) (name <type -16>, ok <type -15>, partial <type -15>)
type 59 struct { .testing.filter <type 60>; .testing.matchFunc <type 61>; .testing.mu <type 44>; .testing.subNames <type 62>; }
type 60 [] <type -16>
type 61 (pat <type -16>, str <type -16>) (? <type -15>, ? <type -19>)
type 62 map [<type -16>] <type -4>
func TestConn (t <type 25>, mp <type 1>)
checksum 7EE8FC2E094C8F2E5902AB12864C096E862C605F
v3;
package bidirule
pkgpath internal/x/text/secure/bidirule
import errors errors "errors"
import transform internal/x/text/transform "internal/x/text/transform"
import bidi internal/x/text/unicode/bidi "internal/x/text/unicode/bidi"
import utf8 unicode/utf8 "unicode/utf8"
init bidirule internal..z2fx..z2ftext..z2fsecure..z2fbidirule..import bytes bytes..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import transform internal..z2fx..z2ftext..z2ftransform..import bidi internal..z2fx..z2ftext..z2funicode..z2fbidi..import io io..import log log..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 1 3 1 8 1 12 1 13 1 15 1 18 2 3 2 4 2 5 2 8 2 10 2 11 2 12 2 13 2 14 2 15 2 16 2 17 2 18 4 3 4 8 4 12 4 13 4 15 4 16 4 17 6 1 6 3 6 8 6 12 6 13 6 15 6 18 7 2 7 3 7 4 7 5 7 8 7 9 7 10 7 11 7 12 7 13 7 14 7 15 7 16 7 17 7 18 8 3 8 12 8 13 8 15 9 2 9 3 9 4 9 5 9 8 9 10 9 11 9 12 9 13 9 14 9 15 9 16 9 17 9 18 10 3 10 4 10 5 10 8 10 12 10 13 10 15 10 16 10 17 11 3 11 12 11 13 11 14 11 15 11 18 12 3 12 13 14 3 14 12 14 13 15 3 15 12 15 13 16 3 16 12 16 13 16 15 17 3 17 12 17 13 17 15 17 16
types 7 2 753 21 59 17 168 62
type 1 "Transformer" <type 5>
 func (t <esc:0x1> <type 4>) .internal/x/text/secure/bidirule.isRTL () <type -15>
 func (t <esc:0x1> <type 4>) .internal/x/text/secure/bidirule.isFinal () <type -15>
 func (t <esc:0x1> <type 4>) Reset ()
 func (t <esc:0x1> <type 4>) Transform (dst <esc:0x1> <type 2>, src <esc:0x1> <type 2>, atEOF <type -15>) (nDst <type -11>, nSrc <type -11>, err <type -19>)
 func (t <esc:0x1> <type 4>) Span (src <esc:0x1> <type 2>, atEOF <type -15>) (n <type -11>, err <type -19>)
 func (t <esc:0x1> <type 4>) .internal/x/text/secure/bidirule.advance (s <esc:0x1> <type 2>) (n <type -11>, ok <type -15>)
 func (t <esc:0x1> <type 4>) .internal/x/text/secure/bidirule.advanceString (s <esc:0x1> <type -16>) (n <type -11>, ok <type -15>)
type 2 [] <type -20>
type 3 "internal/x/text/unicode/bidi.Direction" <type -11>
type 4 *<type 1>
type 5 struct { .internal/x/text/secure/bidirule.state <type 6>; .internal/x/text/secure/bidirule.hasRTL <type -15>; .internal/x/text/secure/bidirule.seen <type -6>; }
type 6 ".internal/x/text/secure/bidirule.ruleState" <type -5>
func Direction (b <esc:0x1> <type 2>) <type 3>
func DirectionString (s <esc:0x1> <type -16>) <type 3>
var ErrInvalid <type -19>
func New () <type 4>
func Valid (b <esc:0x1> <type 2>) <type -15>
func ValidString (s <esc:0x1> <type -16>) <type -15>
checksum 811FDE3A1BABE0E66F5B0B8DC739812C6E5E7D50
v3;
package transform
pkgpath internal/x/text/transform
import bytes bytes "bytes"
import errors errors "errors"
import io io "io"
import utf8 unicode/utf8 "unicode/utf8"
init transform internal..z2fx..z2ftext..z2ftransform..import bytes bytes..import cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 1 2 1 3 1 4 1 5 1 6 1 7 3 2 3 4 3 5 3 6 4 2 4 5 6 2 6 4 6 5
types 21 6 244 115 39 31 159 21 19 28 71 18 30 73 18 19 455 34 427 104 141 221
type 1 "NopResetter" <type 14>
 func (? <esc:0x1> <type 1>) Reset () <inl:165>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/x/text/transform/transform.go:109
type 2 "Reader" <type 15>
 func (r <esc:0x10a> <type 10>) Read (p <esc:0x1> <type 6>) (? <type -11>, ? <type -19>)
type 3 "SpanningTransformer" <type 18>
type 4 "Transformer" <type 19>
type 5 "Writer" <type 20>
 func (w <esc:0x9> <type 13>) Write (data <type 6>) (n <type -11>, err <type -19>)
 func (w <esc:0x9> <type 13>) Close () <type -19>
type 6 [] <type -20>
type 7 [] <type 4>
type 8 "io.Reader" <type 9>
type 9 interface { Read (p <type 6>) (n <type -11>, err <type -19>); }
type 10 *<type 2>
type 11 "io.Writer" <type 12>
type 12 interface { Write (p <type 6>) (n <type -11>, err <type -19>); }
type 13 *<type 5>
type 14 struct { }
type 15 struct { .internal/x/text/transform.r <type 8>; .internal/x/text/transform.t <type 4>; .internal/x/text/transform.err <type -19>; .internal/x/text/transform.dst <type 6>; .internal/x/text/transform.dst0 <type -11>; .internal/x/text/transform.dst1 <type -11>; .internal/x/text/transform.src <type 6>; .internal/x/text/transform.src0 <type -11>; .internal/x/text/transform.src1 <type -11>; .internal/x/text/transform.transformComplete <type -15>; }
type 16 (r <type -21>) <type -15>
type 17 ".internal/x/text/transform.removeF" <type 16>
 func (? <esc:0x1> <type 17>) Reset () <inl:165>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/x/text/transform/transform.go:505
 func (t <esc:0x1> <type 17>) Transform (dst <esc:0x1> <type 6>, src <esc:0x1> <type 6>, atEOF <type -15>) (nDst <type -11>, nSrc <type -11>, err <type -19>)
type 18 interface { ? <type 4>; Span (src <type 6>, atEOF <type -15>) (n <type -11>, err <type -19>); }
type 19 interface { Reset (); Transform (dst <type 6>, src <type 6>, atEOF <type -15>) (nDst <type -11>, nSrc <type -11>, err <type -19>); }
type 20 struct { .internal/x/text/transform.w <type 11>; .internal/x/text/transform.t <type 4>; .internal/x/text/transform.dst <type 6>; .internal/x/text/transform.src <type 6>; .internal/x/text/transform.n <type -11>; }
func Append (t <type 4>, dst <type 6>, src <type 6>) (result <type 6>, n <type -11>, err <type -19>)
func Bytes (t <type 4>, b <type 6>) (result <type 6>, n <type -11>, err <type -19>)
func Chain (t <esc:0x9> ...<type 4>) <type 4>
var Discard <type 4>
var ErrEndOfSpan <type -19>
var ErrShortDst <type -19>
var ErrShortSrc <type -19>
func NewReader (r <type 8>, t <type 4>) <type 10>
func NewWriter (w <type 11>, t <type 4>) <type 13>
var Nop <type 3>
func RemoveFunc (f <esc:0x12> <type 16>) ($ret8 <type 4>) <inl:234>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/x/text/transform/transform.go:499
 { //500
  $ret8 = $convert(<type 17>, f) //500
  return //500
 } //0
func String (t <type 4>, s <esc:0x12> <type -16>) (result <type -16>, n <type -11>, err <type -19>)
checksum AD94C41FA070444C39C509FC885C6DFC7F34AE70
v3;
package bidi
pkgpath internal/x/text/unicode/bidi
import list container/list "container/list"
import fmt fmt "fmt"
import log log "log"
import sort sort "sort"
import utf8 unicode/utf8 "unicode/utf8"
init bidi internal..z2fx..z2ftext..z2funicode..z2fbidi..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import log log..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 1 2 1 3 1 4 1 5 1 7 1 8 1 9 1 10 1 11 1 12 1 13 1 14 1 15 3 2 3 5 3 9 3 10 3 12 3 13 3 14 5 2 5 9 5 10 5 12 6 1 6 2 6 3 6 4 6 5 6 7 6 8 6 9 6 10 6 11 6 12 6 13 6 14 6 15 7 2 7 3 7 4 7 5 7 9 7 10 7 12 7 13 7 14 8 2 8 9 8 10 8 11 8 12 8 15 9 2 9 10 11 2 11 9 11 10 12 2 12 9 12 10 13 2 13 9 13 10 13 12 14 2 14 9 14 10 14 12 14 13
types 19 8 117 30 26 190 609 250 246 21 19 22 19 58 19 18 18 20 112 18
type 1 "Class" <type -12>
 func (c <type 1>) .internal/x/text/unicode/bidi.in (set <esc:0x1> ...<type 1>) <type -15>
type 2 "Direction" <type -11>
type 3 "Option" <type 10>
type 4 "Ordering" <type 13>
 func (o <esc:0x1> <type 14>) Direction () <type 2>
 func (o <esc:0x1> <type 14>) NumRuns () <type -11>
 func (o <esc:0x1> <type 14>) Run (i <type -11>) <type 7>
type 5 "Paragraph" <type 13>
 func (p <esc:0x1> <type 15>) SetBytes (b <esc:0x1> <type 8>, opts <esc:0x1> ...<type 3>) (n <type -11>, err <type -19>)
 func (p <esc:0x1> <type 15>) SetString (s <esc:0x1> <type -16>, opts <esc:0x1> ...<type 3>) (n <type -11>, err <type -19>)
 func (p <esc:0x1> <type 15>) IsLeftToRight () <type -15>
 func (p <esc:0x1> <type 15>) Direction () <type 2>
 func (p <esc:0x1> <type 15>) RunAt (pos <type -11>) <type 7>
 func (p <esc:0x1> <type 15>) Order () (? <type 4>, ? <type -19>)
 func (p <esc:0x1> <type 15>) Line (start <type -11>, end <type -11>) (? <type 4>, ? <type -19>)
type 6 "Properties" <type 17>
 func (p <type 6>) Class () <type 1>
 func (p <type 6>) IsBracket () <type -15>
 func (p <type 6>) IsOpeningBracket () <type -15>
 func (p <type 6>) .internal/x/text/unicode/bidi.reverseBracket (r <type -21>) <type -21>
type 7 "Run" <type 13>
 func (r <esc:0x1> <type 18>) String () <type -16>
 func (r <esc:0x1> <type 18>) Bytes () <type 8>
 func (r <esc:0x1> <type 18>) Direction () <type 2>
 func (r <esc:0x1> <type 18>) Pos () (start <type -11>, end <type -11>)
type 8 [] <type -20>
type 9 [] <type 1>
type 10 (? <type 11>)
type 11 *<type 12>
type 12 ".internal/x/text/unicode/bidi.options" <type 13>
type 13 struct { }
type 14 *<type 4>
type 15 *<type 5>
type 16 [] <type 3>
type 17 struct { .internal/x/text/unicode/bidi.entry <type -5>; .internal/x/text/unicode/bidi.last <type -5>; }
type 18 *<type 7>
const AL <type 1> = 13 
const AN <type 1> = 5 
func AppendReverse (out <esc:0x1> <type 8>, in <esc:0x1> <type 8>) <type 8>
const B <type 1> = 7 
const BN <type 1> = 11 
const CS <type 1> = 6 
const Control <type 1> = 14 
func DefaultDirection (d <type 2>) <type 3>
const EN <type 1> = 2 
const ES <type 1> = 3 
const ET <type 1> = 4 
const FSI <type 1> = 23 
const L <type 1> = 0 
const LRE <type 1> = 18 
const LRI <type 1> = 21 
const LRO <type 1> = 16 
const LeftToRight <type 2> = 0 
func Lookup (s <esc:0x1> <type 8>) (p <type 6>, sz <type -11>)
func LookupRune (r <type -21>) (p <type 6>, size <type -11>)
func LookupString (s <esc:0x1> <type -16>) (p <type 6>, sz <type -11>)
const Mixed <type 2> = 2 
const NSM <type 1> = 12 
const Neutral <type 2> = 3 
const ON <type 1> = 10 
const PDF <type 1> = 20 
const PDI <type 1> = 24 
const R <type 1> = 1 
const RLE <type 1> = 19 
const RLI <type 1> = 22 
const RLO <type 1> = 17 
func ReverseString (s <esc:0x1> <type -16>) <type -16>
const RightToLeft <type 2> = 1 
const S <type 1> = 8 
const UnicodeVersion = "10.0.0"
const WS <type 1> = 9 
checksum 8A2F3BCBC079D3014AEED3E4176F1D3BB4ED6127
v3;
package norm
pkgpath internal/x/text/unicode/norm
import fmt fmt "fmt"
import transform internal/x/text/transform "internal/x/text/transform"
import io io "io"
import utf8 unicode/utf8 "unicode/utf8"
init norm internal..z2fx..z2ftext..z2funicode..z2fnorm..import bytes bytes..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import transform internal..z2fx..z2ftext..z2ftransform..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 1 3 1 7 1 10 1 11 1 13 1 16 2 3 2 4 2 5 2 7 2 8 2 9 2 10 2 11 2 12 2 13 2 14 2 15 2 16 4 3 4 7 4 10 4 11 4 13 4 14 4 15 6 1 6 3 6 7 6 10 6 11 6 13 6 16 7 3 7 10 7 11 7 13 8 3 8 4 8 5 8 7 8 10 8 11 8 13 8 14 8 15 9 3 9 10 9 11 9 12 9 13 9 16 10 3 10 11 12 3 12 10 12 11 13 3 13 10 13 11 14 3 14 10 14 11 14 13 15 3 15 10 15 11 15 13 15 14
types 37 4 2078 573 1016 21 1134 17 110 28 72 35 47 30 43 30 72 340 2003 19 33 61 525 23 26 395 19 59 222 19 268 61 44 59 31 18 342 57
type 1 "Form" <type -11>
 func (f <type 1>) Properties (s <esc:0x1> <type 4>) <type 3>
 func (f <type 1>) PropertiesString (s <esc:0x1> <type -16>) <type 3>
 func (f <type 1>) Bytes (b <type 4>) <type 4>
 func (f <type 1>) String (s <type -16>) <type -16>
 func (f <type 1>) IsNormal (b <type 4>) <type -15>
 func (f <type 1>) IsNormalString (s <type -16>) <type -15>
 func (f <type 1>) Append (out <type 4>, src ...<type -20>) <type 4>
 func (f <type 1>) .internal/x/text/unicode/norm.doAppend (out <type 4>, src <type 5>, n <type -11>) <type 4>
 func (f <type 1>) AppendString (out <type 4>, src <type -16>) <type 4>
 func (f <type 1>) QuickSpan (b <type 4>) <type -11>
 func (f <type 1>) Span (b <type 4>, atEOF <type -15>) (n <type -11>, err <type -19>)
 func (f <type 1>) SpanString (s <type -16>, atEOF <type -15>) (n <type -11>, err <type -19>)
 func (f <type 1>) QuickSpanString (s <type -16>) <type -11>
 func (f <type 1>) FirstBoundary (b <type 4>) <type -11>
 func (f <type 1>) .internal/x/text/unicode/norm.firstBoundary (src <type 5>, nsrc <type -11>) <type -11>
 func (f <type 1>) FirstBoundaryInString (s <type -16>) <type -11>
 func (f <type 1>) NextBoundary (b <type 4>, atEOF <type -15>) <type -11>
 func (f <type 1>) NextBoundaryInString (s <type -16>, atEOF <type -15>) <type -11>
 func (f <type 1>) .internal/x/text/unicode/norm.nextBoundary (src <type 5>, nsrc <type -11>, atEOF <type -15>) <type -11>
 func (f <type 1>) LastBoundary (b <type 4>) <type -11>
 func (f <type 1>) Writer (w <type 8>) <type 10>
 func (f <type 1>) Reader (r <type 14>) <type 14>
 func (? <esc:0x1> <type 1>) Reset () <inl:167>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/internal/x/text/unicode/norm/transform.go:16
 func (f <type 1>) Transform (dst <type 4>, src <type 4>, atEOF <type -15>) (nDst <type -11>, nSrc <type -11>, err <type -19>)
 func (f <type 1>) .internal/x/text/unicode/norm.transform (dst <type 4>, src <type 4>, atEOF <type -15>) (nDst <type -11>, nSrc <type -11>, err <type -19>)
type 2 "Iter" <type 16>
 func (i <esc:0x9> <type 34>) Init (f <type 1>, src <type 4>)
 func (i <esc:0x9> <type 34>) InitString (f <type 1>, src <type -16>)
 func (i <esc:0x9> <type 34>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (i <esc:0x12> <type 34>) .internal/x/text/unicode/norm.returnSlice (a <type -11>, b <type -11>) <type 4>
 func (i <esc:0x1> <type 34>) Pos () <type -11>
 func (i <esc:0x1> <type 34>) .internal/x/text/unicode/norm.setDone ()
 func (i <esc:0x1> <type 34>) Done () <type -15>
 func (i <type 34>) Next () <type 4>
type 3 "Properties" <type 35>
 func (p <type 3>) BoundaryBefore () <type -15>
 func (p <type 3>) BoundaryAfter () <type -15>
 func (p <type 3>) .internal/x/text/unicode/norm.isYesC () <type -15>
 func (p <type 3>) .internal/x/text/unicode/norm.isYesD () <type -15>
 func (p <type 3>) .internal/x/text/unicode/norm.combinesForward () <type -15>
 func (p <type 3>) .internal/x/text/unicode/norm.combinesBackward () <type -15>
 func (p <type 3>) .internal/x/text/unicode/norm.hasDecomposition () <type -15>
 func (p <type 3>) .internal/x/text/unicode/norm.isInert () <type -15>
 func (p <type 3>) .internal/x/text/unicode/norm.multiSegment () <type -15>
 func (p <type 3>) .internal/x/text/unicode/norm.nLeadingNonStarters () <type -5>
 func (p <type 3>) .internal/x/text/unicode/norm.nTrailingNonStarters () <type -5>
 func (p <type 3>) Decomposition () <type 4>
 func (p <type 3>) Size () <type -11>
 func (p <type 3>) CCC () <type -5>
 func (p <type 3>) LeadCCC () <type -5>
 func (p <type 3>) TrailCCC () <type -5>
type 4 [] <type -20>
type 5 ".internal/x/text/unicode/norm.input" <type 7>
 func (in <esc:0x1> <type 6>) .internal/x/text/unicode/norm.setBytes (str <type 4>)
 func (in <esc:0x1> <type 6>) .internal/x/text/unicode/norm.setString (str <type -16>)
 func (in <esc:0x1> <type 6>) .internal/x/text/unicode/norm._byte (p <type -11>) <type -20>
 func (in <esc:0x1> <type 6>) .internal/x/text/unicode/norm.skipASCII (p <type -11>, max <type -11>) <type -11>
 func (in <esc:0x1> <type 6>) .internal/x/text/unicode/norm.skipContinuationBytes (p <type -11>) <type -11>
 func (in <esc:0x1> <type 6>) .internal/x/text/unicode/norm.appendSlice (buf <esc:0x12> <type 4>, b <type -11>, e <type -11>) <type 4>
 func (in <esc:0x1> <type 6>) .internal/x/text/unicode/norm.copySlice (buf <esc:0x1> <type 4>, b <type -11>, e <type -11>) <type -11>
 func (in <esc:0x1> <type 6>) .internal/x/text/unicode/norm.charinfoNFC (p <type -11>) (? <type -6>, ? <type -11>)
 func (in <esc:0x1> <type 6>) .internal/x/text/unicode/norm.charinfoNFKC (p <type -11>) (? <type -6>, ? <type -11>)
 func (in <esc:0x1> <type 6>) .internal/x/text/unicode/norm.hangul (p <type -11>) (r <type -21>)
type 6 *<type 5>
type 7 struct { .internal/x/text/unicode/norm.str <type -16>; .internal/x/text/unicode/norm.bytes <type 4>; }
type 8 "io.Writer" <type 9>
type 9 interface { Write (p <type 4>) (n <type -11>, err <type -19>); }
type 10 "io.WriteCloser" <type 11>
type 11 interface { ? <type 8>; ? <type 12>; }
type 12 "io.Closer" <type 13>
type 13 interface { Close () <type -19>; }
type 14 "io.Reader" <type 15>
type 15 interface { Read (p <type 4>) (n <type -11>, err <type -19>); }
type 16 struct { .internal/x/text/unicode/norm.rb <type 17>; .internal/x/text/unicode/norm.buf <type 23>; .internal/x/text/unicode/norm.info <type 3>; .internal/x/text/unicode/norm.next <type 32>; .internal/x/text/unicode/norm.asciiF <type 32>; .internal/x/text/unicode/norm.p <type -11>; .internal/x/text/unicode/norm.multiSeg <type 4>; }
type 17 ".internal/x/text/unicode/norm.reorderBuffer" <type 21>
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.init (f <type 1>, src <type 4>)
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.initString (f <type 1>, src <type -16>)
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.setFlusher (out <type 4>, f <type 19>)
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.reset ()
 func (rb <type 18>) .internal/x/text/unicode/norm.doFlush () <type -15>
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.flush (out <esc:0x12> <type 4>) <type 4>
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.flushCopy (buf <esc:0x1> <type 4>) <type -11>
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.insertOrdered (info <type 3>)
 func (rb <type 18>) .internal/x/text/unicode/norm.insertFlush (src <esc:0x1> <type 5>, i <type -11>, info <type 3>) <type 20>
 func (rb <type 18>) .internal/x/text/unicode/norm.insertUnsafe (src <esc:0x1> <type 5>, i <type -11>, info <type 3>)
 func (rb <type 18>) .internal/x/text/unicode/norm.insertDecomposed (dcomp <type 4>) <type 20>
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.insertSingle (src <esc:0x1> <type 5>, i <type -11>, info <type 3>)
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.insertCGJ ()
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.appendRune (r <type -21>)
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.assignRune (pos <type -11>, r <type -21>)
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.runeAt (n <type -11>) <type -21>
 func (rb <esc:0x12> <type 18>) .internal/x/text/unicode/norm.bytesAt (n <type -11>) <type 4>
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.decomposeHangul (r <type -21>)
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.combineHangul (s <type -11>, i <type -11>, k <type -11>)
 func (rb <esc:0x1> <type 18>) .internal/x/text/unicode/norm.compose ()
type 18 *<type 17>
type 19 (? <type 18>) <type -15>
type 20 ".internal/x/text/unicode/norm.insertErr" <type -11>
type 21 struct { .internal/x/text/unicode/norm.rune <type 22>; .internal/x/text/unicode/norm.byte <type 23>; .internal/x/text/unicode/norm.nbyte <type -5>; .internal/x/text/unicode/norm.ss <type 24>; .internal/x/text/unicode/norm.nrune <type -11>; .internal/x/text/unicode/norm.f <type 27>; .internal/x/text/unicode/norm.src <type 5>; .internal/x/text/unicode/norm.nsrc <type -11>; .internal/x/text/unicode/norm.tmpBytes <type 5>; .internal/x/text/unicode/norm.out <type 4>; .internal/x/text/unicode/norm.flushF <type 19>; }
type 22 [32 ] <type 3>
type 23 [128 ] <type -20>
type 24 ".internal/x/text/unicode/norm.streamSafe" <type -5>
 func (ss <esc:0x1> <type 25>) .internal/x/text/unicode/norm.first (p <type 3>)
 func (ss <esc:0x1> <type 25>) .internal/x/text/unicode/norm.next (p <type 3>) <type 26>
 func (ss <esc:0x1> <type 25>) .internal/x/text/unicode/norm.backwards (p <type 3>) <type 26>
 func (ss <type 24>) .internal/x/text/unicode/norm.isMax () <type -15>
type 25 *<type 24>
type 26 ".internal/x/text/unicode/norm.ssState" <type -11>
type 27 ".internal/x/text/unicode/norm.formInfo" <type 29>
 func (f <esc:0x1> <type 28>) .internal/x/text/unicode/norm.quickSpan (src <type 5>, i <type -11>, end <type -11>, atEOF <type -15>) (n <type -11>, ok <type -15>)
type 28 *<type 27>
type 29 struct { .internal/x/text/unicode/norm.form <type 1>; .internal/x/text/unicode/norm.composing <type -15>; .internal/x/text/unicode/norm.compatibility <type -15>; .internal/x/text/unicode/norm.info <type 30>; .internal/x/text/unicode/norm.nextMain <type 32>; }
type 30 ".internal/x/text/unicode/norm.lookupFunc" <type 31>
type 31 (b <type 5>, i <type -11>) <type 3>
type 32 ".internal/x/text/unicode/norm.iterFunc" <type 33>
type 33 (? <type 34>) <type 4>
type 34 *<type 2>
type 35 struct { .internal/x/text/unicode/norm.pos <type -5>; .internal/x/text/unicode/norm.size <type -5>; .internal/x/text/unicode/norm.ccc <type -5>; .internal/x/text/unicode/norm.tccc <type -5>; .internal/x/text/unicode/norm.nLead <type -5>; .internal/x/text/unicode/norm.flags <type 36>; .internal/x/text/unicode/norm.index <type -6>; }
type 36 ".internal/x/text/unicode/norm.qcInfo" <type -5>
const GraphemeJoiner = "\xCD\x8F"
const MaxSegmentSize = 128 
const MaxTransformChunkSize = 155 
const NFC <type 1> = 0 
const NFD <type 1> = 1 
const NFKC <type 1> = 2 
const NFKD <type 1> = 3 
const Version = "10.0.0"
checksum 1681E806DA2CCD22C98CA14D6865E4E2BD00F6A9
v3;
package xcoff
pkgpath internal/xcoff
import dwarf debug/dwarf "debug/dwarf"
import binary encoding/binary "encoding/binary"
import fmt fmt "fmt"
import io io "io"
import os os "os"
import strconv strconv "strconv"
import strings strings "strings"
init dwarf debug..z2fdwarf..import binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import path path..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 1 3 1 6 1 9 1 10 1 11 1 12 1 13 1 16 2 3 2 4 2 5 2 6 2 7 2 9 2 10 2 11 2 12 2 13 2 14 2 15 2 16 4 3 4 6 4 10 4 11 4 13 4 14 4 15 6 3 6 10 6 11 6 13 7 3 7 4 7 5 7 6 7 10 7 11 7 13 7 14 7 15 8 3 8 6 8 10 8 11 8 13 8 16 9 3 9 10 9 11 9 12 9 13 9 16 10 3 10 11 12 3 12 10 12 11 13 3 13 10 13 11 14 3 14 10 14 11 14 13 15 3 15 10 15 11 15 13 15 14
types 153 32 164 33 30 30 28 28 29 29 34 33 633 32 34 34 36 36 36 36 36 28 34 27 29 29 95 35 37 37 30 30 28 84 21 19 30 43 18 19 53 151 174 110 112 75 24 108 92 35 152 21 19 21 19 22 22 19 975 39 37 84 19 151 56 44 173 19 162 121 19 38 67 22 123 90 120 21 34 19 21 19 144 48 21 252 19 227 45 34 40 111 21 40 106 40 19 527 204 1020 19 229 48 255 46 162 21 803 48 154 44 270 21 43 73 21 642 23 23 23 24 428 35 36 21 44 122 22 45 150 150 57 170 208 146 148 64 21 369 98 34 91 53 146 91 91 97 22 131 203 219 128 130 142
type 1 "Archive" <type 32>
 func (a <esc:0x9> <type 37>) Close () <type -19>
 func (arch <esc:0x9> <type 37>) GetFile (name <type -16>) (? <type 38>, ? <type -19>)
type 2 "ArchiveHeader" <type 39>
type 3 "AuxCSect32" <type 40>
type 4 "AuxCSect64" <type 41>
type 5 "AuxFcn32" <type 42>
type 6 "AuxFcn64" <type 43>
type 7 "AuxFile64" <type 44>
type 8 "AuxSect64" <type 46>
type 9 "AuxiliaryCSect" <type 47>
type 10 "AuxiliaryFcn" <type 48>
type 11 "File" <type 49>
 func (f <esc:0x9> <type 38>) Close () <type -19>
 func (f <esc:0x32> <type 38>) Section (name <esc:0x1> <type -16>) <type 51>
 func (f <esc:0x32> <type 38>) SectionByType (typ <type -7>) <type 51>
 func (f <esc:0x9> <type 38>) CSect (name <esc:0x1> <type -16>) <type 54>
 func (f <esc:0x9> <type 38>) DWARF () (? <type 56>, ? <type -19>)
 func (f <esc:0x1> <type 38>) .internal/xcoff.readImportIDs (s <esc:0x9> <type 51>) (? <type 55>, ? <type -19>)
 func (f <esc:0x9> <type 38>) ImportedSymbols () (? <type 126>, ? <type -19>)
 func (f <esc:0x9> <type 38>) ImportedLibraries () (? <type 55>, ? <type -19>)
type 12 "FileHeader" <type 127>
type 13 "FileHeader32" <type 128>
type 14 "FileHeader64" <type 129>
type 15 "ImportedSymbol" <type 130>
type 16 "LoaderHeader32" <type 131>
type 17 "LoaderHeader64" <type 132>
type 18 "LoaderSymbol32" <type 133>
type 19 "LoaderSymbol64" <type 134>
type 20 "Member" <type 135>
type 21 "MemberHeader" <type 141>
type 22 "Reloc" <type 142>
type 23 "Reloc32" <type 143>
type 24 "Reloc64" <type 144>
type 25 "Section" <type 145>
 func (s <esc:0x9> <type 51>) Data () (? <type 54>, ? <type -19>)
type 26 "SectionHeader" <type 147>
type 27 "SectionHeader32" <type 148>
type 28 "SectionHeader64" <type 149>
type 29 "SymEnt32" <type 150>
type 30 "SymEnt64" <type 151>
type 31 "Symbol" <type 152>
type 32 struct { ? <type 2>; Members <type 33>; .internal/xcoff.closer <type 35>; }
type 33 [] <type 34>
type 34 *<type 20>
type 35 "io.Closer" <type 36>
type 36 interface { Close () <type -19>; }
type 37 *<type 1>
type 38 *<type 11>
type 39 struct { .internal/xcoff.magic <type -16>; }
type 40 struct { Xscnlen <type -3>; Xparmhash <type -7>; Xsnhash <type -6>; Xsmtyp <type -5>; Xsmclas <type -5>; Xstab <type -7>; Xsnstab <type -6>; }
type 41 struct { Xscnlenlo <type -7>; Xparmhash <type -7>; Xsnhash <type -6>; Xsmtyp <type -5>; Xsmclas <type -5>; Xscnlenhi <type -3>; Xpad <type -5>; Xauxtype <type -5>; }
type 42 struct { Xexptr <type -7>; Xfsize <type -7>; Xlnnoptr <type -7>; Xendndx <type -7>; Xpad <type -6>; }
type 43 struct { Xlnnoptr <type -8>; Xfsize <type -7>; Xendndx <type -7>; Xpad <type -5>; Xauxtype <type -5>; }
type 44 struct { Xfname <type 45>; Xftype <type -5>; Xauxtype <type -5>; }
type 45 [8 ] <type -20>
type 46 struct { Xscnlen <type -8>; Xnreloc <type -8>; .internal/xcoff.pad <type -5>; Xauxtype <type -5>; }
type 47 struct { Length <type -4>; StorageMappingClass <type -11>; SymbolType <type -11>; }
type 48 struct { Size <type -4>; }
type 49 struct { ? <type 12>; Sections <type 50>; Symbols <type 52>; StringTable <type 54>; LibraryPaths <type 55>; .internal/xcoff.closer <type 35>; }
type 50 [] <type 51>
type 51 *<type 25>
type 52 [] <type 53>
type 53 *<type 31>
type 54 [] <type -20>
type 55 [] <type -16>
type 56 *<type 57>
type 57 "debug/dwarf.Data" <type 120>
 func (d <esc:0x1> <type 56>) .debug/dwarf.offsetToUnit (off <type 58>) <type -11>
 func (d <type 56>) .debug/dwarf.sigToType (sig <type -8>) (? <type 59>, ? <type -19>)
 func (d <type 56>) .debug/dwarf.parseTypes (name <type -16>, types <type 54>) <type -19>
 func (d <type 56>) .debug/dwarf.readType (name <type -16>, r <type 64>, off <type 58>, typeCache <type 77>, typedefs <type 78>) (? <type 59>, ? <type -19>)
 func (d <type 56>) AddTypes (name <type -16>, types <type 54>) <type -19>
 func (d <type 56>) .debug/dwarf.parseUnits () (? <type 83>, ? <type -19>)
 func (d <type 56>) Reader () <type 95>
 func (d <type 56>) Type (off <type 58>) (? <type 59>, ? <type -19>)
 func (d <type 56>) LineReader (cu <type 66>) (? <type 105>, ? <type -19>)
 func (d <type 56>) Ranges (e <esc:0x1> <type 66>) (? <type 118>, ? <type -19>)
 func (d <type 56>) .debug/dwarf.parseAbbrev (off <type -8>, vers <type -11>) (? <type 87>, ? <type -19>)
type 58 "debug/dwarf.Offset" <type -7>
type 59 "debug/dwarf.Type" <type 60>
type 60 interface { Common () <type 61>; Size () <type -4>; String () <type -16>; }
type 61 *<type 62>
type 62 "debug/dwarf.CommonType" <type 63>
 func (c <esc:0x1> <type 61>) Size () <type -4>
 func (c <esc:0x12> <type 61>) Common () ($ret51 <type 61>)
type 63 struct { ByteSize <type -4>; Name <type -16>; }
type 64 ".debug/dwarf.typeReader" <type 65>
type 65 interface { AddressSize () <type -11>; Next () (? <type 66>, ? <type -19>); Seek (? <type 58>); .debug/dwarf.clone () <type 64>; .debug/dwarf.offset () <type 58>; }
type 66 *<type 67>
type 67 "debug/dwarf.Entry" <type 74>
 func (e <esc:0x22> <type 66>) AttrField (a <type 68>) <type 69>
 func (e <esc:0x32> <type 66>) Val (a <type 68>) <type 72>
type 68 "debug/dwarf.Attr" <type -7>
 func (a <type 68>) GoString () <type -16>
 func (i <type 68>) String () <type -16>
type 69 *<type 70>
type 70 "debug/dwarf.Field" <type 71>
type 71 struct { Attr <type 68>; Val <type 72>; Class <type 73>; }
type 72 interface { }
type 73 "debug/dwarf.Class" <type -11>
 func (i <type 73>) GoString () <type -16>
 func (i <type 73>) String () <type -16>
type 74 struct { Offset <type 58>; Tag <type 75>; Children <type -15>; Field <type 76>; }
type 75 "debug/dwarf.Tag" <type -7>
 func (i <type 75>) String () <type -16>
 func (t <type 75>) GoString () <type -16>
type 76 [] <type 70>
type 77 map [<type 58>] <type 59>
type 78 *<type 79>
type 79 [] <type 80>
type 80 *<type 81>
type 81 "debug/dwarf.TypedefType" <type 82>
 func (t <esc:0x9> <type 80>) Size () <type -4>
 func (t <esc:0x22> <type 80>) String () <type -16>
type 82 struct { ? <type 62>; Type <type 59>; }
type 83 [] <type 84>
type 84 ".debug/dwarf.unit" <type 86>
 func (u <esc:0x1> <type 85>) .debug/dwarf.addrsize () <type -11>
 func (u <esc:0x1> <type 85>) .debug/dwarf.dwarf64 () (? <type -15>, ? <type -15>)
 func (u <esc:0x1> <type 85>) .debug/dwarf.version () <type -11>
type 85 *<type 84>
type 86 struct { .debug/dwarf.base <type 58>; .debug/dwarf.off <type 58>; .debug/dwarf.data <type 54>; .debug/dwarf.atable <type 87>; .debug/dwarf.asize <type -11>; .debug/dwarf.vers <type -11>; .debug/dwarf.is64 <type -15>; }
type 87 ".debug/dwarf.abbrevTable" <type 88>
type 88 map [<type -7>] <type 89>
type 89 ".debug/dwarf.abbrev" <type 90>
type 90 struct { .debug/dwarf.tag <type 75>; .debug/dwarf.children <type -15>; .debug/dwarf.field <type 91>; }
type 91 [] <type 92>
type 92 ".debug/dwarf.afield" <type 93>
type 93 struct { .debug/dwarf.attr <type 68>; .debug/dwarf.fmt <type 94>; .debug/dwarf.class <type 73>; }
type 94 ".debug/dwarf.format" <type -7>
type 95 *<type 96>
type 96 "debug/dwarf.Reader" <type 97>
 func (r <esc:0x10a> <type 95>) SeekPC (pc <type -8>) (? <type 66>, ? <type -19>)
 func (r <esc:0x1> <type 95>) .debug/dwarf.offset () <type 58>
 func (r <esc:0x9> <type 95>) SkipChildren ()
 func (r <esc:0x9> <type 95>) .debug/dwarf.clone () <type 64>
 func (r <esc:0x10a> <type 95>) Next () (? <type 66>, ? <type -19>)
 func (r <esc:0x9> <type 95>) .debug/dwarf.maybeNextUnit ()
 func (r <esc:0x9> <type 95>) Seek (off <type 58>)
 func (r <esc:0x1> <type 95>) AddressSize () <type -11>
type 97 struct { .debug/dwarf.b <type 98>; .debug/dwarf.d <type 56>; .debug/dwarf.err <type -19>; .debug/dwarf.unit <type -11>; .debug/dwarf.lastChildren <type -15>; .debug/dwarf.lastSibling <type 58>; }
type 98 ".debug/dwarf.buf" <type 100>
 func (b <esc:0x9> <type 99>) .debug/dwarf.uint8 () <type -5>
 func (b <esc:0x9> <type 99>) .debug/dwarf.entry (atab <esc:0x1> <type 87>, ubase <type 58>) <type 66>
 func (b <esc:0x9> <type 99>) .debug/dwarf.uint64 () <type -8>
 func (b <esc:0x1> <type 99>) .debug/dwarf.uint () <type -8>
 func (b <esc:0x9> <type 99>) .debug/dwarf.skip (n <type -11>)
 func (b <esc:0x9> <type 99>) .debug/dwarf.string () <type -16>
 func (b <esc:0x9> <type 99>) .debug/dwarf.error (s <type -16>)
 func (b <esc:0x2a> <type 99>) .debug/dwarf.bytes (n <type -11>) <type 54>
 func (b <esc:0x9> <type 99>) .debug/dwarf.uint16 () <type -6>
 func (b <esc:0x9> <type 99>) .debug/dwarf.uint32 () <type -7>
 func (b <esc:0x1> <type 99>) .debug/dwarf.varint () (c <type -8>, bits <type -12>)
 func (b <esc:0x1> <type 99>) .debug/dwarf.int () <type -4>
 func (b <esc:0x9> <type 99>) .debug/dwarf.addr () <type -8>
 func (b <esc:0x9> <type 99>) .debug/dwarf.unitLength () (length <type 58>, dwarf64 <type -15>)
type 99 *<type 98>
type 100 struct { .debug/dwarf.dwarf <type 56>; .debug/dwarf.order <type 101>; .debug/dwarf.format <type 103>; .debug/dwarf.name <type -16>; .debug/dwarf.off <type 58>; .debug/dwarf.data <type 54>; .debug/dwarf.err <type -19>; }
type 101 "encoding/binary.ByteOrder" <type 102>
type 102 interface { PutUint16 (? <type 54>, ? <type -6>); PutUint32 (? <type 54>, ? <type -7>); PutUint64 (? <type 54>, ? <type -8>); String () <type -16>; Uint16 (? <type 54>) <type -6>; Uint32 (? <type 54>) <type -7>; Uint64 (? <type 54>) <type -8>; }
type 103 ".debug/dwarf.dataFormat" <type 104>
type 104 interface { .debug/dwarf.addrsize () <type -11>; .debug/dwarf.dwarf64 () (dwarf64 <type -15>, isKnown <type -15>); .debug/dwarf.version () <type -11>; }
type 105 *<type 106>
type 106 "debug/dwarf.LineReader" <type 115>
 func (r <esc:0x9> <type 105>) .debug/dwarf.resetState ()
 func (r <esc:0x9> <type 105>) Reset ()
 func (r <esc:0x9> <type 105>) Seek (pos <type 107>)
 func (r <esc:0x1> <type 105>) .debug/dwarf.advancePC (opAdvance <type -11>)
 func (r <esc:0x9> <type 105>) .debug/dwarf.step (entry <esc:0x1> <type 114>) <type -15>
 func (r <esc:0x22> <type 105>) Tell () <type 107>
 func (r <esc:0x2a> <type 105>) Next (entry <esc:0x1> <type 114>) <type -19>
 func (r <esc:0x2a> <type 105>) SeekPC (pc <type -8>, entry <esc:0x1> <type 114>) <type -19>
 func (r <esc:0x9> <type 105>) .debug/dwarf.updateFile ()
 func (r <esc:0x10a> <type 105>) .debug/dwarf.readFileEntry () (? <type -15>, ? <type -19>)
 func (r <esc:0x2a> <type 105>) .debug/dwarf.readHeader () <type -19>
type 107 "debug/dwarf.LineReaderPos" <type 108>
type 108 struct { .debug/dwarf.off <type 58>; .debug/dwarf.numFileEntries <type -11>; .debug/dwarf.state <type 109>; .debug/dwarf.fileIndex <type -11>; }
type 109 "debug/dwarf.LineEntry" <type 110>
type 110 struct { Address <type -8>; OpIndex <type -11>; File <type 111>; Line <type -11>; Column <type -11>; IsStmt <type -15>; BasicBlock <type -15>; PrologueEnd <type -15>; EpilogueBegin <type -15>; ISA <type -11>; Discriminator <type -11>; EndSequence <type -15>; }
type 111 *<type 112>
type 112 "debug/dwarf.LineFile" <type 113>
type 113 struct { Name <type -16>; Mtime <type -8>; Length <type -11>; }
type 114 *<type 109>
type 115 struct { .debug/dwarf.buf <type 98>; .debug/dwarf.section <type 54>; .debug/dwarf.version <type -6>; .debug/dwarf.minInstructionLength <type -11>; .debug/dwarf.maxOpsPerInstruction <type -11>; .debug/dwarf.defaultIsStmt <type -15>; .debug/dwarf.lineBase <type -11>; .debug/dwarf.lineRange <type -11>; .debug/dwarf.opcodeBase <type -11>; .debug/dwarf.opcodeLengths <type 116>; .debug/dwarf.directories <type 55>; .debug/dwarf.fileEntries <type 117>; .debug/dwarf.programOffset <type 58>; .debug/dwarf.endOffset <type 58>; .debug/dwarf.initialFileEntries <type -11>; .debug/dwarf.state <type 109>; .debug/dwarf.fileIndex <type -11>; }
type 116 [] <type -11>
type 117 [] <type 111>
type 118 [] <type 119>
type 119 [2 ] <type -8>
type 120 struct { .debug/dwarf.abbrev <type 54>; .debug/dwarf.aranges <type 54>; .debug/dwarf.frame <type 54>; .debug/dwarf.info <type 54>; .debug/dwarf.line <type 54>; .debug/dwarf.pubnames <type 54>; .debug/dwarf.ranges <type 54>; .debug/dwarf.str <type 54>; .debug/dwarf.abbrevCache <type 121>; .debug/dwarf.order <type 101>; .debug/dwarf.typeCache <type 77>; .debug/dwarf.typeSigs <type 122>; .debug/dwarf.unit <type 83>; }
type 121 map [<type -8>] <type 87>
type 122 map [<type -8>] <type 123>
type 123 *<type 124>
type 124 ".debug/dwarf.typeUnit" <type 125>
type 125 struct { ? <type 84>; .debug/dwarf.toff <type 58>; .debug/dwarf.name <type -16>; .debug/dwarf.cache <type 59>; }
type 126 [] <type 15>
type 127 struct { TargetMachine <type -6>; }
type 128 struct { Fmagic <type -6>; Fnscns <type -6>; Ftimedat <type -3>; Fsymptr <type -7>; Fnsyms <type -3>; Fopthdr <type -6>; Fflags <type -6>; }
type 129 struct { Fmagic <type -6>; Fnscns <type -6>; Ftimedat <type -3>; Fsymptr <type -8>; Fopthdr <type -6>; Fflags <type -6>; Fnsyms <type -3>; }
type 130 struct { Name <type -16>; Library <type -16>; }
type 131 struct { Lversion <type -3>; Lnsyms <type -3>; Lnreloc <type -3>; Listlen <type -7>; Lnimpid <type -3>; Limpoff <type -7>; Lstlen <type -7>; Lstoff <type -7>; }
type 132 struct { Lversion <type -3>; Lnsyms <type -3>; Lnreloc <type -3>; Listlen <type -7>; Lnimpid <type -3>; Lstlen <type -7>; Limpoff <type -8>; Lstoff <type -8>; Lsymoff <type -8>; Lrldoff <type -8>; }
type 133 struct { Lname <type 45>; Lvalue <type -7>; Lscnum <type -2>; Lsmtype <type -1>; Lsmclas <type -1>; Lifile <type -3>; Lparm <type -7>; }
type 134 struct { Lvalue <type -8>; Loffset <type -7>; Lscnum <type -2>; Lsmtype <type -1>; Lsmclas <type -1>; Lifile <type -3>; Lparm <type -7>; }
type 135 struct { ? <type 21>; .internal/xcoff.sr <type 136>; }
type 136 *<type 137>
type 137 "io.SectionReader" <type 138>
 func (s <esc:0x1> <type 136>) Size () <type -4>
 func (s <esc:0x1> <type 136>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (s <esc:0x9> <type 136>) ReadAt (p <type 54>, off <type -4>) (n <type -11>, err <type -19>)
 func (s <esc:0x9> <type 136>) Read (p <type 54>) (n <type -11>, err <type -19>)
type 138 struct { .io.r <type 139>; .io.base <type -4>; .io.off <type -4>; .io.limit <type -4>; }
type 139 "io.ReaderAt" <type 140>
type 140 interface { ReadAt (p <type 54>, off <type -4>) (n <type -11>, err <type -19>); }
type 141 struct { Name <type -16>; Size <type -8>; }
type 142 struct { VirtualAddress <type -8>; Symbol <type 53>; Signed <type -15>; InstructionFixed <type -15>; Length <type -5>; Type <type -5>; }
type 143 struct { Rvaddr <type -7>; Rsymndx <type -7>; Rsize <type -5>; Rtype <type -5>; }
type 144 struct { Rvaddr <type -8>; Rsymndx <type -7>; Rsize <type -5>; Rtype <type -5>; }
type 145 struct { ? <type 26>; Relocs <type 146>; ? <type 139>; .internal/xcoff.sr <type 136>; }
type 146 [] <type 22>
type 147 struct { Name <type -16>; VirtualAddress <type -8>; Size <type -8>; Type <type -7>; Relptr <type -8>; Nreloc <type -7>; }
type 148 struct { Sname <type 45>; Spaddr <type -7>; Svaddr <type -7>; Ssize <type -7>; Sscnptr <type -7>; Srelptr <type -7>; Slnnoptr <type -7>; Snreloc <type -6>; Snlnno <type -6>; Sflags <type -7>; }
type 149 struct { Sname <type 45>; Spaddr <type -8>; Svaddr <type -8>; Ssize <type -8>; Sscnptr <type -8>; Srelptr <type -8>; Slnnoptr <type -8>; Snreloc <type -7>; Snlnno <type -7>; Sflags <type -7>; Spad <type -7>; }
type 150 struct { Nname <type 45>; Nvalue <type -7>; Nscnum <type -2>; Ntype <type -6>; Nsclass <type -1>; Nnumaux <type -1>; }
type 151 struct { Nvalue <type -8>; Noffset <type -7>; Nscnum <type -2>; Ntype <type -6>; Nsclass <type -1>; Nnumaux <type -1>; }
type 152 struct { Name <type -16>; Value <type -8>; SectionNumber <type -11>; StorageClass <type -11>; AuxFcn <type 10>; AuxCSect <type 9>; }
const AIAFMAG = "`\n"
const AIAMAG = "<aiaff>\n"
const AIAMAGBIG = "<bigaf>\n"
const AR_HSZ_BIG = 112 
const C_BCOMM = 135 
const C_BINCL = 108 
const C_BLOCK = 100 
const C_BSTAT = 143 
const C_DECL = 140 
const C_DWARF = 112 
const C_ECOML = 136 
const C_ECOMM = 137 
const C_EINCL = 109 
const C_ENTRY = 141 
const C_ESTAT = 144 
const C_EXT = 2 
const C_FCN = 101 
const C_FILE = 103 
const C_FUN = 142 
const C_GSYM = 128 
const C_GTLS = 145 
const C_HIDEXT = 107 
const C_LSYM = 129 
const C_NULL = 0 
const C_PSYM = 130 
const C_RPSYM = 132 
const C_RSYM = 131 
const C_STAT = 3 
const C_STSYM = 133 
const C_STTLS = 146 
const C_WEAKEXT = 111 
const FILHSZ_32 = 20 
const FILHSZ_64 = 24 
const FL_HSZ_BIG = 128 
const F_DSA = 64 
const F_DYNLOAD = 4096 
const F_EXEC = 2 
const F_FDPR_OPTI = 32 
const F_FDPR_PROF = 16 
const F_LNNO = 4 
const F_LOADONLY = 16384 
const F_RELFLG = 1 
const F_SHROBJ = 8192 
const F_VARPG = 256 
const LDHDRSZ_32 = 32 
const LDHDRSZ_64 = 56 
const N_ABS = -1 
const N_DEBUG = -2 
const N_UNDEF = 0 
func NewArchive (r <type 139>) (? <type 37>, ? <type -19>)
func NewFile (r <type 139>) (? <type 38>, ? <type -19>)
func Open (name <type -16>) (? <type 38>, ? <type -19>)
func OpenArchive (name <type -16>) (? <type 37>, ? <type -19>)
const R_BA = 8 
const R_BR = 10 
const R_GL = 5 
const R_NEG = 1 
const R_POS = 0 
const R_RBA = 24 
const R_RBR = 26 
const R_REF = 15 
const R_REL = 2 
const R_RL = 12 
const R_RLA = 13 
const R_TCL = 6 
const R_TLS = 32 
const R_TLSM = 36 
const R_TLSML = 37 
const R_TLS_IE = 33 
const R_TLS_LD = 34 
const R_TLS_LE = 35 
const R_TOC = 3 
const R_TOCL = 49 
const R_TOCU = 48 
const R_TRL = 18 
const R_TRLA = 19 
const SAIAMAG = 8 
const SSUBTYP_DWABREV = 393216 
const SSUBTYP_DWARNGE = 327680 
const SSUBTYP_DWFRAME = 655360 
const SSUBTYP_DWINFO = 65536 
const SSUBTYP_DWLINE = 131072 
const SSUBTYP_DWLOC = 589824 
const SSUBTYP_DWMAC = 720896 
const SSUBTYP_DWPBNMS = 196608 
const SSUBTYP_DWPBTYP = 262144 
const SSUBTYP_DWRNGES = 524288 
const SSUBTYP_DWSTR = 458752 
const STYP_BSS = 128 
const STYP_DATA = 64 
const STYP_DEBUG = 8192 
const STYP_DWARF = 16 
const STYP_EXCEPT = 256 
const STYP_INFO = 512 
const STYP_LOADER = 4096 
const STYP_OVRFLO = 32768 
const STYP_TBSS = 2048 
const STYP_TDATA = 1024 
const STYP_TEXT = 32 
const STYP_TYPCHK = 16384 
const SYMESZ = 18 
const SYM_TYPE_FUNC = 32 
const SYM_V_EXPORTED = 16384 
const SYM_V_HIDDEN = 8192 
const SYM_V_INTERNAL = 4096 
const SYM_V_PROTECTED = 12288 
const U64_TOCMAGIC = 503 
const U802TOCMAGIC = 479 
const XFT_CD = 128 
const XFT_CT = 1 
const XFT_CV = 2 
const XFT_FN = 0 
const XMC_BS = 9 
const XMC_DB = 2 
const XMC_DS = 10 
const XMC_GL = 6 
const XMC_PR = 0 
const XMC_RO = 1 
const XMC_RW = 5 
const XMC_SV = 8 
const XMC_SV3264 = 18 
const XMC_SV64 = 17 
const XMC_TC = 3 
const XMC_TC0 = 15 
const XMC_TD = 16 
const XMC_TE = 22 
const XMC_TL = 20 
const XMC_UA = 4 
const XMC_UC = 11 
const XMC_UL = 21 
const XMC_XO = 7 
const XTY_CM = 3 
const XTY_ER = 0 
const XTY_LD = 2 
const XTY_SD = 1 
checksum A9A4990CB2B6B0949AD7DA0AB07A703E1A237497
v3;
package io
pkgpath io
import errors errors "errors"
import sync sync "sync"
import atomic sync/atomic "sync/atomic"
init io io..import cpu internal..z2fcpu..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import
init_graph 0 1 0 2 0 3 0 4 2 1 2 3 4 1 4 2 4 3
types 78 26 30 31 30 26 113 246 237 30 30 36 36 31 27 29 31 31 32 360 27 33 32 32 27 29 29 64 60 59 43 22 45 18 21 21 19 18 18 36 19 404 159 89 19 64 23 24 77 19 11 60 23 19 118 19 36 120 19 22 45 47 48 60 61 48 73 90 76 83 61 96 94 81 47 48 74 91 75
type 1 "ByteReader" <type 26>
type 2 "ByteScanner" <type 27>
type 3 "ByteWriter" <type 28>
type 4 "Closer" <type 29>
type 5 "LimitedReader" <type 31>
 func (l <esc:0x9> <type 32>) Read (p <type 30>) (n <type -11>, err <type -19>)
type 6 "PipeReader" <type 38>
 func (r <esc:0x9> <type 36>) Read (data <esc:0x1> <type 30>) (n <type -11>, err <type -19>)
 func (r <esc:0x9> <type 36>) Close () <type -19>
 func (r <esc:0x9> <type 36>) CloseWithError (err <type -19>) <type -19>
type 7 "PipeWriter" <type 38>
 func (w <esc:0x9> <type 37>) Write (data <type 30>) (n <type -11>, err <type -19>)
 func (w <esc:0x9> <type 37>) Close () <type -19>
 func (w <esc:0x9> <type 37>) CloseWithError (err <type -19>) <type -19>
type 8 "ReadCloser" <type 60>
type 9 "ReadSeeker" <type 61>
type 10 "ReadWriteCloser" <type 62>
type 11 "ReadWriteSeeker" <type 63>
type 12 "ReadWriter" <type 64>
type 13 "Reader" <type 65>
type 14 "ReaderAt" <type 66>
type 15 "ReaderFrom" <type 67>
type 16 "RuneReader" <type 68>
type 17 "RuneScanner" <type 69>
type 18 "SectionReader" <type 70>
 func (s <esc:0x9> <type 35>) Read (p <type 30>) (n <type -11>, err <type -19>)
 func (s <esc:0x1> <type 35>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (s <esc:0x9> <type 35>) ReadAt (p <type 30>, off <type -4>) (n <type -11>, err <type -19>)
 func (s <esc:0x1> <type 35>) Size () <type -4>
type 19 "Seeker" <type 71>
type 20 "StringWriter" <type 72>
type 21 "WriteCloser" <type 73>
type 22 "WriteSeeker" <type 74>
type 23 "Writer" <type 75>
type 24 "WriterAt" <type 76>
type 25 "WriterTo" <type 77>
type 26 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 27 interface { ? <type 1>; UnreadByte () <type -19>; }
type 28 interface { WriteByte (c <type -20>) <type -19>; }
type 29 interface { Close () <type -19>; }
type 30 [] <type -20>
type 31 struct { R <type 13>; N <type -4>; }
type 32 *<type 5>
type 33 [] <type 13>
type 34 [] <type 23>
type 35 *<type 18>
type 36 *<type 6>
type 37 *<type 7>
type 38 struct { .io.p <type 39>; }
type 39 *<type 40>
type 40 ".io.pipe" <type 41>
 func (p <type 39>) Read (b <esc:0x1> <type 30>) (n <type -11>, err <type -19>)
 func (p <type 39>) .io.readCloseError () <type -19>
 func (p <type 39>) CloseRead (err <type -19>) <type -19>
 func (p <type 39>) Write (b <type 30>) (n <type -11>, err <type -19>)
 func (p <type 39>) .io.writeCloseError () <type -19>
 func (p <type 39>) CloseWrite (err <type -19>) <type -19>
type 41 struct { .io.wrMu <type 42>; .io.wrCh <type 45>; .io.rdCh <type 46>; .io.once <type 47>; .io.done <type 51>; .io.rerr <type 53>; .io.werr <type 53>; }
type 42 "sync.Mutex" <type 44>
 func (m <type 43>) Unlock ()
 func (m <type 43>) Lock ()
type 43 *<type 42>
type 44 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 45 chan <type 30>
type 46 chan <type -11>
type 47 "sync.Once" <type 50>
 func (o <type 48>) Do (f <esc:0x1> <type 49>)
type 48 *<type 47>
type 49 ()
type 50 struct { .sync.m <type 42>; .sync.done <type -7>; }
type 51 chan <type 52>
type 52 struct { }
type 53 ".io.atomicError" <type 55>
 func (a <type 54>) Store (err <type -19>)
 func (a <type 54>) Load () <type -19>
type 54 *<type 53>
type 55 struct { .io.v <type 56>; }
type 56 "sync/atomic.Value" <type 59>
 func (v <type 57>) Load () (x <type 58>)
 func (v <type 57>) Store (x <type 58>)
type 57 *<type 56>
type 58 interface { }
type 59 struct { .sync/atomic.v <type 58>; }
type 60 interface { ? <type 13>; ? <type 4>; }
type 61 interface { ? <type 13>; ? <type 19>; }
type 62 interface { ? <type 13>; ? <type 23>; ? <type 4>; }
type 63 interface { ? <type 13>; ? <type 23>; ? <type 19>; }
type 64 interface { ? <type 13>; ? <type 23>; }
type 65 interface { Read (p <type 30>) (n <type -11>, err <type -19>); }
type 66 interface { ReadAt (p <type 30>, off <type -4>) (n <type -11>, err <type -19>); }
type 67 interface { ReadFrom (r <type 13>) (n <type -4>, err <type -19>); }
type 68 interface { ReadRune () (r <type -21>, size <type -11>, err <type -19>); }
type 69 interface { ? <type 16>; UnreadRune () <type -19>; }
type 70 struct { .io.r <type 14>; .io.base <type -4>; .io.off <type -4>; .io.limit <type -4>; }
type 71 interface { Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>); }
type 72 interface { WriteString (s <type -16>) (n <type -11>, err <type -19>); }
type 73 interface { ? <type 23>; ? <type 4>; }
type 74 interface { ? <type 23>; ? <type 19>; }
type 75 interface { Write (p <type 30>) (n <type -11>, err <type -19>); }
type 76 interface { WriteAt (p <type 30>, off <type -4>) (n <type -11>, err <type -19>); }
type 77 interface { WriteTo (w <type 23>) (n <type -4>, err <type -19>); }
func Copy (dst <type 23>, src <type 13>) (written <type -4>, err <type -19>)
func CopyBuffer (dst <type 23>, src <type 13>, buf <type 30>) (written <type -4>, err <type -19>)
func CopyN (dst <type 23>, src <type 13>, n <type -4>) (written <type -4>, err <type -19>)
var EOF <type -19>
var ErrClosedPipe <type -19>
var ErrNoProgress <type -19>
var ErrShortBuffer <type -19>
var ErrShortWrite <type -19>
var ErrUnexpectedEOF <type -19>
func LimitReader (r <type 13>, n <type -4>) <type 13>
func MultiReader (readers <esc:0x9> ...<type 13>) <type 13>
func MultiWriter (writers <esc:0x9> ...<type 23>) <type 23>
func NewSectionReader (r <type 14>, off <type -4>, n <type -4>) <type 35>
func Pipe () (? <type 36>, ? <type 37>)
func ReadAtLeast (r <type 13>, buf <type 30>, min <type -11>) (n <type -11>, err <type -19>)
func ReadFull (r <type 13>, buf <type 30>) (n <type -11>, err <type -19>)
const SeekCurrent = 1 
const SeekEnd = 2 
const SeekStart = 0 
func TeeReader (r <type 13>, w <type 23>) <type 13>
func WriteString (w <type 23>, s <type -16>) (n <type -11>, err <type -19>)
checksum 06B97C32012617FDCCB3BE3841AA4B41A44B341E
v3;
package ioutil
pkgpath io/ioutil
import bytes bytes "bytes"
import io io "io"
import os os "os"
import filepath path/filepath "path/filepath"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import time time "time"
indirectimport poll internal/poll
indirectimport syscall syscall
init ioutil io..z2fioutil..import bytes bytes..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 1 2 1 5 1 9 1 10 1 12 1 15 3 2 3 5 3 9 3 10 3 12 3 13 3 14 5 2 5 9 5 10 5 12 6 2 6 3 6 4 6 5 6 9 6 10 6 12 6 13 6 14 7 2 7 3 7 4 7 5 7 6 7 8 7 9 7 10 7 11 7 12 7 13 7 14 7 15 8 2 8 9 8 10 8 11 8 12 8 15 9 2 9 10 11 2 11 9 11 10 12 2 12 9 12 10 13 2 13 9 13 10 13 12 14 2 14 9 14 10 14 12 14 13
types 101 1 28 72 21 28 71 32 45 28 42 21 32 141 3300 356 19 19 525 165 21 31 91 21 36 112 19 73 75 83 195 22 19 2800 36 119 23 34 22 32 19 76 135 3603 19 37 91 19 43 50 40 53 24 24 38 40 19 35 61 24 19 20 19 36 78 19 35 54 19 37 61 25 19 35 320 157 19 50 43 44 23 280 368 19 115 940 19 57 19 21 93 19 50 20 40 19 32 56 19 32 35 20
type 1 "io.Writer" <type 2>
type 2 interface { Write (p <type 3>) (n <type -11>, err <type -19>); }
type 3 [] <type -20>
type 4 "io.Reader" <type 5>
type 5 interface { Read (p <type 3>) (n <type -11>, err <type -19>); }
type 6 "io.ReadCloser" <type 7>
type 7 interface { ? <type 4>; ? <type 8>; }
type 8 "io.Closer" <type 9>
type 9 interface { Close () <type -19>; }
type 10 [] <type 11>
type 11 "os.FileInfo" <type 12>
type 12 interface { IsDir () <type -15>; ModTime () <type 13>; Mode () <type 29>; Name () <type -16>; Size () <type -4>; Sys () <type 30>; }
type 13 "time.Time" <type 28>
 func (t <esc:0x1> <type 13>) String () <type -16>
 func (t <esc:0x1> <type 13>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x12> <type 13>) Add (d <type 14>) <type 13>
 func (t <esc:0x1> <type 13>) AppendFormat (b <esc:0x12> <type 3>, layout <esc:0x1> <type -16>) <type 3>
 func (t <esc:0x1> <type 13>) Minute () <type -11>
 func (t <esc:0x1> <type 15>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 13>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 13>) MarshalBinary () (? <type 3>, ? <type -19>)
 func (t <esc:0x1> <type 13>) After (u <esc:0x1> <type 13>) <type -15>
 func (t <esc:0x1> <type 13>) UnixNano () <type -4>
 func (t <esc:0x1> <type 15>) GobDecode (data <esc:0x1> <type 3>) <type -19>
 func (t <esc:0x1> <type 13>) Day () <type -11>
 func (t <esc:0x1> <type 15>) .time.unixSec () <type -4>
 func (t <esc:0x12> <type 13>) Round (d <type 14>) <type 13>
 func (t <esc:0x1> <type 15>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 13>) Before (u <esc:0x1> <type 13>) <type -15>
 func (t <esc:0x32> <type 13>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 15>) .time.setLoc (loc <type 16>)
 func (t <esc:0x12> <type 13>) Truncate (d <type 14>) <type 13>
 func (t <esc:0x1> <type 15>) UnmarshalText (data <esc:0x1> <type 3>) <type -19>
 func (t <esc:0x1> <type 15>) UnmarshalBinary (data <esc:0x1> <type 3>) <type -19>
 func (t <esc:0x1> <type 13>) Hour () <type -11>
 func (t <esc:0x1> <type 13>) .time.abs () <type -8>
 func (t <esc:0x1> <type 13>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x12> <type 13>) Location () <type 16>
 func (t <esc:0x1> <type 13>) Month () <type 26>
 func (t <esc:0x1> <type 13>) GobEncode () (? <type 3>, ? <type -19>)
 func (t <esc:0x1> <type 13>) Second () <type -11>
 func (t <esc:0x1> <type 15>) UnmarshalJSON (data <esc:0x1> <type 3>) <type -19>
 func (t <esc:0x1> <type 15>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 13>) Year () <type -11>
 func (t <esc:0x1> <type 13>) Date () (year <type -11>, month <type 26>, day <type -11>)
 func (t <esc:0x1> <type 13>) Weekday () <type 27>
 func (t <esc:0x1> <type 13>) Unix () <type -4>
 func (t <esc:0x1> <type 13>) YearDay () <type -11>
 func (t <esc:0x12> <type 13>) Local () <type 13>
 func (t <esc:0x1> <type 13>) IsZero () <type -15>
 func (t <esc:0x1> <type 13>) Equal (u <esc:0x1> <type 13>) <type -15>
 func (t <esc:0x12> <type 13>) In (loc <type 16>) <type 13>
 func (t <esc:0x1> <type 13>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 13>) UTC () <type 13>
 func (t <esc:0x32> <type 13>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 13>) Sub (u <esc:0x1> <type 13>) <type 14>
 func (t <esc:0x1> <type 15>) .time.mono () <type -4>
 func (t <esc:0x1> <type 13>) MarshalText () (? <type 3>, ? <type -19>)
 func (t <esc:0x1> <type 15>) .time.stripMono ()
 func (t <esc:0x1> <type 13>) MarshalJSON () (? <type 3>, ? <type -19>)
 func (t <esc:0x1> <type 13>) .time.date (full <type -15>) (year <type -11>, month <type 26>, day <type -11>, yday <type -11>)
 func (t <type 13>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 13>
 func (t <esc:0x1> <type 15>) .time.sec () <type -4>
type 14 "time.Duration" <type -4>
 func (d <type 14>) Round (m <type 14>) <type 14>
 func (d <type 14>) Truncate (m <type 14>) <type 14>
 func (d <type 14>) Hours () <type -10>
 func (d <type 14>) Minutes () <type -10>
 func (d <type 14>) Seconds () <type -10>
 func (d <type 14>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 14>) String () <type -16>
type 15 *<type 13>
type 16 *<type 17>
type 17 "time.Location" <type 18>
 func (l <esc:0x1> <type 16>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 16>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 16>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 16>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 16>) String () <type -16>
 func (l <esc:0x12> <type 16>) .time.get () <type 16>
type 18 struct { .time.name <type -16>; .time.zone <type 19>; .time.tx <type 22>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 25>; }
type 19 [] <type 20>
type 20 ".time.zone" <type 21>
type 21 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 22 [] <type 23>
type 23 ".time.zoneTrans" <type 24>
type 24 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 25 *<type 20>
type 26 "time.Month" <type -11>
 func (m <type 26>) String () <type -16>
type 27 "time.Weekday" <type -11>
 func (d <type 27>) String () <type -16>
type 28 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 16>; }
type 29 "os.FileMode" <type -7>
 func (m <type 29>) Perm () <type 29>
 func (m <type 29>) IsDir () <type -15>
 func (m <type 29>) IsRegular () <type -15>
 func (m <type 29>) String () <type -16>
type 30 interface { }
type 31 *<type 32>
type 32 "os.File" <type 38>
 func (f <esc:0x10a> <type 31>) Stat () (? <type 11>, ? <type -19>)
 func (f <esc:0x10a> <type 31>) .os.readdir (n <type -11>) (fi <type 10>, err <type -19>)
 func (f <esc:0x9> <type 31>) .os.seek (offset <type -4>, whence <type -11>) (ret <type -4>, err <type -19>)
 func (f <esc:0x9> <type 31>) .os.pwrite (b <esc:0x1> <type 3>, off <type -4>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 31>) .os.write (b <type 3>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 31>) SetDeadline (t <esc:0x1> <type 13>) <type -19>
 func (f <esc:0x10a> <type 31>) WriteString (s <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (f <esc:0x10a> <type 31>) ReadAt (b <esc:0x1> <type 3>, off <type -4>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 31>) SetWriteDeadline (t <esc:0x1> <type 13>) <type -19>
 func (f <esc:0x10a> <type 31>) Read (b <type 3>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 31>) .os.pread (b <esc:0x1> <type 3>, off <type -4>) (n <type -11>, err <type -19>)
 func (f <esc:0x10a> <type 31>) Seek (offset <type -4>, whence <type -11>) (ret <type -4>, err <type -19>)
 func (f <esc:0x10a> <type 31>) Write (b <type 3>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 31>) SetReadDeadline (t <esc:0x1> <type 13>) <type -19>
 func (f <esc:0x9> <type 31>) .os.setReadDeadline (t <esc:0x1> <type 13>) <type -19>
 func (f <esc:0x22> <type 31>) .os.wrapErr (op <type -16>, err <type -19>) <type -19>
 func (f <type 31>) SyscallConn () (? <type 33>, ? <type -19>)
 func (f <esc:0x10a> <type 31>) WriteAt (b <esc:0x1> <type 3>, off <type -4>) (n <type -11>, err <type -19>)
 func (file <esc:0x10a> <type 31>) .os.readdirnames (n <type -11>) (names <type 37>, err <type -19>)
 func (f <esc:0x2a> <type 31>) Chmod (mode <type 29>) <type -19>
 func (f <esc:0x10a> <type 31>) Readdirnames (n <type -11>) (names <type 37>, err <type -19>)
 func (f <esc:0x2a> <type 31>) .os.chmod (mode <type 29>) <type -19>
 func (f <esc:0x9> <type 31>) Close () <type -19>
 func (f <esc:0x10a> <type 31>) Readdir (n <type -11>) (? <type 10>, ? <type -19>)
 func (f <esc:0x2a> <type 31>) Chown (uid <type -11>, gid <type -11>) <type -19>
 func (f <esc:0x2a> <type 31>) Truncate (size <type -4>) <type -19>
 func (f <esc:0x32> <type 31>) Name () <type -16>
 func (f <esc:0x2a> <type 31>) Sync () <type -19>
 func (f <esc:0x9> <type 31>) .os.setDeadline (t <esc:0x1> <type 13>) <type -19>
 func (f <esc:0x2a> <type 31>) Chdir () <type -19>
 func (f <esc:0x9> <type 31>) .os.setWriteDeadline (t <esc:0x1> <type 13>) <type -19>
 func (f <esc:0x1> <type 31>) .os.checkValid (op <esc:0x1> <type -16>) <type -19>
 func (f <esc:0x9> <type 31>) Fd () <type -13>
 func (f <esc:0x9> <type 31>) .os.read (b <type 3>) (n <type -11>, err <type -19>)
type 33 "syscall.RawConn" <type 34>
type 34 interface { Control (f <type 35>) <type -19>; Read (f <type 36>) <type -19>; Write (f <type 36>) <type -19>; }
type 35 (? <type -13>)
type 36 (? <type -13>) <type -15>
type 37 [] <type -16>
type 38 struct { ? <type 39>; }
type 39 *<type 40>
type 40 ".os.file" <type 41>
 func (file <type 39>) .os.close () <type -19>
type 41 struct { .os.pfd <type 42>; .os.name <type -16>; .os.dirinfo <type 94>; .os.nonblock <type -15>; .os.stdoutOrErr <type -15>; }
type 42 "internal/poll.FD" <type 80>
 func (fd <type 43>) Accept () (? <type -11>, ? <type 44>, ? <type -16>, ? <type -19>)
 func (fd <type 43>) Pwrite (p <esc:0x1> <type 3>, off <type -4>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) .internal/poll.writeUnlock ()
 func (fd <type 43>) Write (p <type 3>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) ReadFrom (p <esc:0x1> <type 3>) (? <type -11>, ? <type 44>, ? <type -19>)
 func (fd <type 43>) .internal/poll.readLock () <type -19>
 func (fd <type 43>) Pread (p <esc:0x1> <type 3>, off <type -4>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) Read (p <type 3>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) Shutdown (how <type -11>) <type -19>
 func (fd <type 43>) Close () <type -19>
 func (fd <type 43>) .internal/poll.destroy () <type -19>
 func (fd <type 43>) Ftruncate (size <type -4>) <type -19>
 func (fd <type 43>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (fd <esc:0x1> <type 43>) Init (net <esc:0x1> <type -16>, pollable <type -15>) <type -19>
 func (fd <type 43>) Fsync () <type -19>
 func (fd <type 43>) .internal/poll.readUnlock ()
 func (fd <type 43>) Dup () (? <type -11>, ? <type -16>, ? <type -19>)
 func (fd <type 43>) Fchmod (mode <type -7>) <type -19>
 func (fd <type 43>) Fchdir () <type -19>
 func (fd <type 43>) SetsockoptInt (level <type -11>, name <type -11>, arg <type -11>) <type -19>
 func (fd <type 43>) WriteOnce (p <type 3>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) SetsockoptIPMreq (level <type -11>, name <type -11>, mreq <esc:0x1> <type 55>) <type -19>
 func (fd <type 43>) Writev (v <esc:0x9> <type 59>) (? <type -4>, ? <type -19>)
 func (fd <type 43>) RawControl (f <esc:0x1> <type 35>) <type -19>
 func (fd <esc:0x1> <type 43>) WaitWrite () <type -19>
 func (fd <type 43>) SetsockoptIPMreqn (level <type -11>, name <type -11>, mreq <esc:0x1> <type 61>) <type -19>
 func (fd <type 43>) RawWrite (f <esc:0x1> <type 36>) <type -19>
 func (fd <type 43>) Fchown (uid <type -11>, gid <type -11>) <type -19>
 func (fd <type 43>) SetReadDeadline (t <esc:0x1> <type 13>) <type -19>
 func (fd <type 43>) SetsockoptLinger (level <type -11>, name <type -11>, l <esc:0x1> <type 64>) <type -19>
 func (fd <type 43>) SetsockoptIPv6Mreq (level <type -11>, name <type -11>, mreq <esc:0x1> <type 67>) <type -19>
 func (fd <type 43>) SetsockoptByte (level <type -11>, name <type -11>, arg <type -20>) <type -19>
 func (fd <type 43>) SetBlocking () <type -19>
 func (fd <type 43>) ReadDirent (buf <esc:0x1> <type 3>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) .internal/poll.decref () <type -19>
 func (fd <type 43>) RawRead (f <esc:0x1> <type 36>) <type -19>
 func (fd <type 43>) SetDeadline (t <esc:0x1> <type 13>) <type -19>
 func (fd <type 43>) Fstat (s <esc:0x1> <type 71>) <type -19>
 func (fd <type 43>) ReadMsg (p <esc:0x1> <type 3>, oob <esc:0x1> <type 3>) (? <type -11>, ? <type -11>, ? <type -11>, ? <type 44>, ? <type -19>)
 func (fd <type 43>) .internal/poll.writeLock () <type -19>
 func (fd <type 43>) SetsockoptInet4Addr (level <type -11>, name <type -11>, arg <type 58>) <type -19>
 func (fd <esc:0x1> <type 43>) .internal/poll.eofError (n <type -11>, err <esc:0x12> <type -19>) <type -19>
 func (fd <type 43>) WriteTo (p <esc:0x1> <type 3>, sa <type 44>) (? <type -11>, ? <type -19>)
 func (fd <type 43>) SetWriteDeadline (t <esc:0x1> <type 13>) <type -19>
 func (fd <type 43>) .internal/poll.incref () <type -19>
 func (fd <type 43>) WriteMsg (p <esc:0x1> <type 3>, oob <esc:0x1> <type 3>, sa <type 44>) (? <type -11>, ? <type -11>, ? <type -19>)
type 43 *<type 42>
type 44 "syscall.Sockaddr" <type 45>
type 45 interface { .syscall.sockaddr () (ptr <type 46>, len <type 53>, err <type -19>); }
type 46 *<type 47>
type 47 "syscall.RawSockaddrAny" <type 48>
type 48 struct { Addr <type 49>; Pad <type 52>; }
type 49 "syscall.RawSockaddr" <type 50>
type 50 struct { Family <type -6>; Data <type 51>; }
type 51 [14 ] <type -1>
type 52 [96 ] <type -1>
type 53 "syscall.Socklen_t" <type 54>
type 54 ".syscall._socklen_t" <type -7>
type 55 *<type 56>
type 56 "syscall.IPMreq" <type 57>
type 57 struct { Multiaddr <type 58>; Interface <type 58>; }
type 58 [4 ] <type -20>
type 59 *<type 60>
type 60 [] <type 3>
type 61 *<type 62>
type 62 "syscall.IPMreqn" <type 63>
type 63 struct { Multiaddr <type 58>; Address <type 58>; Ifindex <type -3>; }
type 64 *<type 65>
type 65 "syscall.Linger" <type 66>
type 66 struct { Onoff <type -3>; Linger <type -3>; }
type 67 *<type 68>
type 68 "syscall.IPv6Mreq" <type 69>
type 69 struct { Multiaddr <type 70>; Interface <type -7>; }
type 70 [16 ] <type -20>
type 71 *<type 72>
type 72 "syscall.Stat_t" <type 73>
type 73 struct { Dev <type -8>; Ino <type -8>; Mode <type -7>; Nlink <type -7>; Uid <type -7>; Gid <type -7>; Rdev <type -8>; .syscall.__pad1 <type -8>; Size <type -4>; Blksize <type -3>; .syscall.__pad2 <type -3>; Blocks <type -4>; Atim <type 74>; Mtim <type 74>; Ctim <type 74>; .syscall.__glibc_reserved <type 79>; }
type 74 "syscall.Timespec" <type 76>
 func (ts <esc:0x1> <type 75>) Unix () (sec <type -4>, nsec <type -4>)
 func (ts <esc:0x1> <type 75>) Nano () <type -4>
type 75 *<type 74>
type 76 struct { Sec <type 77>; Nsec <type 78>; }
type 77 "syscall.Timespec_sec_t" <type -4>
type 78 "syscall.Timespec_nsec_t" <type -4>
type 79 [2 ] <type -3>
type 80 struct { .internal/poll.fdmu <type 81>; Sysfd <type -11>; .internal/poll.pd <type 84>; .internal/poll.iovecs <type 87>; .internal/poll.csema <type -7>; .internal/poll.isBlocking <type -7>; IsStream <type -15>; ZeroReadIsEOF <type -15>; .internal/poll.isFile <type -15>; }
type 81 ".internal/poll.fdMutex" <type 83>
 func (mu <type 82>) .internal/poll.incref () <type -15>
 func (mu <type 82>) .internal/poll.increfAndClose () <type -15>
 func (mu <type 82>) .internal/poll.decref () <type -15>
 func (mu <type 82>) .internal/poll.rwlock (read <type -15>) <type -15>
 func (mu <type 82>) .internal/poll.rwunlock (read <type -15>) <type -15>
type 82 *<type 81>
type 83 struct { .internal/poll.state <type -8>; .internal/poll.rsema <type -7>; .internal/poll.wsema <type -7>; }
type 84 ".internal/poll.pollDesc" <type 86>
 func (pd <esc:0x1> <type 85>) .internal/poll.init (fd <esc:0x1> <type 43>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.evict ()
 func (pd <esc:0x1> <type 85>) .internal/poll.close ()
 func (pd <esc:0x1> <type 85>) .internal/poll.wait (mode <type -11>, isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.prepare (mode <type -11>, isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.pollable () <type -15>
 func (pd <esc:0x1> <type 85>) .internal/poll.prepareRead (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.waitWrite (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.prepareWrite (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.waitRead (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 85>) .internal/poll.waitCanceled (mode <type -11>)
type 85 *<type 84>
type 86 struct { .internal/poll.runtimeCtx <type -13>; }
type 87 *<type 88>
type 88 [] <type 89>
type 89 "syscall.Iovec" <type 91>
 func (iov <esc:0x1> <type 90>) SetLen (length <type -11>)
type 90 *<type 89>
type 91 struct { Base <type 92>; Len <type 93>; }
type 92 *<type -20>
type 93 "syscall.Iovec_len_t" <type -8>
type 94 *<type 95>
type 95 ".os.dirInfo" <type 96>
type 96 struct { .os.buf <type 3>; .os.dir <type 97>; }
type 97 *<type 98>
type 98 "syscall.DIR" <type 99>
type 99 ".syscall._DIR" <type 100>
type 100 struct { }
var Discard <type 1>
func NopCloser (r <esc:0x12> <type 4>) <type 6>
func ReadAll (r <type 4>) (? <type 3>, ? <type -19>)
func ReadDir (dirname <type -16>) (? <type 10>, ? <type -19>)
func ReadFile (filename <type -16>) (? <type 3>, ? <type -19>)
func TempDir (dir <type -16>, prefix <esc:0x1> <type -16>) (name <type -16>, err <type -19>)
func TempFile (dir <type -16>, pattern <esc:0x1> <type -16>) (f <type 31>, err <type -19>)
func WriteFile (filename <type -16>, data <type 3>, perm <type 29>) <type -19>
checksum C5C7CC3E95D9535E45C458B9AB566E73AF845110
v3;
package log
pkgpath log
import fmt fmt "fmt"
import io io "io"
import os os "os"
import runtime runtime "runtime"
import sync sync "sync"
import time time "time"
init log log..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1 13 1 14 3 2 3 5 3 8 3 9 3 11 3 12 3 13 5 2 5 8 5 9 5 11 6 2 6 3 6 4 6 5 6 8 6 9 6 11 6 12 6 13 7 2 7 8 7 9 7 10 7 11 7 14 8 2 8 9 10 2 10 8 10 9 11 2 11 8 11 9 12 2 12 8 12 9 12 11 13 2 13 8 13 9 13 11 13 12
types 29 2 1075 19 21 121 85 17 63 28 73 22 18 19 3310 356 19 19 525 165 21 31 91 21 36 112 19 73 75 83
type 1 "Logger" <type 4>
 func (l <type 11>) SetOutput (w <type 8>)
 func (l <esc:0x1> <type 11>) .log.formatHeader (buf <esc:0x9> <type 12>, t <esc:0x1> <type 13>, file <esc:0x1> <type -16>, line <type -11>)
 func (l <type 11>) Output (calldepth <type -11>, s <esc:0x1> <type -16>) <type -19>
 func (l <type 11>) Printf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 3>)
 func (l <type 11>) Print (v <esc:0x9> ...<type 3>)
 func (l <type 11>) Println (v <esc:0x9> ...<type 3>)
 func (l <type 11>) Fatal (v <esc:0x9> ...<type 3>)
 func (l <type 11>) Fatalf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 3>)
 func (l <type 11>) Fatalln (v <esc:0x9> ...<type 3>)
 func (l <type 11>) Panic (v <esc:0x9> ...<type 3>)
 func (l <type 11>) Panicf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 3>)
 func (l <type 11>) Panicln (v <esc:0x9> ...<type 3>)
 func (l <type 11>) Flags () <type -11>
 func (l <type 11>) SetFlags (flag <type -11>)
 func (l <type 11>) Prefix () <type -16>
 func (l <type 11>) SetPrefix (prefix <type -16>)
 func (l <type 11>) Writer () <type 8>
type 2 [] <type 3>
type 3 interface { }
type 4 struct { .log.mu <type 5>; .log.prefix <type -16>; .log.flag <type -11>; .log.out <type 8>; .log.buf <type 10>; }
type 5 "sync.Mutex" <type 7>
 func (m <type 6>) Lock ()
 func (m <type 6>) Unlock ()
type 6 *<type 5>
type 7 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 8 "io.Writer" <type 9>
type 9 interface { Write (p <type 10>) (n <type -11>, err <type -19>); }
type 10 [] <type -20>
type 11 *<type 1>
type 12 *<type 10>
type 13 "time.Time" <type 28>
 func (t <esc:0x1> <type 13>) String () <type -16>
 func (t <esc:0x1> <type 13>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x12> <type 13>) Add (d <type 14>) <type 13>
 func (t <esc:0x1> <type 13>) AppendFormat (b <esc:0x12> <type 10>, layout <esc:0x1> <type -16>) <type 10>
 func (t <esc:0x1> <type 13>) Minute () <type -11>
 func (t <esc:0x1> <type 15>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 13>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 13>) MarshalBinary () (? <type 10>, ? <type -19>)
 func (t <esc:0x1> <type 13>) After (u <esc:0x1> <type 13>) <type -15>
 func (t <esc:0x1> <type 13>) UnixNano () <type -4>
 func (t <esc:0x1> <type 15>) GobDecode (data <esc:0x1> <type 10>) <type -19>
 func (t <esc:0x1> <type 13>) Day () <type -11>
 func (t <esc:0x1> <type 15>) .time.unixSec () <type -4>
 func (t <esc:0x12> <type 13>) Round (d <type 14>) <type 13>
 func (t <esc:0x1> <type 15>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 13>) Before (u <esc:0x1> <type 13>) <type -15>
 func (t <esc:0x32> <type 13>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 15>) .time.setLoc (loc <type 16>)
 func (t <esc:0x12> <type 13>) Truncate (d <type 14>) <type 13>
 func (t <esc:0x1> <type 15>) UnmarshalText (data <esc:0x1> <type 10>) <type -19>
 func (t <esc:0x1> <type 15>) UnmarshalBinary (data <esc:0x1> <type 10>) <type -19>
 func (t <esc:0x1> <type 13>) Hour () <type -11>
 func (t <esc:0x1> <type 13>) .time.abs () <type -8>
 func (t <esc:0x1> <type 13>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x12> <type 13>) Location () <type 16>
 func (t <esc:0x1> <type 13>) Month () <type 26>
 func (t <esc:0x1> <type 13>) GobEncode () (? <type 10>, ? <type -19>)
 func (t <esc:0x1> <type 13>) Second () <type -11>
 func (t <esc:0x1> <type 15>) UnmarshalJSON (data <esc:0x1> <type 10>) <type -19>
 func (t <esc:0x1> <type 15>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 13>) Year () <type -11>
 func (t <esc:0x1> <type 13>) Date () (year <type -11>, month <type 26>, day <type -11>)
 func (t <esc:0x1> <type 13>) Weekday () <type 27>
 func (t <esc:0x1> <type 13>) Unix () <type -4>
 func (t <esc:0x1> <type 13>) YearDay () <type -11>
 func (t <esc:0x12> <type 13>) Local () <type 13>
 func (t <esc:0x1> <type 13>) IsZero () <type -15>
 func (t <esc:0x1> <type 13>) Equal (u <esc:0x1> <type 13>) <type -15>
 func (t <esc:0x12> <type 13>) In (loc <type 16>) <type 13>
 func (t <esc:0x1> <type 13>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 13>) UTC () <type 13>
 func (t <esc:0x32> <type 13>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 13>) Sub (u <esc:0x1> <type 13>) <type 14>
 func (t <esc:0x1> <type 15>) .time.mono () <type -4>
 func (t <esc:0x1> <type 13>) MarshalText () (? <type 10>, ? <type -19>)
 func (t <esc:0x1> <type 15>) .time.stripMono ()
 func (t <esc:0x1> <type 13>) MarshalJSON () (? <type 10>, ? <type -19>)
 func (t <esc:0x1> <type 13>) .time.date (full <type -15>) (year <type -11>, month <type 26>, day <type -11>, yday <type -11>)
 func (t <type 13>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 13>
 func (t <esc:0x1> <type 15>) .time.sec () <type -4>
type 14 "time.Duration" <type -4>
 func (d <type 14>) Round (m <type 14>) <type 14>
 func (d <type 14>) Truncate (m <type 14>) <type 14>
 func (d <type 14>) Hours () <type -10>
 func (d <type 14>) Minutes () <type -10>
 func (d <type 14>) Seconds () <type -10>
 func (d <type 14>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 14>) String () <type -16>
type 15 *<type 13>
type 16 *<type 17>
type 17 "time.Location" <type 18>
 func (l <esc:0x1> <type 16>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 16>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 16>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 16>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 16>) String () <type -16>
 func (l <esc:0x12> <type 16>) .time.get () <type 16>
type 18 struct { .time.name <type -16>; .time.zone <type 19>; .time.tx <type 22>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 25>; }
type 19 [] <type 20>
type 20 ".time.zone" <type 21>
type 21 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 22 [] <type 23>
type 23 ".time.zoneTrans" <type 24>
type 24 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 25 *<type 20>
type 26 "time.Month" <type -11>
 func (m <type 26>) String () <type -16>
type 27 "time.Weekday" <type -11>
 func (d <type 27>) String () <type -16>
type 28 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 16>; }
func Fatal (v <esc:0x9> ...<type 3>)
func Fatalf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 3>)
func Fatalln (v <esc:0x9> ...<type 3>)
func Flags () <type -11>
const LUTC = 32 
const Ldate = 1 
const Llongfile = 8 
const Lmicroseconds = 4 
const Lshortfile = 16 
const LstdFlags = 3 
const Ltime = 2 
func New (out <type 8>, prefix <type -16>, flag <type -11>) <type 11>
func Output (calldepth <type -11>, s <esc:0x1> <type -16>) <type -19>
func Panic (v <esc:0x9> ...<type 3>)
func Panicf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 3>)
func Panicln (v <esc:0x9> ...<type 3>)
func Prefix () <type -16>
func Print (v <esc:0x9> ...<type 3>)
func Printf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 3>)
func Println (v <esc:0x9> ...<type 3>)
func SetFlags (flag <type -11>)
func SetOutput (w <type 8>)
func SetPrefix (prefix <type -16>)
checksum 1285952D2611EE47B282699CD6C028A75C071927
v3;
package syslog
pkgpath log/syslog
import errors errors "errors"
import fmt fmt "fmt"
import log log "log"
import net net "net"
import os os "os"
import strings strings "strings"
import sync sync "sync"
import time time "time"
indirectimport io io
init context context..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import io io..import log log..import rand math..z2frand..import net net..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 6 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 1 2 1 3 1 4 1 6 1 10 1 11 1 12 1 13 1 14 1 15 1 16 1 17 1 18 3 2 3 6 3 12 3 13 3 15 3 16 3 17 6 2 6 12 6 13 6 15 7 1 7 2 7 3 7 4 7 6 7 10 7 11 7 12 7 13 7 14 7 15 7 16 7 17 7 18 8 2 8 12 8 13 8 15 9 0 9 1 9 2 9 3 9 4 9 5 9 6 9 8 9 10 9 11 9 12 9 13 9 14 9 15 9 16 9 17 9 18 10 2 10 3 10 4 10 6 10 12 10 13 10 15 10 16 10 17 11 2 11 12 11 13 11 14 11 15 11 18 12 2 12 13 14 2 14 12 14 13 15 2 15 12 15 13 16 2 16 12 16 13 16 15 17 2 17 12 17 13 17 15 17 16
types 35 3 29 824 17 17 1071 28 72 21 17 3300 19 73 356 19 525 165 21 31 91 21 36 112 19 75 83 21 22 122 89 19 64 227 43 170
type 1 "Priority" <type -11>
type 2 "Writer" <type 32>
 func (w <esc:0x9> <type 3>) .log/syslog.connect () (err <type -19>)
 func (w <type 3>) Write (b <esc:0x1> <type 8>) (? <type -11>, ? <type -19>)
 func (w <type 3>) Close () <type -19>
 func (w <type 3>) Emerg (m <type -16>) <type -19>
 func (w <type 3>) Alert (m <type -16>) <type -19>
 func (w <type 3>) Crit (m <type -16>) <type -19>
 func (w <type 3>) Err (m <type -16>) <type -19>
 func (w <type 3>) Warning (m <type -16>) <type -19>
 fun