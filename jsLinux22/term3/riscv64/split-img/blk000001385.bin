c (w <type 3>) Notice (m <type -16>) <type -19>
 func (w <type 3>) Info (m <type -16>) <type -19>
 func (w <type 3>) Debug (m <type -16>) <type -19>
 func (w <type 3>) .log/syslog.writeAndRetry (p <type 1>, s <type -16>) (? <type -11>, ? <type -19>)
 func (w <esc:0x9> <type 3>) .log/syslog.write (p <type 1>, msg <type -16>) (? <type -11>, ? <type -19>)
type 3 *<type 2>
type 4 *<type 5>
type 5 "log.Logger" <type 28>
 func (l <type 4>) Writer () <type 6>
 func (l <type 4>) SetPrefix (prefix <type -16>)
 func (l <type 4>) Prefix () <type -16>
 func (l <type 4>) SetFlags (flag <type -11>)
 func (l <esc:0x1> <type 4>) .log.formatHeader (buf <esc:0x9> <type 9>, t <esc:0x1> <type 10>, file <esc:0x1> <type -16>, line <type -11>)
 func (l <type 4>) Panicf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 27>)
 func (l <type 4>) Output (calldepth <type -11>, s <esc:0x1> <type -16>) <type -19>
 func (l <type 4>) Panic (v <esc:0x9> ...<type 27>)
 func (l <type 4>) SetOutput (w <type 6>)
 func (l <type 4>) Printf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 27>)
 func (l <type 4>) Print (v <esc:0x9> ...<type 27>)
 func (l <type 4>) Fatalln (v <esc:0x9> ...<type 27>)
 func (l <type 4>) Fatal (v <esc:0x9> ...<type 27>)
 func (l <type 4>) Panicln (v <esc:0x9> ...<type 27>)
 func (l <type 4>) Fatalf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 27>)
 func (l <type 4>) Println (v <esc:0x9> ...<type 27>)
 func (l <type 4>) Flags () <type -11>
type 6 "io.Writer" <type 7>
type 7 interface { Write (p <type 8>) (n <type -11>, err <type -19>); }
type 8 [] <type -20>
type 9 *<type 8>
type 10 "time.Time" <type 25>
 func (t <esc:0x1> <type 11>) .time.sec () <type -4>
 func (t <type 10>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 10>
 func (t <esc:0x1> <type 10>) .time.date (full <type -15>) (year <type -11>, month <type 12>, day <type -11>, yday <type -11>)
 func (t <esc:0x1> <type 10>) MarshalJSON () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 11>) .time.stripMono ()
 func (t <esc:0x1> <type 10>) MarshalText () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 11>) .time.mono () <type -4>
 func (t <esc:0x1> <type 10>) Sub (u <esc:0x1> <type 10>) <type 13>
 func (t <esc:0x32> <type 10>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x12> <type 10>) UTC () <type 10>
 func (t <esc:0x1> <type 10>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 10>) In (loc <type 14>) <type 10>
 func (t <esc:0x1> <type 10>) Equal (u <esc:0x1> <type 10>) <type -15>
 func (t <esc:0x1> <type 10>) IsZero () <type -15>
 func (t <esc:0x12> <type 10>) Local () <type 10>
 func (t <esc:0x1> <type 10>) YearDay () <type -11>
 func (t <esc:0x1> <type 10>) Unix () <type -4>
 func (t <esc:0x1> <type 10>) Weekday () <type 24>
 func (t <esc:0x1> <type 10>) Date () (year <type -11>, month <type 12>, day <type -11>)
 func (t <esc:0x1> <type 11>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 10>) MarshalBinary () (? <type 8>, ? <type -19>)
 func (t <esc:0x1> <type 10>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 10>) Day () <type -11>
 func (t <esc:0x1> <type 11>) GobDecode (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 10>) After (u <esc:0x1> <type 10>) <type -15>
 func (t <esc:0x1> <type 10>) UnixNano () <type -4>
 func (t <esc:0x1> <type 11>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 10>) Minute () <type -11>
 func (t <esc:0x1> <type 10>) AppendFormat (b <esc:0x12> <type 8>, layout <esc:0x1> <type -16>) <type 8>
 func (t <esc:0x12> <type 10>) Truncate (d <type 13>) <type 10>
 func (t <esc:0x12> <type 10>) Add (d <type 13>) <type 10>
 func (t <esc:0x1> <type 10>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 10>) String () <type -16>
 func (t <esc:0x12> <type 10>) Round (d <type 13>) <type 10>
 func (t <esc:0x1> <type 11>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 10>) Before (u <esc:0x1> <type 10>) <type -15>
 func (t <esc:0x32> <type 10>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 11>) .time.setLoc (loc <type 14>)
 func (t <esc:0x1> <type 11>) UnmarshalText (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 11>) UnmarshalBinary (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 10>) Hour () <type -11>
 func (t <esc:0x1> <type 10>) .time.abs () <type -8>
 func (t <esc:0x1> <type 10>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 10>) Year () <type -11>
 func (t <esc:0x1> <type 11>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 11>) UnmarshalJSON (data <esc:0x1> <type 8>) <type -19>
 func (t <esc:0x1> <type 10>) Second () <type -11>
 func (t <esc:0x1> <type 10>) Month () <type 12>
 func (t <esc:0x12> <type 10>) Location () <type 14>
 func (t <esc:0x1> <type 10>) GobEncode () (? <type 8>, ? <type -19>)
type 11 *<type 10>
type 12 "time.Month" <type -11>
 func (m <type 12>) String () <type -16>
type 13 "time.Duration" <type -4>
 func (d <type 13>) String () <type -16>
 func (d <type 13>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 13>) Seconds () <type -10>
 func (d <type 13>) Minutes () <type -10>
 func (d <type 13>) Hours () <type -10>
 func (d <type 13>) Truncate (m <type 13>) <type 13>
 func (d <type 13>) Round (m <type 13>) <type 13>
type 14 *<type 15>
type 15 "time.Location" <type 16>
 func (l <esc:0x12> <type 14>) .time.get () <type 14>
 func (l <esc:0x22> <type 14>) String () <type -16>
 func (l <esc:0x32> <type 14>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 14>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 14>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 14>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 16 struct { .time.name <type -16>; .time.zone <type 17>; .time.tx <type 20>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 23>; }
type 17 [] <type 18>
type 18 ".time.zone" <type 19>
type 19 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 20 [] <type 21>
type 21 ".time.zoneTrans" <type 22>
type 22 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 23 *<type 18>
type 24 "time.Weekday" <type -11>
 func (d <type 24>) String () <type -16>
type 25 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 14>; }
type 26 [] <type 27>
type 27 interface { }
type 28 struct { .log.mu <type 29>; .log.prefix <type -16>; .log.flag <type -11>; .log.out <type 6>; .log.buf <type 8>; }
type 29 "sync.Mutex" <type 31>
 func (m <type 30>) Unlock ()
 func (m <type 30>) Lock ()
type 30 *<type 29>
type 31 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 32 struct { .log/syslog.priority <type 1>; .log/syslog.tag <type -16>; .log/syslog.hostname <type -16>; .log/syslog.network <type -16>; .log/syslog.raddr <type -16>; .log/syslog.mu <type 29>; .log/syslog.conn <type 33>; }
type 33 ".log/syslog.serverConn" <type 34>
type 34 interface { .log/syslog.close () <type -19>; .log/syslog.writeString (p <type 1>, hostname <type -16>, tag <type -16>, s <type -16>, nl <type -16>) <type -19>; }
func Dial (network <type -16>, raddr <type -16>, priority <type 1>, tag <type -16>) (? <type 3>, ? <type -19>)
const LOG_ALERT <type 1> = 1 
const LOG_AUTH <type 1> = 32 
const LOG_AUTHPRIV <type 1> = 80 
const LOG_CRIT <type 1> = 2 
const LOG_CRON <type 1> = 72 
const LOG_DAEMON <type 1> = 24 
const LOG_DEBUG <type 1> = 7 
const LOG_EMERG <type 1> = 0 
const LOG_ERR <type 1> = 3 
const LOG_FTP <type 1> = 88 
const LOG_INFO <type 1> = 6 
const LOG_KERN <type 1> = 0 
const LOG_LOCAL0 <type 1> = 128 
const LOG_LOCAL1 <type 1> = 136 
const LOG_LOCAL2 <type 1> = 144 
const LOG_LOCAL3 <type 1> = 152 
const LOG_LOCAL4 <type 1> = 160 
const LOG_LOCAL5 <type 1> = 168 
const LOG_LOCAL6 <type 1> = 176 
const LOG_LOCAL7 <type 1> = 184 
const LOG_LPR <type 1> = 48 
const LOG_MAIL <type 1> = 16 
const LOG_NEWS <type 1> = 56 
const LOG_NOTICE <type 1> = 5 
const LOG_SYSLOG <type 1> = 40 
const LOG_USER <type 1> = 8 
const LOG_UUCP <type 1> = 64 
const LOG_WARNING <type 1> = 4 
func New (priority <type 1>, tag <type -16>) (? <type 3>, ? <type -19>)
func NewLogger (p <type 1>, logFlag <type -11>) (? <type 4>, ? <type -19>)
checksum 933B8D40E4C7FFF560F6D02A73A03466A7E85D4F
v3;
package math
pkgpath math
import bits math/bits "math/bits"
import unsafe unsafe "unsafe"
types 7 1 33 12 18 18 18 19
type 1 "unsafe.Pointer" <type 2>
type 2 *any
type 3 *<type -7>
type 4 *<type -9>
type 5 *<type -8>
type 6 *<type -10>
func Abs (x <type -10>) <type -10>
func Acos (x <type -10>) <type -10>
func Acosh (x <type -10>) <type -10>
func Asin (x <type -10>) <type -10>
func Asinh (x <type -10>) <type -10>
func Atan (x <type -10>) <type -10>
func Atan2 (y <type -10>, x <type -10>) <type -10>
func Atanh (x <type -10>) <type -10>
func Cbrt (x <type -10>) <type -10>
func Ceil (x <type -10>) <type -10>
func Copysign (x <type -10>, y <type -10>) <type -10>
func Cos (x <type -10>) <type -10>
func Cosh (x <type -10>) <type -10>
func Dim (x <type -10>, y <type -10>) <type -10>
const E = 0.2718281828459045235360287471352662497757247093699959574966967630000000000000012E1 
func Erf (x <type -10>) <type -10>
func Erfc (x <type -10>) <type -10>
func Erfcinv (x <type -10>) <type -10>
func Erfinv (x <type -10>) <type -10>
func Exp (x <type -10>) <type -10>
func Exp2 (x <type -10>) <type -10>
func Expm1 (x <type -10>) <type -10>
func Float32bits (f <type -9>) ($ret100 <type -7>) <inl:229>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/math/unsafe.go:12
 { //12
  $ret100 = *$convert(<type 3>, $convert(<type 1>, &f)) //12
  return //12
 } //0
func Float32frombits (b <type -7>) ($ret101 <type -9>) <inl:229>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/math/unsafe.go:18
 { //18
  $ret101 = *$convert(<type 4>, $convert(<type 1>, &b)) //18
  return //18
 } //0
func Float64bits (f <type -10>) ($ret102 <type -8>) <inl:229>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/math/unsafe.go:23
 { //23
  $ret102 = *$convert(<type 5>, $convert(<type 1>, &f)) //23
  return //23
 } //0
func Float64frombits (b <type -8>) ($ret103 <type -10>) <inl:229>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/math/unsafe.go:29
 { //29
  $ret103 = *$convert(<type 6>, $convert(<type 1>, &b)) //29
  return //29
 } //0
func Floor (x <type -10>) <type -10>
func Frexp (f <type -10>) (frac <type -10>, exp <type -11>)
func Gamma (x <type -10>) <type -10>
func Hypot (p <type -10>, q <type -10>) <type -10>
func Ilogb (x <type -10>) <type -11>
func Inf (sign <type -11>) <type -10>
func IsInf (f <type -10>, sign <type -11>) <type -15>
func IsNaN (f <type -10>) (is <type -15>) <inl:187>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/math/bits.go:34
 { //39
  is = (f != f) //39
  return //39
 } //0
func J0 (x <type -10>) <type -10>
func J1 (x <type -10>) <type -10>
func Jn (n <type -11>, x <type -10>) <type -10>
func Ldexp (frac <type -10>, exp <type -11>) <type -10>
func Lgamma (x <type -10>) (lgamma <type -10>, sign <type -11>)
const Ln10 = 0.2302585092994045684017991454684364207601101488628772976033327900000000000000005E1 
const Ln2 = 0.6931471805599453094172321214581765680755001343602552541206800089999999999999969E0 
func Log (x <type -10>) <type -10>
func Log10 (x <type -10>) <type -10>
const Log10E = 0.4342944819032518276511289189166050822943970058036665661144537833483601611020721E0 
func Log1p (x <type -10>) <type -10>
func Log2 (x <type -10>) <type -10>
const Log2E = 0.1442695040888963407359924681001892137426645954152985934135449407958043399374913E1 
func Logb (x <type -10>) <type -10>
func Max (x <type -10>, y <type -10>) <type -10>
const MaxFloat32 = 0.3402823466385288598117041834845169254400000000000000000000000000000000000000000E39 
const MaxFloat64 = 0.1797693134862315708145274237317043567981000000000000000000000000000000000000006E309 
const MaxInt16 = 32767 
const MaxInt32 = 2147483647 
const MaxInt64 = 9223372036854775807 
const MaxInt8 = 127 
const MaxUint16 = 65535 
const MaxUint32 = 4294967295 
const MaxUint64 = 18446744073709551615 
const MaxUint8 = 255 
func Min (x <type -10>, y <type -10>) <type -10>
const MinInt16 = -32768 
const MinInt32 = -2147483648 
const MinInt64 = -9223372036854775808 
const MinInt8 = -128 
func Mod (x <type -10>, y <type -10>) <type -10>
func Modf (f <type -10>) (int <type -10>, frac <type -10>)
func NaN () <type -10>
func Nextafter (x <type -10>, y <type -10>) (r <type -10>)
func Nextafter32 (x <type -9>, y <type -9>) (r <type -9>)
const Phi = 0.1618033988749894848204586834365638117720309179805762862135448620000000000000004E1 
const Pi = 0.3141592653589793238462643383279502884197169399375105820974944590000000000000016E1 
func Pow (x <type -10>, y <type -10>) <type -10>
func Pow10 (n <type -11>) <type -10>
func Remainder (x <type -10>, y <type -10>) <type -10>
func Round (x <type -10>) <type -10>
func RoundToEven (x <type -10>) <type -10>
func Signbit (x <type -10>) <type -15>
func Sin (x <type -10>) <type -10>
func Sincos (x <type -10>) (sin <type -10>, cos <type -10>)
func Sinh (x <type -10>) <type -10>
const SmallestNonzeroFloat32 = 0.1401298464324817070923729583289916131280000000000000000000000000000000000000004E-44 
const SmallestNonzeroFloat64 = 0.4940656458412465441765687928682213723651000000000000000000000000000000000000010E-323 
func Sqrt (x <type -10>) <type -10>
const Sqrt2 = 0.1414213562373095048801688724209698078569671875376948073176679740000000000000005E1 
const SqrtE = 0.1648721270700128146848650787814163571653776100710148011575079310000000000000006E1 
const SqrtPhi = 0.1272019649514068964252422461737491491715608041840096248616640380000000000000007E1 
const SqrtPi = 0.1772453850905516027298167483341145182797549456122387128213807789999999999999998E1 
func Tan (x <type -10>) <type -10>
func Tanh (x <type -10>) <type -10>
func Trunc (x <type -10>) <type -10>
func Y0 (x <type -10>) <type -10>
func Y1 (x <type -10>) <type -10>
func Yn (n <type -11>, x <type -10>) <type -10>
checksum BF75AB757A7A8221958DA834B311531397D7D347
v3;
package big
pkgpath math/big
import bytes bytes "bytes"
import binary encoding/binary "encoding/binary"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import math math "math"
import bits math/bits "math/bits"
import rand math/rand "math/rand"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
init big math..z2fbig..import bytes bytes..import binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import rand math..z2frand..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 1 4 1 7 1 11 1 12 1 14 1 17 2 4 2 7 2 10 2 11 2 12 2 13 2 14 2 17 3 4 3 5 3 6 3 7 3 9 3 10 3 11 3 12 3 13 3 14 3 15 3 16 3 17 5 4 5 7 5 11 5 12 5 14 5 15 5 16 7 4 7 11 7 12 7 14 8 4 8 11 8 12 8 14 9 4 9 5 9 6 9 7 9 11 9 12 9 14 9 15 9 16 10 4 10 11 10 12 10 13 10 14 10 17 11 4 11 12 13 4 13 11 13 12 14 4 14 11 14 12 15 4 15 11 15 12 15 14 16 4 16 11 16 12 16 14 16 15
types 40 8 68 77 4514 5175 2210 73 25 44 196 36 4115 19 1021 22 37 22 131 37 65 39 56 35 61 34 64 21 38 102 20 18 18 18 34 295 34 30 195 70 63
type 1 "Accuracy" <type -1>
 func (i <type 1>) String () <type -16>
type 2 "ErrNaN" <type 8>
 func (err <esc:0x12> <type 2>) Error () <type -16>
type 3 "Float" <type 9>
 func (z <esc:0x1a> <type 30>) SetPrec (prec <type -12>) <type 30>
 func (z <esc:0x12> <type 30>) SetMode (mode <type 6>) <type 30>
 func (x <esc:0x1> <type 30>) Prec () <type -12>
 func (x <esc:0x1> <type 30>) MinPrec () <type -12>
 func (x <esc:0x1> <type 30>) Mode () <type 6>
 func (x <esc:0x1> <type 30>) Acc () <type 1>
 func (x <esc:0x9> <type 30>) Sign () <type -11>
 func (x <esc:0x9> <type 30>) MantExp (mant <esc:0x9> <type 30>) (exp <type -11>)
 func (z <esc:0x9> <type 30>) .math/big.setExpAndRound (exp <type -4>, sbit <type -12>)
 func (z <esc:0x1a> <type 30>) SetMantExp (mant <esc:0x9> <type 30>, exp <type -11>) <type 30>
 func (x <esc:0x1> <type 30>) Signbit () <type -15>
 func (x <esc:0x1> <type 30>) IsInf () <type -15>
 func (x <esc:0x9> <type 30>) IsInt () <type -15>
 func (x <esc:0x9> <type 30>) .math/big.validate ()
 func (z <esc:0x9> <type 30>) .math/big.round (sbit <type -12>)
 func (z <esc:0x1a> <type 30>) .math/big.setBits64 (neg <type -15>, x <type -8>) <type 30>
 func (z <esc:0x1a> <type 30>) SetUint64 (x <type -8>) <type 30>
 func (z <esc:0x1a> <type 30>) SetInt64 (x <type -4>) <type 30>
 func (z <esc:0x1a> <type 30>) SetFloat64 (x <type -10>) <type 30>
 func (z <esc:0x1a> <type 30>) SetInt (x <esc:0x1> <type 31>) <type 30>
 func (z <esc:0x1a> <type 30>) SetRat (x <esc:0x9> <type 32>) <type 30>
 func (z <esc:0x12> <type 30>) SetInf (signbit <type -15>) <type 30>
 func (z <esc:0x1a> <type 30>) Set (x <esc:0x9> <type 30>) <type 30>
 func (z <esc:0x1a> <type 30>) Copy (x <esc:0x9> <type 30>) <type 30>
 func (x <esc:0x9> <type 30>) Uint64 () (? <type -8>, ? <type 1>)
 func (x <esc:0x9> <type 30>) Int64 () (? <type -4>, ? <type 1>)
 func (x <esc:0x9> <type 30>) Float32 () (? <type -9>, ? <type 1>)
 func (x <esc:0x9> <type 30>) Float64 () (? <type -10>, ? <type 1>)
 func (x <esc:0x9> <type 30>) Int (z <esc:0x1a> <type 31>) (? <type 31>, ? <type 1>)
 func (x <esc:0x9> <type 30>) Rat (z <esc:0x1a> <type 32>) (? <type 32>, ? <type 1>)
 func (z <esc:0x1a> <type 30>) Abs (x <esc:0x9> <type 30>) <type 30>
 func (z <esc:0x1a> <type 30>) Neg (x <esc:0x9> <type 30>) <type 30>
 func (z <esc:0x9> <type 30>) .math/big.uadd (x <esc:0x1> <type 30>, y <esc:0x1> <type 30>)
 func (z <esc:0x9> <type 30>) .math/big.usub (x <esc:0x1> <type 30>, y <esc:0x1> <type 30>)
 func (z <esc:0x9> <type 30>) .math/big.umul (x <esc:0x1> <type 30>, y <esc:0x1> <type 30>)
 func (z <esc:0x9> <type 30>) .math/big.uquo (x <esc:0x1> <type 30>, y <esc:0x1> <type 30>)
 func (x <esc:0x1> <type 30>) .math/big.ucmp (y <esc:0x1> <type 30>) <type -11>
 func (z <esc:0x1a> <type 30>) Add (x <esc:0x9> <type 30>, y <esc:0x9> <type 30>) <type 30>
 func (z <esc:0x1a> <type 30>) Sub (x <esc:0x9> <type 30>, y <esc:0x9> <type 30>) <type 30>
 func (z <esc:0x1a> <type 30>) Mul (x <esc:0x9> <type 30>, y <esc:0x9> <type 30>) <type 30>
 func (z <esc:0x1a> <type 30>) Quo (x <esc:0x9> <type 30>, y <esc:0x9> <type 30>) <type 30>
 func (x <esc:0x9> <type 30>) Cmp (y <esc:0x9> <type 30>) <type -11>
 func (x <esc:0x1> <type 30>) .math/big.ord () <type -11>
 func (z <esc:0x1a> <type 30>) SetString (s <type -16>) (? <type 30>, ? <type -15>)
 func (z <esc:0x1a> <type 30>) .math/big.scan (r <type 22>, base <type -11>) (f <type 30>, b <type -11>, err <type -19>)
 func (z <esc:0x1a> <type 30>) .math/big.pow5 (n <type -8>) <type 30>
 func (z <esc:0x1a> <type 30>) Parse (s <type -16>, base <type -11>) (f <type 30>, b <type -11>, err <type -19>)
 func (z <esc:0x9> <type 30>) Scan (s <type 33>, ch <type -21>) <type -19>
 func (x <esc:0x1> <type 30>) GobEncode () (? <type 14>, ? <type -19>)
 func (z <esc:0x9> <type 30>) GobDecode (buf <esc:0x9> <type 14>) <type -19>
 func (x <esc:0x1> <type 30>) MarshalText () (text <type 14>, err <type -19>)
 func (z <esc:0x9> <type 30>) UnmarshalText (text <type 14>) <type -19>
 func (x <esc:0x1> <type 30>) Text (format <type -20>, prec <type -11>) <type -16>
 func (x <esc:0x1> <type 30>) String () <type -16>
 func (x <esc:0x1> <type 30>) Append (buf <esc:0x12> <type 14>, fmt <type -20>, prec <type -11>) <type 14>
 func (x <esc:0x1> <type 30>) .math/big.fmtB (buf <esc:0x12> <type 14>) <type 14>
 func (x <esc:0x1> <type 30>) .math/big.fmtP (buf <esc:0x12> <type 14>) <type 14>
 func (x <esc:0x1> <type 30>) Format (s <type 36>, format <type -21>)
 func (z <type 30>) Sqrt (x <esc:0x9> <type 30>) <type 30>
 func (z <esc:0x9> <type 30>) .math/big.sqrtDirect (x <type 30>)
 func (z <esc:0x9> <type 30>) .math/big.sqrtInverse (x <type 30>)
type 4 "Int" <type 38>
 func (x <esc:0x1> <type 31>) Sign () <type -11>
 func (z <esc:0x1a> <type 31>) SetInt64 (x <type -4>) <type 31>
 func (z <esc:0x1a> <type 31>) SetUint64 (x <type -8>) <type 31>
 func (z <esc:0x1a> <type 31>) Set (x <esc:0x1> <type 31>) <type 31>
 func (x <esc:0x22> <type 31>) Bits () <type 29>
 func (z <esc:0x12> <type 31>) SetBits (abs <type 29>) <type 31>
 func (z <esc:0x1a> <type 31>) Abs (x <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) Neg (x <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) Add (x <esc:0x1> <type 31>, y <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) Sub (x <esc:0x1> <type 31>, y <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) Mul (x <esc:0x1> <type 31>, y <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) MulRange (a <type -4>, b <type -4>) <type 31>
 func (z <esc:0x1a> <type 31>) Binomial (n <type -4>, k <type -4>) <type 31>
 func (z <esc:0x1a> <type 31>) Quo (x <esc:0x1> <type 31>, y <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) Rem (x <esc:0x1> <type 31>, y <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) QuoRem (x <esc:0x1> <type 31>, y <esc:0x1> <type 31>, r <esc:0x8a> <type 31>) (? <type 31>, ? <type 31>)
 func (z <esc:0x1a> <type 31>) Div (x <esc:0x1> <type 31>, y <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) Mod (x <esc:0x1> <type 31>, y <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) DivMod (x <esc:0x1> <type 31>, y <esc:0x1> <type 31>, m <esc:0x8a> <type 31>) (? <type 31>, ? <type 31>)
 func (x <esc:0x1> <type 31>) Cmp (y <esc:0x1> <type 31>) (r <type -11>)
 func (x <esc:0x1> <type 31>) CmpAbs (y <esc:0x1> <type 31>) <type -11>
 func (x <esc:0x1> <type 31>) Int64 () <type -4>
 func (x <esc:0x1> <type 31>) Uint64 () <type -8>
 func (x <esc:0x1> <type 31>) IsInt64 () <type -15>
 func (x <esc:0x1> <type 31>) IsUint64 () <type -15>
 func (z <esc:0x1a> <type 31>) SetString (s <type -16>, base <type -11>) (? <type 31>, ? <type -15>)
 func (z <esc:0x1a> <type 31>) .math/big.setFromScanner (r <type 22>, base <type -11>) (? <type 31>, ? <type -15>)
 func (z <esc:0x1a> <type 31>) SetBytes (buf <esc:0x1> <type 14>) <type 31>
 func (x <esc:0x1> <type 31>) Bytes () <type 14>
 func (x <esc:0x1> <type 31>) BitLen () <type -11>
 func (z <esc:0x1a> <type 31>) Exp (x <esc:0x9> <type 31>, y <esc:0x1> <type 31>, m <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) GCD (x <esc:0x9> <type 31>, y <esc:0x9> <type 31>, a <esc:0x1> <type 31>, b <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x12> <type 31>) .math/big.lehmerGCD (x <esc:0x1> <type 31>, y <esc:0x9> <type 31>, a <esc:0x1> <type 31>, b <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) Rand (rnd <esc:0x9> <type 12>, n <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) ModInverse (g <esc:0x1> <type 31>, n <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) .math/big.modSqrt3Mod4Prime (x <esc:0x9> <type 31>, p <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) .math/big.modSqrt5Mod8Prime (x <esc:0x1> <type 31>, p <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) .math/big.modSqrtTonelliShanks (x <esc:0x9> <type 31>, p <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) ModSqrt (x <esc:0x9> <type 31>, p <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) Lsh (x <esc:0x1> <type 31>, n <type -12>) <type 31>
 func (z <esc:0x1a> <type 31>) Rsh (x <esc:0x1> <type 31>, n <type -12>) <type 31>
 func (x <esc:0x1> <type 31>) Bit (i <type -11>) <type -12>
 func (z <esc:0x1a> <type 31>) SetBit (x <esc:0x1> <type 31>, i <type -11>, b <type -12>) <type 31>
 func (z <esc:0x1a> <type 31>) And (x <esc:0x1> <type 31>, y <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) AndNot (x <esc:0x1> <type 31>, y <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) Or (x <esc:0x1> <type 31>, y <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) Xor (x <esc:0x1> <type 31>, y <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) Not (x <esc:0x1> <type 31>) <type 31>
 func (z <esc:0x1a> <type 31>) Sqrt (x <esc:0x1> <type 31>) <type 31>
 func (x <esc:0x1> <type 31>) Text (base <type -11>) <type -16>
 func (x <esc:0x1> <type 31>) Append (buf <esc:0x12> <type 14>, base <type -11>) <type 14>
 func (x <esc:0x1> <type 31>) String () <type -16>
 func (x <esc:0x1> <type 31>) Format (s <type 36>, ch <type -21>)
 func (z <esc:0x1a> <type 31>) .math/big.scan (r <type 22>, base <type -11>) (? <type 31>, ? <type -11>, ? <type -19>)
 func (z <esc:0x9> <type 31>) Scan (s <type 33>, ch <type -21>) <type -19>
 func (x <esc:0x1> <type 31>) GobEncode () (? <type 14>, ? <type -19>)
 func (z <esc:0x9> <type 31>) GobDecode (buf <esc:0x1> <type 14>) <type -19>
 func (x <esc:0x1> <type 31>) MarshalText () (text <type 14>, err <type -19>)
 func (z <esc:0x9> <type 31>) UnmarshalText (text <type 14>) <type -19>
 func (x <esc:0x1> <type 31>) MarshalJSON () (? <type 14>, ? <type -19>)
 func (z <esc:0x9> <type 31>) UnmarshalJSON (text <type 14>) <type -19>
 func (x <esc:0x9> <type 31>) ProbablyPrime (n <type -11>) <type -15>
type 5 "Rat" <type 39>
 func (z <esc:0x1a> <type 32>) SetFloat64 (f <type -10>) <type 32>
 func (x <esc:0x1> <type 32>) Float32 () (f <type -9>, exact <type -15>)
 func (x <esc:0x1> <type 32>) Float64 () (f <type -10>, exact <type -15>)
 func (z <esc:0x1a> <type 32>) SetFrac (a <esc:0x1> <type 31>, b <esc:0x1> <type 31>) <type 32>
 func (z <esc:0x1a> <type 32>) SetFrac64 (a <type -4>, b <type -4>) <type 32>
 func (z <esc:0x1a> <type 32>) SetInt (x <esc:0x1> <type 31>) <type 32>
 func (z <esc:0x1a> <type 32>) SetInt64 (x <type -4>) <type 32>
 func (z <esc:0x1a> <type 32>) Set (x <esc:0x1> <type 32>) <type 32>
 func (z <esc:0x1a> <type 32>) Abs (x <esc:0x1> <type 32>) <type 32>
 func (z <esc:0x1a> <type 32>) Neg (x <esc:0x1> <type 32>) <type 32>
 func (z <esc:0x1a> <type 32>) Inv (x <esc:0x1> <type 32>) <type 32>
 func (x <esc:0x1> <type 32>) Sign () <type -11>
 func (x <esc:0x1> <type 32>) IsInt () <type -15>
 func (x <esc:0x12> <type 32>) Num () <type 31>
 func (x <esc:0x1a> <type 32>) Denom () <type 31>
 func (z <esc:0x1a> <type 32>) .math/big.norm () <type 32>
 func (x <esc:0x1> <type 32>) Cmp (y <esc:0x1> <type 32>) <type -11>
 func (z <esc:0x1a> <type 32>) Add (x <esc:0x1> <type 32>, y <esc:0x1> <type 32>) <type 32>
 func (z <esc:0x1a> <type 32>) Sub (x <esc:0x1> <type 32>, y <esc:0x1> <type 32>) <type 32>
 func (z <esc:0x1a> <type 32>) Mul (x <esc:0x1> <type 32>, y <esc:0x1> <type 32>) <type 32>
 func (z <esc:0x1a> <type 32>) Quo (x <esc:0x1> <type 32>, y <esc:0x1> <type 32>) <type 32>
 func (z <esc:0x9> <type 32>) Scan (s <type 33>, ch <type -21>) <type -19>
 func (z <esc:0x1a> <type 32>) SetString (s <type -16>) (? <type 32>, ? <type -15>)
 func (x <esc:0x1> <type 32>) String () <type -16>
 func (x <esc:0x1> <type 32>) .math/big.marshal () <type 14>
 func (x <esc:0x1> <type 32>) RatString () <type -16>
 func (x <esc:0x1> <type 32>) FloatString (prec <type -11>) <type -16>
 func (x <esc:0x1> <type 32>) GobEncode () (? <type 14>, ? <type -19>)
 func (z <esc:0x9> <type 32>) GobDecode (buf <esc:0x1> <type 14>) <type -19>
 func (x <esc:0x1> <type 32>) MarshalText () (text <type 14>, err <type -19>)
 func (z <esc:0x9> <type 32>) UnmarshalText (text <type 14>) <type -19>
type 6 "RoundingMode" <type -20>
 func (i <type 6>) String () <type -16>
type 7 "Word" <type -12>
type 8 struct { .math/big.msg <type -16>; }
type 9 struct { .math/big.prec <type -7>; .math/big.mode <type 6>; .math/big.acc <type 1>; .math/big.form <type 10>; .math/big.neg <type -15>; .math/big.mant <type 11>; .math/big.exp <type -3>; }
type 10 ".math/big.form" <type -20>
type 11 ".math/big.nat" <type 29>
 func (z <esc:0x1> <type 11>) .math/big.clear ()
 func (z <esc:0x12> <type 11>) .math/big.norm () <type 11>
 func (z <esc:0x12> <type 11>) .math/big.make (n <type -11>) <type 11>
 func (z <esc:0x12> <type 11>) .math/big.setWord (x <type 7>) <type 11>
 func (z <esc:0x12> <type 11>) .math/big.setUint64 (x <type -8>) <type 11>
 func (z <esc:0x12> <type 11>) .math/big.set (x <esc:0x1> <type 11>) <type 11>
 func (z <type 11>) .math/big.add (x <esc:0x1> <type 11>, y <esc:0x1> <type 11>) <type 11>
 func (z <esc:0x12> <type 11>) .math/big.sub (x <esc:0x1> <type 11>, y <esc:0x1> <type 11>) <type 11>
 func (x <esc:0x1> <type 11>) .math/big.cmp (y <esc:0x1> <type 11>) (r <type -11>)
 func (z <esc:0x12> <type 11>) .math/big.mulAddWW (x <esc:0x1> <type 11>, y <type 7>, r <type 7>) <type 11>
 func (z <esc:0x12> <type 11>) .math/big.montgomery (x <esc:0x1> <type 11>, y <esc:0x1> <type 11>, m <esc:0x1> <type 11>, k <type 7>, n <type -11>) <type 11>
 func (z <type 11>) .math/big.mul (x <esc:0x1> <type 11>, y <esc:0x1> <type 11>) <type 11>
 func (z <type 11>) .math/big.sqr (x <esc:0x1> <type 11>) <type 11>
 func (z <type 11>) .math/big.mulRange (a <type -8>, b <type -8>) <type 11>
 func (z <esc:0x12> <type 11>) .math/big.divW (x <esc:0x1> <type 11>, y <type 7>) (q <type 11>, r <type 7>)
 func (z <esc:0x12> <type 11>) .math/big.div (z2 <esc:0x82> <type 11>, u <esc:0x1> <type 11>, v <esc:0x1> <type 11>) (q <type 11>, r <type 11>)
 func (z <esc:0x12> <type 11>) .math/big.divLarge (u <esc:0x82> <type 11>, uIn <esc:0x1> <type 11>, vIn <esc:0x1> <type 11>) (q <type 11>, r <type 11>)
 func (x <esc:0x1> <type 11>) .math/big.bitLen () <type -11>
 func (x <esc:0x1> <type 11>) .math/big.trailingZeroBits () <type -12>
 func (z <esc:0x12> <type 11>) .math/big.shl (x <esc:0x1> <type 11>, s <type -12>) <type 11>
 func (z <esc:0x12> <type 11>) .math/big.shr (x <esc:0x1> <type 11>, s <type -12>) <type 11>
 func (z <esc:0x12> <type 11>) .math/big.setBit (x <esc:0x1> <type 11>, i <type -12>, b <type -12>) <type 11>
 func (x <esc:0x1> <type 11>) .math/big.bit (i <type -12>) <type -12>
 func (x <esc:0x1> <type 11>) .math/big.sticky (i <type -12>) <type -12>
 func (z <esc:0x12> <type 11>) .math/big.and (x <esc:0x1> <type 11>, y <esc:0x1> <type 11>) <type 11>
 func (z <esc:0x12> <type 11>) .math/big.andNot (x <esc:0x1> <type 11>, y <esc:0x1> <type 11>) <type 11>
 func (z <esc:0x12> <type 11>) .math/big.or (x <esc:0x1> <type 11>, y <esc:0x1> <type 11>) <type 11>
 func (z <esc:0x12> <type 11>) .math/big.xor (x <esc:0x1> <type 11>, y <esc:0x1> <type 11>) <type 11>
 func (x <esc:0x1> <type 11>) .math/big.modW (d <type 7>) (r <type 7>)
 func (z <esc:0x12> <type 11>) .math/big.random (rand <esc:0x9> <type 12>, limit <esc:0x1> <type 11>, n <type -11>) <type 11>
 func (z <type 11>) .math/big.expNN (x <type 11>, y <esc:0x1> <type 11>, m <esc:0x1> <type 11>) <type 11>
 func (z <type 11>) .math/big.expNNWindowed (x <type 11>, y <esc:0x1> <type 11>, m <esc:0x1> <type 11>) <type 11>
 func (z <esc:0x12> <type 11>) .math/big.expNNMontgomery (x <esc:0x1> <type 11>, y <esc:0x1> <type 11>, m <esc:0x1> <type 11>) <type 11>
 func (z <esc:0x1> <type 11>) .math/big.bytes (buf <esc:0x1> <type 14>) (i <type -11>)
 func (z <esc:0x12> <type 11>) .math/big.setBytes (buf <esc:0x1> <type 14>) <type 11>
 func (z <type 11>) .math/big.sqrt (x <esc:0x1> <type 11>) <type 11>
 func (z <esc:0x12> <type 11>) .math/big.scan (r <type 22>, base <type -11>, fracOk <type -15>) (res <type 11>, b <type -11>, count <type -11>, err <type -19>)
 func (x <esc:0x1> <type 11>) .math/big.utoa (base <type -11>) <type 14>
 func (x <esc:0x1> <type 11>) .math/big.itoa (neg <type -15>, base <type -11>) <type 14>
 func (q <esc:0x1> <type 11>) .math/big.convertWords (s <esc:0x1> <type 14>, b <type 7>, ndigits <type -11>, bb <type 7>, table <esc:0x1> <type 26>)
 func (z <type 11>) .math/big.expWW (x <type 7>, y <type 7>) <type 11>
 func (n <esc:0x1> <type 11>) .math/big.probablyPrimeMillerRabin (reps <type -11>, force2 <type -15>) <type -15>
 func (n <type 11>) .math/big.probablyPrimeLucas () <type -15>
type 12 *<type 13>
type 13 "math/rand.Rand" <type 17>
 func (r <type 12>) Read (p <esc:0x1> <type 14>) (n <type -11>, err <type -19>)
 func (r <esc:0x9> <type 12>) Shuffle (n <type -11>, swap <esc:0x1> <type 15>)
 func (r <esc:0x9> <type 12>) Float32 () <type -9>
 func (r <esc:0x9> <type 12>) ExpFloat64 () <type -10>
 func (r <esc:0x9> <type 12>) NormFloat64 () <type -10>
 func (r <esc:0x9> <type 12>) Seed (seed <type -4>)
 func (r <esc:0x9> <type 12>) Int63 () <type -4>
 func (r <esc:0x9> <type 12>) Float64 () <type -10>
 func (r <esc:0x9> <type 12>) Uint32 () <type -7>
 func (r <esc:0x9> <type 12>) Int31 () <type -3>
 func (r <esc:0x9> <type 12>) Int63n (n <type -4>) <type -4>
 func (r <esc:0x9> <type 12>) Int () <type -11>
 func (r <esc:0x9> <type 12>) Perm (n <type -11>) <type 16>
 func (r <esc:0x9> <type 12>) Uint64 () <type -8>
 func (r <esc:0x9> <type 12>) .math/rand.int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 12>) Int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 12>) Intn (n <type -11>) <type -11>
type 14 [] <type -20>
type 15 (i <type -11>, j <type -11>)
type 16 [] <type -11>
type 17 struct { .math/rand.src <type 18>; .math/rand.s64 <type 20>; .math/rand.readVal <type -4>; .math/rand.readPos <type -1>; }
type 18 "math/rand.Source" <type 19>
type 19 interface { Int63 () <type -4>; Seed (seed <type -4>); }
type 20 "math/rand.Source64" <type 21>
type 21 interface { ? <type 18>; Uint64 () <type -8>; }
type 22 "io.ByteScanner" <type 23>
type 23 interface { ? <type 24>; UnreadByte () <type -19>; }
type 24 "io.ByteReader" <type 25>
type 25 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 26 [] <type 27>
type 27 ".math/big.divisor" <type 28>
type 28 struct { .math/big.bbb <type 11>; .math/big.nbits <type -11>; .math/big.ndigits <type -11>; }
type 29 [] <type 7>
type 30 *<type 3>
type 31 *<type 4>
type 32 *<type 5>
type 33 "fmt.ScanState" <type 34>
type 34 interface { Read (buf <type 14>) (n <type -11>, err <type -19>); ReadRune () (r <type -21>, size <type -11>, err <type -19>); SkipSpace (); Token (skipSpace <type -15>, f <type 35>) (token <type 14>, err <type -19>); UnreadRune () <type -19>; Width () (wid <type -11>, ok <type -15>); }
type 35 (? <type -21>) <type -15>
type 36 "fmt.State" <type 37>
type 37 interface { Flag (c <type -11>) <type -15>; Precision () (prec <type -11>, ok <type -15>); Width () (wid <type -11>, ok <type -15>); Write (b <type 14>) (n <type -11>, err <type -19>); }
type 38 struct { .math/big.neg <type -15>; .math/big.abs <type 11>; }
type 39 struct { .math/big.a <type 4>; .math/big.b <type 4>; }
const Above <type 1> = 1 
const AwayFromZero <type 6> = 3 
const Below <type 1> = -1 
const Exact <type 1> = 0 
func Jacobi (x <esc:0x1> <type 31>, y <type 31>) <type -11>
const MaxBase = 62' 
const MaxExp = 2147483647 
const MaxPrec = 4294967295 
const MinExp = -2147483648 
func NewFloat (x <type -10>) <type 30>
func NewInt (x <type -4>) <type 31>
func NewRat (a <type -4>, b <type -4>) <type 32>
func ParseFloat (s <type -16>, base <type -11>, prec <type -12>, mode <type 6>) (f <type 30>, b <type -11>, err <type -19>)
const ToNearestAway <type 6> = 1 
const ToNearestEven <type 6> = 0 
const ToNegativeInf <type 6> = 4 
const ToPositiveInf <type 6> = 5 
const ToZero <type 6> = 2 
checksum FBDE9F06D06E5A5FD3DC59DFD2678318C6380EE7
v3;
package bits
pkgpath math/bits
import unsafe unsafe "unsafe"
types 1 1
func Add (x <type -12>, y <type -12>, carry <type -12>) (sum <type -12>, carryOut <type -12>)
func Add32 (x <type -7>, y <type -7>, carry <type -7>) (sum <type -7>, carryOut <type -7>)
func Add64 (x <type -8>, y <type -8>, carry <type -8>) (sum <type -8>, carryOut <type -8>)
func Div (hi <type -12>, lo <type -12>, y <type -12>) (quo <type -12>, rem <type -12>)
func Div32 (hi <type -7>, lo <type -7>, y <type -7>) (quo <type -7>, rem <type -7>)
func Div64 (hi <type -8>, lo <type -8>, y <type -8>) (quo <type -8>, rem <type -8>)
func LeadingZeros (x <type -12>) <type -11>
func LeadingZeros16 (x <type -6>) <type -11>
func LeadingZeros32 (x <type -7>) <type -11>
func LeadingZeros64 (x <type -8>) <type -11>
func LeadingZeros8 (x <type -5>) <type -11>
func Len (x <type -12>) <type -11>
func Len16 (x <type -6>) (n <type -11>)
func Len32 (x <type -7>) (n <type -11>)
func Len64 (x <type -8>) (n <type -11>)
func Len8 (x <type -5>) <type -11>
func Mul (x <type -12>, y <type -12>) (hi <type -12>, lo <type -12>)
func Mul32 (x <type -7>, y <type -7>) (hi <type -7>, lo <type -7>)
func Mul64 (x <type -8>, y <type -8>) (hi <type -8>, lo <type -8>)
func OnesCount (x <type -12>) <type -11>
func OnesCount16 (x <type -6>) <type -11>
func OnesCount32 (x <type -7>) <type -11>
func OnesCount64 (x <type -8>) <type -11>
func OnesCount8 (x <type -5>) <type -11>
func Reverse (x <type -12>) <type -12>
func Reverse16 (x <type -6>) <type -6>
func Reverse32 (x <type -7>) <type -7>
func Reverse64 (x <type -8>) <type -8>
func Reverse8 (x <type -5>) <type -5>
func ReverseBytes (x <type -12>) <type -12>
func ReverseBytes16 (x <type -6>) <type -6>
func ReverseBytes32 (x <type -7>) <type -7>
func ReverseBytes64 (x <type -8>) <type -8>
func RotateLeft (x <type -12>, k <type -11>) <type -12>
func RotateLeft16 (x <type -6>, k <type -11>) <type -6>
func RotateLeft32 (x <type -7>, k <type -11>) <type -7>
func RotateLeft64 (x <type -8>, k <type -11>) <type -8>
func RotateLeft8 (x <type -5>, k <type -11>) <type -5>
func Sub (x <type -12>, y <type -12>, borrow <type -12>) (diff <type -12>, borrowOut <type -12>)
func Sub32 (x <type -7>, y <type -7>, borrow <type -7>) (diff <type -7>, borrowOut <type -7>)
func Sub64 (x <type -8>, y <type -8>, borrow <type -8>) (diff <type -8>, borrowOut <type -8>)
func TrailingZeros (x <type -12>) <type -11>
func TrailingZeros16 (x <type -6>) <type -11>
func TrailingZeros32 (x <type -7>) <type -11>
func TrailingZeros64 (x <type -8>) <type -11>
func TrailingZeros8 (x <type -5>) <type -11>
const UintSize = 64 
checksum 4070B926C537DF77047824AF5D702DFE5B6AA2E1
v3;
package cmplx
pkgpath math/cmplx
import math math "math"
types 1 1
func Abs (x <type -18>) <type -10>
func Acos (x <type -18>) <type -18>
func Acosh (x <type -18>) <type -18>
func Asin (x <type -18>) <type -18>
func Asinh (x <type -18>) <type -18>
func Atan (x <type -18>) <type -18>
func Atanh (x <type -18>) <type -18>
func Conj (x <type -18>) <type -18>
func Cos (x <type -18>) <type -18>
func Cosh (x <type -18>) <type -18>
func Cot (x <type -18>) <type -18>
func Exp (x <type -18>) <type -18>
func Inf () <type -18>
func IsInf (x <type -18>) <type -15>
func IsNaN (x <type -18>) <type -15>
func Log (x <type -18>) <type -18>
func Log10 (x <type -18>) <type -18>
func NaN () <type -18>
func Phase (x <type -18>) <type -10>
func Polar (x <type -18>) (r <type -10>, \U000003b8 <type -10>)
func Pow (x <type -18>, y <type -18>) <type -18>
func Rect (r <type -10>, \U000003b8 <type -10>) <type -18>
func Sin (x <type -18>) <type -18>
func Sinh (x <type -18>) <type -18>
func Sqrt (x <type -18>) <type -18>
func Tan (x <type -18>) <type -18>
func Tanh (x <type -18>) <type -18>
checksum 8D7015DE5D1BF5B174732A0E55363EC7CADE5282
v3;
package rand
pkgpath math/rand
import math math "math"
import sync sync "sync"
init rand math..z2frand..import cpu internal..z2fcpu..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import
init_graph 0 1 0 2 0 3 0 4 2 1 2 3 4 1 4 2 4 3
types 14 5 990 26 28 212 17 17 21 128 36 22 65 55 276
type 1 "Rand" <type 8>
 func (r <esc:0x9> <type 5>) ExpFloat64 () <type -10>
 func (r <esc:0x9> <type 5>) NormFloat64 () <type -10>
 func (r <esc:0x9> <type 5>) Seed (seed <type -4>)
 func (r <esc:0x9> <type 5>) Int63 () <type -4>
 func (r <esc:0x9> <type 5>) Uint32 () <type -7>
 func (r <esc:0x9> <type 5>) Uint64 () <type -8>
 func (r <esc:0x9> <type 5>) Int31 () <type -3>
 func (r <esc:0x9> <type 5>) Int () <type -11>
 func (r <esc:0x9> <type 5>) Int63n (n <type -4>) <type -4>
 func (r <esc:0x9> <type 5>) Int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 5>) .math/rand.int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 5>) Intn (n <type -11>) <type -11>
 func (r <esc:0x9> <type 5>) Float64 () <type -10>
 func (r <esc:0x9> <type 5>) Float32 () <type -9>
 func (r <esc:0x9> <type 5>) Perm (n <type -11>) <type 7>
 func (r <esc:0x9> <type 5>) Shuffle (n <type -11>, swap <esc:0x1> <type 9>)
 func (r <type 5>) Read (p <esc:0x1> <type 10>) (n <type -11>, err <type -19>)
type 2 "Source" <type 11>
type 3 "Source64" <type 12>
type 4 "Zipf" <type 13>
 func (z <esc:0x1> <type 6>) .math/rand.h (x <type -10>) <type -10>
 func (z <esc:0x1> <type 6>) .math/rand.hinv (x <type -10>) <type -10>
 func (z <esc:0x9> <type 6>) Uint64 () <type -8>
type 5 *<type 1>
type 6 *<type 4>
type 7 [] <type -11>
type 8 struct { .math/rand.src <type 2>; .math/rand.s64 <type 3>; .math/rand.readVal <type -4>; .math/rand.readPos <type -1>; }
type 9 (i <type -11>, j <type -11>)
type 10 [] <type -20>
type 11 interface { Int63 () <type -4>; Seed (seed <type -4>); }
type 12 interface { ? <type 2>; Uint64 () <type -8>; }
type 13 struct { .math/rand.r <type 5>; .math/rand.imax <type -10>; .math/rand.v <type -10>; .math/rand.q <type -10>; .math/rand.s <type -10>; .math/rand.oneminusQ <type -10>; .math/rand.oneminusQinv <type -10>; .math/rand.hxm <type -10>; .math/rand.hx0minusHxm <type -10>; }
func ExpFloat64 () <type -10>
func Float32 () <type -9>
func Float64 () <type -10>
func Int () <type -11>
func Int31 () <type -3>
func Int31n (n <type -3>) <type -3>
func Int63 () <type -4>
func Int63n (n <type -4>) <type -4>
func Intn (n <type -11>) <type -11>
func New (src <type 2>) <type 5>
func NewSource (seed <type -4>) <type 2>
func NewZipf (r <type 5>, s <type -10>, v <type -10>, imax <type -8>) <type 6>
func NormFloat64 () <type -10>
func Perm (n <type -11>) <type 7>
func Read (p <esc:0x1> <type 10>) (n <type -11>, err <type -19>)
func Seed (seed <type -4>)
func Shuffle (n <type -11>, swap <esc:0x1> <type 9>)
func Uint32 () <type -7>
func Uint64 () <type -8>
checksum 7E16C3A279341B1F98E94A9DD6EB7E90FD21E94E
v3;
package mime
pkgpath mime
import bufio bufio "bufio"
import bytes bytes "bytes"
import base64 encoding/base64 "encoding/base64"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import os os "os"
import sort sort "sort"
import strings strings "strings"
import sync sync "sync"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
init mime mime..import bufio bufio..import bytes bytes..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 1 2 1 6 1 9 1 12 1 13 1 15 1 18 2 6 2 9 2 12 2 13 2 15 2 18 3 4 3 6 3 9 3 11 3 12 3 13 3 14 3 15 3 18 4 6 4 9 4 11 4 12 4 13 4 14 4 15 4 18 5 6 5 7 5 8 5 9 5 10 5 11 5 12 5 13 5 14 5 15 5 16 5 17 5 18 7 6 7 9 7 12 7 13 7 15 7 16 7 17 9 6 9 12 9 13 9 15 10 6 10 7 10 8 10 9 10 12 10 13 10 15 10 16 10 17 11 6 11 12 11 13 11 14 11 15 11 18 12 6 12 13 14 6 14 12 14 13 15 6 15 12 15 13 16 6 16 12 16 13 16 15 17 6 17 12 17 13 17 15 17 16
types 14 3 320 593 21 35 42 71 28 71 21 18 19 718 67
type 1 "WordDecoder" <type 5>
 func (d <esc:0x18a> <type 10>) Decode (word <type -16>) (? <type -16>, ? <type -19>)
 func (d <esc:0x18a> <type 10>) DecodeHeader (header <type -16>) (? <type -16>, ? <type -19>)
 func (d <esc:0x3a> <type 10>) .mime.convert (buf <type 11>, charset <type -16>, content <type 9>) <type -19>
type 2 "WordEncoder" <type -20>
 func (e <type 2>) Encode (charset <esc:0x1> <type -16>, s <type -16>) <type -16>
 func (e <type 2>) .mime.encodeWord (charset <esc:0x1> <type -16>, s <type -16>) <type -16>
 func (e <type 2>) .mime.bEncode (buf <type 11>, charset <esc:0x1> <type -16>, s <type -16>)
 func (e <type 2>) .mime.qEncode (buf <esc:0x9> <type 11>, charset <esc:0x1> <type -16>, s <esc:0x1> <type -16>)
 func (e <type 2>) .mime.openWord (buf <esc:0x9> <type 11>, charset <esc:0x1> <type -16>)
 func (e <type 2>) .mime.splitWord (buf <esc:0x9> <type 11>, charset <esc:0x1> <type -16>)
type 3 [] <type -16>
type 4 map [<type -16>] <type -16>
type 5 struct { CharsetReader <type 6>; }
type 6 (charset <type -16>, input <type 7>) (? <type 7>, ? <type -19>)
type 7 "io.Reader" <type 8>
type 8 interface { Read (p <type 9>) (n <type -11>, err <type -19>); }
type 9 [] <type -20>
type 10 *<type 1>
type 11 *<type 12>
type 12 "strings.Builder" <type 13>
 func (b <esc:0x9> <type 11>) WriteString (s <esc:0x1> <type -16>) (? <type -11>, ? <type -19>)
 func (b <esc:0x9> <type 11>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x9> <type 11>) Write (p <esc:0x1> <type 9>) (? <type -11>, ? <type -19>)
 func (b <esc:0x1> <type 11>) Grow (n <type -11>)
 func (b <esc:0x1> <type 11>) .strings.grow (n <type -11>)
 func (b <esc:0x1> <type 11>) Cap () <type -11>
 func (b <esc:0x1> <type 11>) Reset ()
 func (b <esc:0x1> <type 11>) Len () <type -11>
 func (b <esc:0x22> <type 11>) String () <type -16>
 func (b <esc:0x9> <type 11>) WriteRune (r <type -21>) (? <type -11>, ? <type -19>)
 func (b <esc:0x1> <type 11>) .strings.copyCheck ()
type 13 struct { .strings.addr <type 11>; .strings.buf <type 9>; }
func AddExtensionType (ext <type -16>, typ <type -16>) <type -19>
const BEncoding <type 2> = 98' 
var ErrInvalidMediaParameter <type -19>
func ExtensionsByType (typ <type -16>) (? <type 3>, ? <type -19>)
func FormatMediaType (t <esc:0x1> <type -16>, param <esc:0x1> <type 4>) <type -16>
func ParseMediaType (v <type -16>) (mediatype <type -16>, params <type 4>, err <type -19>)
const QEncoding <type 2> = 113' 
func TypeByExtension (ext <esc:0x1> <type -16>) <type -16>
checksum 0FC3FB7DDB63C961F04B2F240C38AA60A577F5EB
v3;
package multipart
pkgpath mime/multipart
import bufio bufio "bufio"
import bytes bytes "bytes"
import rand crypto/rand "crypto/rand"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import mime mime "mime"
import quotedprintable mime/quotedprintable "mime/quotedprintable"
import textproto net/textproto "net/textproto"
import os os "os"
import sort sort "sort"
import strings strings "strings"
init multipart mime..z2fmultipart..import bufio bufio..import bytes bytes..import context context..import cipher crypto..z2fcipher..import rand crypto..z2frand..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import io io..import ioutil io..z2fioutil..import big math..z2fbig..import rand math..z2frand..import mime mime..import quotedprintable mime..z2fquotedprintable..import net net..import textproto net..z2ftextproto..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 1 2 1 9 1 13 1 24 1 25 1 27 1 30 2 9 2 13 2 24 2 25 2 27 2 30 3 8 3 9 3 10 3 11 3 13 3 21 3 23 3 24 3 25 3 26 3 27 3 28 3 29 3 30 4 7 4 9 4 13 4 23 4 24 4 25 4 26 4 27 4 30 5 1 5 2 5 4 5 7 5 8 5 9 5 10 5 11 5 13 5 15 5 16 5 21 5 23 5 24 5 25 5 26 5 27 5 28 5 29 5 30 6 7 6 9 6 13 6 23 6 24 6 25 6 26 6 27 6 30 7 9 7 13 7 23 7 24 7 25 7 26 7 27 7 30 8 9 8 10 8 11 8 13 8 21 8 23 8 24 8 25 8 26 8 27 8 28 8 29 8 30 10 9 10 13 10 24 10 25 10 27 10 28 10 29 13 9 13 24 13 25 13 27 14 2 14 9 14 10 14 11 14 13 14 21 14 22 14 23 14 24 14 25 14 26 14 27 14 28 14 29 14 30 15 2 15 7 15 8 15 9 15 10 15 11 15 13 15 16 15 21 15 23 15 24 15 25 15 26 15 27 15 28 15 29 15 30 16 9 16 24 16 25 16 27 17 1 17 2 17 6 17 7 17 8 17 9 17 10 17 11 17 13 17 21 17 23 17 24 17 25 17 26 17 27 17 28 17 29 17 30 18 1 18 2 18 8 18 9 18 10 18 11 18 13 18 21 18 23 18 24 18 25 18 26 18 27 18 28 18 29 18 30 19 3 19 8 19 9 19 10 19 11 19 12 19 13 19 16 19 21 19 23 19 24 19 25 19 26 19 27 19 28 19 29 19 30 20 1 20 2 20 3 20 8 20 9 20 10 20 11 20 12 20 13 20 14 20 16 20 19 20 21 20 22 20 23 20 24 20 25 20 26 20 27 20 28 20 29 20 30 21 9 21 10 21 11 21 13 21 24 21 25 21 27 21 28 21 29 22 9 22 10 22 11 22 13 22 21 22 23 22 24 22 25 22 26 22 27 22 28 22 29 22 30 23 9 23 24 23 25 23 26 23 27 23 30 24 9 24 25 26 9 26 24 26 25 27 9 27 24 27 25 28 9 28 24 28 25 28 27 29 9 29 24 29 25 29 27 29 28
types 41 7 23 96 78 400 478 645 72 28 72 22 32 90 30 94 30 43 145 316 35 22 18 52 35 21 18 18 30 74 18 311 36 18 289 19 1435 186 121 19 189 115
type 1 "File" <type 7>
type 2 "FileHeader" <type 17>
 func (fh <esc:0x9> <type 21>) Open () (? <type 1>, ? <type -19>)
type 3 "Form" <type 22>
 func (f <esc:0x1> <type 25>) RemoveAll () <type -19>
type 4 "Part" <type 30>
 func (p <esc:0x1> <type 32>) FormName () <type -16>
 func (p <esc:0x1> <type 32>) FileName () <type -16>
 func (p <esc:0x1> <type 32>) .mime/multipart.parseContentDisposition ()
 func (bp <esc:0x9> <type 32>) .mime/multipart.populateHeaders () <type -19>
 func (p <esc:0x9> <type 32>) Read (d <type 10>) (n <type -11>, err <type -19>)
 func (p <type 32>) Close () <type -19>
type 5 "Reader" <type 33>
 func (r <type 26>) ReadForm (maxMemory <type -4>) (? <type 25>, ? <type -19>)
 func (r <type 26>) .mime/multipart.readForm (maxMemory <type -4>) (_ <type 25>, err <type -19>)
 func (r <type 26>) NextPart () (? <type 32>, ? <type -19>)
 func (mr <esc:0x1> <type 26>) .mime/multipart.isFinalBoundary (line <esc:0x1> <type 10>) <type -15>
 func (mr <esc:0x1> <type 26>) .mime/multipart.isBoundaryDelimiterLine (line <esc:0x1> <type 10>) (ret <type -15>)
type 6 "Writer" <type 37>
 func (w <esc:0x22> <type 29>) Boundary () <type -16>
 func (w <esc:0x1> <type 29>) SetBoundary (boundary <type -16>) <type -19>
 func (w <esc:0x1> <type 29>) FormDataContentType () <type -16>
 func (w <type 29>) CreatePart (header <esc:0x1> <type 18>) (? <type 27>, ? <type -19>)
 func (w <type 29>) CreateFormFile (fieldname <type -16>, filename <type -16>) (? <type 27>, ? <type -19>)
 func (w <type 29>) CreateFormField (fieldname <type -16>) (? <type 27>, ? <type -19>)
 func (w <type 29>) WriteField (fieldname <type -16>, value <esc:0x1> <type -16>) <type -19>
 func (w <esc:0x3a> <type 29>) Close () <type -19>
type 7 interface { ? <type 8>; ? <type 11>; ? <type 13>; ? <type 15>; }
type 8 "io.Reader" <type 9>
type 9 interface { Read (p <type 10>) (n <type -11>, err <type -19>); }
type 10 [] <type -20>
type 11 "io.ReaderAt" <type 12>
type 12 interface { ReadAt (p <type 10>, off <type -4>) (n <type -11>, err <type -19>); }
type 13 "io.Seeker" <type 14>
type 14 interface { Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>); }
type 15 "io.Closer" <type 16>
type 16 interface { Close () <type -19>; }
type 17 struct { Filename <type -16>; Header <type 18>; Size <type -4>; .mime/multipart.content <type 10>; .mime/multipart.tmpfile <type -16>; }
type 18 "net/textproto.MIMEHeader" <type 19>
 func (h <esc:0x1> <type 18>) Del (key <esc:0x1> <type -16>)
 func (h <esc:0x1> <type 18>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 18>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x9> <type 18>) Add (key <type -16>, value <type -16>)
type 19 map [<type -16>] <type 20>
type 20 [] <type -16>
type 21 *<type 2>
type 22 struct { Value <type 19>; File <type 23>; }
type 23 map [<type -16>] <type 24>
type 24 [] <type 21>
type 25 *<type 3>
type 26 *<type 5>
type 27 "io.Writer" <type 28>
type 28 interface { Write (p <type 10>) (n <type -11>, err <type -19>); }
type 29 *<type 6>
type 30 struct { Header <type 18>; .mime/multipart.mr <type 26>; .mime/multipart.disposition <type -16>; .mime/multipart.dispositionParams <type 31>; .mime/multipart.r <type 8>; .mime/multipart.n <type -11>; .mime/multipart.total <type -4>; .mime/multipart.err <type -19>; .mime/multipart.readErr <type -19>; }
type 31 map [<type -16>] <type -16>
type 32 *<type 4>
type 33 struct { .mime/multipart.bufReader <type 34>; .mime/multipart.currentPart <type 32>; .mime/multipart.partsRead <type -11>; .mime/multipart.nl <type 10>; .mime/multipart.nlDashBoundary <type 10>; .mime/multipart.dashBoundaryDash <type 10>; .mime/multipart.dashBoundary <type 10>; }
type 34 *<type 35>
type 35 "bufio.Reader" <type 36>
 func (b <esc:0x1> <type 34>) Buffered () <type -11>
 func (b <esc:0x10a> <type 34>) ReadBytes (delim <type -20>) (? <type 10>, ? <type -19>)
 func (b <esc:0x10a> <type 34>) Read (p <type 10>) (n <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 34>) Discard (n <type -11>) (discarded <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 34>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x9> <type 34>) .bufio.writeBuf (w <type 27>) (? <type -4>, ? <type -19>)
 func (b <esc:0x9> <type 34>) Reset (r <type 8>)
 func (b <esc:0x9> <type 34>) .bufio.fill ()
 func (b <esc:0x1> <type 34>) UnreadByte () <type -19>
 func (b <esc:0x10a> <type 34>) WriteTo (w <type 27>) (n <type -4>, err <type -19>)
 func (b <esc:0x10a> <type 34>) ReadString (delim <type -20>) (? <type -16>, ? <type -19>)
 func (b <esc:0x82a> <type 34>) ReadLine () (line <type 10>, isPrefix <type -15>, err <type -19>)
 func (b <esc:0x1> <type 34>) Size () <type -11>
 func (b <esc:0x80a> <type 34>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x1> <type 34>) .bufio.reset (buf <type 10>, r <type 8>)
 func (b <esc:0x12a> <type 34>) Peek (n <type -11>) (? <type 10>, ? <type -19>)
 func (b <esc:0x12a> <type 34>) ReadSlice (delim <type -20>) (line <type 10>, err <type -19>)
 func (b <esc:0x22> <type 34>) .bufio.readErr () <type -19>
 func (b <esc:0x1> <type 34>) UnreadRune () <type -19>
type 36 struct { .bufio.buf <type 10>; .bufio.rd <type 8>; .bufio.r <type -11>; .bufio.w <type -11>; .bufio.err <type -19>; .bufio.lastByte <type -11>; .bufio.lastRuneSize <type -11>; }
type 37 struct { .mime/multipart.w <type 27>; .mime/multipart.boundary <type -16>; .mime/multipart.lastpart <type 38>; }
type 38 *<type 39>
type 39 ".mime/multipart.part" <type 40>
 func (p <esc:0x22> <type 38>) .mime/multipart.close () <type -19>
 func (p <esc:0x9> <type 38>) Write (d <type 10>) (n <type -11>, err <type -19>)
type 40 struct { .mime/multipart.mw <type 29>; .mime/multipart.closed <type -15>; .mime/multipart.we <type -19>; }
var ErrMessageTooLarge <type -19>
func NewReader (r <type 8>, boundary <esc:0x1> <type -16>) <type 26>
func NewWriter (w <type 27>) <type 29>
checksum 809012696952BDF94654BA812FD407B87AD938EB
v3;
package quotedprintable
pkgpath mime/quotedprintable
import bufio bufio "bufio"
import bytes bytes "bytes"
import fmt fmt "fmt"
import io io "io"
init quotedprintable mime..z2fquotedprintable..import bufio bufio..import bytes bytes..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 1 2 1 4 1 7 1 10 1 11 1 13 1 16 2 4 2 7 2 10 2 11 2 13 2 16 3 4 3 5 3 6 3 7 3 8 3 9 3 10 3 11 3 12 3 13 3 14 3 15 3 16 5 4 5 7 5 10 5 11 5 13 5 14 5 15 7 4 7 10 7 11 7 13 8 4 8 5 8 6 8 7 8 10 8 11 8 13 8 14 8 15 9 4 9 10 9 11 9 12 9 13 9 16 10 4 10 11 12 4 12 10 12 11 13 4 13 10 13 11 14 4 14 10 14 11 14 13 15 4 15 10 15 11 15 13 15 14
types 16 3 116 570 28 71 21 17 28 72 17 131 19 1427 185 183 25
type 1 "Reader" <type 10>
 func (r <esc:0x10a> <type 6>) Read (p <esc:0x1> <type 5>) (n <type -11>, err <type -19>)
type 2 "Writer" <type 14>
 func (w <type 9>) Write (p <esc:0x1> <type 5>) (n <type -11>, err <type -19>)
 func (w <type 9>) Close () <type -19>
 func (w <type 9>) .mime/quotedprintable.write (p <esc:0x1> <type 5>) <type -19>
 func (w <type 9>) .mime/quotedprintable.encode (b <type -20>) <type -19>
 func (w <type 9>) .mime/quotedprintable.checkLastByte () <type -19>
 func (w <type 9>) .mime/quotedprintable.insertSoftLineBreak () <type -19>
 func (w <type 9>) .mime/quotedprintable.insertCRLF () <type -19>
 func (w <type 9>) .mime/quotedprintable.flush () <type -19>
type 3 "io.Reader" <type 4>
type 4 interface { Read (p <type 5>) (n <type -11>, err <type -19>); }
type 5 [] <type -20>
type 6 *<type 1>
type 7 "io.Writer" <type 8>
type 8 interface { Write (p <type 5>) (n <type -11>, err <type -19>); }
type 9 *<type 2>
type 10 struct { .mime/quotedprintable.br <type 11>; .mime/quotedprintable.rerr <type -19>; .mime/quotedprintable.line <type 5>; }
type 11 *<type 12>
type 12 "bufio.Reader" <type 13>
 func (b <esc:0x9> <type 11>) .bufio.writeBuf (w <type 7>) (? <type -4>, ? <type -19>)
 func (b <esc:0x10a> <type 11>) WriteTo (w <type 7>) (n <type -4>, err <type -19>)
 func (b <esc:0x10a> <type 11>) ReadString (delim <type -20>) (? <type -16>, ? <type -19>)
 func (b <esc:0x82a> <type 11>) ReadLine () (line <type 5>, isPrefix <type -15>, err <type -19>)
 func (b <esc:0x1> <type 11>) Size () <type -11>
 func (b <esc:0x9> <type 11>) Reset (r <type 3>)
 func (b <esc:0x9> <type 11>) .bufio.fill ()
 func (b <esc:0x1> <type 11>) UnreadByte () <type -19>
 func (b <esc:0x80a> <type 11>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x1> <type 11>) .bufio.reset (buf <type 5>, r <type 3>)
 func (b <esc:0x22> <type 11>) .bufio.readErr () <type -19>
 func (b <esc:0x1> <type 11>) UnreadRune () <type -19>
 func (b <esc:0x12a> <type 11>) ReadSlice (delim <type -20>) (line <type 5>, err <type -19>)
 func (b <esc:0x12a> <type 11>) Peek (n <type -11>) (? <type 5>, ? <type -19>)
 func (b <esc:0x10a> <type 11>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x10a> <type 11>) Discard (n <type -11>) (discarded <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 11>) Read (p <type 5>) (n <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 11>) ReadBytes (delim <type -20>) (? <type 5>, ? <type -19>)
 func (b <esc:0x1> <type 11>) Buffered () <type -11>
type 13 struct { .bufio.buf <type 5>; .bufio.rd <type 3>; .bufio.r <type -11>; .bufio.w <type -11>; .bufio.err <type -19>; .bufio.lastByte <type -11>; .bufio.lastRuneSize <type -11>; }
type 14 struct { Binary <type -15>; .mime/quotedprintable.w <type 7>; .mime/quotedprintable.i <type -11>; .mime/quotedprintable.line <type 15>; .mime/quotedprintable.cr <type -15>; }
type 15 [78 ] <type -20>
func NewReader (r <type 3>) <type 6>
func NewWriter (w <type 7>) <type 9>
checksum 60BA668BD4895D91DDC9BDD93C589F5955EA62F5
v3;
package net
pkgpath net
import context context "context"
import errors errors "errors"
import bytealg internal/bytealg "internal/bytealg"
import nettrace internal/nettrace "internal/nettrace"
import poll internal/poll "internal/poll"
import singleflight internal/singleflight "internal/singleflight"
import dnsmessage internal/x/net/dns/dnsmessage "internal/x/net/dns/dnsmessage"
import io io "io"
import rand math/rand "math/rand"
import os os "os"
import runtime runtime "runtime"
import sort sort "sort"
import sync sync "sync"
import atomic sync/atomic "sync/atomic"
import syscall syscall "syscall"
import time time "time"
import unsafe unsafe "unsafe"
init net net..import context context..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import io io..import rand math..z2frand..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 1 2 1 3 1 4 1 5 1 7 1 9 1 10 1 11 1 12 1 13 1 14 1 15 1 16 1 17 2 3 2 4 2 5 2 7 2 9 2 10 2 11 2 12 2 13 2 14 2 15 2 16 2 17 4 3 4 7 4 11 4 12 4 14 4 15 4 16 7 3 7 11 7 12 7 14 8 3 8 11 8 12 8 14 9 3 9 4 9 5 9 7 9 11 9 12 9 14 9 15 9 16 10 3 10 11 10 12 10 13 10 14 10 17 11 3 11 12 13 3 13 11 13 12 14 3 14 11 14 12 15 3 15 11 15 12 15 14 16 3 16 11 16 12 16 14 16 15
types 294 36 24 186 246 24 190 184 541 25 66 84 1054 693 1365 151 426 182 429 290 30 24 24 189 32 83 3965 25 693 658 749 693 1370 481 1486 798 197 67 52 18 21 22 18 30 74 316 3310 75 19 73 19 525 165 21 31 91 21 36 112 19 356 83 35 18 117 18 19 19 19 19 19 19 19 19 19 203 26 19 73 36 119 24 42 18 36 142 22 84 19 2808 32 141 195 21 22 32 19 76 136 3628 19 39 94 21 45 53 42 55 25 25 40 41 21 37 64 25 20 21 38 81 21 37 55 21 39 63 26 21 37 325 161 21 53 44 45 24 284 375 21 116 953 21 58 21 23 96 21 53 21 41 21 34 59 21 34 35 20 51 36 199 34 935 21 40 21 2130 33 180 50 20 111 20 21 22 39 20 20 20 100 22 23 20 23 20 23 20 53 37 99 20 329 54 20 112 92 445 21 21 50 216 228 21 20 20 70 114 21 24 23 28 51 70 40 28 95 93 21 65 37 370 33 244 21 37 72 601 21 55 27 56 57 2574 21 332 21 93 332 21 35 23 223 21 56 568 21 105 65 210 333 21 37 331 21 35 334 21 38 60 332 21 36 330 21 34 23 331 21 51 160 21 200 58 57 332 21 142 374 482 21 322 21 165 282 85 22 93 68 32 74 53 114 81 21 12 62
type 1 "Addr" <type 36>
type 2 "AddrError" <type 37>
 func (e <esc:0x22> <type 38>) Error () <type -16>
 func (e <esc:0x1> <type 38>) Timeout () <type -15>
 func (e <esc:0x1> <type 38>) Temporary () <type -15>
type 3 "Buffers" <type 39>
 func (v <type 41>) WriteTo (w <type 42>) (n <type -4>, err <type -19>)
 func (v <esc:0x9> <type 41>) Read (p <esc:0x1> <type 40>) (n <type -11>, err <type -19>)
 func (v <esc:0x9> <type 41>) .net.consume (n <type -4>)
type 4 "Conn" <type 44>
type 5 "DNSConfigError" <type 61>
 func (e <esc:0x9> <type 62>) Error () <type -16>
 func (e <esc:0x1> <type 62>) Timeout () <type -15>
 func (e <esc:0x1> <type 62>) Temporary () <type -15>
type 6 "DNSError" <type 63>
 func (e <esc:0x1> <type 64>) Error () <type -16>
 func (e <esc:0x1> <type 64>) Timeout () <type -15>
 func (e <esc:0x1> <type 64>) Temporary () <type -15>
type 7 "Dialer" <type 74>
 func (d <esc:0x1> <type 82>) .net.dualStack () <type -15>
 func (d <esc:0x22> <type 82>) .net.deadline (ctx <type 83>, now <esc:0x12> <type 45>) (earliest <type 45>)
 func (d <esc:0x22> <type 82>) .net.resolver () <type 65>
 func (d <esc:0x1> <type 82>) .net.fallbackDelay () <type 59>
 func (d <esc:0x9> <type 82>) Dial (network <type -16>, address <type -16>) (? <type 4>, ? <type -19>)
 func (d <esc:0x9> <type 82>) DialContext (ctx <type 83>, network <type -16>, address <type -16>) (? <type 4>, ? <type -19>)
type 8 "Error" <type 86>
type 9 "Flags" <type -12>
 func (f <type 9>) String () <type -16>
type 10 "HardwareAddr" <type 40>
 func (a <esc:0x1> <type 10>) String () <type -16>
type 11 "IP" <type 40>
 func (ip <esc:0x1> <type 11>) IsUnspecified () <type -15>
 func (ip <esc:0x1> <type 11>) IsLoopback () <type -15>
 func (ip <esc:0x1> <type 11>) IsMulticast () <type -15>
 func (ip <esc:0x1> <type 11>) IsInterfaceLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 11>) IsLinkLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 11>) IsLinkLocalUnicast () <type -15>
 func (ip <esc:0x1> <type 11>) IsGlobalUnicast () <type -15>
 func (ip <esc:0x12> <type 11>) To4 () <type 11>
 func (ip <esc:0x12> <type 11>) To16 () <type 11>
 func (ip <esc:0x1> <type 11>) DefaultMask () <type 14>
 func (ip <esc:0x1> <type 11>) Mask (mask <esc:0x1> <type 14>) <type 11>
 func (ip <esc:0x1> <type 11>) String () <type -16>
 func (ip <esc:0x1> <type 11>) MarshalText () (? <type 40>, ? <type -19>)
 func (ip <esc:0x1> <type 155>) UnmarshalText (text <esc:0x1> <type 40>) <type -19>
 func (ip <esc:0x1> <type 11>) Equal (x <esc:0x1> <type 11>) <type -15>
 func (ip <esc:0x1> <type 11>) .net.matchAddrFamily (x <esc:0x1> <type 11>) <type -15>
type 12 "IPAddr" <type 156>
 func (a <esc:0x1> <type 66>) Network () ($ret189 <type -16>) <inl:197>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/net/iprawsock.go:37
  { //37
   $ret189 = "ip" //37
   return //37
  } //0
 func (a <esc:0x1> <type 66>) String () <type -16>
 func (a <esc:0x1> <type 66>) .net.isWildcard () <type -15>
 func (a <esc:0x12> <type 66>) .net.opAddr () <type 1>
 func (a <esc:0x1> <type 66>) .net.family () <type -11>
 func (a <esc:0x1> <type 66>) .net.sockaddr (family <type -11>) (? <type 100>, ? <type -19>)
 func (a <esc:0xa> <type 66>) .net.toLocal (net <esc:0x1> <type -16>) <type 157>
type 13 "IPConn" <type 159>
 func (c <esc:0x9> <type 67>) SyscallConn () (? <type 78>, ? <type -19>)
 func (c <type 67>) ReadFromIP (b <esc:0x1> <type 40>) (? <type -11>, ? <type 66>, ? <type -19>)
 func (c <type 67>) ReadFrom (b <esc:0x1> <type 40>) (? <type -11>, ? <type 1>, ? <type -19>)
 func (c <type 67>) ReadMsgIP (b <esc:0x1> <type 40>, oob <esc:0x1> <type 40>) (n <type -11>, oobn <type -11>, flags <type -11>, addr <type 66>, err <type -19>)
 func (c <type 67>) WriteToIP (b <esc:0x1> <type 40>, addr <type 66>) (? <type -11>, ? <type -19>)
 func (c <type 67>) WriteTo (b <esc:0x1> <type 40>, addr <type 1>) (? <type -11>, ? <type -19>)
 func (c <type 67>) WriteMsgIP (b <esc:0x1> <type 40>, oob <esc:0x1> <type 40>, addr <type 66>) (n <type -11>, oobn <type -11>, err <type -19>)
 func (c <esc:0x9> <type 67>) .net.readFrom (b <esc:0x1> <type 40>) (? <type -11>, ? <type 66>, ? <type -19>)
 func (c <esc:0x9> <type 67>) .net.readMsg (b <esc:0x1> <type 40>, oob <esc:0x1> <type 40>) (n <type -11>, oobn <type -11>, flags <type -11>, addr <type 66>, err <type -19>)
 func (c <esc:0x9> <type 67>) .net.writeTo (b <esc:0x1> <type 40>, addr <esc:0x1> <type 66>) (? <type -11>, ? <type -19>)
 func (c <esc:0x9> <type 67>) .net.writeMsg (b <esc:0x1> <type 40>, oob <esc:0x1> <type 40>, addr <esc:0x1> <type 66>) (n <type -11>, oobn <type -11>, err <type -19>)
type 14 "IPMask" <type 40>
 func (m <esc:0x1> <type 14>) Size () (ones <type -11>, bits <type -11>)
 func (m <esc:0x1> <type 14>) String () <type -16>
type 15 "IPNet" <type 167>
 func (n <esc:0x1> <type 168>) Contains (ip <esc:0x1> <type 11>) <type -15>
 func (n <esc:0x1> <type 168>) Network () ($ret178 <type -16>) <inl:198>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/net/ip.go:514
  { //514
   $ret178 = "ip+net" //514
   return //514
  } //0
 func (n <esc:0x1> <type 168>) String () <type -16>
type 16 "Interface" <type 169>
 func (ifi <esc:0x1> <type 170>) Addrs () (? <type 171>, ? <type -19>)
 func (ifi <esc:0x1> <type 170>) MulticastAddrs () (? <type 171>, ? <type -19>)
type 17 "InvalidAddrError" <type -16>
 func (e <esc:0x12> <type 17>) Error () ($ret322 <type -16>) <inl:214>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/net/net.go:556
  { //556
   $ret322 = $convert(<type -16>, e) //556
   return //556
  } //0
 func (e <esc:0x1> <type 17>) Timeout () <type -15>
 func (e <esc:0x1> <type 17>) Temporary () <type -15>
type 18 "ListenConfig" <type 173>
 func (lc <esc:0x10a> <type 174>) Listen (ctx <type 83>, network <type -16>, address <type -16>) (? <type 19>, ? <type -19>)
 func (lc <esc:0x10a> <type 174>) ListenPacket (ctx <type 83>, network <type -16>, address <type -16>) (? <type 23>, ? <type -19>)
type 19 "Listener" <type 177>
type 20 "MX" <type 185>
type 21 "NS" <type 186>
type 22 "OpError" <type 187>
 func (e <esc:0x2a> <type 188>) Error () <type -16>
 func (e <esc:0x9> <type 188>) Timeout () <type -15>
 func (e <esc:0x9> <type 188>) Temporary () <type -15>
type 23 "PacketConn" <type 189>
type 24 "ParseError" <type 190>
 func (e <esc:0x1> <type 191>) Error () <type -16>
type 25 "Resolver" <type 192>
 func (r <type 65>) .net.resolveAddrList (ctx <type 83>, op <esc:0x1> <type -16>, network <type -16>, addr <type -16>, hint <type 1>) (? <type 218>, ? <type -19>)
 func (r <esc:0xc0a> <type 65>) .net.exchange (ctx <type 83>, server <type -16>, q <type 220>, timeout <type 59>) (? <type 230>, ? <type 267>, ? <type -19>)
 func (r <esc:0x9> <type 65>) .net.tryOneName (ctx <type 83>, cfg <type 279>, name <type -16>, qtype <type 228>) (? <type 230>, ? <type -16>, ? <type -19>)
 func (r <esc:0x9> <type 65>) .net.lookup (ctx <type 83>, name <type -16>, qtype <type 228>) (? <type 230>, ? <type -16>, ? <type -19>)
 func (r <type 65>) .net.goLookupHost (ctx <type 83>, name <type -16>) (addrs <type 93>, err <type -19>)
 func (r <type 65>) .net.goLookupHostOrder (ctx <type 83>, name <type -16>, order <type 282>) (addrs <type 93>, err <type -19>)
 func (r <type 65>) .net.goLookupIP (ctx <type 83>, host <type -16>) (addrs <type 283>, err <type -19>)
 func (r <type 65>) .net.goLookupIPCNAMEOrder (ctx <type 83>, name <type -16>, order <type 282>) (addrs <type 283>, cname <type 224>, err <type -19>)
 func (r <type 65>) .net.goLookupCNAME (ctx <type 83>, host <type -16>) (? <type -16>, ? <type -19>)
 func (r <esc:0x9> <type 65>) .net.goLookupPTR (ctx <type 83>, addr <type -16>) (? <type 93>, ? <type -19>)
 func (r <type 65>) .net.internetAddrList (ctx <type 83>, net <type -16>, addr <type -16>) (? <type 218>, ? <type -19>)
 func (r <esc:0x1> <type 65>) .net.preferGo () <type -15>
 func (r <esc:0x1> <type 65>) .net.strictErrors () <type -15>
 func (r <esc:0x12> <type 65>) .net.getLookupGroup () <type 195>
 func (r <type 65>) LookupHost (ctx <type 83>, host <type -16>) (addrs <type 93>, err <type -19>)
 func (r <type 65>) LookupIPAddr (ctx <type 83>, host <type -16>) (? <type 283>, ? <type -19>)
 func (r <type 65>) .net.lookupIPAddr (ctx <type 83>, network <type -16>, host <type -16>) (? <type 283>, ? <type -19>)
 func (r <esc:0x1> <type 65>) LookupPort (ctx <type 83>, network <type -16>, service <type -16>) (port <type -11>, err <type -19>)
 func (r <type 65>) LookupCNAME (ctx <type 83>, host <type -16>) (cname <type -16>, err <type -19>)
 func (r <esc:0x9> <type 65>) LookupSRV (ctx <type 83>, service <esc:0x1> <type -16>, proto <esc:0x1> <type -16>, name <type -16>) (cname <type -16>, addrs <type 183>, err <type -19>)
 func (r <esc:0x9> <type 65>) LookupMX (ctx <type 83>, name <type -16>) (? <type 179>, ? <type -19>)
 func (r <esc:0x9> <type 65>) LookupNS (ctx <type 83>, name <type -16>) (? <type 181>, ? <type -19>)
 func (r <esc:0x9> <type 65>) LookupTXT (ctx <type 83>, name <type -16>) (? <type 93>, ? <type -19>)
 func (r <esc:0x9> <type 65>) LookupAddr (ctx <type 83>, addr <type -16>) (names <type 93>, err <type -19>)
 func (r <esc:0x1b2> <type 65>) .net.dial (ctx <type 83>, network <type -16>, server <type -16>) (? <type 4>, ? <type -19>)
 func (r <type 65>) .net.lookupHost (ctx <type 83>, host <type -16>) (addrs <type 93>, err <type -19>)
 func (r <type 65>) .net.lookupIP (ctx <type 83>, network <type -16>, host <type -16>) (addrs <type 283>, err <type -19>)
 func (r <esc:0x1> <type 65>) .net.lookupPort (ctx <type 83>, network <type -16>, service <type -16>) (? <type -11>, ? <type -19>)
 func (r <type 65>) .net.lookupCNAME (ctx <type 83>, name <type -16>) (? <type -16>, ? <type -19>)
 func (r <esc:0x9> <type 65>) .net.lookupSRV (ctx <type 83>, service <esc:0x1> <type -16>, proto <esc:0x1> <type -16>, name <type -16>) (? <type -16>, ? <type 183>, ? <type -19>)
 func (r <esc:0x9> <type 65>) .net.lookupMX (ctx <type 83>, name <type -16>) (? <type 179>, ? <type -19>)
 func (r <esc:0x9> <type 65>) .net.lookupNS (ctx <type 83>, name <type -16>) (? <type 181>, ? <type -19>)
 func (r <esc:0x9> <type 65>) .net.lookupTXT (ctx <type 83>, name <type -16>) (? <type 93>, ? <type -19>)
 func (r <esc:0x9> <type 65>) .net.lookupAddr (ctx <type 83>, addr <type -16>) (? <type 93>, ? <type -19>)
type 26 "SRV" <type 284>
type 27 "TCPAddr" <type 285>
 func (a <esc:0x1> <type 68>) Network () ($ret419 <type -16>) <inl:196>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/net/tcpsock.go:26
  { //26
   $ret419 = "tcp" //26
   return //26
  } //0
 func (a <esc:0x1> <type 68>) String () <type -16>
 func (a <esc:0x1> <type 68>) .net.isWildcard () <type -15>
 func (a <esc:0x12> <type 68>) .net.opAddr () <type 1>
 func (a <esc:0x1> <type 68>) .net.family () <type -11>
 func (a <esc:0x1> <type 68>) .net.sockaddr (family <type -11>) (? <type 100>, ? <type -19>)
 func (a <esc:0xa> <type 68>) .net.toLocal (net <esc:0x1> <type -16>) <type 157>
type 28 "TCPConn" <type 159>
 func (c <esc:0x9> <type 69>) SyscallConn () (? <type 78>, ? <type -19>)
 func (c <type 69>) ReadFrom (r <type 286>) (? <type -4>, ? <type -19>)
 func (c <esc:0x2a> <type 69>) CloseRead () <type -19>
 func (c <esc:0x2a> <type 69>) CloseWrite () <type -19>
 func (c <esc:0x2a> <type 69>) SetLinger (sec <type -11>) <type -19>
 func (c <esc:0x2a> <type 69>) SetKeepAlive (keepalive <type -15>) <type -19>
 func (c <esc:0x2a> <type 69>) SetKeepAlivePeriod (d <type 59>) <type -19>
 func (c <esc:0x2a> <type 69>) SetNoDelay (noDelay <type -15>) <type -19>
 func (c <type 69>) .net.readFrom (r <type 286>) (? <type -4>, ? <type -19>)
type 29 "TCPListener" <type 162>
 func (l <esc:0x9> <type 175>) SyscallConn () (? <type 78>, ? <type -19>)
 func (l <esc:0x10a> <type 175>) AcceptTCP () (? <type 69>, ? <type -19>)
 func (l <esc:0x10a> <type 175>) Accept () (? <type 4>, ? <type -19>)
 func (l <esc:0x2a> <type 175>) Close () <type -19>
 func (l <esc:0x32> <type 175>) Addr () <type 1>
 func (l <esc:0x2a> <type 175>) SetDeadline (t <esc:0x1> <type 45>) <type -19>
 func (l <type 175>) File () (f <type 87>, err <type -19>)
 func (ln <esc:0x1> <type 175>) .net.ok () <type -15>
 func (ln <esc:0x9> <type 175>) .net.accept () (? <type 69>, ? <type -19>)
 func (ln <esc:0x9> <type 175>) .net.close () <type -19>
 func (ln <esc:0x9> <type 175>) .net.file () (? <type 87>, ? <type -19>)
type 30 "UDPAddr" <type 285>
 func (a <esc:0x1> <type 70>) Network () ($ret472 <type -16>) <inl:196>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/net/udpsock.go:32
  { //32
   $ret472 = "udp" //32
   return //32
  } //0
 func (a <esc:0x1> <type 70>) String () <type -16>
 func (a <esc:0x1> <type 70>) .net.isWildcard () <type -15>
 func (a <esc:0x12> <type 70>) .net.opAddr () <type 1>
 func (a <esc:0x1> <type 70>) .net.family () <type -11>
 func (a <esc:0x1> <type 70>) .net.sockaddr (family <type -11>) (? <type 100>, ? <type -19>)
 func (a <esc:0xa> <type 70>) .net.toLocal (net <esc:0x1> <type -16>) <type 157>
type 31 "UDPConn" <type 159>
 func (c <esc:0x9> <type 71>) SyscallConn () (? <type 78>, ? <type -19>)
 func (c <type 71>) ReadFromUDP (b <esc:0x1> <type 40>) (? <type -11>, ? <type 70>, ? <type -19>)
 func (c <type 71>) ReadFrom (b <esc:0x1> <type 40>) (? <type -11>, ? <type 1>, ? <type -19>)
 func (c <type 71>) ReadMsgUDP (b <esc:0x1> <type 40>, oob <esc:0x1> <type 40>) (n <type -11>, oobn <type -11>, flags <type -11>, addr <type 70>, err <type -19>)
 func (c <type 71>) WriteToUDP (b <esc:0x1> <type 40>, addr <type 70>) (? <type -11>, ? <type -19>)
 func (c <type 71>) WriteTo (b <esc:0x1> <type 40>, addr <type 1>) (? <type -11>, ? <type -19>)
 func (c <type 71>) WriteMsgUDP (b <esc:0x1> <type 40>, oob <esc:0x1> <type 40>, addr <type 70>) (n <type -11>, oobn <type -11>, err <type -19>)
 func (c <esc:0x9> <type 71>) .net.readFrom (b <esc:0x1> <type 40>) (? <type -11>, ? <type 70>, ? <type -19>)
 func (c <esc:0x9> <type 71>) .net.readMsg (b <esc:0x1> <type 40>, oob <esc:0x1> <type 40>) (n <type -11>, oobn <type -11>, flags <type -11>, addr <type 70>, err <type -19>)
 func (c <esc:0x9> <type 71>) .net.writeTo (b <esc:0x1> <type 40>, addr <esc:0x1> <type 70>) (? <type -11>, ? <type -19>)
 func (c <esc:0x9> <type 71>) .net.writeMsg (b <esc:0x1> <type 40>, oob <esc:0x1> <type 40>, addr <esc:0x1> <type 70>) (n <type -11>, oobn <type -11>, err <type -19>)
type 32 "UnixAddr" <type 288>
 func (a <esc:0x22> <type 72>) Network () <type -16>
 func (a <esc:0x22> <type 72>) String () <type -16>
 func (a <esc:0x1> <type 72>) .net.isWildcard () <type -15>
 func (a <esc:0x12> <type 72>) .net.opAddr () <type 1>
 func (a <esc:0x1> <type 72>) .net.family () <type -11>
 func (a <esc:0xa> <type 72>) .net.sockaddr (family <type -11>) (? <type 100>, ? <type -19>)
 func (a <esc:0x12> <type 72>) .net.toLocal (net <esc:0x1> <type -16>) <type 157>
type 33 "UnixConn" <type 159>
 func (c <esc:0x9> <type 73>) SyscallConn () (? <type 78>, ? <type -19>)
 func (c <esc:0x2a> <type 73>) CloseRead () <type -19>
 func (c <esc:0x2a> <type 73>) CloseWrite () <type -19>
 func (c <type 73>) ReadFromUnix (b <esc:0x1> <type 40>) (? <type -11>, ? <type 72>, ? <type -19>)
 func (c <type 73>) ReadFrom (b <esc:0x1> <type 40>) (? <type -11>, ? <type 1>, ? <type -19>)
 func (c <type 73>) ReadMsgUnix (b <esc:0x1> <type 40>, oob <esc:0x1> <type 40>) (n <type -11>, oobn <type -11>, flags <type -11>, addr <type 72>, err <type -19>)
 func (c <type 73>) WriteToUnix (b <esc:0x1> <type 40>, addr <type 72>) (? <type -11>, ? <type -19>)
 func (c <type 73>) WriteTo (b <esc:0x1> <type 40>, addr <type 1>) (? <type -11>, ? <type -19>)
 func (c <type 73>) WriteMsgUnix (b <esc:0x1> <type 40>, oob <esc:0x1> <type 40>, addr <type 72>) (n <type -11>, oobn <type -11>, err <type -19>)
 func (c <esc:0x9> <type 73>) .net.readFrom (b <esc:0x1> <type 40>) (? <type -11>, ? <type 72>, ? <type -19>)
 func (c <esc:0x9> <type 73>) .net.readMsg (b <esc:0x1> <type 40>, oob <esc:0x1> <type 40>) (n <type -11>, oobn <type -11>, flags <type -11>, addr <type 72>, err <type -19>)
 func (c <esc:0x9> <type 73>) .net.writeTo (b <esc:0x1> <type 40>, addr <esc:0x9> <type 72>) (? <type -11>, ? <type -19>)
 func (c <esc:0x9> <type 73>) .net.writeMsg (b <esc:0x1> <type 40>, oob <esc:0x1> <type 40>, addr <esc:0x9> <type 72>) (n <type -11>, oobn <type -11>, err <type -19>)
type 34 "UnixListener" <type 289>
 func (ln <esc:0x1> <type 176>) .net.ok () <type -15>
 func (l <esc:0x9> <type 176>) SyscallConn () (? <type 78>, ? <type -19>)
 func (l <esc:0x10a> <type 176>) AcceptUnix () (? <type 73>, ? <type -19>)
 func (l <esc:0x10a> <type 176>) Accept () (? <type 4>, ? <type -19>)
 func (l <type 176>) Close () <type -19>
 func (l <esc:0x32> <type 176>) Addr () <type 1>
 func (l <esc:0x2a> <type 176>) SetDeadline (t <esc:0x1> <type 45>) <type -19>
 func (l <type 176>) File () (f <type 87>, err <type -19>)
 func (ln <esc:0x9> <type 176>) .net.accept () (? <type 73>, ? <type -19>)
 func (ln <type 176>) .net.close () <type -19>
 func (ln <esc:0x9> <type 176>) .net.file () (? <type 87>, ? <type -19>)
 func (l <esc:0x1> <type 176>) SetUnlinkOnClose (unlink <type -15>)
type 35 "UnknownNetworkError" <type -16>
 func (e <esc:0x1> <type 35>) Error () <type -16>
 func (e <esc:0x1> <type 35>) Timeout () <type -15>
 func (e <esc:0x1> <type 35>) Temporary () <type -15>
type 36 interface { Network () <type -16>; String () <type -16>; }
type 37 struct { Err <type -16>; Addr <type -16>; }
type 38 *<type 2>
type 39 [] <type 40>
type 40 [] <type -20>
type 41 *<type 3>
type 42 "io.Writer" <type 43>
type 43 interface { Write (p <type 40>) (n <type -11>, err <type -19>); }
type 44 interface { Close () <type -19>; LocalAddr () <type 1>; Read (b <type 40>) (n <type -11>, err <type -19>); RemoteAddr () <type 1>; SetDeadline (t <type 45>) <type -19>; SetReadDeadline (t <type 45>) <type -19>; SetWriteDeadline (t <type 45>) <type -19>; Write (b <type 40>) (n <type -11>, err <type -19>); }
type 45 "time.Time" <type 60>
 func (t <esc:0x1> <type 45>) YearDay () <type -11>
 func (t <esc:0x1> <type 45>) Unix () <type -4>
 func (t <esc:0x1> <type 45>) Weekday () <type 46>
 func (t <esc:0x1> <type 45>) Second () <type -11>
 func (t <esc:0x1> <type 45>) Year () <type -11>
 func (t <esc:0x1> <type 47>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 47>) UnmarshalJSON (data <esc:0x1> <type 40>) <type -19>
 func (t <esc:0x1> <type 45>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 45>) Month () <type 48>
 func (t <esc:0x12> <type 45>) Location () <type 49>
 func (t <esc:0x1> <type 45>) GobEncode () (? <type 40>, ? <type -19>)
 func (t <esc:0x1> <type 45>) Date () (year <type -11>, month <type 48>, day <type -11>)
 func (t <esc:0x1> <type 45>) Hour () <type -11>
 func (t <esc:0x1> <type 45>) .time.abs () <type -8>
 func (t <esc:0x1> <type 45>) IsZero () <type -15>
 func (t <esc:0x1> <type 45>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 45>) UTC () <type 45>
 func (t <esc:0x12> <type 45>) In (loc <type 49>) <type 45>
 func (t <esc:0x32> <type 45>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 45>) Sub (u <esc:0x1> <type 45>) <type 59>
 func (t <esc:0x1> <type 45>) Equal (u <esc:0x1> <type 45>) <type -15>
 func (t <esc:0x1> <type 47>) .time.mono () <type -4>
 func (t <esc:0x1> <type 45>) MarshalText () (? <type 40>, ? <type -19>)
 func (t <esc:0x1> <type 47>) .time.stripMono ()
 func (t <esc:0x1> <type 45>) MarshalJSON () (? <type 40>, ? <type -19>)
 func (t <esc:0x1> <type 45>) .time.date (full <type -15>) (year <type -11>, month <type 48>, day <type -11>, yday <type -11>)
 func (t <type 45>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 45>
 func (t <esc:0x1> <type 47>) .time.sec () <type -4>
 func (t <esc:0x12> <type 45>) Local () <type 45>
 func (t <esc:0x1> <type 47>) UnmarshalBinary (data <esc:0x1> <type 40>) <type -19>
 func (t <esc:0x1> <type 47>) UnmarshalText (data <esc:0x1> <type 40>) <type -19>
 func (t <esc:0x12> <type 45>) Truncate (d <type 59>) <type 45>
 func (t <esc:0x1> <type 47>) .time.setLoc (loc <type 49>)
 func (t <esc:0x32> <type 45>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 45>) Before (u <esc:0x1> <type 45>) <type -15>
 func (t <esc:0x1> <type 47>) .time.nsec () <type -3>
 func (t <esc:0x12> <type 45>) Round (d <type 59>) <type 45>
 func (t <esc:0x1> <type 47>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 45>) Day () <type -11>
 func (t <esc:0x1> <type 47>) GobDecode (data <esc:0x1> <type 40>) <type -19>
 func (t <esc:0x1> <type 45>) UnixNano () <type -4>
 func (t <esc:0x1> <type 45>) After (u <esc:0x1> <type 45>) <type -15>
 func (t <esc:0x1> <type 45>) MarshalBinary () (? <type 40>, ? <type -19>)
 func (t <esc:0x1> <type 45>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 47>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 45>) Minute () <type -11>
 func (t <esc:0x1> <type 45>) AppendFormat (b <esc:0x12> <type 40>, layout <esc:0x1> <type -16>) <type 40>
 func (t <esc:0x12> <type 45>) Add (d <type 59>) <type 45>
 func (t <esc:0x1> <type 45>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 45>) String () <type -16>
type 46 "time.Weekday" <type -11>
 func (d <type 46>) String () <type -16>
type 47 *<type 45>
type 48 "time.Month" <type -11>
 func (m <type 48>) String () <type -16>
type 49 *<type 50>
type 50 "time.Location" <type 51>
 func (l <esc:0x12> <type 49>) .time.get () <type 49>
 func (l <esc:0x22> <type 49>) String () <type -16>
 func (l <esc:0x32> <type 49>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 49>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 49>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 49>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 51 struct { .time.name <type -16>; .time.zone <type 52>; .time.tx <type 55>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 58>; }
type 52 [] <type 53>
type 53 ".time.zone" <type 54>
type 54 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 55 [] <type 56>
type 56 ".time.zoneTrans" <type 57>
type 57 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 58 *<type 53>
type 59 "time.Duration" <type -4>
 func (d <type 59>) String () <type -16>
 func (d <type 59>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 59>) Seconds () <type -10>
 func (d <type 59>) Minutes () <type -10>
 func (d <type 59>) Hours () <type -10>
 func (d <type 59>) Truncate (m <type 59>) <type 59>
 func (d <type 59>) Round (m <type 59>) <type 59>
type 60 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 49>; }
type 61 struct { Err <type -19>; }
type 62 *<type 5>
type 63 struct { Err <type -16>; Name <type -16>; Server <type -16>; IsTimeout <type -15>; IsTemporary <type -15>; }
type 64 *<type 6>
type 65 *<type 25>
type 66 *<type 12>
type 67 *<type 13>
type 68 *<type 27>
type 69 *<type 28>
type 70 *<type 30>
type 71 *<type 31>
type 72 *<type 32>
type 73 *<type 33>
type 74 struct { Timeout <type 59>; Deadline <type 45>; LocalAddr <type 1>; DualStack <type -15>; FallbackDelay <type 59>; KeepAlive <type 59>; Resolver <type 65>; Cancel <type 75>; Control <type 77>; }
type 75 chan <- <type 76>
type 76 struct { }
type 77 (network <type -16>, address <type -16>, c <type 78>) <type -19>
type 78 "syscall.RawConn" <type 79>
type 79 interface { Control (f <type 80>) <type -19>; Read (f <type 81>) <type -19>; Write (f <type 81>) <type -19>; }
type 80 (fd <type -13>)
type 81 (fd <type -13>) (done <type -15>)
type 82 *<type 7>
type 83 "context.Context" <type 84>
type 84 interface { Deadline () (deadline <type 45>, ok <type -15>); Done () <type 75>; Err () <type -19>; Value (key <type 85>) <type 85>; }
type 85 interface { }
type 86 interface { ? <type -19>; Temporary () <type -15>; Timeout () <type -15>; }
type 87 *<type 88>
type 88 "os.File" <type 94>
 func (f <esc:0x10a> <type 87>) Stat () (? <type 89>, ? <type -19>)
 func (f <esc:0x10a> <type 87>) .os.readdir (n <type -11>) (fi <type 92>, err <type -19>)
 func (f <esc:0x9> <type 87>) .os.seek (offset <type -4>, whence <type -11>) (ret <type -4>, err <type -19>)
 func (f <esc:0x9> <type 87>) .os.pwrite (b <esc:0x1> <type 40>, off <type -4>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 87>) .os.write (b <type 40>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 87>) SetDeadline (t <esc:0x1> <type 45>) <type -19>
 func (f <esc:0x10a> <type 87>) WriteString (s <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (f <esc:0x10a> <type 87>) ReadAt (b <esc:0x1> <type 40>, off <type -4>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 87>) SetWriteDeadline (t <esc:0x1> <type 45>) <type -19>
 func (f <esc:0x10a> <type 87>) Read (b <type 40>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 87>) .os.pread (b <esc:0x1> <type 40>, off <type -4>) (n <type -11>, err <type -19>)
 func (f <esc:0x10a> <type 87>) Seek (offset <type -4>, whence <type -11>) (ret <type -4>, err <type -19>)
 func (f <esc:0x10a> <type 87>) Write (b <type 40>) (n <type -11>, err <type -19>)
 func (f <esc:0x9> <type 87>) SetReadDeadline (t <esc:0x1> <type 45>) <type -19>
 func (f <esc:0x9> <type 87>) .os.setReadDeadline (t <esc:0x1> <type 45>) <type -19>
 func (f <esc:0x22> <type 87>) .os.wrapErr (op <type -16>, err <type -19>) <type -19>
 func (f <type 87>) SyscallConn () (? <type 78>, ? <type -19>)
 func (f <esc:0x10a> <type 87>) WriteAt (b <esc:0x1> <type 40>, off <type -4>) (n <type -11>, err <type -19>)
 func (file <esc:0x10a> <type 87>) .os.readdirnames (n <type -11>) (names <type 93>, err <type -19>)
 func (f <esc:0x2a> <type 87>) Chmod (mode <type 91>) <type -19>
 func (f <esc:0x10a> <type 87>) Readdirnames (n <type -11>) (names <type 93>, err <type -19>)
 func (f <esc:0x2a> <type 87>) .os.chmod (mode <type 91>) <type -19>
 func (f <esc:0x9> <type 87>) Close () <type -19>
 func (f <esc:0x10a> <type 87>) Readdir (n <type -11>) (? <type 92>, ? <type -19>)
 func (f <esc:0x2a> <type 87>) Chown (uid <type -11>, gid <type -11>) <type -19>
 func (f <esc:0x2a> <type 87>) Truncate (size <type -4>) <type -19>
 func (f <esc:0x32> <type 87>) Name () <type -16>
 func (f <esc:0x2a> <type 87>) Sync () <type -19>
 func (f <esc:0x9> <type 87>) .os.setDeadline (t <esc:0x1> <type 45>) <type -19>
 func (f <esc:0x2a> <type 87>) Chdir () <type -19>
 func (f <esc:0x9> <type 87>) .os.setWriteDeadline (t <esc:0x1> <type 45>) <type -19>
 func (f <esc:0x1> <type 87>) .os.checkValid (op <esc:0x1> <type -16>) <type -19>
 func (f <esc:0x9> <type 87>) Fd () <type -13>
 func (f <esc:0x9> <type 87>) .os.read (b <type 40>) (n <type -11>, err <type -19>)
type 89 "os.FileInfo" <type 90>
type 90 interface { IsDir () <type -15>; ModTime () <type 45>; Mode () <type 91>; Name () <type -16>; Size () <type -4>; Sys () <type 85>; }
type 91 "os.FileMode" <type -7>
 func (m <type 91>) Perm () <type 91>
 func (m <type 91>) IsDir () <type -15>
 func (m <type 91>) IsRegular () <type -15>
 func (m <type 91>) String () <type -16>
type 92 [] <type 89>
type 93 [] <type -16>
type 94 struct { ? <type 95>; }
type 95 *<type 96>
type 96 ".os.file" <type 97>
 func (file <type 95>) .os.close () <type -19>
type 97 struct { .os.pfd <type 98>; .os.name <type -16>; .os.dirinfo <type 149>; .os.nonblock <type -15>; .os.stdoutOrErr <type -15>; }
type 98 "internal/poll.FD" <type 135>
 func (fd <type 99>) Accept () (? <type -11>, ? <type 100>, ? <type -16>, ? <type -19>)
 func (fd <type 99>) Pwrite (p <esc:0x1> <type 40>, off <type -4>) (? <type -11>, ? <type -19>)
 func (fd <type 99>) .internal/poll.writeUnlock ()
 func (fd <type 99>) Write (p <type 40>) (? <type -11>, ? <type -19>)
 func (fd <type 99>) ReadFrom (p <esc:0x1> <type 40>) (? <type -11>, ? <type 100>, ? <type -19>)
 func (fd <type 99>) .internal/poll.readLock () <type -19>
 func (fd <type 99>) Pread (p <esc:0x1> <type 40>, off <type -4>) (? <type -11>, ? <type -19>)
 func (fd <type 99>) Read (p <type 40>) (? <type -11>, ? <type -19>)
 func (fd <type 99>) Shutdown (how <type -11>) <type -19>
 func (fd <type 99>) Close () <type -19>
 func (fd <type 99>) .internal/poll.destroy () <type -19>
 func (fd <type 99>) Ftruncate (size <type -4>) <type -19>
 func (fd <type 99>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (fd <esc:0x1> <type 99>) Init (net <esc:0x1> <type -16>, pollable <type -15>) <type -19>
 func (fd <type 99>) Fsync () <type -19>
 func (fd <type 99>) .internal/poll.readUnlock ()
 func (fd <type 99>) Dup () (? <type -11>, ? <type -16>, ? <type -19>)
 func (fd <type 99>) Fchmod (mode <type -7>) <type -19>
 func (fd <type 99>) Fchdir () <type -19>
 func (fd <type 99>) SetsockoptInt (level <type -11>, name <type -11>, arg <type -11>) <type -19>
 func (fd <type 99>) WriteOnce (p <type 40>) (? <type -11>, ? <type -19>)
 func (fd <type 99>) SetsockoptIPMreq (level <type -11>, name <type -11>, mreq <esc:0x1> <type 111>) <type -19>
 func (fd <type 99>) Writev (v <esc:0x9> <type 115>) (? <type -4>, ? <type -19>)
 func (fd <type 99>) RawControl (f <esc:0x1> <type 80>) <type -19>
 func (fd <esc:0x1> <type 99>) WaitWrite () <type -19>
 func (fd <type 99>) SetsockoptIPMreqn (level <type -11>, name <type -11>, mreq <esc:0x1> <type 116>) <type -19>
 func (fd <type 99>) RawWrite (f <esc:0x1> <type 81>) <type -19>
 func (fd <type 99>) Fchown (uid <type -11>, gid <type -11>) <type -19>
 func (fd <type 99>) SetReadDeadline (t <esc:0x1> <type 45>) <type -19>
 func (fd <type 99>) SetsockoptLinger (level <type -11>, name <type -11>, l <esc:0x1> <type 119>) <type -19>
 func (fd <type 99>) SetsockoptIPv6Mreq (level <type -11>, name <type -11>, mreq <esc:0x1> <type 122>) <type -19>
 func (fd <type 99>) SetsockoptByte (level <type -11>, name <type -11>, arg <type -20>) <type -19>
 func (fd <type 99>) SetBlocking () <type -19>
 func (fd <type 99>) ReadDirent (buf <esc:0x1> <type 40>) (? <type -11>, ? <type -19>)
 func (fd <type 99>) .internal/poll.decref () <type -19>
 func (fd <type 99>) RawRead (f <esc:0x1> <type 81>) <type -19>
 func (fd <type 99>) SetDeadline (t <esc:0x1> <type 45>) <type -19>
 func (fd <type 99>) Fstat (s <esc:0x1> <type 126>) <type -19>
 func (fd <type 99>) ReadMsg (p <esc:0x1> <type 40>, oob <esc:0x1> <type 40>) (? <type -11>, ? <type -11>, ? <type -11>, ? <type 100>, ? <type -19>)
 func (fd <type 99>) .internal/poll.writeLock () <type -19>
 func (fd <type 99>) SetsockoptInet4Addr (level <type -11>, name <type -11>, arg <type 114>) <type -19>
 func (fd <esc:0x1> <type 99>) .internal/poll.eofError (n <type -11>, err <esc:0x12> <type -19>) <type -19>
 func (fd <type 99>) WriteTo (p <esc:0x1> <type 40>, sa <type 100>) (? <type -11>, ? <type -19>)
 func (fd <type 99>) SetWriteDeadline (t <esc:0x1> <type 45>) <type -19>
 func (fd <type 99>) .internal/poll.incref () <type -19>
 func (fd <type 99>) WriteMsg (p <esc:0x1> <type 40>, oob <esc:0x1> <type 40>, sa <type 100>) (? <type -11>, ? <type -11>, ? <type -19>)
type 99 *<type 98>
type 100 "syscall.Sockaddr" <type 101>
type 101 interface { .syscall.sockaddr () (ptr <type 102>, len <type 109>, err <type -19>); }
type 102 *<type 103>
type 103 "syscall.RawSockaddrAny" <type 104>
type 104 struct { Addr <type 105>; Pad <type 108>; }
type 105 "syscall.RawSockaddr" <type 106>
type 106 struct { Family <type -6>; Data <type 107>; }
type 107 [14 ] <type -1>
type 108 [96 ] <type -1>
type 109 "syscall.Socklen_t" <type 110>
type 110 ".syscall._socklen_t" <type -7>
type 111 *<type 112>
type 112 "syscall.IPMreq" <type 113>
type 113 struct { Multiaddr <type 114>; Interface <type 114>; }
type 114 [4 ] <type -20>
type 115 *<type 39>
type 116 *<type 117>
type 117 "syscall.IPMreqn" <type 118>
type 118 struct { Multiaddr <type 114>; Address <type 114>; Ifindex <type -3>; }
type 119 *<type 120>
type 120 "syscall.Linger" <type 121>
type 121 struct { Onoff <type -3>; Linger <type -3>; }
type 122 *<type 123>
type 123 "syscall.IPv6Mreq" <type 124>
type 124 struct { Multiaddr <type 125>; Interface <type -7>; }
type 125 [16 ] <type -20>
type 126 *<type 127>
type 127 "syscall.Stat_t" <type 128>
type 128 struct { Dev <type -8>; Ino <type -8>; Mode <type -7>; Nlink <type -7>; Uid <type -7>; Gid <type -7>; Rdev <type -8>; .syscall.__pad1 <type -8>; Size <type -4>; Blksize <type -3>; .syscall.__pad2 <type -3>; Blocks <type -4>; Atim <type 129>; Mtim <type 129>; Ctim <type 129>; .syscall.__glibc_reserved <type 134>; }
type 129 "syscall.Timespec" <type 131>
 func (ts <esc:0x1> <type 130>) Nano () <type -4>
 func (ts <esc:0x1> <type 130>) Unix () (sec <type -4>, nsec <type -4>)
type 130 *<type 129>
type 131 struct { Sec <type 132>; Nsec <type 133>; }
type 132 "syscall.Timespec_sec_t" <type -4>
type 133 "syscall.Timespec_nsec_t" <type -4>
type 134 [2 ] <type -3>
type 135 struct { .internal/poll.fdmu <type 136>; Sysfd <type -11>; .internal/poll.pd <type 139>; .internal/poll.iovecs <type 142>; .internal/poll.csema <type -7>; .internal/poll.isBlocking <type -7>; IsStream <type -15>; ZeroReadIsEOF <type -15>; .internal/poll.isFile <type -15>; }
type 136 ".internal/poll.fdMutex" <type 138>
 func (mu <type 137>) .internal/poll.incref () <type -15>
 func (mu <type 137>) .internal/poll.increfAndClose () <type -15>
 func (mu <type 137>) .internal/poll.decref () <type -15>
 func (mu <type 137>) .internal/poll.rwlock (read <type -15>) <type -15>
 func (mu <type 137>) .internal/poll.rwunlock (read <type -15>) <type -15>
type 137 *<type 136>
type 138 struct { .internal/poll.state <type -8>; .internal/poll.rsema <type -7>; .internal/poll.wsema <type -7>; }
type 139 ".internal/poll.pollDesc" <type 141>
 func (pd <esc:0x1> <type 140>) .internal/poll.init (fd <esc:0x1> <type 99>) <type -19>
 func (pd <esc:0x1> <type 140>) .internal/poll.evict ()
 func (pd <esc:0x1> <type 140>) .internal/poll.close ()
 func (pd <esc:0x1> <type 140>) .internal/poll.wait (mode <type -11>, isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 140>) .internal/poll.prepare (mode <type -11>, isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 140>) .internal/poll.pollable () <type -15>
 func (pd <esc:0x1> <type 140>) .internal/poll.prepareRead (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 140>) .internal/poll.waitWrite (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 140>) .internal/poll.prepareWrite (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 140>) .internal/poll.waitRead (isFile <type -15>) <type -19>
 func (pd <esc:0x1> <type 140>) .internal/poll.waitCanceled (mode <type -11>)
type 140 *<type 139>
type 141 struct { .internal/poll.runtimeCtx <type -13>; }
type 142 *<type 143>
type 143 [] <type 144>
type 144 "syscall.Iovec" <type 146>
 func (iov <esc:0x1> <type 145>) SetLen (length <type -11>)
type 145 *<type 144>
type 146 struct { Base <type 147>; Len <type 148>; }
type 147 *<type -20>
type 148 "syscall.Iovec_len_t" <type -8>
type 149 *<type 150>
type 150 ".os.dirInfo" <type 151>
type 151 struct { .os.buf <type 40>; .os.dir <type 152>; }
type 152 *<type 153>
type 153 "syscall.DIR" <type 154>
type 154 ".syscall._DIR" <type 76>
type 155 *<type 11>
type 156 struct { IP <type 11>; Zone <type -16>; }
type 157 ".net.sockaddr" <type 158>
type 158 interface { ? <type 1>; .net.family () <type -11>; .net.isWildcard () <type -15>; .net.sockaddr (family <type -11>) (? <type 100>, ? <type -19>); .net.toLocal (net <type -16>) <type 157>; }
type 159 struct { ? <type 160>; }
type 160 ".net.conn" <type 162>
 func (c <esc:0x1> <type 161>) .net.ok () <type -15>
 func (c <type 161>) Read (b <type 40>) (? <type -11>, ? <type -19>)
 func (c <type 161>) Write (b <type 40>) (? <type -11>, ? <type -19>)
 func (c <type 161>) Close () <type -19>
 func (c <esc:0x32> <type 161>) LocalAddr () <type 1>
 func (c <esc:0x32> <type 161>) RemoteAddr () <type 1>
 func (c <esc:0x2a> <type 161>) SetDeadline (t <esc:0x1> <type 45>) <type -19>
 func (c <esc:0x2a> <type 161>) SetReadDeadline (t <esc:0x1> <type 45>) <type -19>
 func (c <esc:0x2a> <type 161>) SetWriteDeadline (t <esc:0x1> <type 45>) <type -19>
 func (c <esc:0x2a> <type 161>) SetReadBuffer (bytes <type -11>) <type -19>
 func (c <esc:0x2a> <type 161>) SetWriteBuffer (bytes <type -11>) <type -19>
 func (c <type 161>) File () (f <type 87>, err <type -19>)
 func (c <esc:0x10a> <type 161>) .net.writeBuffers (v <esc:0x9> <type 41>) (? <type -4>, ? <type -19>)
type 161 *<type 160>
type 162 struct { .net.fd <type 163>; }
type 163 *<type 164>
type 164 ".net.netFD" <type 166>
 func (fd <esc:0x1> <type 163>) .net.init () <type -19>
 func (fd <type 163>) .net.setAddr (laddr <type 1>, raddr <type 1>)
 func (fd <esc:0x9> <type 163>) .net.name () <type -16>
 func (fd <type 163>) .net.connect (ctx <type 83>, la <esc:0x1> <type 100>, ra <type 100>) (rsa <type 100>, ret <type -19>)
 func (fd <type 163>) Close () <type -19>
 func (fd <type 163>) .net.shutdown (how <type -11>) <type -19>
 func (fd <type 163>) .net.closeRead () <type -19>
 func (fd <type 163>) .net.closeWrite () <type -19>
 func (fd <type 163>) Read (p <type 40>) (n <type -11>, err <type -19>)
 func (fd <type 163>) .net.readFrom (p <esc:0x1> <type 40>) (n <type -11>, sa <type 100>, err <type -19>)
 func (fd <type 163>) .net.readMsg (p <esc:0x1> <type 40>, oob <esc:0x1> <type 40>) (n <type -11>, oobn <type -11>, flags <type -11>, sa <type 100>, err <type -19>)
 func (fd <type 163>) Write (p <type 40>) (nn <type -11>, err <type -19>)
 func (fd <type 163>) .net.writeTo (p <esc:0x1> <type 40>, sa <type 100>) (n <type -11>, err <type -19>)
 func (fd <type 163>) .net.writeMsg (p <esc:0x1> <type 40>, oob <esc:0x1> <type 40>, sa <type 100>) (n <type -11>, oobn <type -11>, err <type -19>)
 func (fd <type 163>) .net.accept () (netfd <type 163>, err <type -19>)
 func (fd <type 163>) .net.dup () (f <type 87>, err <type -19>)
 func (fd <type 163>) SetDeadline (t <esc:0x1> <type 45>) <type -19>
 func (fd <type 163>) SetReadDeadline (t <esc:0x1> <type 45>) <type -19>
 func (fd <type 163>) SetWriteDeadline (t <esc:0x1> <type 45>) <type -19>
 func (fd <esc:0x22> <type 163>) .net.ctrlNetwork () <type -16>
 func (fd <esc:0x1> <type 163>) .net.addrFunc () <type 165>
 func (fd <type 163>) .net.dial (ctx <type 83>, laddr <type 157>, raddr <type 157>, ctrlFn <esc:0x22> <type 77>) <type -19>
 func (fd <type 163>) .net.listenStream (laddr <type 157>, backlog <type -11>, ctrlFn <esc:0x22> <type 77>) <type -19>
 func (fd <type 163>) .net.listenDatagram (laddr <type 157>, ctrlFn <esc:0x22> <type 77>) <type -19>
 func (fd <type 163>) .net.writeBuffers (v <esc:0x9> <type 41>) (n <type -4>, err <type -19>)
type 165 (? <type 100>) <type 1>
type 166 struct { .net.pfd <type 98>; .net.family <type -11>; .net.sotype <type -11>; .net.isConnected <type -15>; .net.net <type -16>; .net.laddr <type 1>; .net.raddr <type 1>; }
type 167 struct { IP <type 11>; Mask <type 14>; }
type 168 *<type 15>
type 169 struct { Index <type -11>; MTU <type -11>; Name <type -16>; HardwareAddr <type 10>; Flags <type 9>; }
type 170 *<type 16>
type 171 [] <type 1>
type 172 [] <type 16>
type 173 struct { Control <type 77>; }
type 174 *<type 18>
type 175 *<type 29>
type 176 *<type 34>
type 177 interface { Accept () (? <type 4>, ? <type -19>); Addr () <type 1>; Close () <type -19>; }
type 178 [] <type 11>
type 179 [] <type 180>
type 180 *<type 20>
type 181 [] <type 182>
type 182 *<type 21>
type 183 [] <type 184>
type 184 *<type 26>
type 185 struct { Host <type -16>; Pref <type -6>; }
type 186 struct { Host <type -16>; }
type 187 struct { Op <type -16>; Net <type -16>; Source <type 1>; Addr <type 1>; Err <type -19>; }
type 188 *<type 22>
type 189 interface { Close () <type -19>; LocalAddr () <type 1>; ReadFrom (p <type 40>) (n <type -11>, addr <type 1>, err <type -19>); SetDeadline (t <type 45>) <type -19>; SetReadDeadline (t <type 45>) <type -19>; SetWriteDeadline (t <type 45>) <type -19>; WriteTo (p <type 40>, addr <type 1>) (n <type -11>, err <type -19>); }
type 190 struct { Type <type -16>; Text <type -16>; }
type 191 *<type 24>
type 192 struct { PreferGo <type -15>; StrictErrors <type -15>; Dial <type 193>; .net.lookupGroup <type 194>; }
type 193 (ctx <type 83>, network <type -16>, address <type -16>) (? <type 4>, ? <type -19>)
type 194 "internal/singleflight.Group" <type 213>
 func (g <type 195>) ForgetUnshared (key <esc:0x1> <type -16>) <type -15>
 func (g <type 195>) .internal/singleflight.doCall (c <type 196>, key <esc:0x1> <type -16>, fn <esc:0x9> <type 211>)
 func (g <type 195>) DoChan (key <type -16>, fn <type 211>) (? <type 212>, ? <type -15>)
 func (g <type 195>) Do (key <type -16>, fn <esc:0x9> <type 211>) (v <type 85>, err <type -19>, shared <type -15>)
type 195 *<type 194>
type 196 *<type 197>
type 197 ".internal/singleflight.call" <type 198>
type 198 struct { .internal/singleflight.wg <type 199>; .internal/singleflight.val <type 85>; .internal/singleflight.err <type -19>; .internal/singleflight.dups <type -11>; .internal/singleflight.chans <type 207>; }
type 199 "sync.WaitGroup" <type 203>
 func (wg <type 200>) Wait ()
 func (wg <type 200>) Done ()
 func (wg <type 200>) Add (delta <type -11>)
 func (wg <esc:0x92> <type 200>) .sync.state () (statep <type 201>, semap <type 202>)
type 200 *<type 199>
type 201 *<type -8>
type 202 *<type -7>
type 203 struct { .sync.noCopy <type 204>; .sync.state1 <type 206>; }
type 204 ".sync.noCopy" <type 76>
 func (? <esc:0x1> <type 205>) Unlock ()
 func (? <esc:0x1> <type 205>) Lock ()
type 205 *<type 204>
type 206 [3 ] <type -7>
type 207 [] <type 208>
type 208 chan -< <type 209>
type 209 "internal/singleflight.Result" <type 210>
type 210 struct { Val <type 85>; Err <type -19>; Shared <type -15>; }
type 211 () (? <type 85>, ? <type -19>)
type 212 chan <- <type 209>
type 213 struct { .internal/singleflight.mu <type 214>; .internal/singleflight.m <type 217>; }
type 214 "sync.Mutex" <type 216>
 func (m <type 215>) Lock ()
 func (m <type 215>) Unlock ()
type 215 *<type 214>
type 216 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 217 map [<type -16>] <type 196>
type 218 ".net.addrList" <type 171>
 func (addrs <esc:0x2a> <type 218>) .net.forResolve (network <esc:0x1> <type -16>, addr <esc:0x1> <type -16>) <type 1>
 func (addrs <esc:0x2a> <type 218>) .net.first (strategy <esc:0x1> <type 219>) <type 1>
 func (addrs <esc:0x9> <type 218>) .net.partition (strategy <esc:0x1> <type 219>) (primaries <type 218>, fallbacks <type 218>)
type 219 (? <type 1>) <type -15>
type 220 "internal/x/net/dns/dnsmessage.Question" <type 223>
 func (q <esc:0x1> <type 221>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 40>, compression <esc:0x1> <type 222>, compressionOff <type -11>) (? <type 40>, ? <type -19>)
type 221 *<type 220>
type 222 map [<type -16>] <type -11>
type 223 struct { Name <type 224>; Type <type 228>; Class <type 229>; }
type 224 "internal/x/net/dns/dnsmessage.Name" <type 226>
 func (n <esc:0x1> <type 225>) .internal/x/net/dns/dnsmessage.unpack (msg <esc:0x1> <type 40>, off <type -11>) (? <type -11>, ? <type -19>)
 func (n <esc:0x1> <type 225>) .internal/x/net/dns/dnsmessage.unpackCompressed (msg <esc:0x1> <type 40>, off <type -11>, allowCompression <type -15>) (? <type -11>, ? <type -19>)
 func (n <esc:0x1> <type 225>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 40>, compression <esc:0x1> <type 222>, compressionOff <type -11>) (? <type 40>, ? <type -19>)
 func (n <type 224>) String () <type -16>
type 225 *<type 224>
type 226 struct { Data <type 227>; Length <type -5>; }
type 227 [255 ] <type -20>
type 228 "internal/x/net/dns/dnsmessage.Type" <type -6>
type 229 "internal/x/net/dns/dnsmessage.Class" <type -6>
type 230 "internal/x/net/dns/dnsmessage.Parser" <type 275>
 func (p <esc:0x1> <type 231>) SRVResource () (? <type 232>, ? <type -19>)
 func (p <esc:0x1> <type 231>) TXTResource () (? <type 235>, ? <type -19>)
 func (p <esc:0x1> <type 231>) AllAnswers () (? <type 238>, ? <type -19>)
 func (p <esc:0x1> <type 231>) AdditionalHeader () (? <type 242>, ? <type -19>)
 func (p <esc:0x1> <type 231>) AAAAResource () (? <type 247>, ? <type -19>)
 func (p <esc:0x1> <type 231>) NSResource () (? <type 250>, ? <type -19>)
 func (p <esc:0x1> <type 231>) SkipAllQuestions () <type -19>
 func (p <esc:0x1> <type 231>) CNAMEResource () (? <type 253>, ? <type -19>)
 func (p <esc:0x1> <type 231>) Question () (? <type 220>, ? <type -19>)
 func (p <esc:0x1> <type 231>) .internal/x/net/dns/dnsmessage.resourceHeader (sec <type 256>) (? <type 242>, ? <type -19>)
 func (p <esc:0x1> <type 231>) Answer () (? <type 239>, ? <type -19>)
 func (p <esc:0x1> <type 231>) PTRResource () (? <type 257>, ? <type -19>)
 func (p <esc:0x1> <type 231>) .internal/x/net/dns/dnsmessage.skipResource (sec <type 256>) <type -19>
 func (p <esc:0x1> <type 231>) Additional () (? <type 239>, ? <type -19>)
 func (p <esc:0x1> <type 231>) AResource () (? <type 260>, ? <type -19>)
 func (p <esc:0x1> <type 231>) SkipAnswer () <type -19>
 func (p <esc:0x1> <type 231>) .internal/x/net/dns/dnsmessage.resource (sec <type 256>) (? <type 239>, ? <type -19>)
 func (p <esc:0x1> <type 231>) AllAdditionals () (? <type 238>, ? <type -19>)
 func (p <esc:0x1> <type 231>) AllQuestions () (? <type 263>, ? <type -19>)
 func (p <esc:0x1> <type 231>) SkipAllAnswers () <type -19>
 func (p <esc:0x1> <type 231>) Authority () (? <type 239>, ? <type -19>)
 func (p <esc:0x1> <type 231>) .internal/x/net/dns/dnsmessage.checkAdvance (sec <type 256>) <type -19>
 func (p <esc:0x1> <type 231>) SkipAuthority () <type -19>
 func (p <esc:0x1> <type 231>) AnswerHeader () (? <type 242>, ? <type -19>)
 func (p <esc:0x1> <type 231>) SkipAllAdditionals () <type -19>
 func (p <esc:0x1> <type 231>) MXResource () (? <type 264>, ? <type -19>)
 func (p <esc:0x1> <type 231>) SkipQuestion () <type -19>
 func (p <esc:0x1> <type 231>) AuthorityHeader () (? <type 242>, ? <type -19>)
 func (p <esc:0x1> <type 231>) Start (msg <type 40>) (? <type 267>, ? <type -19>)
 func (p <esc:0x1> <type 231>) AllAuthorities () (? <type 238>, ? <type -19>)
 func (p <esc:0x1> <type 231>) SkipAllAuthorities () <type -19>
 func (p <esc:0x1> <type 231>) SkipAdditional () <type -19>
 func (p <esc:0x1> <type 231>) SOAResource () (? <type 272>, ? <type -19>)
type 231 *<type 230>
type 232 "internal/x/net/dns/dnsmessage.SRVResource" <type 234>
 func (r <esc:0x1> <type 233>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 40>, compression <esc:0x1> <type 222>, compressionOff <type -11>) (? <type 40>, ? <type -19>)
 func (r <esc:0x1> <type 233>) .internal/x/net/dns/dnsmessage.realType () <type 228>
type 233 *<type 232>
type 234 struct { Priority <type -6>; Weight <type -6>; Port <type -6>; Target <type 224>; }
type 235 "internal/x/net/dns/dnsmessage.TXTResource" <type 237>
 func (r <esc:0x1> <type 236>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 40>, compression <esc:0x1> <type 222>, compressionOff <type -11>) (? <type 40>, ? <type -19>)
 func (r <esc:0x1> <type 236>) .internal/x/net/dns/dnsmessage.realType () <type 228>
type 236 *<type 235>
type 237 struct { TXT <type 93>; }
type 238 [] <type 239>
type 239 "internal/x/net/dns/dnsmessage.Resource" <type 241>
 func (r <esc:0x9> <type 240>) .internal/x/net/dns/dnsmessage.pack (msg <type 40>, compression <type 222>, compressionOff <type -11>) (? <type 40>, ? <type -19>)
type 240 *<type 239>
type 241 struct { Header <type 242>; Body <type 245>; }
type 242 "internal/x/net/dns/dnsmessage.ResourceHeader" <type 244>
 func (h <esc:0x1> <type 243>) .internal/x/net/dns/dnsmessage.fixLen (msg <esc:0x1> <type 40>, length <esc:0x1> <type 40>, preLen <type -11>) <type -19>
 func (h <esc:0x1> <type 243>) .internal/x/net/dns/dnsmessage.unpack (msg <esc:0x1> <type 40>, off <type -11>) (? <type -11>, ? <type -19>)
 func (h <esc:0x1> <type 243>) .internal/x/net/dns/dnsmessage.pack (oldMsg <esc:0x92> <type 40>, compression <esc:0x1> <type 222>, compressionOff <type -11>) (msg <type 40>, length <type 40>, err <type -19>)
type 243 *<type 242>
type 244 struct { Name <type 224>; Type <type 228>; Class <type 229>; TTL <type -7>; Length <type -6>; }
type 245 "internal/x/net/dns/dnsmessage.ResourceBody" <type 246>
type 246 interface { .internal/x/net/dns/dnsmessage.pack (msg <type 40>, compression <type 222>, compressionOff <type -11>) (? <type 40>, ? <type -19>); .internal/x/net/dns/dnsmessage.realType () <type 228>; }
type 247 "internal/x/net/dns/dnsmessage.AAAAResource" <type 249>
 func (r <esc:0x1> <type 248>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 40>, compression <esc:0x1> <type 222>, compressionOff <type -11>) (? <type 40>, ? <type -19>)
 func (r <esc:0x1> <type 248>) .internal/x/net/dns/dnsmessage.realType () <type 228>
type 248 *<type 247>
type 249 struct { AAAA <type 125>; }
type 250 "internal/x/net/dns/dnsmessage.NSResource" <type 252>
 func (r <esc:0x1> <type 251>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 40>, compression <esc:0x1> <type 222>, compressionOff <type -11>) (? <type 40>, ? <type -19>)
 func (r <esc:0x1> <type 251>) .internal/x/net/dns/dnsmessage.realType () <type 228>
type 251 *<type 250>
type 252 struct { NS <type 224>; }
type 253 "internal/x/net/dns/dnsmessage.CNAMEResource" <type 255>
 func (r <esc:0x1> <type 254>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 40>, compression <esc:0x1> <type 222>, compressionOff <type -11>) (? <type 40>, ? <type -19>)
 func (r <esc:0x1> <type 254>) .internal/x/net/dns/dnsmessage.realType () <type 228>
type 254 *<type 253>
type 255 struct { CNAME <type 224>; }
type 256 ".internal/x/net/dns/dnsmessage.section" <type -5>
type 257 "internal/x/net/dns/dnsmessage.PTRResource" <type 259>
 func (r <esc:0x1> <type 258>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 40>, compression <esc:0x1> <type 222>, compressionOff <type -11>) (? <type 40>, ? <type -19>)
 func (r <esc:0x1> <type 258>) .internal/x/net/dns/dnsmessage.realType () <type 228>
type 258 *<type 257>
type 259 struct { PTR <type 224>; }
type 260 "internal/x/net/dns/dnsmessage.AResource" <type 262>
 func (r <esc:0x1> <type 261>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 40>, compression <esc:0x1> <type 222>, compressionOff <type -11>) (? <type 40>, ? <type -19>)
 func (r <esc:0x1> <type 261>) .internal/x/net/dns/dnsmessage.realType () <type 228>
type 261 *<type 260>
type 262 struct { A <type 114>; }
type 263 [] <type 220>
type 264 "internal/x/net/dns/dnsmessage.MXResource" <type 266>
 func (r <esc:0x1> <type 265>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 40>, compression <esc:0x1> <type 222>, compressionOff <type -11>) (? <type 40>, ? <type -19>)
 func (r <esc:0x1> <type 265>) .internal/x/net/dns/dnsmessage.realType () <type 228>
type 265 *<type 264>
type 266 struct { Pref <type -6>; MX <type 224>; }
type 267 "internal/x/net/dns/dnsmessage.Header" <type 269>
 func (m <esc:0x1> <type 268>) .internal/x/net/dns/dnsmessage.pack () (id <type -6>, bits <type -6>)
type 268 *<type 267>
type 269 struct { ID <type -6>; Response <type -15>; OpCode <type 270>; Authoritative <type -15>; Truncated <type -15>; RecursionDesired <type -15>; RecursionAvailable <type -15>; RCode <type 271>; }
type 270 "internal/x/net/dns/dnsmessage.OpCode" <type -6>
type 271 "internal/x/net/dns/dnsmessage.RCode" <type -6>
type 272 "internal/x/net/dns/dnsmessage.SOAResource" <type 274>
 func (r <esc:0x1> <type 273>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 40>, compression <esc:0x1> <type 222>, compressionOff <type -11>) (? <type 40>, ? <type -19>)
 func (r <esc:0x1> <type 273>) .internal/x/net/dns/dnsmessage.realType () <type 228>
type 273 *<type 272>
type 274 struct { NS <type 224>; MBox <type 224>; Serial <type -7>; Refresh <type -7>; Retry <type -7>; Expire <type -7>; MinTTL <type -7>; }
type 275 struct { .internal/x/net/dns/dnsmessage.msg <type 40>; .internal/x/net/dns/dnsmessage.header <type 276>; .internal/x/net/dns/dnsmessage.section <type 256>; .internal/x/net/dns/dnsmessage.off <type -11>; .internal/x/net/dns/dnsmessage.index <type -11>; .internal/x/net/dns/dnsmessage.resHeaderValid <type -15>; .internal/x/net/dns/dnsmessage.resHeader <type 242>; }
type 276 ".internal/x/net/dns/dnsmessage.header" <type 278>
 func (h <esc:0x1> <type 277>) .internal/x/net/dns/dnsmessage.header () <type 267>
 func (h <esc:0x1> <type 277>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 40>) <type 40>
 func (h <esc:0x1> <type 277>) .internal/x/net/dns/dnsmessage.unpack (msg <esc:0x1> <type 40>, off <type -11>) (? <type -11>, ? <type -19>)
 func (h <esc:0x1> <type 277>) .internal/x/net/dns/dnsmessage.count (sec <type 256>) <type -6>
type 277 *<type 276>
type 278 struct { .internal/x/net/dns/dnsmessage.id <type -6>; .internal/x/net/dns/dnsmessage.bits <type -6>; .internal/x/net/dns/dnsmessage.questions <type -6>; .internal/x/net/dns/dnsmessage.answers <type -6>; .internal/x/net/dns/dnsmessage.authorities <type -6>; .internal/x/net/dns/dnsmessage.additionals <type -6>; }
type 279 *<type 280>
type 280 ".net.dnsConfig" <type 281>
 func (conf <esc:0x1> <type 279>) .net.nameList (name <type -16>) <type 93>
 func (c <type 279>) .net.serverOffset () <type -7>
type 281 struct { .net.servers <type 93>; .net.search <type 93>; .net.ndots <type -11>; .net.timeout <type 59>; .net.attempts <type -11>; .net.rotate <type -15>; .net.unknownOpt <type -15>; .net.lookup <type 93>; .net.err <type -19>; .net.mtime <type 45>; .net.soffset <type -7>; }
type 282 ".net.hostLookupOrder" <type -11>
 func (o <type 282>) String () <type -16>
type 283 [] <type 12>
type 284 struct { Target <type -16>; Port <type -6>; Priority <type -6>; Weight <type -6>; }
type 285 struct { IP <type 11>; Port <type -11>; Zone <type -16>; }
type 286 "io.Reader" <type 287>
type 287 interface { Read (p <type 40>) (n <type -11>, err <type -19>); }
type 288 struct { Name <type -16>; Net <type -16>; }
type 289 struct { .net.fd <type 163>; .net.path <type -16>; .net.unlink <type -15>; .net.unlinkOnce <type 290>; }
type 290 "sync.Once" <type 293>
 func (o <type 291>) Do (f <esc:0x1> <type 292>)
type 291 *<type 290>
type 292 ()
type 293 struct { .sync.m <type 214>; .sync.done <type -7>; }
func CIDRMask (ones <type -11>, bits <type -11>) <type 14>
var DefaultResolver <type 65>
func Dial (network <type -16>, address <type -16>) (? <type 4>, ? <type -19>)
func DialIP (network <type -16>, laddr <type 66>, raddr <type 66>) (? <type 67>, ? <type -19>)
func DialTCP (network <type -16>, laddr <type 68>, raddr <type 68>) (? <type 69>, ? <type -19>)
func DialTimeout (network <type -16>, address <type -16>, timeout <type 59>) (? <type 4>, ? <type -19>)
func DialUDP (network <type -16>, laddr <type 70>, raddr <type 70>) (? <type 71>, ? <type -19>)
func DialUnix (network <type -16>, laddr <type 72>, raddr <type 72>) (? <type 73>, ? <type -19>)
var ErrWriteToConnected <type -19>
func FileConn (f <type 87>) (c <type 4>, err <type -19>)
func FileListener (f <type 87>) (ln <type 19>, err <type -19>)
func FilePacketConn (f <type 87>) (c <type 23>, err <type -19>)
const FlagBroadcast <type 9> = 2 
const FlagLoopback <type 9> = 4 
const FlagMulticast <type 9> = 16 
const FlagPointToPoint <type 9> = 8 
const FlagUp <type 9> = 1 
func IPv4 (a <type -20>, b <type -20>, c <type -20>, d <type -20>) <type 11>
func IPv4Mask (a <type -20>, b <type -20>, c <type -20>, d <type -20>) <type 14>
var IPv4allrouter <type 11>
var IPv4allsys <type 11>
var IPv4bcast <type 11>
const IPv4len = 4 
var IPv4zero <type 11>
var IPv6interfacelocalallnodes <type 11>
const IPv6len = 16 
var IPv6linklocalallnodes <type 11>
var IPv6linklocalallrouters <type 11>
var IPv6loopback <type 11>
var IPv6unspecified <type 11>
var IPv6zero <type 11>
func InterfaceAddrs () (? <type 171>, ? <type -19>)
func InterfaceByIndex (index <type -11>) (? <type 170>, ? <type -19>)
func InterfaceByName (name <esc:0x1> <type -16>) (? <type 170>, ? <type -19>)
func Interfaces () (? <type 172>, ? <type -19>)
func JoinHostPort (host <esc:0x1> <type -16>, port <esc:0x1> <type -16>) <type -16>
func Listen (network <type -16>, address <type -16>) (? <type 19>, ? <type -19>)
func ListenIP (network <type -16>, laddr <type 66>) (? <type 67>, ? <type -19>)
func ListenMulticastUDP (network <type -16>, ifi <esc:0x1> <type 170>, gaddr <type 70>) (? <type 71>, ? <type -19>)
func ListenPacket (network <type -16>, address <type -16>) (? <type 23>, ? <type -19>)
func ListenTCP (network <type -16>, laddr <type 68>) (? <type 175>, ? <type -19>)
func ListenUDP (network <type -16>, laddr <type 70>) (? <type 71>, ? <type -19>)
func ListenUnix (network <type -16>, laddr <type 72>) (? <type 176>, ? <type -19>)
func ListenUnixgram (network <type -16>, laddr <type 72>) (? <type 73>, ? <type -19>)
func LookupAddr (addr <type -16>) (names <type 93>, err <type -19>)
func LookupCNAME (host <type -16>) (cname <type -16>, err <type -19>)
func LookupHost (host <type -16>) (addrs <type 93>, err <type -19>)
func LookupIP (host <type -16>) (? <type 178>, ? <type -19>)
func LookupMX (name <type -16>) (? <type 179>, ? <type -19>)
func LookupNS (name <type -16>) (? <type 181>, ? <type -19>)
func LookupPort (network <type -16>, service <type -16>) (port <type -11>, err <type -19>)
func LookupSRV (service <esc:0x1> <type -16>, proto <esc:0x1> <type -16>, name <type -16>) (cname <type -16>, addrs <type 183>, err <type -19>)
func LookupTXT (name <type -16>) (? <type 93>, ? <type -19>)
func ParseCIDR (s <type -16>) (? <type 11>, ? <type 168>, ? <type -19>)
func ParseIP (s <esc:0x1> <type -16>) <type 11>
func ParseMAC (s <type -16>) (hw <type 10>, err <type -19>)
func Pipe () (? <type 4>, ? <type 4>)
func ResolveIPAddr (network <type -16>, address <type -16>) (? <type 66>, ? <type -19>)
func ResolveTCPAddr (network <type -16>, address <type -16>) (? <type 68>, ? <type -19>)
func ResolveUDPAddr (network <type -16>, address <type -16>) (? <type 70>, ? <type -19>)
func ResolveUnixAddr (network <type -16>, address <type -16>) (? <type 72>, ? <type -19>)
func SplitHostPort (hostport <type -16>) (host <type -16>, port <type -16>, err <type -19>)
checksum C0DA592BA31793F9411FE248F34C5870F199F6F1
v3;
package http
pkgpath net/http
import bufio bufio "bufio"
import bytes bytes "bytes"
import gzip compress/gzip "compress/gzip"
import list container/list "container/list"
import context context "context"
import rand crypto/rand "crypto/rand"
import tls crypto/tls "crypto/tls"
import base64 encoding/base64 "encoding/base64"
import binary encoding/binary "encoding/binary"
import errors errors "errors"
import fmt fmt "fmt"
import httpguts internal/x/net/http/httpguts "internal/x/net/http/httpguts"
import httpproxy internal/x/net/http/httpproxy "internal/x/net/http/httpproxy"
import hpack internal/x/net/http2/hpack "internal/x/net/http2/hpack"
import idna internal/x/net/idna "internal/x/net/idna"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import log log "log"
import math math "math"
import rand math/rand "math/rand"
import mime mime "mime"
import multipart mime/multipart "mime/multipart"
import net net "net"
import httptrace net/http/httptrace "net/http/httptrace"
import internal net/http/internal "net/http/internal"
import textproto net/textproto "net/textproto"
import url net/url "net/url"
import os os "os"
import path path "path"
import filepath path/filepath "path/filepath"
import reflect reflect "reflect"
import runtime runtime "runtime"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import atomic sync/atomic "sync/atomic"
import time time "time"
import utf8 unicode/utf8 "unicode/utf8"
indirectimport asn1 encoding/asn1
indirectimport big math/big
indirectimport cipher crypto/cipher
indirectimport crypto crypto
indirectimport hash hash
indirectimport pkix crypto/x509/pkix
indirectimport syscall syscall
indirectimport unsafe unsafe
indirectimport x509 crypto/x509
init http net..z2fhttp..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import gzip compress..z2fgzip..import context context..import crypto crypto..import cipher crypto..z2fcipher..import des crypto..z2fdes..import dsa crypto..z2fdsa..import ecdsa crypto..z2fecdsa..import elliptic crypto..z2felliptic..import randutil crypto..z2finternal..z2frandutil..import md5 crypto..z2fmd5..import rand crypto..z2frand..import rsa crypto..z2frsa..import sha1 crypto..z2fsha1..import sha256 crypto..z2fsha256..import sha512 crypto..z2fsha512..import tls crypto..z2ftls..import x509 crypto..z2fx509..import pkix crypto..z2fx509..z2fpkix..import asn1 encoding..z2fasn1..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import hex encoding..z2fhex..import pem encoding..z2fpem..import fmt fmt..import crc32 hash..z2fcrc32..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import chacha20poly1305 internal..z2fx..z2fcrypto..z2fchacha20poly1305..import cryptobyte internal..z2fx..z2fcrypto..z2fcryptobyte..import chacha20 internal..z2fx..z2fcrypto..z2finternal..z2fchacha20..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import httpguts internal..z2fx..z2fnet..z2fhttp..z2fhttpguts..import httpproxy internal..z2fx..z2fnet..z2fhttp..z2fhttpproxy..import hpack internal..z2fx..z2fnet..z2fhttp2..z2fhpack..import idna internal..z2fx..z2fnet..z2fidna..import bidirule internal..z2fx..z2ftext..z2fsecure..z2fbidirule..import transform internal..z2fx..z2ftext..z2ftransform..import bidi internal..z2fx..z2ftext..z2funicode..z2fbidi..import norm internal..z2fx..z2ftext..z2funicode..z2fnorm..import io io..import ioutil io..z2fioutil..import log log..import big math..z2fbig..import rand math..z2frand..import mime mime..import multipart mime..z2fmultipart..import quotedprintable mime..z2fquotedprintable..import net net..import internal net..z2fhttp..z2finternal..import textproto net..z2ftextproto..import os os..import path path..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 1 2 1 29 1 44 1 59 1 60 1 62 1 65 2 29 2 44 2 59 2 60 2 62 2 65 3 1 3 2 3 27 3 29 3 30 3 31 3 44 3 55 3 58 3 59 3 60 3 61 3 62 3 63 3 64 3 65 4 1 4 2 4 3 4 24 4 27 4 28 4 29 4 30 4 31 4 44 4 55 4 58 4 59 4 60 4 61 4 62 4 63 4 64 4 65 5 27 5 29 5 30 5 31 5 44 5 55 5 58 5 59 5 60 5 61 5 62 5 63 5 64 5 65 6 29 6 44 6 59 6 60 6 61 6 62 7 24 7 29 7 44 7 58 7 59 7 60 7 61 7 62 7 65 8 7 8 24 8 29 8 44 8 58 8 59 8 60 8 61 8 62 8 65 9 2 9 12 9 24 9 27 9 29 9 30 9 31 9 44 9 47 9 48 9 55 9 58 9 59 9 60 9 61 9 62 9 63 9 64 9 65 10 2 10 6 10 7 10 11 10 12 10 18 10 22 10 24 10 27 10 29 10 30 10 31 10 44 10 47 10 48 10 55 10 58 10 59 10 60 10 61 10 62 10 63 10 64 10 65 11 2 11 24 11 27 11 29 11 30 11 31 11 44 11 47 11 48 11 55 11 58 11 59 11 60 11 61 11 62 11 63 11 64 11 65 12 29 12 44 12 59 12 60 12 62 13 6 13 24 13 29 13 44 13 58 13 59 13 60 13 61 13 62 13 65 14 1 14 2 14 7 14 24 14 27 14 29 14 30 14 31 14 44 14 47 14 48 14 55 14 58 14 59 14 60 14 61 14 62 14 63 14 64 14 65 15 1 15 2 15 6 15 7 15 12 15 14 15 24 15 27 15 29 15 30 15 31 15 44 15 47 15 48 15 55 15 58 15 59 15 60 15 61 15 62 15 63 15 64 15 65 16 6 16 29 16 44 16 59 16 60 16 61 16 62 17 6 17 29 17 44 17 59 17 60 17 61 17 62 18 6 18 29 18 44 18 59 18 60 18 61 18 62 19 1 19 2 19 5 19 6 19 7 19 8 19 9 19 10 19 11 19 12 19 13 19 14 19 15 19 16 19 17 19 18 19 20 19 21 19 22 19 23 19 24 19 25 19 26 19 27 19 29 19 30 19 31 19 32 19 33 19 34 19 35 19 44 19 45 19 47 19 48 19 52 19 55 19 57 19 58 19 59 19 60 19 61 19 62 19 63 19 64 19 65 20 1 20 2 20 5 20 6 20 7 20 8 20 9 20 10 20 11 20 12 20 13 20 14 20 15 20 16 20 17 20 18 20 21 20 22 20 23 20 24 20 25 20 26 20 27 20 29 20 30 20 31 20 33 20 35 20 44 20 45 20 47 20 48 20 52 20 55 20 57 20 58 20 59 20 60 20 61 20 62 20 63 20 64 20 65 21 2 21 22 21 24 21 25 21 27 21 29 21 30 21 31 21 44 21 47 21 48 21 55 21 58 21 59 21 60 21 61 21 62 21 63 21 64 21 65 22 2 22 24 22 27 22 29 22 30 22 31 22 44 22 47 22 48 22 55 22 58 22 59 22 60 22 61 22 62 22 63 22 64 22 65 23 24 23 29 23 44 23 58 23 59 23 60 23 61 23 62 23 65 24 29 24 44 24 58 24 59 24 60 24 61 24 62 24 65 25 27 25 29 25 30 25 31 25 44 25 55 25 58 25 59 25 60 25 61 25 62 25 63 25 64 25 65 26 2 26 23 26 24 26 29 26 44 26 58 26 59 26 60 26 61 26 62 26 65 27 29 27 30 27 31 27 44 27 55 27 58 27 59 27 60 27 61 27 62 27 63 27 64 27 65 28 29 28 44 28 59 28 60 28 62 30 29 30 44 30 59 30 60 30 62 30 63 30 64 32 7 32 24 32 29 32 34 32 44 32 58 32 59 32 60 32 61 32 62 32 65 33 2 33 22 33 24 33 27 33 29 33 30 33 31 33 44 33 47 33 48 33 55 33 58 33 59 33 60 33 61 33 62 33 63 33 64 33 65 34 7 34 24 34 29 34 44 34 58 34 59 34 60 34 61 34 62 34 65 36 1 36 2 36 5 36 27 36 29 36 30 36 31 36 35 36 39 36 40 36 41 36 42 36 43 36 44 36 45 36 46 36 48 36 52 36 54 36 55 36 57 36 58 36 59 36 60 36 61 36 62 36 63 36 64 36 65 37 2 37 5 37 27 37 29 37 30 37 31 37 35 37 39 37 40 37 41 37 42 37 43 37 44 37 46 37 48 37 52 37 55 37 58 37 59 37 60 37 61 37 62 37 63 37 64 37 65 38 2 38 27 38 29 38 30 38 31 38 44 38 55 38 58 38 59 38 60 38 61 38 62 38 63 38 64 38 65 39 2 39 27 39 29 39 30 39 31 39 40 39 41 39 42 39 43 39 44 39 46 39 55 39 58 39 59 39 60 39 61 39 62 39 63 39 64 39 65 40 2 40 27 40 29 40 30 40 31 40 41 40 42 40 44 40 46 40 55 40 58 40 59 40 60 40 61 40 62 40 63 40 64 40 65 41 2 41 29 41 44 41 59 41 60 41 62 41 65 42 27 42 29 42 30 42 31 42 44 42 46 42 55 42 58 42 59 42 60 42 61 42 62 42 63 42 64 42 65 43 2 43 27 43 29 43 30 43 31 43 41 43 44 43 55 43 58 43 59 43 60 43 61 43 62 43 63 43 64 43 65 44 29 44 59 44 60 44 62 45 2 45 29 45 30 45 31 45 44 45 55 45 57 45 58 45 59 45 60 45 61 45 62 45 63 45 64 45 65 46 27 46 29 46 30 46 31 46 44 46 55 46 58 46 59 46 60 46 61 46 62 46 63 46 64 46 65 47 2 47 24 47 27 47 29 47 30 47 31 47 44 47 48 47 55 47 58 47 59 47 60 47 61 47 62 47 63 47 64 47 65 48 29 48 59 48 60 48 62 49 1 49 2 49 23 49 24 49 27 49 29 49 30 49 31 49 44 49 55 49 58 49 59 49 60 49 61 49 62 49 63 49 64 49 65 50 1 50 2 50 5 50 7 50 14 50 23 50 24 50 27 50 29 50 30 50 31 50 35 50 44 50 45 50 47 50 48 50 49 50 51 50 52 50 54 50 55 50 57 50 58 50 59 50 60 50 61 50 62 50 63 50 64 50 65 51 1 51 2 51 27 51 29 51 30 51 31 51 44 51 55 51 58 51 59 51 60 51 61 51 62 51 63 51 64 51 65 52 5 52 27 52 29 52 30 52 31 52 35 52 44 52 48 52 55 52 58 52 59 52 60 52 61 52 62 52 63 52 64 52 65 53 1 53 2 53 27 53 29 53 30 53 31 53 44 53 55 53 58 53 59 53 60 53 61 53 62 53 63 53 64 53 65 54 1 54 2 54 5 54 27 54 29 54 30 54 31 54 35 54 44 54 45 54 48 54 52 54 55 54 57 54 58 54 59 54 60 54 61 54 62 54 63 54 64 54 65 55 29 55 30 55 31 55 44 55 59 55 60 55 62 55 63 55 64 56 29 56 44 56 59 56 60 56 62 56 65 57 29 57 30 57 31 57 44 57 55 57 58 57 59 57 60 57 61 57 62 57 63 57 64 57 65 58 29 58 59 58 60 58 61 58 62 58 65 59 29 59 60 61 29 61 59 61 60 62 29 62 59 62 60 63 29 63 59 63 60 63 62 64 29 64 59 64 60 64 62 64 63
types 496 25 1047 33 70 77 29 103 24 30 27 28 99 1030 30 87 33 28 2185 496 36 34 30 841 1958 1950 98 50 19 21 356 18 3310 19 73 22 19 525 165 21 31 91 21 36 112 19 75 83 19 22 22 30 73 357 35 22 48 27 247 18 100 19 800 192 19 215 112 21 19 19 154 30 43 30 94 21 32 141 195 22 73 32 35 60 30 74 19 191 417 30 22 51 94 29 318 29 67 25 11 55 316 24 54 37 24 53 76 23 499 21 39 94 21 45 53 42 55 25 25 40 41 36 200 52 1081 158 21 47 63 38 189 21 376 23 21 1788 23 58 114 21 5357 36 297 35 23 36 32 196 37 63 36 65 21 1042 23 38 134 39 66 41 58 72 4261 23 40 104 23 49 93 184 21 141 102 58 301 46 59 85 45 115 103 23 68 23 61 54 162 59 21 48 167 21 500 22 123 37 23 46 23 21 89 37 158 1184 98 362 21 21 269 43 23 23 22 23 21 224 52 94 43 24 58 36 37 23 42 74 21 235 46 76 21 39 48 21 1458 188 21 727 107 21 95 47 36 49 270 20 44 51 57 77 20 469 41 21 97 54 37 23 21 117 42 76 34 91 146 28 38 144 21 504 21 424 315 37 292 311 131 76 35 102 36 49 122 224 21 34 43 151 93 21 65 37 41 73 23 568 21 1180 21 49 226 22 23 40 22 23 48 21 45 146 39 23 44 115 26 23 26 805 22 23 37 53 53 21 56 75 53 69 48 52 132 21 52 361 54 80 21 62 37 51 20 21 3608 21 205 203 21 355 1003 23 43 78 23 46 92 50 117 21 195 756 102 77 25 122 44 21 193 87 1380 26 785 21 46 125 21 884 32 120 135 58 39 81 41 283 210 321 25 26 1837 21 93 35 844 21 88 35 21 1112 20 22 126 37 21 37 21 648 21 1323 796 40 299 21 139 135 21 26 26 25 25 425 21 703 246 25 21 126 110 115 21 39 135 37 14 76 21 124 21 46 48 25 22 947 37 91 133 23 21 1637 21 272 138 47 168 25 49 71 28 770 20 25 25 45 104 28 25 21 125 54 27 41 170 37 23 37 25 307 21 69 21 1376 21 147 136 85 37 35 37 37 91 75 37 56 44 48 364 21 147
type 1 "Client" <type 25>
 func (c <esc:0x9> <type 30>) .net/http.send (req <type 27>, deadline <esc:0x1> <type 31>) (resp <type 47>, didTimeout <type 48>, err <type -19>)
 func (c <esc:0x1> <type 30>) .net/http.deadline () <type 31>
 func (c <esc:0x22> <type 30>) .net/http.transport () <type 20>
 func (c <type 30>) Get (url <type -16>) (resp <type 47>, err <type -19>)
 func (c <esc:0x32> <type 30>) .net/http.checkRedirect (req <type 27>, via <type 28>) <type -19>
 func (c <type 30>) Do (req <type 27>) (? <type 47>, ? <type -19>)
 func (c <type 30>) .net/http.do (req <type 27>) (retres <type 47>, reterr <type -19>)
 func (c <type 30>) .net/http.makeHeadersCopier (ireq <type 27>) <type 49>
 func (c <type 30>) Post (url <type -16>, contentType <type -16>, body <type 50>) (resp <type 47>, err <type -19>)
 func (c <type 30>) PostForm (url <type -16>, data <esc:0x1> <type 52>) (resp <type 47>, err <type -19>)
 func (c <type 30>) Head (url <type -16>) (resp <type 47>, err <type -19>)
 func (c <esc:0x9> <type 30>) CloseIdleConnections ()
type 2 "CloseNotifier" <type 55>
type 3 "ConnState" <type -11>
 func (c <type 3>) String () <type -16>
type 4 "Cookie" <type 57>
 func (c <esc:0x9> <type 58>) String () <type -16>
type 5 "CookieJar" <type 59>
type 6 "Dir" <type -16>
 func (d <type 6>) Open (name <esc:0x1> <type -16>) (? <type 7>, ? <type -19>)
type 7 "File" <type 69>
type 8 "FileSystem" <type 79>
type 9 "Flusher" <type 80>
type 10 "Handler" <type 82>
type 11 "HandlerFunc" <type 81>
 func (f <esc:0x1> <type 11>) ServeHTTP (w <type 19>, r <type 27>)
type 12 "Header" <type 53>
 func (h <esc:0x9> <type 12>) Add (key <type -16>, value <type -16>)
 func (h <esc:0x1> <type 12>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x1> <type 12>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 12>) .net/http.get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 12>) .net/http.has (key <esc:0x1> <type -16>) <type -15>
 func (h <esc:0x1> <type 12>) Del (key <esc:0x1> <type -16>)
 func (h <esc:0x1> <type 12>) Write (w <type 83>) <type -19>
 func (h <esc:0x1> <type 12>) .net/http.write (w <type 83>, trace <esc:0x1> <type 85>) <type -19>
 func (h <esc:0x1> <type 12>) .net/http.clone () <type 12>
 func (h <esc:0x1> <type 12>) .net/http.sortedKeyValues (exclude <esc:0x1> <type 221>) (kvs <type 222>, hs <type 225>)
 func (h <esc:0x1> <type 12>) WriteSubset (w <type 83>, exclude <esc:0x1> <type 221>) <type -19>
 func (h <esc:0x1> <type 12>) .net/http.writeSubset (w <type 83>, exclude <esc:0x1> <type 221>, trace <esc:0x1> <type 85>) <type -19>
type 13 "Hijacker" <type 228>
type 14 "ProtocolError" <type 245>
 func (pe <esc:0x22> <type 68>) Error () <type -16>
type 15 "PushOptions" <type 247>
type 16 "Pusher" <type 248>
type 17 "Request" <type 250>
 func (r <esc:0x22> <type 27>) Context () <type 265>
 func (r <esc:0x9> <type 27>) WithContext (ctx <type 265>) <type 27>
 func (r <esc:0x1> <type 27>) ProtoAtLeast (major <type -11>, minor <type -11>) <type -15>
 func (r <esc:0x1> <type 27>) UserAgent () <type -16>
 func (r <esc:0x1> <type 27>) Cookies () <type 66>
 func (r <esc:0x1> <type 27>) Cookie (name <esc:0x1> <type -16>) (? <type 58>, ? <type -19>)
 func (r <esc:0x1> <type 27>) AddCookie (c <esc:0x9> <type 58>)
 func (r <esc:0x1> <type 27>) Referer () <type -16>
 func (r <esc:0x9> <type 27>) MultipartReader () (? <type 267>, ? <type -19>)
 func (r <esc:0x9> <type 27>) .net/http.multipartReader (allowMixed <type -15>) (? <type 267>, ? <type -19>)
 func (r <esc:0x1> <type 27>) .net/http.isH2Upgrade () <type -15>
 func (r <esc:0x9> <type 27>) Write (w <type 83>) <type -19>
 func (r <esc:0x9> <type 27>) WriteProxy (w <type 83>) <type -19>
 func (r <esc:0x9> <type 27>) .net/http.write (w <type 83>, usingProxy <type -15>, extraHeaders <esc:0x1> <type 12>, waitForContinue <esc:0x1> <type 48>) (err <type -19>)
 func (r <esc:0x1> <type 27>) BasicAuth () (username <type -16>, password <type -16>, ok <type -15>)
 func (r <esc:0x1> <type 27>) SetBasicAuth (username <esc:0x1> <type -16>, password <esc:0x1> <type -16>)
 func (r <esc:0x9> <type 27>) ParseForm () <type -19>
 func (r <esc:0x9> <type 27>) ParseMultipartForm (maxMemory <type -4>) <type -19>
 func (r <esc:0x9> <type 27>) FormValue (key <esc:0x1> <type -16>) <type -16>
 func (r <esc:0x9> <type 27>) PostFormValue (key <esc:0x1> <type -16>) <type -16>
 func (r <esc:0x9> <type 27>) FormFile (key <esc:0x1> <type -16>) (? <type 259>, ? <type 257>, ? <type -19>)
 func (r <esc:0x1> <type 27>) .net/http.expectsContinue () <type -15>
 func (r <esc:0x1> <type 27>) .net/http.wantsHttp10KeepAlive () <type -15>
 func (r <esc:0x1> <type 27>) .net/http.wantsClose () <type -15>
 func (r <esc:0x9> <type 27>) .net/http.closeBody ()
 func (r <esc:0x1> <type 27>) .net/http.isReplayable () <type -15>
 func (r <esc:0x1> <type 27>) .net/http.outgoingLength () <type -4>
 func (r <esc:0x1> <type 27>) .net/http.requiresHTTP1 () <type -15>
type 18 "Response" <type 274>
 func (r <esc:0x1> <type 47>) Cookies () <type 66>
 func (r <esc:0x9> <type 47>) Location () (? <type 60>, ? <type -19>)
 func (r <esc:0x1> <type 47>) ProtoAtLeast (major <type -11>, minor <type -11>) <type -15>
 func (r <esc:0x9> <type 47>) Write (w <type 83>) <type -19>
 func (r <esc:0x9> <type 47>) .net/http.closeBody ()
 func (r <esc:0x1> <type 47>) .net/http.bodyIsWritable () <type -15>
 func (r <esc:0x1> <type 47>) .net/http.isProtocolSwitch () <type -15>
type 19 "ResponseWriter" <type 275>
type 20 "RoundTripper" <type 276>
type 21 "SameSite" <type -11>
type 22 "ServeMux" <type 281>
 func (mux <esc:0x1b2> <type 67>) .net/http.match (path <esc:0x1> <type -16>) (h <type 10>, pattern <type -16>)
 func (mux <type 67>) .net/http.redirectToPathSlash (host <esc:0x1> <type -16>, path <type -16>, u <esc:0x12> <type 60>) (? <type 60>, ? <type -15>)
 func (mux <esc:0x1> <type 67>) .net/http.shouldRedirectRLocked (host <esc:0x1> <type -16>, path <esc:0x1> <type -16>) <type -15>
 func (mux <type 67>) Handler (r <esc:0x18a> <type 27>) (h <type 10>, pattern <type -16>)
 func (mux <type 67>) .net/http.handler (host <esc:0x1> <type -16>, path <esc:0x1> <type -16>) (h <type 10>, pattern <type -16>)
 func (mux <type 67>) ServeHTTP (w <type 19>, r <type 27>)
 func (mux <type 67>) Handle (pattern <type -16>, handler <type 10>)
 func (mux <type 67>) HandleFunc (pattern <type -16>, handler <type 81>)
type 23 "Server" <type 294>
 func (srv <type 339>) .net/http.newConn (rwc <type 92>) <type 403>
 func (srv <esc:0x1> <type 339>) .net/http.maxHeaderBytes () <type -11>
 func (srv <esc:0x1> <type 339>) .net/http.initialReadLimitSize () <type -4>
 func (s <type 339>) .net/http.getDoneChan () <type 264>
 func (s <esc:0x22> <type 339>) .net/http.getDoneChanLocked () <type 438>
 func (s <esc:0x1> <type 339>) .net/http.closeDoneChanLocked ()
 func (srv <type 339>) Close () <type -19>
 func (srv <type 339>) Shutdown (ctx <type 265>) <type -19>
 func (srv <type 339>) RegisterOnShutdown (f <type 97>)
 func (s <type 339>) .net/http.closeIdleConns () <type -15>
 func (s <esc:0x1> <type 339>) .net/http.closeListenersLocked () <type -19>
 func (srv <type 339>) ListenAndServe () <type -19>
 func (srv <esc:0x1> <type 339>) .net/http.shouldConfigureHTTP2ForServe () <type -15>
 func (srv <type 339>) Serve (l <type 277>) <type -19>
 func (srv <type 339>) ServeTLS (l <type 277>, certFile <type -16>, keyFile <type -16>) <type -19>
 func (s <type 339>) .net/http.trackListener (ln <type 401>, add <type -15>) <type -15>
 func (s <type 339>) .net/http.trackConn (c <type 403>, add <type -15>)
 func (s <esc:0x1> <type 339>) .net/http.idleTimeout () <type 29>
 func (s <esc:0x1> <type 339>) .net/http.readHeaderTimeout () <type 29>
 func (s <type 339>) .net/http.doKeepAlives () <type -15>
 func (s <type 339>) .net/http.shuttingDown () <type -15>
 func (srv <type 339>) SetKeepAlivesEnabled (v <type -15>)
 func (s <esc:0x9> <type 339>) .net/http.logf (format <esc:0x1> <type -16>, args <esc:0x9> ...<type 78>)
 func (srv <type 339>) ListenAndServeTLS (certFile <type -16>, keyFile <type -16>) <type -19>
 func (srv <type 339>) .net/http.setupHTTP2_ServeTLS () <type -19>
 func (srv <type 339>) .net/http.setupHTTP2_Serve () <type -19>
 func (srv <type 339>) .net/http.onceSetNextProtoDefaults_Serve ()
 func (srv <type 339>) .net/http.onceSetNextProtoDefaults ()
type 24 "Transport" <type 440>
 func (t <type 457>) RoundTrip (req <type 27>) (? <type 47>, ? <type -19>)
 func (t <type 457>) .net/http.onceSetNextProtoDefaults ()
 func (t <esc:0x1> <type 457>) .net/http.useRegisteredProtocol (req <esc:0x1> <type 27>) <type -15>
 func (t <type 457>) .net/http.roundTrip (req <type 27>) (? <type 47>, ? <type -19>)
 func (t <type 457>) RegisterProtocol (scheme <type -16>, rt <type 20>)
 func (t <type 457>) CloseIdleConnections ()
 func (t <type 457>) CancelRequest (req <esc:0x1> <type 27>)
 func (t <type 457>) .net/http.cancelRequest (req <esc:0x1> <type 27>, err <type -19>)
 func (t <esc:0x1ba> <type 457>) .net/http.connectMethodForRequest (treq <esc:0x4a> <type 447>) (cm <type 493>, err <type -19>)
 func (t <type 457>) .net/http.putOrCloseIdleConn (pconn <type 445>)
 func (t <esc:0x1> <type 457>) .net/http.maxIdleConnsPerHost () <type -11>
 func (t <type 457>) .net/http.tryPutIdleConn (pconn <type 445>) <type -19>
 func (t <type 457>) .net/http.getIdleConnCh (cm <type 493>) <type 473>
 func (t <type 457>) .net/http.getIdleConn (cm <type 493>) (pconn <type 445>, idleSince <type 31>)
 func (t <type 457>) .net/http.removeIdleConn (pconn <esc:0x9> <type 445>)
 func (t <esc:0x1> <type 457>) .net/http.removeIdleConnLocked (pconn <esc:0x9> <type 445>)
 func (t <type 457>) .net/http.setReqCanceler (r <type 27>, fn <type 96>)
 func (t <type 457>) .net/http.replaceReqCanceler (r <type 27>, fn <type 96>) <type -15>
 func (t <esc:0x1b2> <type 457>) .net/http.dial (ctx <type 265>, network <type -16>, addr <type -16>) (? <type 92>, ? <type -19>)
 func (t <type 457>) .net/http.getConn (treq <esc:0x9> <type 447>, cm <type 493>) (? <type 445>, ? <type -19>)
 func (t <type 457>) .net/http.incHostConnCount (cmKey <type 442>) <type 264>
 func (t <type 457>) .net/http.decHostConnCount (cmKey <type 442>)
 func (t <type 457>) .net/http.dialConn (ctx <type 265>, cm <type 493>) (? <type 445>, ? <type -19>)
type 25 struct { Transport <type 20>; CheckRedirect <type 26>; Jar <type 5>; Timeout <type 29>; }
type 26 (req <type 27>, via <type 28>) <type -19>
type 27 *<type 17>
type 28 [] <type 27>
type 29 "time.Duration" <type -4>
 func (d <type 29>) String () <type -16>
 func (d <type 29>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 29>) Seconds () <type -10>
 func (d <type 29>) Minutes () <type -10>
 func (d <type 29>) Hours () <type -10>
 func (d <type 29>) Truncate (m <type 29>) <type 29>
 func (d <type 29>) Round (m <type 29>) <type 29>
type 30 *<type 1>
type 31 "time.Time" <type 46>
 func (t <esc:0x1> <type 32>) .time.sec () <type -4>
 func (t <type 31>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 31>
 func (t <esc:0x1> <type 31>) .time.date (full <type -15>) (year <type -11>, month <type 33>, day <type -11>, yday <type -11>)
 func (t <esc:0x1> <type 31>) MarshalJSON () (? <type 34>, ? <type -19>)
 func (t <esc:0x1> <type 32>) .time.stripMono ()
 func (t <esc:0x1> <type 31>) MarshalText () (? <type 34>, ? <type -19>)
 func (t <esc:0x1> <type 32>) .time.mono () <type -4>
 func (t <esc:0x1> <type 31>) Sub (u <esc:0x1> <type 31>) <type 29>
 func (t <esc:0x32> <type 31>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x12> <type 31>) UTC () <type 31>
 func (t <esc:0x1> <type 31>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 31>) In (loc <type 35>) <type 31>
 func (t <esc:0x1> <type 31>) Equal (u <esc:0x1> <type 31>) <type -15>
 func (t <esc:0x1> <type 31>) IsZero () <type -15>
 func (t <esc:0x12> <type 31>) Local () <type 31>
 func (t <esc:0x1> <type 31>) YearDay () <type -11>
 func (t <esc:0x1> <type 31>) Unix () <type -4>
 func (t <esc:0x1> <type 31>) Weekday () <type 45>
 func (t <esc:0x1> <type 31>) Date () (year <type -11>, month <type 33>, day <type -11>)
 func (t <esc:0x1> <type 32>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 31>) MarshalBinary () (? <type 34>, ? <type -19>)
 func (t <esc:0x1> <type 31>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 31>) Day () <type -11>
 func (t <esc:0x1> <type 32>) GobDecode (data <esc:0x1> <type 34>) <type -19>
 func (t <esc:0x1> <type 31>) After (u <esc:0x1> <type 31>) <type -15>
 func (t <esc:0x1> <type 31>) UnixNano () <type -4>
 func (t <esc:0x1> <type 32>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 31>) Minute () <type -11>
 func (t <esc:0x1> <type 31>) AppendFormat (b <esc:0x12> <type 34>, layout <esc:0x1> <type -16>) <type 34>
 func (t <esc:0x12> <type 31>) Truncate (d <type 29>) <type 31>
 func (t <esc:0x12> <type 31>) Add (d <type 29>) <type 31>
 func (t <esc:0x1> <type 31>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 31>) String () <type -16>
 func (t <esc:0x12> <type 31>) Round (d <type 29>) <type 31>
 func (t <esc:0x1> <type 32>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 31>) Before (u <esc:0x1> <type 31>) <type -15>
 func (t <esc:0x32> <type 31>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 32>) .time.setLoc (loc <type 35>)
 func (t <esc:0x1> <type 32>) UnmarshalText (data <esc:0x1> <type 34>) <type -19>
 func (t <esc:0x1> <type 32>) UnmarshalBinary (data <esc:0x1> <type 34>) <type -19>
 func (t <esc:0x1> <type 31>) Hour () <type -11>
 func (t <esc:0x1> <type 31>) .time.abs () <type -8>
 func (t <esc:0x1> <type 31>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 31>) Year () <type -11>
 func (t <esc:0x1> <type 32>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 32>) UnmarshalJSON (data <esc:0x1> <type 34>) <type -19>
 func (t <esc:0x1> <type 31>) Second () <type -11>
 func (t <esc:0x1> <type 31>) Month () <type 33>
 func (t <esc:0x12> <type 31>) Location () <type 35>
 func (t <esc:0x1> <type 31>) GobEncode () (? <type 34>, ? <type -19>)
type 32 *<type 31>
type 33 "time.Month" <type -11>
 func (m <type 33>) String () <type -16>
type 34 [] <type -20>
type 35 *<type 36>
type 36 "time.Location" <type 37>
 func (l <esc:0x12> <type 35>) .time.get () <type 35>
 func (l <esc:0x22> <type 35>) String () <type -16>
 func (l <esc:0x32> <type 35>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 35>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 35>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 35>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 37 struct { .time.name <type -16>; .time.zone <type 38>; .time.tx <type 41>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 44>; }
type 38 [] <type 39>
type 39 ".time.zone" <type 40>
type 40 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 41 [] <type 42>
type 42 ".time.zoneTrans" <type 43>
type 43 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 44 *<type 39>
type 45 "time.Weekday" <type -11>
 func (d <type 45>) String () <type -16>
type 46 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 35>; }
type 47 *<type 18>
type 48 () <type -15>
type 49 (? <type 27>)
type 50 "io.Reader" <type 51>
type 51 interface { Read (p <type 34>) (n <type -11>, err <type -19>); }
type 52 "net/url.Values" <type 53>
 func (v <esc:0x1> <type 52>) Encode () <type -16>
 func (v <esc:0x1> <type 52>) Del (key <esc:0x1> <type -16>)
 func (v <esc:0x9> <type 52>) Add (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 52>) Set (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 52>) Get (key <esc:0x1> <type -16>) <type -16>
type 53 map [<type -16>] <type 54>
type 54 [] <type -16>
type 55 interface { CloseNotify () <type 56>; }
type 56 chan <- <type -15>
type 57 struct { Name <type -16>; Value <type -16>; Path <type -16>; Domain <type -16>; Expires <type 31>; RawExpires <type -16>; MaxAge <type -11>; Secure <type -15>; HttpOnly <type -15>; SameSite <type 21>; Raw <type -16>; Unparsed <type 54>; }
type 58 *<type 4>
type 59 interface { Cookies (u <type 60>) <type 66>; SetCookies (u <type 60>, cookies <type 66>); }
type 60 *<type 61>
type 61 "net/url.URL" <type 62>
 func (u <esc:0x1> <type 60>) UnmarshalBinary (text <esc:0x1> <type 34>) <type -19>
 func (u <esc:0x1> <type 60>) MarshalBinary () (text <type 34>, err <type -19>)
 func (u <esc:0x9> <type 60>) Query () <type 52>
 func (u <esc:0xa> <type 60>) ResolveReference (ref <esc:0xa> <type 60>) <type 60>
 func (u <esc:0x22> <type 60>) RequestURI () <type -16>
 func (u <esc:0x9> <type 60>) Parse (ref <type -16>) (? <type 60>, ? <type -19>)
 func (u <esc:0x1> <type 60>) IsAbs () <type -15>
 func (u <esc:0x1> <type 60>) String () <type -16>
 func (u <esc:0x22> <type 60>) Hostname () <type -16>
 func (u <esc:0x22> <type 60>) EscapedPath () <type -16>
 func (u <esc:0x22> <type 60>) Port () <type -16>
 func (u <esc:0x1> <type 60>) .net/url.setPath (p <type -16>) <type -19>
type 62 struct { Scheme <type -16>; Opaque <type -16>; User <type 63>; Host <type -16>; Path <type -16>; RawPath <type -16>; ForceQuery <type -15>; RawQuery <type -16>; Fragment <type -16>; }
type 63 *<type 64>
type 64 "net/url.Userinfo" <type 65>
 func (u <esc:0x22> <type 63>) Password () (? <type -16>, ? <type -15>)
 func (u <esc:0x22> <type 63>) String () <type -16>
 func (u <esc:0x22> <type 63>) Username () <type -16>
type 65 struct { .net/url.username <type -16>; .net/url.password <type -16>; .net/url.passwordSet <type -15>; }
type 66 [] <type 58>
type 67 *<type 22>
type 68 *<type 14>
type 69 interface { ? <type 70>; ? <type 50>; ? <type 72>; Readdir (count <type -11>) (? <type 74>, ? <type -19>); Stat () (? <type 75>, ? <type -19>); }
type 70 "io.Closer" <type 71>
type 71 interface { Close () <type -19>; }
type 72 "io.Seeker" <type 73>
type 73 interface { Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>); }
type 74 [] <type 75>
type 75 "os.FileInfo" <type 76>
type 76 interface { IsDir () <type -15>; ModTime () <type 31>; Mode () <type 77>; Name () <type -16>; Size () <type -4>; Sys () <type 78>; }
type 77 "os.FileMode" <type -7>
 func (m <type 77>) String () <type -16>
 func (m <type 77>) IsRegular () <type -15>
 func (m <type 77>) IsDir () <type -15>
 func (m <type 77>) Perm () <type 77>
type 78 interface { }
type 79 interface { Open (name <type -16>) (? <type 7>, ? <type -19>); }
type 80 interface { Flush (); }
type 81 (? <type 19>, ? <type 27>)
type 82 interface { ServeHTTP (? <type 19>, ? <type 27>); }
type 83 "io.Writer" <type 84>
type 84 interface { Write (p <type 34>) (n <type -11>, err <type -19>); }
type 85 *<type 86>
type 86 "net/http/httptrace.ClientTrace" <type 87>
 func (t <esc:0x1> <type 85>) .net/http/httptrace.hasNetHooks () <type -15>
 func (t <type 85>) .net/http/httptrace.compose (old <type 85>)
type 87 struct { GetConn <type 88>; GotConn <type 89>; PutIdleConn <type 96>; GotFirstResponseByte <type 97>; Got100Continue <type 97>; Got1xxResponse <type 98>; DNSStart <type 100>; DNSDone <type 103>; ConnectStart <type 126>; ConnectDone <type 127>; TLSHandshakeStart <type 97>; TLSHandshakeDone <type 128>; WroteHeaderField <type 217>; WroteHeaders <type 97>; Wait100Continue <type 97>; WroteRequest <type 218>; }
type 88 (hostPort <type -16>)
type 89 (? <type 90>)
type 90 "net/http/httptrace.GotConnInfo" <type 91>
type 91 struct { Conn <type 92>; Reused <type -15>; WasIdle <type -15>; IdleTime <type 29>; }
type 92 "net.Conn" <type 93>
type 93 interface { Close () <type -19>; LocalAddr () <type 94>; Read (b <type 34>) (n <type -11>, err <type -19>); RemoteAddr () <type 94>; SetDeadline (t <type 31>) <type -19>; SetReadDeadline (t <type 31>) <type -19>; SetWriteDeadline (t <type 31>) <type -19>; Write (b <type 34>) (n <type -11>, err <type -19>); }
type 94 "net.Addr" <type 95>
type 95 interface { Network () <type -16>; String () <type -16>; }
type 96 (err <type -19>)
type 97 ()
type 98 (code <type -11>, header <type 99>) <type -19>
type 99 "net/textproto.MIMEHeader" <type 53>
 func (h <esc:0x9> <type 99>) Add (key <type -16>, value <type -16>)
 func (h <esc:0x1> <type 99>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x1> <type 99>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 99>) Del (key <esc:0x1> <type -16>)
type 100 (? <type 101>)
type 101 "net/http/httptrace.DNSStartInfo" <type 102>
type 102 struct { Host <type -16>; }
type 103 (? <type 104>)
type 104 "net/http/httptrace.DNSDoneInfo" <type 105>
type 105 struct { Addrs <type 106>; Err <type -19>; Coalesced <type -15>; }
type 106 [] <type 107>
type 107 "net.IPAddr" <type 122>
 func (a <esc:0x1> <type 108>) Network () ($ret189 <type -16>)
 func (a <esc:0x1> <type 108>) String () <type -16>
 func (a <esc:0x1> <type 108>) .net.isWildcard () <type -15>
 func (a <esc:0x12> <type 108>) .net.opAddr () <type 94>
 func (a <esc:0x1> <type 108>) .net.family () <type -11>
 func (a <esc:0x1> <type 108>) .net.sockaddr (family <type -11>) (? <type 109>, ? <type -19>)
 func (a <esc:0xa> <type 108>) .net.toLocal (net <esc:0x1> <type -16>) <type 120>
type 108 *<type 107>
type 109 "syscall.Sockaddr" <type 110>
type 110 interface { .syscall.sockaddr () (ptr <type 111>, len <type 118>, err <type -19>); }
type 111 *<type 112>
type 112 "syscall.RawSockaddrAny" <type 113>
type 113 struct { Addr <type 114>; Pad <type 117>; }
type 114 "syscall.RawSockaddr" <type 115>
type 115 struct { Family <type -6>; Data <type 116>; }
type 116 [14 ] <type -1>
type 117 [96 ] <type -1>
type 118 "syscall.Socklen_t" <type 119>
type 119 ".syscall._socklen_t" <type -7>
type 120 ".net.sockaddr" <type 121>
type 121 interface { ? <type 94>; .net.family () <type -11>; .net.isWildcard () <type -15>; .net.sockaddr (family <type -11>) (? <type 109>, ? <type -19>); .net.toLocal (net <type -16>) <type 120>; }
type 122 struct { IP <type 123>; Zone <type -16>; }
type 123 "net.IP" <type 34>
 func (ip <esc:0x1> <type 123>) Equal (x <esc:0x1> <type 123>) <type -15>
 func (ip <esc:0x1> <type 123>) Mask (mask <esc:0x1> <type 124>) <type 123>
 func (ip <esc:0x1> <type 123>) IsLinkLocalUnicast () <type -15>
 func (ip <esc:0x1> <type 123>) MarshalText () (? <type 34>, ? <type -19>)
 func (ip <esc:0x1> <type 123>) String () <type -16>
 func (ip <esc:0x1> <type 123>) DefaultMask () <type 124>
 func (ip <esc:0x1> <type 123>) .net.matchAddrFamily (x <esc:0x1> <type 123>) <type -15>
 func (ip <esc:0x1> <type 125>) UnmarshalText (text <esc:0x1> <type 34>) <type -19>
 func (ip <esc:0x1> <type 123>) IsGlobalUnicast () <type -15>
 func (ip <esc:0x12> <type 123>) To4 () <type 123>
 func (ip <esc:0x12> <type 123>) To16 () <type 123>
 func (ip <esc:0x1> <type 123>) IsLoopback () <type -15>
 func (ip <esc:0x1> <type 123>) IsMulticast () <type -15>
 func (ip <esc:0x1> <type 123>) IsUnspecified () <type -15>
 func (ip <esc:0x1> <type 123>) IsInterfaceLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 123>) IsLinkLocalMulticast () <type -15>
type 124 "net.IPMask" <type 34>
 func (m <esc:0x1> <type 124>) String () <type -16>
 func (m <esc:0x1> <type 124>) Size () (ones <type -11>, bits <type -11>)
type 125 *<type 123>
type 126 (network <type -16>, addr <type -16>)
type 127 (network <type -16>, addr <type -16>, err <type -19>)
type 128 (? <type 129>, ? <type -19>)
type 129 "crypto/tls.ConnectionState" <type 131>
 func (cs <esc:0x1b2> <type 130>) ExportKeyingMaterial (label <type -16>, context <type 34>, length <type -11>) (? <type 34>, ? <type -19>)
type 130 *<type 129>
type 131 struct { Version <type -6>; HandshakeComplete <type -15>; DidResume <type -15>; CipherSuite <type -6>; NegotiatedProtocol <type -16>; NegotiatedProtocolIsMutual <type -15>; ServerName <type -16>; PeerCertificates <type 132>; VerifiedChains <type 197>; SignedCertificateTimestamps <type 192>; OCSPResponse <type 34>; .crypto/tls.ekm <type 216>; TLSUnique <type 34>; }
type 132 [] <type 133>
type 133 *<type 134>
type 134 "crypto/x509.Certificate" <type 202>
 func (c <esc:0x32> <type 133>) .crypto/x509.getSANExtension () <type 34>
 func (c <esc:0x9> <type 133>) CreateCRL (rand <type 50>, priv <type 78>, revokedCerts <esc:0x9> <type 135>, now <type 31>, expiry <type 31>) (crlBytes <type 34>, err <type -19>)
 func (c <esc:0x9> <type 133>) .crypto/x509.commonNameAsHostname () <type -15>
 func (c <esc:0x9> <type 133>) CheckCRLSignature (crl <esc:0x9> <type 169>) <type -19>
 func (c <type 133>) .crypto/x509.isValid (certType <type -11>, currentChain <esc:0x9> <type 132>, opts <esc:0x1> <type 187>) <type -19>
 func (c <esc:0x1> <type 133>) .crypto/x509.systemVerify (opts <esc:0x1> <type 187>) (chains <type 197>, err <type -19>)
 func (c <esc:0x12> <type 133>) .crypto/x509.checkNameConstraints (count <esc:0x1> <type 198>, maxConstraintComparisons <type -11>, nameType <type -16>, name <type -16>, parsedName <type 78>, match <esc:0x9> <type 199>, permitted <type 78>, excluded <type 78>) <type -19>
 func (c <type 133>) Verify (opts <type 188>) (chains <type 197>, err <type -19>)
 func (c <type 133>) .crypto/x509.buildChains (cache <esc:0x1> <type 200>, currentChain <esc:0x9> <type 132>, sigChecks <esc:0x1> <type 198>, opts <esc:0x9> <type 187>) (chains <type 197>, err <type -19>)
 func (c <esc:0x1a> <type 133>) VerifyHostname (h <type -16>) <type -19>
 func (c <esc:0x1> <type 133>) .crypto/x509.hasNameConstraints () <type -15>
 func (c <esc:0x1> <type 133>) .crypto/x509.hasSANExtension () <type -15>
 func (c <esc:0x1> <type 133>) Equal (other <esc:0x1> <type 133>) <type -15>
 func (c <esc:0x9> <type 133>) CheckSignatureFrom (parent <esc:0x9> <type 133>) <type -19>
 func (c <esc:0x9> <type 133>) CheckSignature (algo <type 201>, signed <type 34>, signature <type 34>) <type -19>
type 135 [] <type 136>
type 136 "crypto/x509/pkix.RevokedCertificate" <type 137>
type 137 struct { SerialNumber <type 138>; RevocationTime <type 31>; Extensions <type 165> "asn1:\"optional\""; }
type 138 *<type 139>
type 139 "math/big.Int" <type 160>
 func (z <esc:0x9> <type 138>) Scan (s <type 140>, ch <type -21>) <type -19>
 func (x <esc:0x1> <type 138>) Text (base <type -11>) <type -16>
 func (x <esc:0x1> <type 138>) String () <type -16>
 func (z <esc:0x12> <type 138>) SetBits (abs <type 143>) <type 138>
 func (x <esc:0x1> <type 138>) IsInt64 () <type -15>
 func (z <esc:0x1a> <type 138>) Quo (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (x <esc:0x1> <type 138>) Cmp (y <esc:0x1> <type 138>) (r <type -11>)
 func (z <esc:0x1a> <type 138>) Exp (x <esc:0x9> <type 138>, y <esc:0x1> <type 138>, m <esc:0x1> <type 138>) <type 138>
 func (x <esc:0x1> <type 138>) MarshalText () (text <type 34>, err <type -19>)
 func (x <esc:0x9> <type 138>) ProbablyPrime (n <type -11>) <type -15>
 func (z <esc:0x1a> <type 138>) Abs (x <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) Neg (x <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x9> <type 138>) UnmarshalText (text <type 34>) <type -19>
 func (x <esc:0x1> <type 138>) Format (s <type 145>, ch <type -21>)
 func (z <esc:0x1a> <type 138>) .math/big.modSqrt3Mod4Prime (x <esc:0x9> <type 138>, p <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) Add (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (x <esc:0x22> <type 138>) Bits () <type 143>
 func (z <esc:0x1a> <type 138>) ModInverse (g <esc:0x1> <type 138>, n <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) Set (x <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) .math/big.modSqrtTonelliShanks (x <esc:0x9> <type 138>, p <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) SetBytes (buf <esc:0x1> <type 34>) <type 138>
 func (z <esc:0x1a> <type 138>) SetUint64 (x <type -8>) <type 138>
 func (x <esc:0x1> <type 138>) Int64 () <type -4>
 func (z <esc:0x1a> <type 138>) ModSqrt (x <esc:0x9> <type 138>, p <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) Rsh (x <esc:0x1> <type 138>, n <type -12>) <type 138>
 func (z <esc:0x1a> <type 138>) SetInt64 (x <type -4>) <type 138>
 func (x <esc:0x1> <type 138>) MarshalJSON () (? <type 34>, ? <type -19>)
 func (z <esc:0x1a> <type 138>) MulRange (a <type -4>, b <type -4>) <type 138>
 func (x <esc:0x1> <type 138>) Sign () <type -11>
 func (z <esc:0x9> <type 138>) UnmarshalJSON (text <type 34>) <type -19>
 func (z <esc:0x1a> <type 138>) QuoRem (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>, r <esc:0x8a> <type 138>) (? <type 138>, ? <type 138>)
 func (z <esc:0x9> <type 138>) GobDecode (buf <esc:0x1> <type 34>) <type -19>
 func (z <esc:0x1a> <type 138>) .math/big.scan (r <type 147>, base <type -11>) (? <type 138>, ? <type -11>, ? <type -19>)
 func (z <esc:0x1a> <type 138>) SetString (s <type -16>, base <type -11>) (? <type 138>, ? <type -15>)
 func (z <esc:0x1a> <type 138>) Mul (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) Mod (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) .math/big.setFromScanner (r <type 147>, base <type -11>) (? <type 138>, ? <type -15>)
 func (z <esc:0x1a> <type 138>) And (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) Sub (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (x <esc:0x1> <type 138>) CmpAbs (y <esc:0x1> <type 138>) <type -11>
 func (z <esc:0x1a> <type 138>) Div (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) Rem (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (x <esc:0x1> <type 138>) IsUint64 () <type -15>
 func (z <esc:0x1a> <type 138>) DivMod (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>, m <esc:0x8a> <type 138>) (? <type 138>, ? <type 138>)
 func (z <esc:0x1a> <type 138>) Binomial (n <type -4>, k <type -4>) <type 138>
 func (x <esc:0x1> <type 138>) Uint64 () <type -8>
 func (x <esc:0x1> <type 138>) BitLen () <type -11>
 func (z <esc:0x1a> <type 138>) GCD (x <esc:0x9> <type 138>, y <esc:0x9> <type 138>, a <esc:0x1> <type 138>, b <esc:0x1> <type 138>) <type 138>
 func (x <esc:0x1> <type 138>) Bit (i <type -11>) <type -12>
 func (z <esc:0x1a> <type 138>) Or (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x12> <type 138>) .math/big.lehmerGCD (x <esc:0x1> <type 138>, y <esc:0x9> <type 138>, a <esc:0x1> <type 138>, b <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) Rand (rnd <esc:0x9> <type 151>, n <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) Xor (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) Sqrt (x <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) .math/big.modSqrt5Mod8Prime (x <esc:0x1> <type 138>, p <esc:0x1> <type 138>) <type 138>
 func (z <esc:0x1a> <type 138>) Lsh (x <esc:0x1> <type 138>, n <type -12>) <type 138>
 func (z <esc:0x1a> <type 138>) SetBit (x <esc:0x1> <type 138>, i <type -11>, b <type -12>) <type 138>
 func (z <esc:0x1a> <type 138>) AndNot (x <esc:0x1> <type 138>, y <esc:0x1> <type 138>) <type 138>
 func (x <esc:0x1> <type 138>) Bytes () <type 34>
 func (z <esc:0x1a> <type 138>) Not (x <esc:0x1> <type 138>) <type 138>
 func (x <esc:0x1> <type 138>) GobEncode () (? <type 34>, ? <type -19>)
 func (x <esc:0x1> <type 138>) Append (buf <esc:0x12> <type 34>, base <type -11>) <type 34>
type 140 "fmt.ScanState" <type 141>
type 141 interface { Read (buf <type 34>) (n <type -11>, err <type -19>); ReadRune () (r <type -21>, size <type -11>, err <type -19>); SkipSpace (); Token (skipSpace <type -15>, f <type 142>) (token <type 34>, err <type -19>); UnreadRune () <type -19>; Width () (wid <type -11>, ok <type -15>); }
type 142 (? <type -21>) <type -15>
type 143 [] <type 144>
type 144 "math/big.Word" <type -12>
type 145 "fmt.State" <type 146>
type 146 interface { Flag (c <type -11>) <type -15>; Precision () (prec <type -11>, ok <type -15>); Width () (wid <type -11>, ok <type -15>); Write (b <type 34>) (n <type -11>, err <type -19>); }
type 147 "io.ByteScanner" <type 148>
type 148 interface { ? <type 149>; UnreadByte () <type -19>; }
type 149 "io.ByteReader" <type 150>
type 150 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 151 *<type 152>
type 152 "math/rand.Rand" <type 155>
 func (r <esc:0x9> <type 151>) Perm (n <type -11>) <type 153>
 func (r <esc:0x9> <type 151>) Uint64 () <type -8>
 func (r <esc:0x9> <type 151>) .math/rand.int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 151>) Float32 () <type -9>
 func (r <esc:0x9> <type 151>) Seed (seed <type -4>)
 func (r <esc:0x9> <type 151>) Float64 () <type -10>
 func (r <esc:0x9> <type 151>) Int63 () <type -4>
 func (r <esc:0x9> <type 151>) NormFloat64 () <type -10>
 func (r <esc:0x9> <type 151>) ExpFloat64 () <type -10>
 func (r <esc:0x9> <type 151>) Int63n (n <type -4>) <type -4>
 func (r <esc:0x9> <type 151>) Int () <type -11>
 func (r <esc:0x9> <type 151>) Intn (n <type -11>) <type -11>
 func (r <esc:0x9> <type 151>) Int31n (n <type -3>) <type -3>
 func (r <type 151>) Read (p <esc:0x1> <type 34>) (n <type -11>, err <type -19>)
 func (r <esc:0x9> <type 151>) Int31 () <type -3>
 func (r <esc:0x9> <type 151>) Shuffle (n <type -11>, swap <esc:0x1> <type 154>)
 func (r <esc:0x9> <type 151>) Uint32 () <type -7>
type 153 [] <type -11>
type 154 (i <type -11>, j <type -11>)
type 155 struct { .math/rand.src <type 156>; .math/rand.s64 <type 158>; .math/rand.readVal <type -4>; .math/rand.readPos <type -1>; }
type 156 "math/rand.Source" <type 157>
type 157 interface { Int63 () <type -4>; Seed (seed <type -4>); }
type 158 "math/rand.Source64" <type 159>
type 159 interface { ? <type 156>; Uint64 () <type -8>; }
type 160 struct { .math/big.neg <type -15>; .math/big.abs <type 161>; }
type 161 ".math/big.nat" <type 143>
 func (z <esc:0x12> <type 161>) .math/big.set (x <esc:0x1> <type 161>) <type 161>
 func (z <esc:0x12> <type 161>) .math/big.random (rand <esc:0x9> <type 151>, limit <esc:0x1> <type 161>, n <type -11>) <type 161>
 func (z <esc:0x12> <type 161>) .math/big.setBytes (buf <esc:0x1> <type 34>) <type 161>
 func (n <esc:0x1> <type 161>) .math/big.probablyPrimeMillerRabin (reps <type -11>, force2 <type -15>) <type -15>
 func (z <esc:0x12> <type 161>) .math/big.scan (r <type 147>, base <type -11>, fracOk <type -15>) (res <type 161>, b <type -11>, count <type -11>, err <type -19>)
 func (z <esc:0x12> <type 161>) .math/big.expNNMontgomery (x <esc:0x1> <type 161>, y <esc:0x1> <type 161>, m <esc:0x1> <type 161>) <type 161>
 func (z <type 161>) .math/big.add (x <esc:0x1> <type 161>, y <esc:0x1> <type 161>) <type 161>
 func (q <esc:0x1> <type 161>) .math/big.convertWords (s <esc:0x1> <type 34>, b <type 144>, ndigits <type -11>, bb <type 144>, table <esc:0x1> <type 162>)
 func (z <type 161>) .math/big.expNNWindowed (x <type 161>, y <esc:0x1> <type 161>, m <esc:0x1> <type 161>) <type 161>
 func (z <type 161>) .math/big.expWW (x <type 144>, y <type 144>) <type 161>
 func (z <esc:0x12> <type 161>) .math/big.montgomery (x <esc:0x1> <type 161>, y <esc:0x1> <type 161>, m <esc:0x1> <type 161>, k <type 144>, n <type -11>) <type 161>
 func (z <esc:0x12> <type 161>) .math/big.shr (x <esc:0x1> <type 161>, s <type -12>) <type 161>
 func (x <esc:0x1> <type 161>) .math/big.bitLen () <type -11>
 func (z <esc:0x12> <type 161>) .math/big.divLarge (u <esc:0x82> <type 161>, uIn <esc:0x1> <type 161>, vIn <esc:0x1> <type 161>) (q <type 161>, r <type 161>)
 func (x <esc:0x1> <type 161>) .math/big.cmp (y <esc:0x1> <type 161>) (r <type -11>)
 func (z <esc:0x12> <type 161>) .math/big.sub (x <esc:0x1> <type 161>, y <esc:0x1> <type 161>) <type 161>
 func (z <esc:0x12> <type 161>) .math/big.shl (x <esc:0x1> <type 161>, s <type -12>) <type 161>
 func (x <esc:0x1> <type 161>) .math/big.sticky (i <type -12>) <type -12>
 func (z <type 161>) .math/big.sqrt (x <esc:0x1> <type 161>) <type 161>
 func (z <esc:0x12> <type 161>) .math/big.make (n <type -11>) <type 161>
 func (z <type 161>) .math/big.mulRange (a <type -8>, b <type -8>) <type 161>
 func (n <type 161>) .math/big.probablyPrimeLucas () <type -15>
 func (z <esc:0x12> <type 161>) .math/big.setWord (x <type 144>) <type 161>
 func (z <esc:0x12> <type 161>) .math/big.divW (x <esc:0x1> <type 161>, y <type 144>) (q <type 161>, r <type 144>)
 func (x <esc:0x1> <type 161>) .math/big.itoa (neg <type -15>, base <type -11>) <type 34>
 func (z <esc:0x1> <type 161>) .math/big.clear ()
 func (z <esc:0x12> <type 161>) .math/big.div (z2 <esc:0x82> <type 161>, u <esc:0x1> <type 161>, v <esc:0x1> <type 161>) (q <type 161>, r <type 161>)
 func (z <esc:0x12> <type 161>) .math/big.setUint64 (x <type -8>) <type 161>
 func (z <esc:0x12> <type 161>) .math/big.and (x <esc:0x1> <type 161>, y <esc:0x1> <type 161>) <type 161>
 func (z <esc:0x12> <type 161>) .math/big.setBit (x <esc:0x1> <type 161>, i <type -12>, b <type -12>) <type 161>
 func (x <esc:0x1> <type 161>) .math/big.utoa (base <type -11>) <type 34>
 func (z <esc:0x12> <type 161>) .math/big.norm () <type 161>
 func (z <type 161>) .math/big.sqr (x <esc:0x1> <type 161>) <type 161>
 func (x <esc:0x1> <type 161>) .math/big.trailingZeroBits () <type -12>
 func (x <esc:0x1> <type 161>) .math/big.bit (i <type -12>) <type -12>
 func (z <type 161>) .math/big.expNN (x <type 161>, y <esc:0x1> <type 161>, m <esc:0x1> <type 161>) <type 161>
 func (z <esc:0x12> <type 161>) .math/big.mulAddWW (x <esc:0x1> <type 161>, y <type 144>, r <type 144>) <type 161>
 func (z <type 161>) .math/big.mul (x <esc:0x1> <type 161>, y <esc:0x1> <type 161>) <type 161>
 func (z <esc:0x12> <type 161>) .math/big.andNot (x <esc:0x1> <type 161>, y <esc:0x1> <type 161>) <type 161>
 func (z <esc:0x12> <type 161>) .math/big.or (x <esc:0x1> <type 161>, y <esc:0x1> <type 161>) <type 161>
 func (z <esc:0x1> <type 161>) .math/big.bytes (buf <esc:0x1> <type 34>) (i <type -11>)
 func (z <esc:0x12> <type 161>) .math/big.xor (x <esc:0x1> <type 161>, y <esc:0x1> <type 161>) <type 161>
 func (x <esc:0x1> <type 161>) .math/big.modW (d <type 144>) (r <type 144>)
type 162 [] <type 163>
type 163 ".math/big.divisor" <type 164>
type 164 struct { .math/big.bbb <type 161>; .math/big.nbits <type -11>; .math/big.ndigits <type -11>; }
type 165 [] <type 166>
type 166 "crypto/x509/pkix.Extension" <type 167>
type 167 struct { Id <type 168>; Critical <type -15> "asn1:\"optional\""; Value <type 34>; }
type 168 "encoding/asn1.ObjectIdentifier" <type 153>
 func (oi <esc:0x1> <type 168>) Equal (other <esc:0x1> <type 168>) <type -15>
 func (oi <esc:0x1> <type 168>) String () <type -16>
type 169 *<type 170>
type 170 "crypto/x509/pkix.CertificateList" <type 171>
 func (certList <esc:0x1> <type 169>) HasExpired (now <esc:0x1> <type 31>) <type -15>
type 171 struct { TBSCertList <type 172>; SignatureAlgorithm <type 175>; SignatureValue <type 185>; }
type 172 "crypto/x509/pkix.TBSCertificateList" <type 173>
type 173 struct { Raw <type 174>; Version <type -11> "asn1:\"optional,default:0\""; Signature <type 175>; Issuer <type 179>; ThisUpdate <type 31>; NextUpdate <type 31> "asn1:\"optional\""; RevokedCertificates <type 135> "asn1:\"optional\""; Extensions <type 165> "asn1:\"tag:0,optional,explicit\""; }
type 174 "encoding/asn1.RawContent" <type 34>
type 175 "crypto/x509/pkix.AlgorithmIdentifier" <type 176>
type 176 struct { Algorithm <type 168>; Parameters <type 177> "asn1:\"optional\""; }
type 177 "encoding/asn1.RawValue" <type 178>
type 178 struct { Class <type -11>; Tag <type -11>; IsCompound <type -15>; Bytes <type 34>; FullBytes <type 34>; }
type 179 "crypto/x509/pkix.RDNSequence" <type 180>
 func (r <esc:0x9> <type 179>) String () <type -16>
type 180 [] <type 181>
type 181 "crypto/x509/pkix.RelativeDistinguishedNameSET" <type 182>
type 182 [] <type 183>
type 183 "crypto/x509/pkix.AttributeTypeAndValue" <type 184>
type 184 struct { Type <type 168>; Value <type 78>; }
type 185 "encoding/asn1.BitString" <type 186>
 func (b <esc:0x1> <type 185>) At (i <type -11>) <type -11>
 func (b <esc:0x12> <type 185>) RightAlign () <type 34>
type 186 struct { Bytes <type 34>; BitLength <type -11>; }
type 187 *<type 188>
type 188 "crypto/x509.VerifyOptions" <type 189>
type 189 struct { DNSName <type -16>; Intermediates <type 190>; Roots <type 190>; CurrentTime <type 31>; KeyUsages <type 195>; MaxConstraintComparisions <type -11>; }
type 190 *<type 191>
type 191 "crypto/x509.CertPool" <type 193>
 func (s <esc:0x9> <type 190>) .crypto/x509.copy () <type 190>
 func (s <esc:0x1> <type 190>) .crypto/x509.findPotentialParents (cert <esc:0x1> <type 133>) <type 153>
 func (s <esc:0x1> <type 190>) .crypto/x509.contains (cert <esc:0x1> <type 133>) <type -15>
 func (s <esc:0x9> <type 190>) AddCert (cert <type 133>)
 func (s <esc:0x9> <type 190>) AppendCertsFromPEM (pemCerts <type 34>) (ok <type -15>)
 func (s <esc:0x9> <type 190>) Subjects () <type 192>
type 192 [] <type 34>
type 193 struct { .crypto/x509.bySubjectKeyId <type 194>; .crypto/x509.byName <type 194>; .crypto/x509.certs <type 132>; }
type 194 map [<type -16>] <type 153>
type 195 [] <type 196>
type 196 "crypto/x509.ExtKeyUsage" <type -11>
type 197 [] <type 132>
type 198 *<type -11>
type 199 (parsedName <type 78>, constraint <type 78>) (match <type -15>, err <type -19>)
type 200 map [<type 133>] <type 197>
type 201 "crypto/x509.SignatureAlgorithm" <type -11>
 func (algo <type 201>) .crypto/x509.isRSAPSS () <type -15>
 func (algo <type 201>) String () <type -16>
type 202 struct { Raw <type 34>; RawTBSCertificate <type 34>; RawSubjectPublicKeyInfo <type 34>; RawSubject <type 34>; RawIssuer <type 34>; Signature <type 34>; SignatureAlgorithm <type 201>; PublicKeyAlgorithm <type 203>; PublicKey <type 78>; Version <type -11>; SerialNumber <type 138>; Issuer <type 204>; Subject <type 204>; NotBefore <type 31>; NotAfter <type 31>; KeyUsage <type 208>; Extensions <type 165>; ExtraExtensions <type 165>; UnhandledCriticalExtensions <type 209>; ExtKeyUsage <type 195>; UnknownExtKeyUsage <type 209>; BasicConstraintsValid <type -15>; IsCA <type -15>; MaxPathLen <type -11>; MaxPathLenZero <type -15>; SubjectKeyId <type 34>; AuthorityKeyId <type 34>; OCSPServer <type 54>; IssuingCertificateURL <type 54>; DNSNames <type 54>; EmailAddresses <type 54>; IPAddresses <type 210>; URIs <type 211>; PermittedDNSDomainsCritical <type -15>; PermittedDNSDomains <type 54>; ExcludedDNSDomains <type 54>; PermittedIPRanges <type 212>; ExcludedIPRanges <type 212>; PermittedEmailAddresses <type 54>; ExcludedEmailAddresses <type 54>; PermittedURIDomains <type 54>; ExcludedURIDomains <type 54>; CRLDistributionPoints <type 54>; PolicyIdentifiers <type 209>; }
type 203 "crypto/x509.PublicKeyAlgorithm" <type -11>
 func (algo <type 203>) String () <type -16>
type 204 "crypto/x509/pkix.Name" <type 207>
 func (n <type 204>) String () <type -16>
 func (n <type 204>) ToRDNSequence () (ret <type 179>)
 func (n <esc:0x1> <type 204>) .crypto/x509/pkix.appendRDNs (in <esc:0x1a> <type 179>, values <esc:0x9> <type 54>, oid <type 168>) <type 179>
 func (n <esc:0x9> <type 205>) FillFromRDNSequence (rdns <esc:0x9> <type 206>)
type 205 *<type 204>
type 206 *<type 179>
type 207 struct { Country <type 54>; Organization <type 54>; OrganizationalUnit <type 54>; Locality <type 54>; Province <type 54>; StreetAddress <type 54>; PostalCode <type 54>; SerialNumber <type -16>; CommonName <type -16>; Names <type 182>; ExtraNames <type 182>; }
type 208 "crypto/x509.KeyUsage" <type -11>
type 209 [] <type 168>
type 210 [] <type 123>
type 211 [] <type 60>
type 212 [] <type 213>
type 213 *<type 214>
type 214 "net.IPNet" <type 215>
 func (n <esc:0x1> <type 213>) String () <type -16>
 func (n <esc:0x1> <type 213>) Network () ($ret178 <type -16>)
 func (n <esc:0x1> <type 213>) Contains (ip <esc:0x1> <type 123>) <type -15>
type 215 struct { IP <type 123>; Mask <type 124>; }
type 216 (label <type -16>, context <type 34>, length <type -11>) (? <type 34>, ? <type -19>)
type 217 (key <type -16>, value <type 54>)
type 218 (? <type 219>)
type 219 "net/http/httptrace.WroteRequestInfo" <type 220>
type 220 struct { Err <type -19>; }
type 221 map [<type -16>] <type -15>
type 222 [] <type 223>
type 223 ".net/http.keyValues" <type 224>
type 224 struct { .net/http.key <type -16>; .net/http.values <type 54>; }
type 225 *<type 226>
type 226 ".net/http.headerSorter" <type 227>
 func (s <esc:0x1> <type 225>) Len () <type -11>
 func (s <esc:0x9> <type 225>) Swap (i <type -11>, j <type -11>)
 func (s <esc:0x1> <type 225>) Less (i <type -11>, j <type -11>) <type -15>
type 227 struct { .net/http.kvs <type 222>; }
type 228 interface { Hijack () (? <type 92>, ? <type 229>, ? <type -19>); }
type 229 *<type 230>
type 230 "bufio.ReadWriter" <type 231>
type 231 struct { ? <type 232>; ? <type 235>; }
type 232 *<type 233>
type 233 "bufio.Reader" <type 234>
 func (b <esc:0x1> <type 232>) UnreadRune () <type -19>
 func (b <esc:0x22> <type 232>) .bufio.readErr () <type -19>
 func (b <esc:0x12a> <type 232>) ReadSlice (delim <type -20>) (line <type 34>, err <type -19>)
 func (b <esc:0x12a> <type 232>) Peek (n <type -11>) (? <type 34>, ? <type -19>)
 func (b <esc:0x1> <type 232>) .bufio.reset (buf <type 34>, r <type 50>)
 func (b <esc:0x80a> <type 232>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 232>) Read (p <type 34>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 232>) Buffered () <type -11>
 func (b <esc:0x10a> <type 232>) ReadBytes (delim <type -20>) (? <type 34>, ? <type -19>)
 func (b <esc:0x10a> <type 232>) Discard (n <type -11>) (discarded <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 232>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x9> <type 232>) .bufio.writeBuf (w <type 83>) (? <type -4>, ? <type -19>)
 func (b <esc:0x9> <type 232>) Reset (r <type 50>)
 func (b <esc:0x9> <type 232>) .bufio.fill ()
 func (b <esc:0x1> <type 232>) UnreadByte () <type -19>
 func (b <esc:0x10a> <type 232>) WriteTo (w <type 83>) (n <type -4>, err <type -19>)
 func (b <esc:0x10a> <type 232>) ReadString (delim <type -20>) (? <type -16>, ? <type -19>)
 func (b <esc:0x82a> <type 232>) ReadLine () (line <type 34>, isPrefix <type -15>, err <type -19>)
 func (b <esc:0x1> <type 232>) Size () <type -11>
type 234 struct { .bufio.buf <type 34>; .bufio.rd <type 50>; .bufio.r <type -11>; .bufio.w <type -11>; .bufio.err <type -19>; .bufio.lastByte <type -11>; .bufio.lastRuneSize <type -11>; }
type 235 *<type 236>
type 236 "bufio.Writer" <type 237>
 func (b <esc:0x1> <type 235>) Size () <type -11>
 func (b <esc:0x1> <type 235>) Reset (w <type 83>)
 func (b <esc:0x2a> <type 235>) Flush () <type -19>
 func (b <esc:0x1> <type 235>) Available () <type -11>
 func (b <esc:0x10a> <type 235>) WriteString (s <esc:0x1> <type -16>) (? <type -11>, ? <type -19>)
 func (b <esc:0x1> <type 235>) Buffered () <type -11>
 func (b <esc:0x10a> <type 235>) ReadFrom (r <type 50>) (n <type -4>, err <type -19>)
 func (b <esc:0x10a> <type 235>) Write (p <type 34>) (nn <type -11>, err <type -19>)
 func (b <esc:0x2a> <type 235>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x10a> <type 235>) WriteRune (r <type -21>) (size <type -11>, err <type -19>)
type 237 struct { .bufio.err <type -19>; .bufio.buf <type 34>; .bufio.n <type -11>; .bufio.wr <type 83>; }
type 238 *<type 239>
type 239 ".net/http.contextKey" <type 240>
 func (k <esc:0x1> <type 238>) String () <type -16>
type 240 struct { .net/http.name <type -16>; }
type 241 "io.ReadCloser" <type 242>
type 242 interface { ? <type 50>; ? <type 70>; }
type 243 ".net/http.noBody" <type 244>
 func (? <esc:0x1> <type 243>) Read (? <esc:0x1> <type 34>) (? <type -11>, ? <type -19>)
 func (? <esc:0x1> <type 243>) Close () <type -19>
 func (? <esc:0x1> <type 243>) WriteTo (? <esc:0x1> <type 83>) (? <type -4>, ? <type -19>)
type 244 struct { }
type 245 struct { ErrorString <type -16>; }
type 246 (? <type 27>) (? <type 60>, ? <type -19>)
type 247 struct { Method <type -16>; Header <type 12>; }
type 248 interface { Push (target <type -16>, opts <type 249>) <type -19>; }
type 249 *<type 15>
type 250 struct { Method <type -16>; URL <type 60>; Proto <type -16>; ProtoMajor <type -11>; ProtoMinor <type -11>; Header <type 12>; Body <type 241>; GetBody <type 251>; ContentLength <type -4>; TransferEncoding <type 54>; Close <type -15>; Host <type -16>; Form <type 52>; PostForm <type 52>; MultipartForm <type 252>; Trailer <type 12>; RemoteAddr <type -16>; RequestURI <type -16>; TLS <type 130>; Cancel <type 264>; Response <type 47>; .net/http.ctx <type 265>; }
type 251 () (? <type 241>, ? <type -19>)
type 252 *<type 253>
type 253 "mime/multipart.Form" <type 254>
 func (f <esc:0x1> <type 252>) RemoveAll () <type -19>
type 254 struct { Value <type 53>; File <type 255>; }
type 255 map [<type -16>] <type 256>
type 256 [] <type 257>
type 257 *<type 258>
type 258 "mime/multipart.FileHeader" <type 263>
 func (fh <esc:0x9> <type 257>) Open () (? <type 259>, ? <type -19>)
type 259 "mime/multipart.File" <type 260>
type 260 interface { ? <type 50>; ? <type 261>; ? <type 72>; ? <type 70>; }
type 261 "io.ReaderAt" <type 262>
type 262 interface { ReadAt (p <type 34>, off <type -4>) (n <type -11>, err <type -19>); }
type 263 struct { Filename <type -16>; Header <type 99>; Size <type -4>; .mime/multipart.content <type 34>; .mime/multipart.tmpfile <type -16>; }
type 264 chan <- <type 244>
type 265 "context.Context" <type 266>
type 266 interface { Deadline () (deadline <type 31>, ok <type -15>); Done () <type 264>; Err () <type -19>; Value (key <type 78>) <type 78>; }
type 267 *<type 268>
type 268 "mime/multipart.Reader" <type 273>
 func (mr <esc:0x1> <type 267>) .mime/multipart.isFinalBoundary (line <esc:0x1> <type 34>) <type -15>
 func (r <type 267>) NextPart () (? <type 269>, ? <type -19>)
 func (mr <esc:0x1> <type 267>) .mime/multipart.isBoundaryDelimiterLine (line <esc:0x1> <type 34>) (ret <type -15>)
 func (r <type 267>) .mime/multipart.readForm (maxMemory <type -4>) (_ <type 252>, err <type -19>)
 func (r <type 267>) ReadForm (maxMemory <type -4>) (? <type 252>, ? <type -19>)
type 269 *<type 270>
type 270 "mime/multipart.Part" <type 271>
 func (p <type 269>) Close () <type -19>
 func (p <esc:0x9> <type 269>) Read (d <type 34>) (n <type -11>, err <type -19>)
 func (p <esc:0x1> <type 269>) .mime/multipart.parseContentDisposition ()
 func (bp <esc:0x9> <type 269>) .mime/multipart.populateHeaders () <type -19>
 func (p <esc:0x1> <type 269>) FileName () <type -16>
 func (p <esc:0x1> <type 269>) FormName () <type -16>
type 271 struct { Header <type 99>; .mime/multipart.mr <type 267>; .mime/multipart.disposition <type -16>; .mime/multipart.dispositionParams <type 272>; .mime/multipart.r <type 50>; .mime/multipart.n <type -11>; .mime/multipart.total <type -4>; .mime/multipart.err <type -19>; .mime/multipart.readErr <type -19>; }
type 272 map [<type -16>] <type -16>
type 273 struct { .mime/multipart.bufReader <type 232>; .mime/multipart.currentPart <type 269>; .mime/multipart.partsRead <type -11>; .mime/multipart.nl <type 34>; .mime/multipart.nlDashBoundary <type 34>; .mime/multipart.dashBoundaryDash <type 34>; .mime/multipart.dashBoundary <type 34>; }
type 274 struct { Status <type -16>; StatusCode <type -11>; Proto <type -16>; ProtoMajor <type -11>; ProtoMinor <type -11>; Header <type 12>; Body <type 241>; ContentLength <type -4>; TransferEncoding <type 54>; Close <type -15>; Uncompressed <type -15>; Trailer <type 12>; Request <type 27>; TLS <type 130>; }
type 275 interface { Header () <type 12>; Write (? <type 34>) (? <type -11>, ? <type -19>); WriteHeader (statusCode <type -11>); }
type 276 interface { RoundTrip (? <type 27>) (? <type 47>, ? <type -19>); }
type 277 "net.Listener" <type 278>
type 278 interface { Accept () (? <type 92>, ? <type -19>); Addr () <type 94>; Close () <type -19>; }
type 279 "io.ReadSeeker" <type 280>
type 280 interface { ? <type 50>; ? <type 72>; }
type 281 struct { .net/http.mu <type 282>; .net/http.m <type 290>; .net/http.es <type 293>; .net/http.hosts <type -15>; }
type 282 "sync.RWMutex" <type 286>
 func (rw <type 283>) RLock ()
 func (rw <type 283>) RUnlock ()
 func (rw <type 283>) Lock ()
 func (rw <type 283>) Unlock ()
 func (rw <esc:0x12> <type 283>) RLocker () ($ret8 <type 284>)
type 283 *<type 282>
type 284 "sync.Locker" <type 285>
type 285 interface { Lock (); Unlock (); }
type 286 struct { .sync.w <type 287>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 287 "sync.Mutex" <type 289>
 func (m <type 288>) Unlock ()
 func (m <type 288>) Lock ()
type 288 *<type 287>
type 289 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 290 map [<type -16>] <type 291>
type 291 ".net/http.muxEntry" <type 292>
type 292 struct { .net/http.h <type 10>; .net/http.pattern <type -16>; }
type 293 [] <type 291>
type 294 struct { Addr <type -16>; Handler <type 10>; TLSConfig <type 295>; ReadTimeout <type 29>; ReadHeaderTimeout <type 29>; WriteTimeout <type 29>; IdleTimeout <type 29>; MaxHeaderBytes <type -11>; TLSNextProto <type 337>; ConnState <type 394>; ErrorLog <type 395>; .net/http.disableKeepAlives <type -3>; .net/http.inShutdown <type -3>; .net/http.nextProtoOnce <type 334>; .net/http.nextProtoErr <type -19>; .net/http.mu <type 287>; .net/http.listeners <type 400>; .net/http.activeConn <type 402>; .net/http.doneChan <type 438>; .net/http.onShutdown <type 439>; }
type 295 *<type 296>
type 296 "crypto/tls.Config" <type 316>
 func (c <esc:0x9> <type 295>) .crypto/tls.writeKeyLog (label <type -16>, clientRandom <type 34>, secret <type 34>) <type -19>
 func (c <type 295>) Clone () <type 295>
 func (c <esc:0x1a2> <type 295>) .crypto/tls.getCertificate (clientHello <type 297>) (? <type 306>, ? <type -19>)
 func (c <esc:0x9> <type 295>) BuildNameToCertificate ()
 func (c <type 295>) .crypto/tls.serverInit (originalConfig <type 295>)
 func (c <type 295>) .crypto/tls.ticketKeys () <type 310>
 func (c <esc:0x1> <type 295>) .crypto/tls.mutualVersion (isClient <type -15>, peerVersions <esc:0x1> <type 300>) (? <type -6>, ? <type -15>)
 func (c <type 295>) SetSessionTicketKeys (keys <esc:0x1> <type 314>)
 func (c <esc:0x22> <type 295>) .crypto/tls.rand () <type 50>
 func (c <esc:0x32> <type 295>) .crypto/tls.time () <type 31>
 func (c <esc:0x22> <type 295>) .crypto/tls.cipherSuites () <type 300>
 func (c <esc:0x22> <type 295>) .crypto/tls.curvePreferences () <type 301>
 func (c <esc:0x1> <type 295>) .crypto/tls.supportedVersions (isClient <type -15>) <type 300>
 func (c <esc:0x1> <type 295>) .crypto/tls.maxSupportedVersion (isClient <type -15>) <type -6>
type 297 *<type 298>
type 298 "crypto/tls.ClientHelloInfo" <type 299>
type 299 struct { CipherSuites <type 300>; ServerName <type -16>; SupportedCurves <type 301>; SupportedPoints <type 303>; SignatureSchemes <type 304>; SupportedProtos <type 54>; SupportedVersions <type 300>; Conn <type 92>; }
type 300 [] <type -6>
type 301 [] <type 302>
type 302 "crypto/tls.CurveID" <type -6>
type 303 [] <type -5>
type 304 [] <type 305>
type 305 "crypto/tls.SignatureScheme" <type -6>
type 306 *<type 307>
type 307 "crypto/tls.Certificate" <type 308>
type 308 struct { Certificate <type 192>; PrivateKey <type 309>; OCSPStaple <type 34>; SignedCertificateTimestamps <type 192>; Leaf <type 133>; }
type 309 "crypto.PrivateKey" <type 78>
type 310 [] <type 311>
type 311 ".crypto/tls.ticketKey" <type 312>
type 312 struct { .crypto/tls.keyName <type 313>; .crypto/tls.aesKey <type 313>; .crypto/tls.hmacKey <type 313>; }
type 313 [16 ] <type -20>
type 314 [] <type 315>
type 315 [32 ] <type -20>
type 316 struct { Rand <type 50>; Time <type 317>; Certificates <type 318>; NameToCertificate <type 319>; GetCertificate <type 320>; GetClientCertificate <type 321>; GetConfigForClient <type 325>; VerifyPeerCertificate <type 326>; RootCAs <type 190>; NextProtos <type 54>; ServerName <type -16>; ClientAuth <type 327>; ClientCAs <type 190>; InsecureSkipVerify <type -15>; CipherSuites <type 300>; PreferServerCipherSuites <type -15>; SessionTicketsDisabled <type -15>; SessionTicketKey <type 315>; ClientSessionCache <type 328>; MinVersion <type -6>; MaxVersion <type -6>; CurvePreferences <type 301>; DynamicRecordSizingDisabled <type -15>; Renegotiation <type 333>; KeyLogWriter <type 83>; .crypto/tls.serverInitOnce <type 334>; .crypto/tls.mutex <type 282>; .crypto/tls.sessionTicketKeys <type 310>; }
type 317 () <type 31>
type 318 [] <type 307>
type 319 map [<type -16>] <type 306>
type 320 (? <type 297>) (? <type 306>, ? <type -19>)
type 321 (? <type 322>) (? <type 306>, ? <type -19>)
type 322 *<type 323>
type 323 "crypto/tls.CertificateRequestInfo" <type 324>
type 324 struct { AcceptableCAs <type 192>; SignatureSchemes <type 304>; }
type 325 (? <type 297>) (? <type 295>, ? <type -19>)
type 326 (rawCerts <type 192>, verifiedChains <type 197>) <type -19>
type 327 "crypto/tls.ClientAuthType" <type -11>
type 328 "crypto/tls.ClientSessionCache" <type 329>
type 329 interface { Get (sessionKey <type -16>) (session <type 330>, ok <type -15>); Put (sessionKey <type -16>, cs <type 330>); }
type 330 *<type 331>
type 331 "crypto/tls.ClientSessionState" <type 332>
type 332 struct { .crypto/tls.sessionTicket <type 303>; .crypto/tls.vers <type -6>; .crypto/tls.cipherSuite <type -6>; .crypto/tls.masterSecret <type 34>; .crypto/tls.serverCertificates <type 132>; .crypto/tls.verifiedChains <type 197>; .crypto/tls.receivedAt <type 31>; .crypto/tls.nonce <type 34>; .crypto/tls.useBy <type 31>; .crypto/tls.ageAdd <type -7>; }
type 333 "crypto/tls.RenegotiationSupport" <type -11>
type 334 "sync.Once" <type 336>
 func (o <type 335>) Do (f <esc:0x1> <type 97>)
type 335 *<type 334>
type 336 struct { .sync.m <type 287>; .sync.done <type -7>; }
type 337 map [<type -16>] <type 338>
type 338 (? <type 339>, ? <type 340>, ? <type 10>)
type 339 *<type 23>
type 340 *<type 341>
type 341 "crypto/tls.Conn" <type 367>
 func (c <type 340>) .crypto/tls.processCertsFromClient (certificate <type 307>) <type -19>
 func (c <esc:0x9> <type 340>) .crypto/tls.decryptTicket (encrypted <type 34>) (plaintext <type 34>, usedOldKey <type -15>)
 func (c <type 340>) .crypto/tls.handleNewSessionTicket (msg <esc:0x9> <type 342>) <type -19>
 func (c <type 340>) .crypto/tls.getClientCertificate (cri <type 322>) (? <type 306>, ? <type -19>)
 func (c <type 340>) .crypto/tls.readClientHello () (? <type 345>, ? <type -19>)
 func (c <esc:0x3a> <type 340>) .crypto/tls.loadSession (hello <esc:0x9> <type 345>) (cacheKey <type -16>, session <type 330>, earlySecret <type 34>, binderKey <type 34>)
 func (c <type 340>) .crypto/tls.handshakeComplete () <type -15>
 func (c <type 340>) VerifyHostname (host <type -16>) <type -19>
 func (c <type 340>) OCSPResponse () <type 34>
 func (c <type 340>) .crypto/tls.serverHandshake () <type -19>
 func (c <type 340>) .crypto/tls.makeClientHello () (? <type 345>, ? <type 354>, ? <type -19>)
 func (c <esc:0x9> <type 340>) SetDeadline (t <type 31>) <type -19>
 func (c <type 340>) .crypto/tls.pickTLSVersion (serverHello <esc:0x1> <type 356>) <type -19>
 func (c <type 340>) Close () <type -19>
 func (c <type 340>) .crypto/tls.verifyServerCertificate (certificates <type 192>) <type -19>
 func (c <esc:0x1> <type 340>) .crypto/tls.newRecordHeaderError (conn <esc:0x12> <type 92>, msg <esc:0x12> <type -16>) (err <type 359>)
 func (c <type 340>) Handshake () <type -19>
 func (c <type 340>) .crypto/tls.sendAlertLocked (err <type 362>) <type -19>
 func (c <type 340>) .crypto/tls.handlePostHandshakeMessage () <type -19>
 func (c <type 340>) .crypto/tls.readRecordOrCCS (expectChangeCipherSpec <type -15>) <type -19>
 func (c <type 340>) .crypto/tls.readChangeCipherSpec () <type -19>
 func (c <type 340>) ConnectionState () <type 129>
 func (c <esc:0x9> <type 340>) .crypto/tls.readFromUntil (r <type 50>, n <type -11>) <type -19>
 func (c <type 340>) .crypto/tls.retryReadRecord (expectChangeCipherSpec <type -15>) <type -19>
 func (c <type 340>) Write (b <type 34>) (? <type -11>, ? <type -19>)
 func (c <esc:0x9> <type 340>) .crypto/tls.encryptTicket (state <type 34>) (? <type 34>, ? <type -19>)
 func (c <type 340>) .crypto/tls.sendAlert (err <type 362>) <type -19>
 func (c <esc:0x9> <type 340>) LocalAddr () <type 94>
 func (c <type 340>) .crypto/tls.clientHandshake () (err <type -19>)
 func (c <esc:0x9> <type 340>) .crypto/tls.flush () (? <type -11>, ? <type -19>)
 func (c <type 340>) .crypto/tls.writeRecordLocked (typ <type 363>, data <type 34>) (? <type -11>, ? <type -19>)
 func (c <type 340>) .crypto/tls.writeRecord (typ <type 363>, data <type 34>) (? <type -11>, ? <type -19>)
 func (c <esc:0x9> <type 340>) .crypto/tls.write (data <type 34>) (? <type -11>, ? <type -19>)
 func (c <esc:0x9> <type 340>) SetWriteDeadline (t <type 31>) <type -19>
 func (c <type 340>) .crypto/tls.readHandshake () (? <type 78>, ? <type -19>)
 func (c <type 340>) .crypto/tls.handleRenegotiation () <type -19>
 func (c <esc:0x9> <type 340>) SetReadDeadline (t <type 31>) <type -19>
 func (c <type 340>) .crypto/tls.readRecord () <type -19>
 func (c <esc:0x9> <type 340>) .crypto/tls.maxPayloadSizeForWrite (typ <type 363>) <type -11>
 func (c <type 340>) .crypto/tls.handleKeyUpdate (keyUpdate <esc:0x1> <type 364>) <type -19>
 func (c <type 340>) Read (b <esc:0x1> <type 34>) (? <type -11>, ? <type -19>)
 func (c <esc:0x9> <type 340>) RemoteAddr () <type 94>
 func (c <type 340>) CloseWrite () <type -19>
 func (c <type 340>) .crypto/tls.closeNotify () <type -19>
type 342 *<type 343>
type 343 ".crypto/tls.newSessionTicketMsgTLS13" <type 344>
 func (m <esc:0x1> <type 342>) .crypto/tls.unmarshal (data <type 34>) <type -15>
 func (m <esc:0x22> <type 342>) .crypto/tls.marshal () <type 34>
type 344 struct { .crypto/tls.raw <type 34>; .crypto/tls.lifetime <type -7>; .crypto/tls.ageAdd <type -7>; .crypto/tls.nonce <type 34>; .crypto/tls.label <type 34>; .crypto/tls.maxEarlyData <type -7>; }
type 345 *<type 346>
type 346 ".crypto/tls.clientHelloMsg" <type 347>
 func (m <esc:0x9> <type 345>) .crypto/tls.unmarshal (data <type 34>) <type -15>
 func (m <esc:0x9> <type 345>) .crypto/tls.updateBinders (pskBinders <type 192>)
 func (m <esc:0x2a> <type 345>) .crypto/tls.marshalWithoutBinders () <type 34>
 func (m <esc:0x2a> <type 345>) .crypto/tls.marshal () <type 34>
type 347 struct { .crypto/tls.raw <type 34>; .crypto/tls.vers <type -6>; .crypto/tls.random <type 34>; .crypto/tls.sessionId <type 34>; .crypto/tls.cipherSuites <type 300>; .crypto/tls.compressionMethods <type 303>; .crypto/tls.nextProtoNeg <type -15>; .crypto/tls.serverName <type -16>; .crypto/tls.ocspStapling <type -15>; .crypto/tls.supportedCurves <type 301>; .crypto/tls.supportedPoints <type 303>; .crypto/tls.ticketSupported <type -15>; .crypto/tls.sessionTicket <type 303>; .crypto/tls.supportedSignatureAlgorithms <type 304>; .crypto/tls.supportedSignatureAlgorithmsCert <type 304>; .crypto/tls.secureRenegotiationSupported <type -15>; .crypto/tls.secureRenegotiation <type 34>; .crypto/tls.alpnProtocols <type 54>; .crypto/tls.scts <type -15>; .crypto/tls.supportedVersions <type 300>; .crypto/tls.cookie <type 34>; .crypto/tls.keyShares <type 348>; .crypto/tls.earlyData <type -15>; .crypto/tls.pskModes <type 303>; .crypto/tls.pskIdentities <type 351>; .crypto/tls.pskBinders <type 192>; }
type 348 [] <type 349>
type 349 ".crypto/tls.keyShare" <type 350>
type 350 struct { .crypto/tls.group <type 302>; .crypto/tls.data <type 34>; }
type 351 [] <type 352>
type 352 ".crypto/tls.pskIdentity" <type 353>
type 353 struct { .crypto/tls.label <type 34>; .crypto/tls.obfuscatedTicketAge <type -7>; }
type 354 ".crypto/tls.ecdheParameters" <type 355>
type 355 interface { CurveID () <type 302>; PublicKey () <type 34>; SharedKey (peerPublicKey <type 34>) <type 34>; }
type 356 *<type 357>
type 357 ".crypto/tls.serverHelloMsg" <type 358>
 func (m <esc:0x9> <type 356>) .crypto/tls.unmarshal (data <type 34>) <type -15>
 func (m <esc:0x2a> <type 356>) .crypto/tls.marshal () <type 34>
type 358 struct { .crypto/tls.raw <type 34>; .crypto/tls.vers <type -6>; .crypto/tls.random <type 34>; .crypto/tls.sessionId <type 34>; .crypto/tls.cipherSuite <type -6>; .crypto/tls.compressionMethod <type -5>; .crypto/tls.nextProtoNeg <type -15>; .crypto/tls.nextProtos <type 54>; .crypto/tls.ocspStapling <type -15>; .crypto/tls.ticketSupported <type -15>; .crypto/tls.secureRenegotiationSupported <type -15>; .crypto/tls.secureRenegotiation <type 34>; .crypto/tls.alpnProtocol <type -16>; .crypto/tls.scts <type 192>; .crypto/tls.supportedVersion <type -6>; .crypto/tls.serverShare <type 349>; .crypto/tls.selectedIdentityPresent <type -15>; .crypto/tls.selectedIdentity <type -6>; .crypto/tls.cookie <type 34>; .crypto/tls.selectedGroup <type 302>; }
type 359 "crypto/tls.RecordHeaderError" <type 360>
 func (e <esc:0x1> <type 359>) Error () <type -16>
type 360 struct { Msg <type -16>; RecordHeader <type 361>; Conn <type 92>; }
type 361 [5 ] <type -20>
type 362 ".crypto/tls.alert" <type -5>
 func (e <type 362>) Error () <type -16>
 func (e <type 362>) String () <type -16>
type 363 ".crypto/tls.recordType" <type -5>
type 364 *<type 365>
type 365 ".crypto/tls.keyUpdateMsg" <type 366>
 func (m <esc:0x1> <type 364>) .crypto/tls.unmarshal (data <type 34>) <type -15>
 func (m <esc:0x22> <type 364>) .crypto/tls.marshal () <type 34>
type 366 struct { .crypto/tls.raw <type 34>; .crypto/tls.updateRequested <type -15>; }
type 367 struct { .crypto/tls.conn <type 92>; .crypto/tls.isClient <type -15>; .crypto/tls.handshakeStatus <type -7>; .crypto/tls.handshakeMutex <type 287>; .crypto/tls.handshakeErr <type -19>; .crypto/tls.vers <type -6>; .crypto/tls.haveVers <type -15>; .crypto/tls.config <type 295>; .crypto/tls.handshakes <type -11>; .crypto/tls.didResume <type -15>; .crypto/tls.cipherSuite <type -6>; .crypto/tls.ocspResponse <type 34>; .crypto/tls.scts <type 192>; .crypto/tls.peerCertificates <type 132>; .crypto/tls.verifiedChains <type 197>; .crypto/tls.serverName <type -16>; .crypto/tls.secureRenegotiation <type -15>; .crypto/tls.ekm <type 216>; .crypto/tls.resumptionSecret <type 34>; .crypto/tls.clientFinishedIsFirst <type -15>; .crypto/tls.closeNotifyErr <type -19>; .crypto/tls.closeNotifySent <type -15>; .crypto/tls.clientFinished <type 368>; .crypto/tls.serverFinished <type 368>; .crypto/tls.clientProtocol <type -16>; .crypto/tls.clientProtocolFallback <type -15>; .crypto/tls.in <type 369>; .crypto/tls.out <type 369>; .crypto/tls.rawInput <type 387>; .crypto/tls.input <type 391>; .crypto/tls.hand <type 387>; .crypto/tls.outBuf <type 34>; .crypto/tls.buffering <type -15>; .crypto/tls.sendBuf <type 34>; .crypto/tls.bytesSent <type -4>; .crypto/tls.packetsSent <type -4>; .crypto/tls.retryCount <type -11>; .crypto/tls.activeCall <type -3>; .crypto/tls.tmp <type 313>; }
type 368 [12 ] <type -20>
type 369 ".crypto/tls.halfConn" <type 384>
 func (hc <type 370>) .crypto/tls.encrypt (record <type 34>, payload <type 34>, rand <type 50>) (? <type 34>, ? <type -19>)
 func (hc <type 370>) .crypto/tls.decrypt (record <type 34>) (? <type 34>, ? <type 363>, ? <type -19>)
 func (hc <esc:0x1> <type 370>) .crypto/tls.incSeq ()
 func (hc <esc:0x9> <type 370>) .crypto/tls.explicitNonceLen () <type -11>
 func (hc <esc:0x9> <type 370>) .crypto/tls.changeCipherSpec () <type -19>
 func (hc <esc:0x1> <type 370>) .crypto/tls.prepareCipherSpec (version <type -6>, cipher <type 78>, mac <type 371>)
 func (hc <esc:0x1> <type 370>) .crypto/tls.setTrafficSecret (suite <esc:0x9> <type 373>, secret <type 34>)
 func (hc <esc:0x1> <type 370>) .crypto/tls.setErrorLocked (err <type -19>) <type -19>
type 370 *<type 369>
type 371 ".crypto/tls.macFunction" <type 372>
type 372 interface { MAC (seq <type 34>, header <type 34>, data <type 34>, extra <type 34>) <type 34>; Size () <type -11>; }
type 373 *<type 374>
type 374 ".crypto/tls.cipherSuiteTLS13" <type 377>
 func (c <type 373>) .crypto/tls.exportKeyingMaterial (masterSecret <type 34>, transcript <type 375>) <type 216>
 func (c <esc:0x1> <type 373>) .crypto/tls.finishedHash (baseKey <type 34>, transcript <type 375>) <type 34>
 func (c <esc:0x1> <type 373>) .crypto/tls.nextTrafficSecret (trafficSecret <type 34>) <type 34>
 func (c <esc:0x1> <type 373>) .crypto/tls.trafficKey (trafficSecret <type 34>) (key <type 34>, iv <type 34>)
 func (c <esc:0x1> <type 373>) .crypto/tls.extract (newSecret <type 34>, currentSecret <type 34>) <type 34>
 func (c <esc:0x1> <type 373>) .crypto/tls.deriveSecret (secret <type 34>, label <esc:0x1> <type -16>, transcript <type 375>) <type 34>
 func (c <esc:0x1> <type 373>) .crypto/tls.expandLabel (secret <type 34>, label <esc:0x1> <type -16>, context <esc:0x1> <type 34>, length <type -11>) <type 34>
type 375 "hash.Hash" <type 376>
type 376 interface { ? <type 83>; BlockSize () <type -11>; Reset (); Size () <type -11>; Sum (b <type 34>) <type 34>; }
type 377 struct { .crypto/tls.id <type -6>; .crypto/tls.keyLen <type -11>; .crypto/tls.aead <type 378>; .crypto/tls.hash <type 383>; }
type 378 (key <type 34>, fixedNonce <type 34>) <type 379>
type 379 ".crypto/tls.aead" <type 380>
type 380 interface { ? <type 381>; .crypto/tls.explicitNonceLen () <type -11>; }
type 381 "crypto/cipher.AEAD" <type 382>
type 382 interface { NonceSize () <type -11>; Open (dst <type 34>, nonce <type 34>, ciphertext <type 34>, additionalData <type 34>) (? <type 34>, ? <type -19>); Overhead () <type -11>; Seal (dst <type 34>, nonce <type 34>, plaintext <type 34>, additionalData <type 34>) <type 34>; }
type 383 "crypto.Hash" <type -12>
 func (h <type 383>) HashFunc () ($ret0 <type 383>)
 func (h <type 383>) Size () <type -11>
 func (h <type 383>) New () <type 375>
 func (h <type 383>) Available () <type -15>
type 384 struct { ? <type 287>; .crypto/tls.err <type -19>; .crypto/tls.version <type -6>; .crypto/tls.cipher <type 78>; .crypto/tls.mac <type 371>; .crypto/tls.seq <type 385>; .crypto/tls.additionalData <type 386>; .crypto/tls.nextCipher <type 78>; .crypto/tls.nextMac <type 371>; .crypto/tls.trafficSecret <type 34>; }
type 385 [8 ] <type -20>
type 386 [13 ] <type -20>
type 387 "bytes.Buffer" <type 389>
 func (b <esc:0x9> <type 388>) ReadFrom (r <type 50>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 388>) WriteString (s <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 388>) ReadString (delim <type -20>) (line <type -16>, err <type -19>)
 func (b <esc:0x1> <type 388>) Write (p <esc:0x1> <type 34>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 388>) Grow (n <type -11>)
 func (b <esc:0x1> <type 388>) .bytes.grow (n <type -11>) <type -11>
 func (b <esc:0x22> <type 388>) Next (n <type -11>) <type 34>
 func (b <esc:0x1> <type 388>) Reset ()
 func (b <esc:0x1> <type 388>) .bytes.empty () <type -15>
 func (b <esc:0x1> <type 388>) WriteRune (r <type -21>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 388>) Len () <type -11>
 func (b <esc:0x22> <type 388>) .bytes.readSlice (delim <type -20>) (line <type 34>, err <type -19>)
 func (b <esc:0x1> <type 388>) UnreadByte () <type -19>
 func (b <esc:0x1> <type 388>) ReadBytes (delim <type -20>) (line <type 34>, err <type -19>)
 func (b <esc:0x1> <type 388>) UnreadRune () <type -19>
 func (b <esc:0x1> <type 388>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x1> <type 388>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x9> <type 388>) WriteTo (w <type 83>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 388>) Read (p <esc:0x1> <type 34>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 388>) Truncate (n <type -11>)
 func (b <esc:0x1> <type 388>) .bytes.tryGrowByReslice (n <type -11>) (? <type -11>, ? <type -15>)
 func (b <esc:0x1> <type 388>) Cap () <type -11>
 func (b <esc:0x1> <type 388>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x1> <type 388>) String () <type -16>
 func (b <esc:0x22> <type 388>) Bytes () <type 34>
type 388 *<type 387>
type 389 struct { .bytes.buf <type 34>; .bytes.off <type -11>; .bytes.lastRead <type 390>; }
type 390 ".bytes.readOp" <type -1>
type 391 "bytes.Reader" <type 393>
 func (r <esc:0x1> <type 392>) Len () <type -11>
 func (r <esc:0x1> <type 392>) UnreadByte () <type -19>
 func (r <esc:0x1> <type 392>) ReadRune () (ch <type -21>, size <type -11>, err <type -19>)
 func (r <esc:0x1> <type 392>) Reset (b <type 34>)
 func (r <esc:0x1> <type 392>) Size () <type -4>
 func (r <esc:0x1> <type 392>) Read (b <esc:0x1> <type 34>) (n <type -11>, err <type -19>)
 func (r <esc:0x1> <type 392>) ReadAt (b <esc:0x1> <type 34>, off <type -4>) (n <type -11>, err <type -19>)
 func (r <esc:0x1> <type 392>) ReadByte () (? <type -20>, ? <type -19>)
 func (r <esc:0x1> <type 392>) UnreadRune () <type -19>
 func (r <esc:0x1> <type 392>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (r <esc:0x9> <type 392>) WriteTo (w <type 83>) (n <type -4>, err <type -19>)
type 392 *<type 391>
type 393 struct { .bytes.s <type 34>; .bytes.i <type -4>; .bytes.prevRune <type -11>; }
type 394 (? <type 92>, ? <type 3>)
type 395 *<type 396>
type 396 "log.Logger" <type 399>
 func (l <type 395>) Writer () <type 83>
 func (l <type 395>) SetPrefix (prefix <type -16>)
 func (l <type 395>) Prefix () <type -16>
 func (l <type 395>) SetFlags (flag <type -11>)
 func (l <esc:0x1> <type 395>) .log.formatHeader (buf <esc:0x9> <type 397>, t <esc:0x1> <type 31>, file <esc:0x1> <type -16>, line <type -11>)
 func (l <type 395>) Panicf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 78>)
 func (l <type 395>) Output (calldepth <type -11>, s <esc:0x1> <type -16>) <type -19>
 func (l <type 395>) Panic (v <esc:0x9> ...<type 78>)
 func (l <type 395>) SetOutput (w <type 83>)
 func (l <type 395>) Printf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 78>)
 func (l <type 395>) Print (v <esc:0x9> ...<type 78>)
 func (l <type 395>) Fatalln (v <esc:0x9> ...<type 78>)
 func (l <type 395>) Fatal (v <esc:0x9> ...<type 78>)
 func (l <type 395>) Panicln (v <esc:0x9> ...<type 78>)
 func (l <type 395>) Fatalf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 78>)
 func (l <type 395>) Println (v <esc:0x9> ...<type 78>)
 func (l <type 395>) Flags () <type -11>
type 397 *<type 34>
type 398 [] <type 78>
type 399 struct { .log.mu <type 287>; .log.prefix <type -16>; .log.flag <type -11>; .log.out <type 83>; .log.buf <type 34>; }
type 400 map [<type 401>] <type 244>
type 401 *<type 277>
type 402 map [<type 403>] <type 244>
type 403 *<type 404>
type 404 ".net/http.conn" <type 418>
 func (c <type 403>) .net/http.hijacked () <type -15>
 func (c <type 403>) .net/http.hijackLocked () (rwc <type 92>, buf <type 229>, err <type -19>)
 func (c <type 403>) .net/http.readRequest (ctx <type 265>) (w <type 405>, err <type -19>)
 func (c <esc:0x9> <type 403>) .net/http.finalFlush ()
 func (c <esc:0x9> <type 403>) .net/http.close ()
 func (c <esc:0x9> <type 403>) .net/http.closeWriteAndWait ()
 func (c <type 403>) .net/http.setState (nc <type 92>, state <type 3>)
 func (c <type 403>) .net/http.getState () (state <type 3>, unixSec <type -4>)
 func (c <type 403>) .net/http.serve (ctx <type 265>)
type 405 *<type 406>
type 406 ".net/http.response" <type 407>
 func (w <esc:0x9> <type 405>) .net/http.finalTrailers () <type 12>
 func (w <esc:0x9> <type 405>) .net/http.declareTrailer (k <type -16>)
 func (w <esc:0x1> <type 405>) .net/http.requestTooLarge ()
 func (w <esc:0x1> <type 405>) .net/http.needsSniff () <type -15>
 func (w <type 405>) ReadFrom (src <type 50>) (n <type -4>, err <type -19>)
 func (w <esc:0x22> <type 405>) Header () <type 12>
 func (w <esc:0x9> <type 405>) WriteHeader (code <type -11>)
 func (w <esc:0x1> <type 405>) .net/http.bodyAllowed () <type -15>
 func (w <esc:0x18a> <type 405>) Write (data <type 34>) (n <type -11>, err <type -19>)
 func (w <esc:0x18a> <type 405>) WriteString (data <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (w <esc:0x18a> <type 405>) .net/http.write (lenData <type -11>, dataB <type 34>, dataS <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (w <type 405>) .net/http.finishRequest ()
 func (w <esc:0x9> <type 405>) .net/http.shouldReuseConnection () <type -15>
 func (w <esc:0x9> <type 405>) .net/http.closedRequestBodyEarly () <type -15>
 func (w <esc:0x9> <type 405>) Flush ()
 func (w <type 405>) .net/http.sendExpectationFailed ()
 func (w <type 405>) Hijack () (rwc <type 92>, buf <type 229>, err <type -19>)
 func (w <type 405>) CloseNotify () <type 56>
type 407 struct { .net/http.conn <type 403>; .net/http.req <type 27>; .net/http.reqBody <type 241>; .net/http.cancelCtx <type 408>; .net/http.wroteHeader <type -15>; .net/http.wroteContinue <type -15>; .net/http.wants10KeepAlive <type -15>; .net/http.wantsClose <type -15>; .net/http.w <type 235>; .net/http.cw <type 409>; .net/http.handlerHeader <type 12>; .net/http.calledHeader <type -15>; .net/http.written <type -4>; .net/http.contentLength <type -4>; .net/http.status <type -11>; .net/http.closeAfterReply <type -15>; .net/http.requestBodyLimitHit <type -15>; .net/http.trailers <type 54>; .net/http.handlerDone <type 412>; .net/http.dateBuf <type 414>; .net/http.clenBuf <type 415>; .net/http.statusBuf <type 416>; .net/http.closeNotifyCh <type 417>; .net/http.didCloseNotify <type -3>; }
type 408 "context.CancelFunc" <type 97>
type 409 ".net/http.chunkWriter" <type 411>
 func (cw <esc:0x28a> <type 410>) Write (p <type 34>) (n <type -11>, err <type -19>)
 func (cw <esc:0x9> <type 410>) .net/http.flush ()
 func (cw <esc:0x9> <type 410>) .net/http.close ()
 func (cw <esc:0x9> <type 410>) .net/http.writeHeader (p <type 34>)
type 410 *<type 409>
type 411 struct { .net/http.res <type 405>; .net/http.header <type 12>; .net/http.wroteHeader <type -15>; .net/http.chunking <type -15>; }
type 412 ".net/http.atomicBool" <type -3>
 func (b <type 413>) .net/http.isSet () <type -15>
 func (b <type 413>) .net/http.setTrue ()
type 413 *<type 412>
type 414 [29 ] <type -20>
type 415 [10 ] <type -20>
type 416 [3 ] <type -20>
type 417 chan <type -15>
type 418 struct { .net/http.server <type 339>; .net/http.cancelCtx <type 408>; .net/http.rwc <type 92>; .net/http.remoteAddr <type -16>; .net/http.tlsState <type 130>; .net/http.werr <type -19>; .net/http.r <type 419>; .net/http.bufr <type 232>; .net/http.bufw <type 235>; .net/http.lastMethod <type -16>; .net/http.curReq <type 434>; .net/http.curState <type 437>; .net/http.mu <type 287>; .net/http.hijackedv <type -15>; }
type 419 *<type 420>
type 420 ".net/http.connReader" <type 421>
 func (cr <type 419>) .net/http.lock ()
 func (cr <type 419>) .net/http.unlock ()
 func (cr <type 419>) .net/http.startBackgroundRead ()
 func (cr <type 419>) .net/http.backgroundRead ()
 func (cr <type 419>) .net/http.abortPendingRead ()
 func (cr <esc:0x1> <type 419>) .net/http.setReadLimit (remain <type -4>)
 func (cr <esc:0x1> <type 419>) .net/http.setInfiniteReadLimit ()
 func (cr <esc:0x1> <type 419>) .net/http.hitReadLimit () <type -15>
 func (cr <esc:0x9> <type 419>) .net/http.handleReadError (_ <esc:0x1> <type -19>)
 func (cr <esc:0x9> <type 419>) .net/http.closeNotify ()
 func (cr <type 419>) Read (p <type 34>) (n <type -11>, err <type -19>)
type 421 struct { .net/http.conn <type 403>; .net/http.mu <type 287>; .net/http.hasByte <type -15>; .net/http.byteBuf <type 422>; .net/http.cond <type 423>; .net/http.inRead <type -15>; .net/http.aborted <type -15>; .net/http.remain <type -4>; }
type 422 [1 ] <type -20>
type 423 *<type 424>
type 424 "sync.Cond" <type 425>
 func (c <type 423>) Broadcast ()
 func (c <type 423>) Signal ()
 func (c <type 423>) Wait ()
type 425 struct { .sync.noCopy <type 426>; L <type 284>; .sync.notify <type 428>; .sync.checker <type 432>; }
type 426 ".sync.noCopy" <type 244>
 func (? <esc:0x1> <type 427>) Unlock ()
 func (? <esc:0x1> <type 427>) Lock ()
type 427 *<type 426>
type 428 ".sync.notifyList" <type 429>
type 429 struct { .sync.wait <type -7>; .sync.notify <type -7>; .sync.lock <type -13>; .sync.head <type 430>; .sync.tail <type 430>; }
type 430 "unsafe.Pointer" <type 431>
type 431 *any
type 432 ".sync.copyChecker" <type -13>
 func (c <type 433>) .sync.check ()
type 433 *<type 432>
type 434 "sync/atomic.Value" <type 436>
 func (v <type 435>) Store (x <type 78>)
 func (v <type 435>) Load () (x <type 78>)
type 435 *<type 434>
type 436 struct { .sync/atomic.v <type 78>; }
type 437 struct { .net/http.atomic <type -8>; }
type 438 chan <type 244>
type 439 [] <type 97>
type 440 struct { .net/http.idleMu <type 287>; .net/http.wantIdle <type -15>; .net/http.idleConn <type 441>; .net/http.idleConnCh <type 472>; .net/http.idleLRU <type 474>; .net/http.reqMu <type 287>; .net/http.reqCanceler <type 484>; .net/http.altMu <type 287>; .net/http.altProto <type 434>; .net/http.connCountMu <type 287>; .net/http.connPerHostCount <type 485>; .net/http.connPerHostAvailable <type 486>; Proxy <type 246>; DialContext <type 487>; Dial <type 488>; DialTLS <type 488>; TLSClientConfig <type 295>; TLSHandshakeTimeout <type 29>; DisableKeepAlives <type -15>; DisableCompression <type -15>; MaxIdleConns <type -11>; MaxIdleConnsPerHost <type -11>; MaxConnsPerHost <type -11>; IdleConnTimeout <type 29>; ResponseHeaderTimeout <type 29>; ExpectContinueTimeout <type 29>; TLSNextProto <type 489>; ProxyConnectHeader <type 12>; MaxResponseHeaderBytes <type -4>; .net/http.nextProtoOnce <type 334>; .net/http.h2transport <type 491>; }
type 441 map [<type 442>] <type 444>
type 442 ".net/http.connectMethodKey" <type 443>
 func (k <type 442>) String () <type -16>
type 443 struct { .net/http.proxy <type -16>; .net/http.scheme <type -16>; .net/http.addr <type -16>; .net/http.onlyH1 <type -15>; }
type 444 [] <type 445>
type 445 *<type 446>
type 446 ".net/http.persistConn" <type 456>
 func (pc <type 445>) .net/http.shouldRetryRequest (req <esc:0x1> <type 27>, err <esc:0x1> <type -19>) <type -15>
 func (pconn <esc:0x9> <type 445>) .net/http.addTLS (name <type -16>, trace <type 85>) <type -19>
 func (pc <esc:0x1> <type 445>) .net/http.maxHeaderResponseSize () <type -4>
 func (pc <esc:0x9> <type 445>) Read (p <type 34>) (n <type -11>, err <type -19>)
 func (pc <type 445>) .net/http.isBroken () <type -15>
 func (pc <type 445>) .net/http.canceled () <type -19>
 func (pc <type 445>) .net/http.isReused () <type -15>
 func (pc <type 445>) .net/http.gotIdleConnTrace (idleAt <esc:0x1> <type 31>) (t <type 90>)
 func (pc <type 445>) .net/http.cancelRequest (err <type -19>)
 func (pc <type 445>) .net/http.closeConnIfStillIdle ()
 func (pc <type 445>) .net/http.mapRoundTripError (req <type 447>, startBytesWritten <type -4>, err <type -19>) <type -19>
 func (pc <type 445>) .net/http.readLoop ()
 func (pc <esc:0x9> <type 445>) .net/http.readLoopPeekFailLocked (peekErr <type -19>)
 func (pc <esc:0x9> <type 445>) .net/http.readResponse (rc <type 450>, trace <esc:0x182> <type 85>) (resp <type 47>, err <type -19>)
 func (pc <type 445>) .net/http.waitForContinue (continueCh <type 264>) <type 48>
 func (pc <type 445>) .net/http.writeLoop ()
 func (pc <esc:0x1> <type 445>) .net/http.wroteRequest () <type -15>
 func (pc <type 445>) .net/http.roundTrip (req <type 447>) (resp <type 47>, err <type -19>)
 func (pc <type 445>) .net/http.markReused ()
 func (pc <type 445>) .net/http.close (err <type -19>)
 func (pc <esc:0x9> <type 445>) .net/http.closeLocked (err <type -19>)
type 447 *<type 448>
type 448 ".net/http.transportRequest" <type 449>
 func (tr <esc:0x22> <type 447>) .net/http.extraHeaders () <type 12>
 func (tr <type 447>) .net/http.setError (err <type -19>)
 func (tr <esc:0x9> <type 447>) .net/http.logf (format <esc:0x1> <type -16>, args ...<type 78>)
type 449 struct { ? <type 27>; .net/http.extra <type 12>; .net/http.trace <type 85>; .net/http.mu <type 287>; .net/http.err <type -19>; }
type 450 ".net/http.requestAndChan" <type 451>
type 451 struct { .net/http.req <type 27>; .net/http.ch <type 452>; .net/http.addedGzip <type -15>; .net/http.continueCh <type 455>; .net/http.callerGone <type 264>; }
type 452 chan <type 453>
type 453 ".net/http.responseAndError" <type 454>
type 454 struct { .net/http.res <type 47>; .net/http.err <type -19>; }
type 455 chan -< <type 244>
type 456 struct { .net/http.alt <type 20>; .net/http.t <type 457>; .net/http.cacheKey <type 442>; .net/http.conn <type 92>; .net/http.tlsState <type 130>; .net/http.br <type 232>; .net/http.bw <type 235>; .net/http.nwrite <type -4>; .net/http.reqch <type 458>; .net/http.writech <type 459>; .net/http.closech <type 438>; .net/http.isProxy <type -15>; .net/http.sawEOF <type -15>; .net/http.readLimit <type -4>; .net/http.writeErrCh <type 463>; .net/http.writeLoopDone <type 438>; .net/http.idleAt <type 31>; .net/http.idleTimer <type 464>; .net/http.mu <type 287>; .net/http.numExpectedResponses <type -11>; .net/http.closed <type -19>; .net/http.canceledErr <type -19>; .net/http.broken <type -15>; .net/http.reused <type -15>; .net/http.mutateHeaderFunc <type 471>; }
type 457 *<type 24>
type 458 chan <type 450>
type 459 chan <type 460>
type 460 ".net/http.writeRequest" <type 461>
type 461 struct { .net/http.req <type 447>; .net/http.ch <type 462>; .net/http.continueCh <type 264>; }
type 462 chan -< <type -19>
type 463 chan <type -19>
type 464 *<type 465>
type 465 "time.Timer" <type 466>
 func (t <type 464>) Reset (d <type 29>) <type -15>
 func (t <type 464>) Stop () <type -15>
type 466 struct { C <type 467>; .time.r <type 468>; }
type 467 chan <- <type 31>
type 468 ".time.runtimeTimer" <type 469>
type 469 struct { .time.tb <type -13>; .time.i <type -11>; .time.when <type -4>; .time.period <type -4>; .time.f <type 470>; .time.arg <type 78>; .time.seq <type -13>; }
type 470 (? <type 78>, ? <type -13>)
type 471 (? <type 12>)
type 472 map [<type 442>] <type 473>
type 473 chan <type 445>
type 474 ".net/http.connLRU" <type 476>
 func (cl <esc:0x9> <type 475>) .net/http.add (pc <type 445>)
 func (cl <esc:0x4a> <type 475>) .net/http.removeOldest () <type 445>
 func (cl <esc:0x1> <type 475>) .net/http.remove (pc <esc:0x1> <type 445>)
 func (cl <esc:0x1> <type 475>) .net/http.len () <type -11>
type 475 *<type 474>
type 476 struct { .net/http.ll <type 477>; .net/http.m <type 483>; }
type 477 *<type 478>
type 478 "container/list.List" <type 482>
 func (l <esc:0x1> <type 477>) MoveBefore (e <type 479>, mark <esc:0x9> <type 479>)
 func (l <type 477>) MoveToFront (e <type 479>)
 func (l <type 477>) InsertAfter (v <type 78>, mark <type 479>) <type 479>
 func (l <type 477>) Init () <type 477>
 func (l <type 477>) PushFrontList (other <esc:0x9> <type 477>)
 func (l <esc:0x1> <type 477>) Len () <type -11>
 func (l <esc:0x1> <type 477>) .container/list.move (e <type 479>, at <type 479>) <type 479>
 func (l <esc:0x1> <type 477>) Remove (e <esc:0x2a> <type 479>) <type 78>
 func (l <esc:0x22> <type 477>) Back () <type 479>
 func (l <type 477>) PushBackList (other <esc:0x9> <type 477>)
 func (l <type 477>) PushBack (v <type 78>) <type 479>
 func (l <type 477>) InsertBefore (v <type 78>, mark <esc:0x9> <type 479>) <type 479>
 func (l <type 477>) .container/list.lazyInit ()
 func (l <type 477>) .container/list.insert (e <type 479>, at <type 479>) <type 479>
 func (l <esc:0x9> <type 477>) MoveToBack (e <type 479>)
 func (l <type 477>) .container/list.insertValue (v <type 78>, at <type 479>) <type 479>
 func (l <esc:0x1> <type 477>) .container/list.remove (e <esc:0x1a> <type 479>) <type 479>
 func (l <esc:0x1> <type 477>) MoveAfter (e <type 479>, mark <type 479>)
 func (l <esc:0x22> <type 477>) Front () <type 479>
 func (l <type 477>) PushFront (v <type 78>) <type 479>
type 479 *<type 480>
type 480 "container/list.Element" <type 481>
 func (e <esc:0x22> <type 479>) Prev () <type 479>
 func (e <esc:0x22> <type 479>) Next () <type 479>
type 481 struct { .container/list.next <type 479>; .container/list.prev <type 479>; .container/list.list <type 477>; Value <type 78>; }
type 482 struct { .container/list.root <type 480>; .container/list.len <type -11>; }
type 483 map [<type 445>] <type 479>
type 484 map [<type 27>] <type 96>
type 485 map [<type 442>] <type -11>
type 486 map [<type 442>] <type 438>
type 487 (ctx <type 265>, network <type -16>, addr <type -16>) (? <type 92>, ? <type -19>)
type 488 (network <type -16>, addr <type -16>) (? <type 92>, ? <type -19>)
type 489 map [<type -16>] <type 490>
type 490 (authority <type -16>, c <type 340>) <type 20>
type 491 ".net/http.h2Transport" <type 492>
type 492 interface { CloseIdleConnections (); }
type 493 ".net/http.connectMethod" <type 495>
 func (cm <esc:0x1> <type 494>) .net/http.proxyAuth () <type -16>
 func (cm <esc:0x22> <type 494>) .net/http.key () <type 442>
 func (cm <esc:0x22> <type 494>) .net/http.scheme () <type -16>
 func (cm <esc:0x2a> <type 494>) .net/http.addr () <type -16>
 func (cm <esc:0x22> <type 494>) .net/http.tlsHost () <type -16>
type 494 *<type 493>
type 495 struct { .net/http.proxyURL <type 60>; .net/http.targetScheme <type -16>; .net/http.targetAddr <type -16>; .net/http.onlyH1 <type -15>; }
func CanonicalHeaderKey (s <esc:0x12> <type -16>) <type -16>
var DefaultClient <type 30>
const DefaultMaxHeaderBytes = 1048576 
const DefaultMaxIdleConnsPerHost = 2 
var DefaultServeMux <type 67>
var DefaultTransport <type 20>
func DetectContentType (data <type 34>) <type -16>
var ErrAbortHandler <type -19>
var ErrBodyNotAllowed <type -19>
var ErrBodyReadAfterClose <type -19>
var ErrContentLength <type -19>
var ErrHandlerTimeout <type -19>
var ErrHeaderTooLong <type 68>
var ErrHijacked <type -19>
var ErrLineTooLong <type -19>
var ErrMissingBoundary <type 68>
var ErrMissingContentLength <type 68>
var ErrMissingFile <type -19>
var ErrNoCookie <type -19>
var ErrNoLocation <type -19>
var ErrNotMultipart <type 68>
var ErrNotSupported <type 68>
var ErrServerClosed <type -19>
var ErrShortBody <type 68>
var ErrSkipAltProtocol <type -19>
var ErrUnexpectedTrailer <type 68>
var ErrUseLastResponse <type -19>
var ErrWriteAfterFlush <type -19>
func Error (w <type 19>, error <type -16>, code <type -11>)
func FileServer (root <type 8>) <type 10>
func Get (url <type -16>) (resp <type 47>, err <type -19>)
func Handle (pattern <type -16>, handler <type 10>)
func HandleFunc (pattern <type -16>, handler <type 81>)
func Head (url <type -16>) (resp <type 47>, err <type -19>)
func ListenAndServe (addr <type -16>, handler <type 10>) <type -19>
func ListenAndServeTLS (addr <type -16>, certFile <type -16>, keyFile <type -16>, handler <type 10>) <type -19>
var LocalAddrContextKey <type 238>
func MaxBytesReader (w <type 19>, r <type 241>, n <type -4>) <type 241>
const MethodConnect = "CONNECT"
const MethodDelete = "DELETE"
const MethodGet = "GET"
const MethodHead = "HEAD"
const MethodOptions = "OPTIONS"
const MethodPatch = "PATCH"
const MethodPost = "POST"
const MethodPut = "PUT"
const MethodTrace = "TRACE"
func NewFileTransport (fs <esc:0x12> <type 8>) <type 20>
func NewRequest (method <type -16>, url <type -16>, body <type 50>) (? <type 27>, ? <type -19>)
func NewServeMux () <type 67>
var NoBody <type 243>
func NotFound (w <type 19>, r <esc:0x1> <type 27>)
func NotFoundHandler () <type 10>
func ParseHTTPVersion (vers <type -16>) (major <type -11>, minor <type -11>, ok <type -15>)
func ParseTime (text <type -16>) (t <type 31>, err <type -19>)
func Post (url <type -16>, contentType <type -16>, body <type 50>) (resp <type 47>, err <type -19>)
func PostForm (url <type -16>, data <esc:0x1> <type 52>) (resp <type 47>, err <type -19>)
func ProxyFromEnvironment (req <esc:0x9> <type 27>) (? <type 60>, ? <type -19>)
func ProxyURL (fixedURL <type 60>) <type 246>
func ReadRequest (b <type 232>) (? <type 27>, ? <type -19>)
func ReadResponse (r <type 232>, req <type 27>) (? <type 47>, ? <type -19>)
func Redirect (w <type 19>, r <esc:0x1> <type 27>, url <type -16>, code <type -11>)
func RedirectHandler (url <type -16>, code <type -11>) <type 10>
const SameSiteDefaultMode <type 21> = 1 
const SameSiteLaxMode <type 21> = 2 
const SameSiteStrictMode <type 21> = 3 
func Serve (l <type 277>, handler <type 10>) <type -19>
func ServeContent (w <type 19>, req <esc:0x1> <type 27>, name <esc:0x1> <type -16>, modtime <esc:0x1> <type 31>, content <type 279>)
func ServeFile (w <type 19>, r <esc:0x9> <type 27>, name <type -16>)
func ServeTLS (l <type 277>, handler <type 10>, certFile <type -16>, keyFile <type -16>) <type -19>
var ServerContextKey <type 238>
func SetCookie (w <type 19>, cookie <esc:0x9> <type 58>)
const StateActive <type 3> = 1 
const StateClosed <type 3> = 4 
const StateHijacked <type 3> = 3 
const StateIdle <type 3> = 2 
const StateNew <type 3> = 0 
const StatusAccepted = 202 
const StatusAlreadyReported = 208 
const StatusBadGateway = 502 
const StatusBadRequest = 400 
const StatusConflict = 409 
const StatusContinue = 100 
const StatusCreated = 201 
const StatusExpectationFailed = 417 
const StatusFailedDependency = 424 
const StatusForbidden = 403 
const StatusFound = 302 
const StatusGatewayTimeout = 504 
const StatusGone = 410 
const StatusHTTPVersionNotSupported = 505 
const StatusIMUsed = 226 
const StatusInsufficientStorage = 507 
const StatusInternalServerError = 500 
const StatusLengthRequired = 411 
const StatusLocked = 423 
const StatusLoopDetected = 508 
const StatusMethodNotAllowed = 405 
const StatusMisdirectedRequest = 421 
const StatusMovedPermanently = 301 
const StatusMultiStatus = 207 
const StatusMultipleChoices = 300 
const StatusNetworkAuthenticationRequired = 511 
const StatusNoContent = 204 
const StatusNonAuthoritativeInfo = 203 
const StatusNotAcceptable = 406 
const StatusNotExtended = 510 
const StatusNotFound = 404 
const StatusNotImplemented = 501 
const StatusNotModified = 304 
const StatusOK = 200 
const StatusPartialContent = 206 
const StatusPaymentRequired = 402 
const StatusPermanentRedirect = 308 
const StatusPreconditionFailed = 412 
const StatusPreconditionRequired = 428 
const StatusProcessing = 102 
const StatusProxyAuthRequired = 407 
const StatusRequestEntityTooLarge = 413 
const StatusRequestHeaderFieldsTooLarge = 431 
const StatusRequestTimeout = 408 
const StatusRequestURITooLong = 414 
const StatusRequestedRangeNotSatisfiable = 416 
const StatusResetContent = 205 
const StatusSeeOther = 303 
const StatusServiceUnavailable = 503 
const StatusSwitchingProtocols = 101 
const StatusTeapot = 418 
const StatusTemporaryRedirect = 307 
func StatusText (code <type -11>) <type -16>
const StatusTooEarly = 425 
const StatusTooManyRequests = 429 
const StatusUnauthorized = 401 
const StatusUnavailableForLegalReasons = 451 
const StatusUnprocessableEntity = 422 
const StatusUnsupportedMediaType = 415 
const StatusUpgradeRequired = 426 
const StatusUseProxy = 305 
const StatusVariantAlsoNegotiates = 506 
func StripPrefix (prefix <type -16>, h <type 10>) <type 10>
const TimeFormat = "Mon, 02 Jan 2006 15:04:05 GMT"
func TimeoutHandler (h <type 10>, dt <type 29>, msg <type -16>) <type 10>
const TrailerPrefix = "Trailer:"
checksum FA04AA4C2ED094F754404A97A621435E40C1FBB2
v3;
package cgi
pkgpath net/http/cgi
import bufio bufio "bufio"
import tls crypto/tls "crypto/tls"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import log log "log"
import net net "net"
import http net/http "net/http"
import url net/url "net/url"
import os os "os"
import exec os/exec "os/exec"
import filepath path/filepath "path/filepath"
import regexp regexp "regexp"
import runtime runtime "runtime"
import strconv strconv "strconv"
import strings strings "strings"
indirectimport asn1 encoding/asn1
indirectimport big math/big
indirectimport context context
indirectimport httptrace net/http/httptrace
indirectimport multipart mime/multipart
indirectimport pkix crypto/x509/pkix
indirectimport rand math/rand
indirectimport sync sync
indirectimport syscall syscall
indirectimport textproto net/textproto
indirectimport time time
indirectimport x509 crypto/x509
init cgi net..z2fhttp..z2fcgi..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import gzip compress..z2fgzip..import context context..import crypto crypto..import cipher crypto..z2fcipher..import des crypto..z2fdes..import dsa crypto..z2fdsa..import ecdsa crypto..z2fecdsa..import elliptic crypto..z2felliptic..import randutil crypto..z2finternal..z2frandutil..import md5 crypto..z2fmd5..import rand crypto..z2frand..import rsa crypto..z2frsa..import sha1 crypto..z2fsha1..import sha256 crypto..z2fsha256..import sha512 crypto..z2fsha512..import tls crypto..z2ftls..import x509 crypto..z2fx509..import pkix crypto..z2fx509..z2fpkix..import asn1 encoding..z2fasn1..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import hex encoding..z2fhex..import pem encoding..z2fpem..import fmt fmt..import crc32 hash..z2fcrc32..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import chacha20poly1305 internal..z2fx..z2fcrypto..z2fchacha20poly1305..import cryptobyte internal..z2fx..z2fcrypto..z2fcryptobyte..import chacha20 internal..z2fx..z2fcrypto..z2finternal..z2fchacha20..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import httpguts internal..z2fx..z2fnet..z2fhttp..z2fhttpguts..import httpproxy internal..z2fx..z2fnet..z2fhttp..z2fhttpproxy..import hpack internal..z2fx..z2fnet..z2fhttp2..z2fhpack..import idna internal..z2fx..z2fnet..z2fidna..import bidirule internal..z2fx..z2ftext..z2fsecure..z2fbidirule..import transform internal..z2fx..z2ftext..z2ftransform..import bidi internal..z2fx..z2ftext..z2funicode..z2fbidi..import norm internal..z2fx..z2ftext..z2funicode..z2fnorm..import io io..import ioutil io..z2fioutil..import log log..import big math..z2fbig..import rand math..z2frand..import mime mime..import multipart mime..z2fmultipart..import quotedprintable mime..z2fquotedprintable..import net net..import http net..z2fhttp..import internal net..z2fhttp..z2finternal..import textproto net..z2ftextproto..import os os..import exec os..z2fexec..import path path..import filepath path..z2ffilepath..import reflect reflect..import regexp regexp..import syntax regexp..z2fsyntax..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 1 2 1 29 1 44 1 63 1 64 1 66 1 69 2 29 2 44 2 63 2 64 2 66 2 69 3 1 3 2 3 27 3 29 3 30 3 31 3 44 3 56 3 60 3 63 3 64 3 65 3 66 3 67 3 68 3 69 4 1 4 2 4 3 4 24 4 27 4 28 4 29 4 30 4 31 4 44 4 56 4 60 4 63 4 64 4 65 4 66 4 67 4 68 4 69 5 27 5 29 5 30 5 31 5 44 5 56 5 60 5 63 5 64 5 65 5 66 5 67 5 68 5 69 6 29 6 44 6 63 6 64 6 65 6 66 7 24 7 29 7 44 7 60 7 63 7 64 7 65 7 66 7 69 8 7 8 24 8 29 8 44 8 60 8 63 8 64 8 65 8 66 8 69 9 2 9 12 9 24 9 27 9 29 9 30 9 31 9 44 9 47 9 48 9 56 9 60 9 63 9 64 9 65 9 66 9 67 9 68 9 69 10 2 10 6 10 7 10 11 10 12 10 18 10 22 10 24 10 27 10 29 10 30 10 31 10 44 10 47 10 48 10 56 10 60 10 63 10 64 10 65 10 66 10 67 10 68 10 69 11 2 11 24 11 27 11 29 11 30 11 31 11 44 11 47 11 48 11 56 11 60 11 63 11 64 11 65 11 66 11 67 11 68 11 69 12 29 12 44 12 63 12 64 12 66 13 6 13 24 13 29 13 44 13 60 13 63 13 64 13 65 13 66 13 69 14 1 14 2 14 7 14 24 14 27 14 29 14 30 14 31 14 44 14 47 14 48 14 56 14 60 14 63 14 64 14 65 14 66 14 67 14 68 14 69 15 1 15 2 15 6 15 7 15 12 15 14 15 24 15 27 15 29 15 30 15 31 15 44 15 47 15 48 15 56 15 60 15 63 15 64 15 65 15 66 15 67 15 68 15 69 16 6 16 29 16 44 16 63 16 64 16 65 16 66 17 6 17 29 17 44 17 63 17 64 17 65 17 66 18 6 18 29 18 44 18 63 18 64 18 65 18 66 19 1 19 2 19 5 19 6 19 7 19 8 19 9 19 10 19 11 19 12 19 13 19 14 19 15 19 16 19 17 19 18 19 20 19 21 19 22 19 23 19 24 19 25 19 26 19 27 19 29 19 30 19 31 19 32 19 33 19 34 19 35 19 44 19 45 19 47 19 48 19 52 19 56 19 59 19 60 19 63 19 64 19 65 19 66 19 67 19 68 19 69 20 1 20 2 20 5 20 6 20 7 20 8 20 9 20 10 20 11 20 12 20 13 20 14 20 15 20 16 20 17 20 18 20 21 20 22 20 23 20 24 20 25 20 26 20 27 20 29 20 30 20 31 20 33 20 35 20 44 20 45 20 47 20 48 20 52 20 56 20 59 20 60 20 63 20 64 20 65 20 66 20 67 20 68 20 69 21 2 21 22 21 24 21 25 21 27 21 29 21 30 21 31 21 44 21 47 21 48 21 56 21 60 21 63 21 64 21 65 21 66 21 67 21 68 21 69 22 2 22 24 22 27 22 29 22 30 22 31 22 44 22 47 22 48 22 56 22 60 22 63 22 64 22 65 22 66 22 67 22 68 22 69 23 24 23 29 23 44 23 60 23 63 23 64 23 65 23 66 23 69 24 29 24 44 24 60 24 63 24 64 24 65 24 66 24 69 25 27 25 29 25 30 25 31 25 44 25 56 25 60 25 63 25 64 25 65 25 66 25 67 25 68 25 69 26 2 26 23 26 24 26 29 26 44 26 60 26 63 26 64 26 65 26 66 26 69 27 29 27 30 27 31 27 44 27 56 27 60 27 63 27 64 27 65 27 66 27 67 27 68 27 69 28 29 28 44 28 63 28 64 28 66 30 29 30 44 30 63 30 64 30 66 30 67 30 68 32 7 32 24 32 29 32 34 32 44 32 60 32 63 32 64 32 65 32 66 32 69 33 2 33 22 33 24 33 27 33 29 33 30 33 31 33 44 33 47 33 48 33 56 33 60 33 63 33 64 33 65 33 66 33 67 33 68 33 69 34 7 34 24 34 29 34 44 34 60 34 63 34 64 34 65 34 66 34 69 36 1 36 2 36 5 36 27 36 29 36 30 36 31 36 35 36 39 36 40 36 41 36 42 36 43 36 44 36 45 36 46 36 48 36 52 36 55 36 56 36 59 36 60 36 63 36 64 36 65 36 66 36 67 36 68 36 69 37 2 37 5 37 27 37 29 37 30 37 31 37 35 37 39 37 40 37 41 37 42 37 43 37 44 37 46 37 48 37 52 37 56 37 60 37 63 37 64 37 65 37 66 37 67 37 68 37 69 38 2 38 27 38 29 38 30 38 31 38 44 38 56 38 60 38 63 38 64 38 65 38 66 38 67 38 68 38 69 39 2 39 27 39 29 39 30 39 31 39 40 39 41 39 42 39 43 39 44 39 46 39 56 39 60 39 63 39 64 39 65 39 66 39 67 39 68 39 69 40 2 40 27 40 29 40 30 40 31 40 41 40 42 40 44 40 46 40 56 40 60 40 63 40 64 40 65 40 66 40 67 40 68 40 69 41 2 41 29 41 44 41 63 41 64 41 66 41 69 42 27 42 29 42 30 42 31 42 44 42 46 42 56 42 60 42 63 42 64 42 65 42 66 42 67 42 68 42 69 43 2 43 27 43 29 43 30 43 31 43 41 43 44 43 56 43 60 43 63 43 64 43 65 43 66 43 67 43 68 43 69 44 29 44 63 44 64 44 66 45 2 45 29 45 30 45 31 45 44 45 56 45 59 45 60 45 63 45 64 45 65 45 66 45 67 45 68 45 69 46 27 46 29 46 30 46 31 46 44 46 56 46 60 46 63 46 64 46 65 46 66 46 67 46 68 46 69 47 2 47 24 47 27 47 29 47 30 47 31 47 44 47 48 47 56 47 60 47 63 47 64 47 65 47 66 47 67 47 68 47 69 48 29 48 63 48 64 48 66 49 1 49 2 49 23 49 24 49 27 49 29 49 30 49 31 49 44 49 56 49 60 49 63 49 64 49 65 49 66 49 67 49 68 49 69 50 1 50 2 50 5 50 7 50 14 50 23 50 24 50 27 50 29 50 30 50 31 50 35 50 44 50 45 50 47 50 48 50 49 50 51 50 52 50 55 50 56 50 59 50 60 50 63 50 64 50 65 50 66 50 67 50 68 50 69 51 1 51 2 51 27 51 29 51 30 51 31 51 44 51 56 51 60 51 63 51 64 51 65 51 66 51 67 51 68 51 69 52 5 52 27 52 29 52 30 52 31 52 35 52 44 52 48 52 56 52 60 52 63 52 64 52 65 52 66 52 67 52 68 52 69 53 1 53 2 53 3 53 4 53 5 53 6 53 7 53 8 53 9 53 10 53 11 53 12 53 13 53 14 53 15 53 16 53 17 53 18 53 19 53 20 53 21 53 22 53 23 53 24 53 25 53 26 53 27 53 28 53 29 53 30 53 31 53 32 53 33 53 34 53 35 53 36 53 37 53 38 53 39 53 40 53 41 53 42 53 43 53 44 53 45 53 46 53 47 53 48 53 49 53 50 53 51 53 52 53 54 53 55 53 56 53 58 53 59 53 60 53 63 53 64 53 65 53 66 53 67 53 68 53 69 54 1 54 2 54 27 54 29 54 30 54 31 54 44 54 56 54 60 54 63 54 64 54 65 54 66 54 67 54 68 54 69 55 1 55 2 55 5 55 27 55 29 55 30 55 31 55 35 55 44 55 45 55 48 55 52 55 56 55 59 55 60 55 63 55 64 55 65 55 66 55 67 55 68 55 69 56 29 56 30 56 31 56 44 56 63 56 64 56 66 56 67 56 68 57 2 57 5 57 27 57 29 57 30 57 31 57 44 57 56 57 59 57 60 57 63 57 64 57 65 57 66 57 67 57 68 57 69 58 29 58 44 58 63 58 64 58 66 58 69 59 29 59 30 59 31 59 44 59 56 59 60 59 63 59 64 59 65 59 66 59 67 59 68 59 69 60 29 60 63 60 64 60 65 60 66 60 69 61 2 61 29 61 44 61 60 61 62 61 63 61 64 61 65 61 66 61 69 62 29 62 44 62 60 62 63 62 64 62 65 62 66 62 69 63 29 63 64 65 29 65 63 65 64 66 29 66 63 66 64 67 29 67 63 67 64 67 66 68 29 68 63 68 64 68 66 68 67
types 236 2 396 183 21 17 1063 19 21 28 73 22 19 3310 19 73 356 19 525 165 21 31 91 21 36 112 19 75 83 123 89 19 64 37 61 44 130 1032 36 19 191 412 30 22 51 94 29 318 29 67 25 11 55 316 34 22 52 36 22 51 74 21 488 19 37 91 19 43 50 40 53 24 24 38 40 34 197 50 1057 155 19 46 62 36 186 19 374 21 19 1763 30 73 21 56 112 19 5190 34 295 34 22 36 32 196 37 63 36 65 21 1042 23 38 134 39 66 41 58 72 4260 23 40 104 23 49 93 184 21 141 102 58 300 46 59 85 45 115 103 23 68 23 61 53 162 59 21 48 167 21 497 22 122 37 23 46 22 21 87 36 158 1171 98 361 21 21 262 43 23 22 23 21 818 363 194 21 220 113 23 21 223 50 94 42 24 58 36 23 42 73 21 235 46 21 2225 42 78 34 91 32 95 32 44 21 117 146 38 142 28 20 21 504 21 97 54 37 23 21 424 315 37 292 21 1456 188 23 21 90 248 40 23 471 36 50 41 21 514 310 19
type 1 "Handler" <type 2>
 func (h <esc:0x22> <type 235>) .net/http/cgi.stderr () <type 8>
 func (h <type 235>) ServeHTTP (rw <type 34>, req <esc:0x9> <type 190>)
 func (h <esc:0x9> <type 235>) .net/http/cgi.printf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 7>)
 func (h <esc:0x9> <type 235>) .net/http/cgi.handleInternalRedirect (rw <type 34>, req <esc:0x9> <type 190>, path <type -16>)
type 2 struct { Path <type -16>; Root <type -16>; Dir <type -16>; Env <type 3>; InheritEnv <type 3>; Logger <type 4>; Args <type 3>; Stderr <type 8>; PathLocationHandler <type 32>; }
type 3 [] <type -16>
type 4 *<type 5>
type 5 "log.Logger" <type 28>
 func (l <type 4>) Flags () <type -11>
 func (l <type 4>) Println (v <esc:0x9> ...<type 7>)
 func (l <type 4>) Fatalf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 7>)
 func (l <type 4>) Panicln (v <esc:0x9> ...<type 7>)
 func (l <type 4>) Writer () <type 8>
 func (l <type 4>) SetPrefix (prefix <type -16>)
 func (l <type 4>) Prefix () <type -16>
 func (l <type 4>) SetFlags (flag <type -11>)
 func (l <esc:0x1> <type 4>) .log.formatHeader (buf <esc:0x9> <type 11>, t <esc:0x1> <type 12>, file <esc:0x1> <type -16>, line <type -11>)
 func (l <type 4>) Panicf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 7>)
 func (l <type 4>) Output (calldepth <type -11>, s <esc:0x1> <type -16>) <type -19>
 func (l <type 4>) Panic (v <esc:0x9> ...<type 7>)
 func (l <type 4>) SetOutput (w <type 8>)
 func (l <type 4>) Printf (format <esc:0x1> <type -16>, v <esc:0x9> ...<type 7>)
 func (l <type 4>) Print (v <esc:0x9> ...<type 7>)
 func (l <type 4>) Fatalln (v <esc:0x9> ...<type 7>)
 func (l <type 4>) Fatal (v <esc:0x9> ...<type 7>)
type 6 [] <type 7>
type 7 interface { }
type 8 "io.Writer" <type 9>
type 9 interface { Write (p <type 10>) (n <type -11>, err <type -19>); }
type 10 [] <type -20>
type 11 *<type 10>
type 12 "time.Time" <type 27>
 func (t <esc:0x1> <type 13>) .time.sec () <type -4>
 func (t <type 12>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 12>
 func (t <esc:0x1> <type 12>) .time.date (full <type -15>) (year <type -11>, month <type 14>, day <type -11>, yday <type -11>)
 func (t <esc:0x1> <type 12>) MarshalJSON () (? <type 10>, ? <type -19>)
 func (t <esc:0x1> <type 13>) .time.stripMono ()
 func (t <esc:0x1> <type 12>) MarshalText () (? <type 10>, ? <type -19>)
 func (t <esc:0x1> <type 13>) .time.mono () <type -4>
 func (t <esc:0x1> <type 12>) Sub (u <esc:0x1> <type 12>) <type 15>
 func (t <esc:0x32> <type 12>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x12> <type 12>) UTC () <type 12>
 func (t <esc:0x1> <type 12>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 12>) In (loc <type 16>) <type 12>
 func (t <esc:0x1> <type 12>) Equal (u <esc:0x1> <type 12>) <type -15>
 func (t <esc:0x1> <type 12>) IsZero () <type -15>
 func (t <esc:0x12> <type 12>) Local () <type 12>
 func (t <esc:0x1> <type 12>) YearDay () <type -11>
 func (t <esc:0x1> <type 12>) Unix () <type -4>
 func (t <esc:0x1> <type 12>) Weekday () <type 26>
 func (t <esc:0x1> <type 12>) Date () (year <type -11>, month <type 14>, day <type -11>)
 func (t <esc:0x1> <type 13>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 12>) MarshalBinary () (? <type 10>, ? <type -19>)
 func (t <esc:0x1> <type 12>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 12>) Day () <type -11>
 func (t <esc:0x1> <type 13>) GobDecode (data <esc:0x1> <type 10>) <type -19>
 func (t <esc:0x1> <type 12>) After (u <esc:0x1> <type 12>) <type -15>
 func (t <esc:0x1> <type 12>) UnixNano () <type -4>
 func (t <esc:0x1> <type 13>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 12>) Minute () <type -11>
 func (t <esc:0x1> <type 12>) AppendFormat (b <esc:0x12> <type 10>, layout <esc:0x1> <type -16>) <type 10>
 func (t <esc:0x12> <type 12>) Truncate (d <type 15>) <type 12>
 func (t <esc:0x12> <type 12>) Add (d <type 15>) <type 12>
 func (t <esc:0x1> <type 12>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 12>) String () <type -16>
 func (t <esc:0x12> <type 12>) Round (d <type 15>) <type 12>
 func (t <esc:0x1> <type 13>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 12>) Before (u <esc:0x1> <type 12>) <type -15>
 func (t <esc:0x32> <type 12>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 13>) .time.setLoc (loc <type 16>)
 func (t <esc:0x1> <type 13>) UnmarshalText (data <esc:0x1> <type 10>) <type -19>
 func (t <esc:0x1> <type 13>) UnmarshalBinary (data <esc:0x1> <type 10>) <type -19>
 func (t <esc:0x1> <type 12>) Hour () <type -11>
 func (t <esc:0x1> <type 12>) .time.abs () <type -8>
 func (t <esc:0x1> <type 12>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 12>) Year () <type -11>
 func (t <esc:0x1> <type 13>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 13>) UnmarshalJSON (data <esc:0x1> <type 10>) <type -19>
 func (t <esc:0x1> <type 12>) Second () <type -11>
 func (t <esc:0x1> <type 12>) Month () <type 14>
 func (t <esc:0x12> <type 12>) Location () <type 16>
 func (t <esc:0x1> <type 12>) GobEncode () (? <type 10>, ? <type -19>)
type 13 *<type 12>
type 14 "time.Month" <type -11>
 func (m <type 14>) String () <type -16>
type 15 "time.Duration" <type -4>
 func (d <type 15>) String () <type -16>
 func (d <type 15>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 15>) Seconds () <type -10>
 func (d <type 15>) Minutes () <type -10>
 func (d <type 15>) Hours () <type -10>
 func (d <type 15>) Truncate (m <type 15>) <type 15>
 func (d <type 15>) Round (m <type 15>) <type 15>
type 16 *<type 17>
type 17 "time.Location" <type 18>
 func (l <esc:0x12> <type 16>) .time.get () <type 16>
 func (l <esc:0x22> <type 16>) String () <type -16>
 func (l <esc:0x32> <type 16>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 16>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 16>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 16>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 18 struct { .time.name <type -16>; .time.zone <type 19>; .time.tx <type 22>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 25>; }
type 19 [] <type 20>
type 20 ".time.zone" <type 21>
type 21 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 22 [] <type 23>
type 23 ".time.zoneTrans" <type 24>
type 24 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 25 *<type 20>
type 26 "time.Weekday" <type -11>
 func (d <type 26>) String () <type -16>
type 27 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 16>; }
type 28 struct { .log.mu <type 29>; .log.prefix <type -16>; .log.flag <type -11>; .log.out <type 8>; .log.buf <type 10>; }
type 29 "sync.Mutex" <type 31>
 func (m <type 30>) Unlock ()
 func (m <type 30>) Lock ()
type 30 *<type 29>
type 31 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 32 "net/http.Handler" <type 33>
type 33 interface { ServeHTTP (? <type 34>, ? <type 190>); }
type 34 "net/http.ResponseWriter" <type 35>
type 35 interface { Header () <type 36>; Write (? <type 10>) (? <type -11>, ? <type -19>); WriteHeader (statusCode <type -11>); }
type 36 "net/http.Header" <type 53>
 func (h <esc:0x1> <type 36>) .net/http.writeSubset (w <type 8>, exclude <esc:0x1> <type 37>, trace <esc:0x1> <type 38>) <type -19>
 func (h <esc:0x1> <type 36>) .net/http.sortedKeyValues (exclude <esc:0x1> <type 37>) (kvs <type 184>, hs <type 187>)
 func (h <esc:0x1> <type 36>) Write (w <type 8>) <type -19>
 func (h <esc:0x1> <type 36>) Del (key <esc:0x1> <type -16>)
 func (h <esc:0x1> <type 36>) .net/http.has (key <esc:0x1> <type -16>) <type -15>
 func (h <esc:0x1> <type 36>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 36>) WriteSubset (w <type 8>, exclude <esc:0x1> <type 37>) <type -19>
 func (h <esc:0x1> <type 36>) .net/http.clone () <type 36>
 func (h <esc:0x1> <type 36>) .net/http.write (w <type 8>, trace <esc:0x1> <type 38>) <type -19>
 func (h <esc:0x1> <type 36>) .net/http.get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 36>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x9> <type 36>) Add (key <type -16>, value <type -16>)
type 37 map [<type -16>] <type -15>
type 38 *<type 39>
type 39 "net/http/httptrace.ClientTrace" <type 40>
 func (t <type 38>) .net/http/httptrace.compose (old <type 38>)
 func (t <esc:0x1> <type 38>) .net/http/httptrace.hasNetHooks () <type -15>
type 40 struct { GetConn <type 41>; GotConn <type 42>; PutIdleConn <type 49>; GotFirstResponseByte <type 50>; Got100Continue <type 50>; Got1xxResponse <type 51>; DNSStart <type 54>; DNSDone <type 57>; ConnectStart <type 80>; ConnectDone <type 81>; TLSHandshakeStart <type 50>; TLSHandshakeDone <type 82>; WroteHeaderField <type 180>; WroteHeaders <type 50>; Wait100Continue <type 50>; WroteRequest <type 181>; }
type 41 (hostPort <type -16>)
type 42 (? <type 43>)
type 43 "net/http/httptrace.GotConnInfo" <type 44>
type 44 struct { Conn <type 45>; Reused <type -15>; WasIdle <type -15>; IdleTime <type 15>; }
type 45 "net.Conn" <type 46>
type 46 interface { Close () <type -19>; LocalAddr () <type 47>; Read (b <type 10>) (n <type -11>, err <type -19>); RemoteAddr () <type 47>; SetDeadline (t <type 12>) <type -19>; SetReadDeadline (t <type 12>) <type -19>; SetWriteDeadline (t <type 12>) <type -19>; Write (b <type 10>) (n <type -11>, err <type -19>); }
type 47 "net.Addr" <type 48>
type 48 interface { Network () <type -16>; String () <type -16>; }
type 49 (err <type -19>)
type 50 ()
type 51 (code <type -11>, header <type 52>) <type -19>
type 52 "net/textproto.MIMEHeader" <type 53>
 func (h <esc:0x1> <type 52>) Del (key <esc:0x1> <type -16>)
 func (h <esc:0x1> <type 52>) Get (key <esc:0x1> <type -16>) <type -16>
 func (h <esc:0x1> <type 52>) Set (key <type -16>, value <type -16>)
 func (h <esc:0x9> <type 52>) Add (key <type -16>, value <type -16>)
type 53 map [<type -16>] <type 3>
type 54 (? <type 55>)
type 55 "net/http/httptrace.DNSStartInfo" <type 56>
type 56 struct { Host <type -16>; }
type 57 (? <type 58>)
type 58 "net/http/httptrace.DNSDoneInfo" <type 59>
type 59 struct { Addrs <type 60>; Err <type -19>; Coalesced <type -15>; }
type 60 [] <type 61>
type 61 "net.IPAddr" <type 76>
 func (a <esc:0x1> <type 62>) Network () ($ret189 <type -16>)
 func (a <esc:0x1> <type 62>) String () <type -16>
 func (a <esc:0x1> <type 62>) .net.isWildcard () <type -15>
 func (a <esc:0x12> <type 62>) .net.opAddr () <type 47>
 func (a <esc:0x1> <type 62>) .net.family () <type -11>
 func (a <esc:0x1> <type 62>) .net.sockaddr (family <type -11>) (? <type 63>, ? <type -19>)
 func (a <esc:0xa> <type 62>) .net.toLocal (net <esc:0x1> <type -16>) <type 74>
type 62 *<type 61>
type 63 "syscall.Sockaddr" <type 64>
type 64 interface { .syscall.sockaddr () (ptr <type 65>, len <type 72>, err <type -19>); }
type 65 *<type 66>
type 66 "syscall.RawSockaddrAny" <type 67>
type 67 struct { Addr <type 68>; Pad <type 71>; }
type 68 "syscall.RawSockaddr" <type 69>
type 69 struct { Family <type -6>; Data <type 70>; }
type 70 [14 ] <type -1>
type 71 [96 ] <type -1>
type 72 "syscall.Socklen_t" <type 73>
type 73 ".syscall._socklen_t" <type -7>
type 74 ".net.sockaddr" <type 75>
type 75 interface { ? <type 47>; .net.family () <type -11>; .net.isWildcard () <type -15>; .net.sockaddr (family <type -11>) (? <type 63>, ? <type -19>); .net.toLocal (net <type -16>) <type 74>; }
type 76 struct { IP <type 77>; Zone <type -16>; }
type 77 "net.IP" <type 10>
 func (ip <esc:0x1> <type 77>) Equal (x <esc:0x1> <type 77>) <type -15>
 func (ip <esc:0x1> <type 77>) Mask (mask <esc:0x1> <type 78>) <type 77>
 func (ip <esc:0x1> <type 77>) IsLinkLocalUnicast () <type -15>
 func (ip <esc:0x1> <type 77>) MarshalText () (? <type 10>, ? <type -19>)
 func (ip <esc:0x1> <type 77>) String () <type -16>
 func (ip <esc:0x1> <type 77>) DefaultMask () <type 78>
 func (ip <esc:0x1> <type 77>) .net.matchAddrFamily (x <esc:0x1> <type 77>) <type -15>
 func (ip <esc:0x1> <type 79>) UnmarshalText (text <esc:0x1> <type 10>) <type -19>
 func (ip <esc:0x1> <type 77>) IsGlobalUnicast () <type -15>
 func (ip <esc:0x12> <type 77>) To4 () <type 77>
 func (ip <esc:0x12> <type 77>) To16 () <type 77>
 func (ip <esc:0x1> <type 77>) IsLoopback () <type -15>
 func (ip <esc:0x1> <type 77>) IsMulticast () <type -15>
 func (ip <esc:0x1> <type 77>) IsUnspecified () <type -15>
 func (ip <esc:0x1> <type 77>) IsInterfaceLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 77>) IsLinkLocalMulticast () <type -15>
type 78 "net.IPMask" <type 10>
 func (m <esc:0x1> <type 78>) String () <type -16>
 func (m <esc:0x1> <type 78>) Size () (ones <type -11>, bits <type -11>)
type 79 *<type 77>
type 80 (network <type -16>, addr <type -16>)
type 81 (network <type -16>, addr <type -16>, err <type -19>)
type 82 (? <type 83>, ? <type -19>)
type 83 "crypto/tls.ConnectionState" <type 85>
 func (cs <esc:0x1b2> <type 84>) ExportKeyingMaterial (label <type -16>, context <type 10>, length <type -11>) (? <type 10>, ? <type -19>)
type 84 *<type 83>
type 85 struct { Version <type -6>; HandshakeComplete <type -15>; DidResume <type -15>; CipherSuite <type -6>; NegotiatedProtocol <type -16>; NegotiatedProtocolIsMutual <type -15>; ServerName <type -16>; PeerCertificates <type 86>; VerifiedChains <type 153>; SignedCertificateTimestamps <type 148>; OCSPResponse <type 10>; .crypto/tls.ekm <type 179>; TLSUnique <type 10>; }
type 86 [] <type 87>
type 87 *<type 88>
type 88 "crypto/x509.Certificate" <type 158>
 func (c <esc:0x32> <type 87>) .crypto/x509.getSANExtension () <type 10>
 func (c <esc:0x9> <type 87>) CreateCRL (rand <type 89>, priv <type 7>, revokedCerts <esc:0x9> <type 91>, now <type 12>, expiry <type 12>) (crlBytes <type 10>, err <type -19>)
 func (c <esc:0x9> <type 87>) .crypto/x509.commonNameAsHostname () <type -15>
 func (c <esc:0x9> <type 87>) CheckCRLSignature (crl <esc:0x9> <type 125>) <type -19>
 func (c <type 87>) .crypto/x509.isValid (certType <type -11>, currentChain <esc:0x9> <type 86>, opts <esc:0x1> <type 143>) <type -19>
 func (c <esc:0x1> <type 87>) .crypto/x509.systemVerify (opts <esc:0x1> <type 143>) (chains <type 153>, err <type -19>)
 func (c <esc:0x12> <type 87>) .crypto/x509.checkNameConstraints (count <esc:0x1> <type 154>, maxConstraintComparisons <type -11>, nameType <type -16>, name <type -16>, parsedName <type 7>, match <esc:0x9> <type 155>, permitted <type 7>, excluded <type 7>) <type -19>
 func (c <type 87>) Verify (opts <type 144>) (chains <type 153>, err <type -19>)
 func (c <type 87>) .crypto/x509.buildChains (cache <esc:0x1> <type 156>, currentChain <esc:0x9> <type 86>, sigChecks <esc:0x1> <type 154>, opts <esc:0x9> <type 143>) (chains <type 153>, err <type -19>)
 func (c <esc:0x1a> <type 87>) VerifyHostname (h <type -16>) <type -19>
 func (c <esc:0x1> <type 87>) .crypto/x509.hasNameConstraints () <type -15>
 func (c <esc:0x1> <type 87>) .crypto/x509.hasSANExtension () <type -15>
 func (c <esc:0x1> <type 87>) Equal (other <esc:0x1> <type 87>) <type -15>
 func (c <esc:0x9> <type 87>) CheckSignatureFrom (parent <esc:0x9> <type 87>) <type -19>
 func (c <esc:0x9> <type 87>) CheckSignature (algo <type 157>, signed <type 10>, signature <type 10>) <type -19>
type 89 "io.Reader" <type 90>
type 90 interface { Read (p <type 10>) (n <type -11>, err <type -19>); }
type 91 [] <type 92>
type 92 "crypto/x509/pkix.RevokedCertificate" <type 93>
type 93 struct { SerialNumber <type 94>; RevocationTime <type 12>; Extensions <type 121> "asn1:\"optional\""; }
type 94 *<type 95>
type 95 "math/big.Int" <type 116>
 func (z <esc:0x9> <type 94>) Scan (s <type 96>, ch <type -21>) <type -19>
 func (x <esc:0x1> <type 94>) Text (base <type -11>) <type -16>
 func (x <esc:0x1> <type 94>) String () <type -16>
 func (z <esc:0x12> <type 94>) SetBits (abs <type 99>) <type 94>
 func (x <esc:0x1> <type 94>) IsInt64 () <type -15>
 func (z <esc:0x1a> <type 94>) Quo (x <esc:0x1> <type 94>, y <esc:0x1> <type 94>) <type 94>
 func (x <esc:0x1> <type 94>) Cmp (y <esc:0x1> <type 94>) (r <type -11>)
 func (z <esc:0x1a> <type 94>) Exp (x <esc:0x9> <type 94>, y <esc:0x1> <type 94>, m <esc:0x1> <type 94>) <type 94>
 func (x <esc:0x1> <type 94>) MarshalText () (text <type 10>, err <type -19>)
 func (x <esc:0x9> <type 94>) ProbablyPrime (n <type -11>) <type -15>
 func (z <esc:0x1a> <type 94>) Abs (x <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) Neg (x <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x9> <type 94>) UnmarshalText (text <type 10>) <type -19>
 func (x <esc:0x1> <type 94>) Format (s <type 101>, ch <type -21>)
 func (z <esc:0x1a> <type 94>) .math/big.modSqrt3Mod4Prime (x <esc:0x9> <type 94>, p <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) Add (x <esc:0x1> <type 94>, y <esc:0x1> <type 94>) <type 94>
 func (x <esc:0x22> <type 94>) Bits () <type 99>
 func (z <esc:0x1a> <type 94>) ModInverse (g <esc:0x1> <type 94>, n <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) Set (x <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) .math/big.modSqrtTonelliShanks (x <esc:0x9> <type 94>, p <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) SetBytes (buf <esc:0x1> <type 10>) <type 94>
 func (z <esc:0x1a> <type 94>) SetUint64 (x <type -8>) <type 94>
 func (x <esc:0x1> <type 94>) Int64 () <type -4>
 func (z <esc:0x1a> <type 94>) ModSqrt (x <esc:0x9> <type 94>, p <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) Rsh (x <esc:0x1> <type 94>, n <type -12>) <type 94>
 func (z <esc:0x1a> <type 94>) SetInt64 (x <type -4>) <type 94>
 func (x <esc:0x1> <type 94>) MarshalJSON () (? <type 10>, ? <type -19>)
 func (z <esc:0x1a> <type 94>) MulRange (a <type -4>, b <type -4>) <type 94>
 func (x <esc:0x1> <type 94>) Sign () <type -11>
 func (z <esc:0x9> <type 94>) UnmarshalJSON (text <type 10>) <type -19>
 func (z <esc:0x1a> <type 94>) QuoRem (x <esc:0x1> <type 94>, y <esc:0x1> <type 94>, r <esc:0x8a> <type 94>) (? <type 94>, ? <type 94>)
 func (z <esc:0x9> <type 94>) GobDecode (buf <esc:0x1> <type 10>) <type -19>
 func (z <esc:0x1a> <type 94>) .math/big.scan (r <type 103>, base <type -11>) (? <type 94>, ? <type -11>, ? <type -19>)
 func (z <esc:0x1a> <type 94>) SetString (s <type -16>, base <type -11>) (? <type 94>, ? <type -15>)
 func (z <esc:0x1a> <type 94>) Mul (x <esc:0x1> <type 94>, y <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) Mod (x <esc:0x1> <type 94>, y <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) .math/big.setFromScanner (r <type 103>, base <type -11>) (? <type 94>, ? <type -15>)
 func (z <esc:0x1a> <type 94>) And (x <esc:0x1> <type 94>, y <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) Sub (x <esc:0x1> <type 94>, y <esc:0x1> <type 94>) <type 94>
 func (x <esc:0x1> <type 94>) CmpAbs (y <esc:0x1> <type 94>) <type -11>
 func (z <esc:0x1a> <type 94>) Div (x <esc:0x1> <type 94>, y <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) Rem (x <esc:0x1> <type 94>, y <esc:0x1> <type 94>) <type 94>
 func (x <esc:0x1> <type 94>) IsUint64 () <type -15>
 func (z <esc:0x1a> <type 94>) DivMod (x <esc:0x1> <type 94>, y <esc:0x1> <type 94>, m <esc:0x8a> <type 94>) (? <type 94>, ? <type 94>)
 func (z <esc:0x1a> <type 94>) Binomial (n <type -4>, k <type -4>) <type 94>
 func (x <esc:0x1> <type 94>) Uint64 () <type -8>
 func (x <esc:0x1> <type 94>) BitLen () <type -11>
 func (z <esc:0x1a> <type 94>) GCD (x <esc:0x9> <type 94>, y <esc:0x9> <type 94>, a <esc:0x1> <type 94>, b <esc:0x1> <type 94>) <type 94>
 func (x <esc:0x1> <type 94>) Bit (i <type -11>) <type -12>
 func (z <esc:0x1a> <type 94>) Or (x <esc:0x1> <type 94>, y <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x12> <type 94>) .math/big.lehmerGCD (x <esc:0x1> <type 94>, y <esc:0x9> <type 94>, a <esc:0x1> <type 94>, b <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) Rand (rnd <esc:0x9> <type 107>, n <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) Xor (x <esc:0x1> <type 94>, y <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) Sqrt (x <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) .math/big.modSqrt5Mod8Prime (x <esc:0x1> <type 94>, p <esc:0x1> <type 94>) <type 94>
 func (z <esc:0x1a> <type 94>) Lsh (x <esc:0x1> <type 94>, n <type -12>) <type 94>
 func (z <esc:0x1a> <type 94>) SetBit (x <esc:0x1> <type 94>, i <type -11>, b <type -12>) <type 94>
 func (z <esc:0x1a> <type 94>) AndNot (x <esc:0x1> <type 94>, y <esc:0x1> <type 94>) <type 94>
 func (x <esc:0x1> <type 94>) Bytes () <type 10>
 func (z <esc:0x1a> <type 94>) Not (x <esc:0x1> <type 94>) <type 94>
 func (x <esc:0x1> <type 94>) GobEncode () (? <type 10>, ? <type -19>)
 func (x <esc:0x1> <type 94>) Append (buf <esc:0x12> <type 10>, base <type -11>) <type 10>
type 96 "fmt.ScanState" <type 97>
type 97 interface { Read (buf <type 10>) (n <type -11>, err <type -19>); ReadRune () (r <type -21>, size <type -11>, err <type -19>); SkipSpace (); Token (skipSpace <type -15>, f <type 98>) (token <type 10>, err <type -19>); UnreadRune () <type -19>; Width () (wid <type -11>, ok <type -15>); }
type 98 (? <type -21>) <type -15>
type 99 [] <type 100>
type 100 "math/big.Word" <type -12>
type 101 "fmt.State" <type 102>
type 102 interface { Flag (c <type -11>) <type -15>; Precision () (prec <type -11>, ok <type -15>); Width () (wid <type -11>, ok <type -15>); Write (b <type 10>) (n <type -11>, err <type -19>); }
type 103 "io.ByteScanner" <type 104>
type 104 interface { ? <type 105>; UnreadByte () <type -19>; }
type 105 "io.ByteReader" <type 106>
type 106 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 107 *<type 108>
type 108 "math/rand.Rand" <type 111>
 func (r <esc:0x9> <type 107>) Perm (n <type -11>) <type 109>
 func (r <esc:0x9> <type 107>) Uint64 () <type -8>
 func (r <esc:0x9> <type 107>) .math/rand.int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 107>) Float32 () <type -9>
 func (r <esc:0x9> <type 107>) Seed (seed <type -4>)
 func (r <esc:0x9> <type 107>) Float64 () <type -10>
 func (r <esc:0x9> <type 107>) Int63 () <type -4>
 func (r <esc:0x9> <type 107>) NormFloat64 () <type -10>
 func (r <esc:0x9> <type 107>) ExpFloat64 () <type -10>
 func (r <esc:0x9> <type 107>) Int63n (n <type -4>) <type -4>
 func (r <esc:0x9> <type 107>) Int () <type -11>
 func (r <esc:0x9> <type 107>) Intn (n <type -11>) <type -11>
 func (r <esc:0x9> <type 107>) Int31n (n <type -3>) <type -3>
 func (r <type 107>) Read (p <esc:0x1> <type 10>) (n <type -11>, err <type -19>)
 func (r <esc:0x9> <type 107>) Int31 () <type -3>
 func (r <esc:0x9> <type 107>) Shuffle (n <type -11>, swap <esc:0x1> <type 110>)
 func (r <esc:0x9> <type 107>) Uint32 () <type -7>
type 109 [] <type -11>
type 110 (i <type -11>, j <type -11>)
type 111 struct { .math/rand.src <type 112>; .math/rand.s64 <type 114>; .math/rand.readVal <type -4>; .math/rand.readPos <type -1>; }
type 112 "math/rand.Source" <type 113>
type 113 interface { Int63 () <type -4>; Seed (seed <type -4>); }
type 114 "math/rand.Source64" <type 115>
type 115 interface { ? <type 112>; Uint64 () <type -8>; }
type 116 struct { .math/big.neg <type -15>; .math/big.abs <type 117>; }
type 117 ".math/big.nat" <type 99>
 func (z <esc:0x12> <type 117>) .math/big.set (x <esc:0x1> <type 117>) <type 117>
 func (z <esc:0x12> <type 117>) .math/big.random (rand <esc:0x9> <type 107>, limit <esc:0x1> <type 117>, n <type -11>) <type 117>
 func (z <esc:0x12> <type 117>) .math/big.setBytes (buf <esc:0x1> <type 10>) <type 117>
 func (n <esc:0x1> <type 117>) .math/big.probablyPrimeMillerRabin (reps <type -11>, force2 <type -15>) <type -15>
 func (z <esc:0x12> <type 117>) .math/big.scan (r <type 103>, base <type -11>, fracOk <type -15>) (res <type 117>, b <type -11>, count <type -11>, err <type -19>)
 func (z <esc:0x12> <type 117>) .math/big.expNNMontgomery (x <esc:0x1> <type 117>, y <esc:0x1> <type 117>, m <esc:0x1> <type 117>) <type 117>
 func (z <type 117>) .math/big.add (x <esc:0x1> <type 117>, y <esc:0x1> <type 117>) <type 117>
 func (q <esc:0x1> <type 117>) .math/big.convertWords (s <esc:0x1> <type 10>, b <type 100>, ndigits <type -11>, bb <type 100>, table <esc:0x1> <type 118>)
 func (z <type 117>) .math/big.expNNWindowed (x <type 117>, y <esc:0x1> <type 117>, m <esc:0x1> <type 117>) <type 117>
 func (z <type 117>) .math/big.expWW (x <type 100>, y <type 100>) <type 117>
 func (z <esc:0x12> <type 117>) .math/big.montgomery (x <esc:0x1> <type 117>, y <esc:0x1> <type 117>, m <esc:0x1> <type 117>, k <type 100>, n <type -11>) <type 117>
 func (z <esc:0x12> <type 117>) .math/big.shr (x <esc:0x1> <type 117>, s <type -12>) <type 117>
 func (x <esc:0x1> <type 117>) .math/big.bitLen () <type -11>
 func (z <esc:0x12> <type 117>) .math/big.divLarge (u <esc:0x82> <type 117>, uIn <esc:0x1> <type 117>, vIn <esc:0x1> <type 117>) (q <type 117>, r <type 117>)
 func (x <esc:0x1> <type 117>) .math/big.cmp (y <esc:0x1> <type 117>) (r <type -11>)
 func (z <esc:0x12> <type 117>) .math/big.sub (x <esc:0x1> <type 117>, y <esc:0x1> <type 117>) <type 117>
 func (z <esc:0x12> <type 117>) .math/big.shl (x <esc:0x1> <type 117>, s <type -12>) <type 117>
 func (x <esc:0x1> <type 117>) .math/big.sticky (i <type -12>) <type -12>
 func (z <type 117>) .math/big.sqrt (x <esc:0x1> <type 117>) <type 