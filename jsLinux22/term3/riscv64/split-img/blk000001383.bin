>; PkgTargetRoot <type -16>; BinDir <type -16>; Goroot <type -15>; PkgObj <type -16>; AllTags <type 7>; ConflictDir <type -16>; BinaryOnly <type -15>; GoFiles <type 7>; CgoFiles <type 7>; IgnoredGoFiles <type 7>; InvalidGoFiles <type 7>; CFiles <type 7>; CXXFiles <type 7>; MFiles <type 7>; HFiles <type 7>; FFiles <type 7>; SFiles <type 7>; SwigFiles <type 7>; SwigCXXFiles <type 7>; SysoFiles <type 7>; CgoCFLAGS <type 7>; CgoCPPFLAGS <type 7>; CgoCXXFLAGS <type 7>; CgoFFLAGS <type 7>; CgoLDFLAGS <type 7>; CgoPkgConfig <type 7>; Imports <type 7>; ImportPos <type 59>; TestGoFiles <type 7>; TestImports <type 7>; TestImportPos <type 59>; XTestGoFiles <type 7>; XTestImports <type 7>; XTestImportPos <type 59>; }
type 59 map [<type -16>] <type 60>
type 60 [] <type 61>
type 61 "go/token.Position" <type 63>
 func (pos <esc:0x1> <type 62>) IsValid () <type -15>
 func (pos <type 61>) String () <type -16>
type 62 *<type 61>
type 63 struct { Filename <type -16>; Offset <type -11>; Line <type -11>; Column <type -11>; }
const AllowBinary <type 2> = 2 
func ArchChar (goarch <esc:0x1> <type -16>) (? <type -16>, ? <type -19>)
var Default <type 1>
const FindOnly <type 2> = 1 
const IgnoreVendor <type 2> = 8 
func Import (path <type -16>, srcDir <type -16>, mode <type 2>) (? <type 43>, ? <type -19>)
const ImportComment <type 2> = 4 
func ImportDir (dir <type -16>, mode <type 2>) (? <type 43>, ? <type -19>)
func IsLocalImport (path <esc:0x1> <type -16>) <type -15>
var ToolDir <type -16>
checksum 3C2B369C721E00E89346DD93E66443DBCF64A0E7
v3;
package constant
pkgpath go/constant
import fmt fmt "fmt"
import token go/token "go/token"
import math math "math"
import big math/big "math/big"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import utf8 unicode/utf8 "unicode/utf8"
init constant go..z2fconstant..import bytes bytes..import binary encoding..z2fbinary..import fmt fmt..import token go..z2ftoken..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import big math..z2fbig..import rand math..z2frand..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 1 5 1 8 1 13 1 14 1 16 1 19 2 5 2 8 2 12 2 13 2 14 2 15 2 16 2 19 3 5 3 6 3 7 3 8 3 11 3 12 3 13 3 14 3 15 3 16 3 17 3 18 3 19 4 3 4 5 4 6 4 7 4 8 4 11 4 12 4 13 4 14 4 15 4 16 4 17 4 18 4 19 6 5 6 8 6 13 6 14 6 16 6 17 6 18 8 5 8 13 8 14 8 16 9 1 9 2 9 3 9 5 9 6 9 7 9 8 9 10 9 11 9 12 9 13 9 14 9 15 9 16 9 17 9 18 9 19 10 5 10 13 10 14 10 16 11 5 11 6 11 7 11 8 11 13 11 14 11 16 11 17 11 18 12 5 12 13 12 14 12 15 12 16 12 19 13 5 13 14 15 5 15 13 15 14 16 5 16 13 16 14 17 5 17 13 17 14 17 16 18 5 18 13 18 14 18 16 18 17
types 8 3 25 24 258 21 390 390 121
type 1 "Kind" <type -11>
type 2 "Value" <type 7>
type 3 "go/token.Token" <type -11>
 func (tok <type 3>) IsKeyword () <type -15>
 func (tok <type 3>) IsOperator () <type -15>
 func (tok <type 3>) IsLiteral () <type -15>
 func (op <type 3>) Precedence () <type -11>
 func (tok <type 3>) String () <type -16>
type 4 [] <type -20>
type 5 ".go/constant.boolVal" <type -15>
 func (? <esc:0x1> <type 5>) Kind () <type 1>
 func (x <type 5>) String () <type -16>
 func (x <type 5>) ExactString () <type -16>
 func (? <esc:0x1> <type 5>) .go/constant.implementsValue () <inl:147>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/constant/value.go:243
type 6 ".go/constant.int64Val" <type -4>
 func (? <esc:0x1> <type 6>) Kind () <type 1>
 func (x <type 6>) String () <type -16>
 func (x <type 6>) ExactString () <type -16>
 func (? <esc:0x1> <type 6>) .go/constant.implementsValue () <inl:147>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/constant/value.go:245
type 7 interface { ExactString () <type -16>; Kind () <type 1>; String () <type -16>; .go/constant.implementsValue (); }
func BinaryOp (x_ <type 2>, op <type 3>, y_ <type 2>) <type 2>
func BitLen (x <type 2>) <type -11>
const Bool <type 1> = 1 
func BoolVal (x <type 2>) <type -15>
func Bytes (x <type 2>) <type 4>
func Compare (x_ <type 2>, op <type 3>, y_ <type 2>) <type -15>
const Complex <type 1> = 5 
func Denom (x <type 2>) <type 2>
const Float <type 1> = 4 
func Float32Val (x <type 2>) (? <type -9>, ? <type -15>)
func Float64Val (x <type 2>) (? <type -10>, ? <type -15>)
func Imag (x <type 2>) <type 2>
const Int <type 1> = 3 
func Int64Val (x <type 2>) (? <type -4>, ? <type -15>)
func MakeBool (b <type -15>) ($ret44 <type 2>) <inl:216>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/constant/value.go:344
 { //344
  $ret44 = $convert(<type 5>, b) //344
  return //344
 } //0
func MakeFloat64 (x <type -10>) <type 2>
func MakeFromBytes (bytes <esc:0x1> <type 4>) <type 2>
func MakeFromLiteral (lit <type -16>, tok <type 3>, zero <type -12>) <type 2>
func MakeImag (x <type 2>) <type 2>
func MakeInt64 (x <type -4>) ($ret46 <type 2>) <inl:216>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/constant/value.go:350
 { //350
  $ret46 = $convert(<type 6>, x) //350
  return //350
 } //0
func MakeString (s <type -16>) <type 2>
func MakeUint64 (x <type -8>) <type 2>
func MakeUnknown () <type 2>
func Num (x <type 2>) <type 2>
func Real (x <type 2>) <type 2>
func Shift (x <type 2>, op <type 3>, s <type -12>) <type 2>
func Sign (x <type 2>) <type -11>
const String <type 1> = 2 
func StringVal (x <type 2>) <type -16>
func ToComplex (x <esc:0x12> <type 2>) <type 2>
func ToFloat (x <type 2>) <type 2>
func ToInt (x <type 2>) <type 2>
func Uint64Val (x <type 2>) (? <type -8>, ? <type -15>)
func UnaryOp (op <type 3>, y <type 2>, prec <type -12>) <type 2>
const Unknown <type 1> = 0 
checksum A9D2E99BB8B1DDC482C5AE02E32D0A0C0DE4F204
v3;
package doc
pkgpath go/doc
import bytes bytes "bytes"
import ast go/ast "go/ast"
import token go/token "go/token"
import io io "io"
import os os "os"
import path path "path"
import regexp regexp "regexp"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import template text/template "text/template"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
init doc go..z2fdoc..import bytes bytes..import fmt fmt..import ast go..z2fast..import scanner go..z2fscanner..import token go..z2ftoken..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import ioutil io..z2fioutil..import os os..import path path..import filepath path..z2ffilepath..import reflect reflect..import regexp regexp..import syntax regexp..z2fsyntax..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import template text..z2ftemplate..import parse text..z2ftemplate..z2fparse..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 1 6 1 9 1 17 1 18 1 20 1 25 2 6 2 7 2 8 2 9 2 11 2 14 2 17 2 18 2 19 2 20 2 21 2 24 2 25 3 1 3 2 3 4 3 5 3 6 3 7 3 8 3 9 3 11 3 13 3 14 3 17 3 18 3 19 3 20 3 21 3 24 3 25 4 1 4 2 4 5 4 6 4 7 4 8 4 9 4 11 4 13 4 14 4 17 4 18 4 19 4 20 4 21 4 24 4 25 5 2 5 6 5 7 5 8 5 9 5 11 5 14 5 17 5 18 5 19 5 20 5 21 5 24 5 25 7 6 7 9 7 17 7 18 7 20 7 21 7 24 9 6 9 17 9 18 9 20 10 1 10 6 10 7 10 8 10 9 10 11 10 13 10 14 10 17 10 18 10 19 10 20 10 21 10 24 10 25 11 6 11 7 11 8 11 9 11 17 11 18 11 20 11 21 11 24 12 6 12 9 12 17 12 18 12 20 12 25 13 6 13 7 13 8 13 9 13 11 13 14 13 17 13 18 13 19 13 20 13 21 13 24 13 25 14 6 14 17 14 18 14 19 14 20 14 25 15 1 15 6 15 9 15 14 15 16 15 17 15 18 15 19 15 20 15 25 16 6 16 9 16 14 16 17 16 18 16 19 16 20 16 25 17 6 17 18 19 6 19 17 19 18 20 6 20 17 20 18 21 6 21 17 21 18 21 20 22 1 22 2 22 6 22 7 22 8 22 9 22 10 22 11 22 13 22 14 22 17 22 18 22 19 22 20 22 21 22 23 22 24 22 25 23 1 23 2 23 6 23 7 23 8 23 9 23 11 23 14 23 17 23 18 23 19 23 20 23 21 23 24 23 25 24 6 24 17 24 18 24 20 24 21
types 103 9 26 26 24 25 24 87 24 26 186 32 58 76 19 126 164 19 183 35 21 19 129 53 19 286 70 19 83 100 80 22 21 32 56 19 218 55 35 21 19 182 103 19 180 73 264 21 21 21 21 18 34 120 19 180 98 19 185 73 21 19 127 101 32 56 19 180 72 19 181 71 21 32 56 22 19 129 89 35 18 82 216 35 21 18 21 18 21 18 21 18 30 74 22 36 138 19 179 120 22 34 57 95
type 1 "Example" <type 9>
type 2 "Filter" <type 51>
type 3 "Func" <type 52>
type 4 "Mode" <type -11>
type 5 "Note" <type 80>
type 6 "Package" <type 81>
 func (p <esc:0x9> <type 79>) Filter (f <esc:0x1> <type 2>)
type 7 "Type" <type 95>
type 8 "Value" <type 102>
type 9 struct { Name <type -16>; Doc <type -16>; Code <type 10>; Play <type 13>; Comments <type 47>; Output <type -16>; Unordered <type -15>; EmptyOutput <type -15>; Order <type -11>; }
type 10 "go/ast.Node" <type 11>
type 11 interface { End () <type 12>; Pos () <type 12>; }
type 12 "go/token.Pos" <type -11>
 func (p <type 12>) IsValid () <type -15>
type 13 *<type 14>
type 14 "go/ast.File" <type 15>
 func (f <esc:0x9> <type 13>) End () <type 12>
 func (f <esc:0x1> <type 13>) Pos () <type 12>
type 15 struct { Doc <type 16>; Package <type 12>; Name <type 23>; Decls <type 31>; Scope <type 34>; Imports <type 38>; Unresolved <type 46>; Comments <type 47>; }
type 16 *<type 17>
type 17 "go/ast.CommentGroup" <type 18>
 func (g <esc:0x9> <type 16>) Text () <type -16>
 func (g <esc:0x1> <type 16>) End () <type 12>
 func (g <esc:0x1> <type 16>) Pos () <type 12>
type 18 struct { List <type 19>; }
type 19 [] <type 20>
type 20 *<type 21>
type 21 "go/ast.Comment" <type 22>
 func (c <esc:0x1> <type 20>) End () <type 12>
 func (c <esc:0x1> <type 20>) Pos () <type 12>
type 22 struct { Slash <type 12>; Text <type -16>; }
type 23 *<type 24>
type 24 "go/ast.Ident" <type 25>
 func (id <esc:0x22> <type 23>) String () <type -16>
 func (id <esc:0x1> <type 23>) IsExported () <type -15>
 func (? <esc:0x1> <type 23>) .go/ast.exprNode ()
 func (x <esc:0x1> <type 23>) End () <type 12>
 func (x <esc:0x1> <type 23>) Pos () <type 12>
type 25 struct { NamePos <type 12>; Name <type -16>; Obj <type 26>; }
type 26 *<type 27>
type 27 "go/ast.Object" <type 28>
 func (obj <esc:0x1> <type 26>) Pos () <type 12>
type 28 struct { Kind <type 29>; Name <type -16>; Decl <type 30>; Data <type 30>; Type <type 30>; }
type 29 "go/ast.ObjKind" <type -11>
 func (kind <type 29>) String () <type -16>
type 30 interface { }
type 31 [] <type 32>
type 32 "go/ast.Decl" <type 33>
type 33 interface { ? <type 10>; .go/ast.declNode (); }
type 34 *<type 35>
type 35 "go/ast.Scope" <type 36>
 func (s <type 34>) String () <type -16>
 func (s <esc:0x1> <type 34>) Insert (obj <type 26>) (alt <type 26>)
 func (s <esc:0x1> <type 34>) Lookup (name <esc:0x1> <type -16>) <type 26>
type 36 struct { Outer <type 34>; Objects <type 37>; }
type 37 map [<type -16>] <type 26>
type 38 [] <type 39>
type 39 *<type 40>
type 40 "go/ast.ImportSpec" <type 41>
 func (? <esc:0x1> <type 39>) .go/ast.specNode ()
 func (s <esc:0x1> <type 39>) End () <type 12>
 func (s <esc:0x1> <type 39>) Pos () <type 12>
type 41 struct { Doc <type 16>; Name <type 23>; Path <type 42>; Comment <type 16>; EndPos <type 12>; }
type 42 *<type 43>
type 43 "go/ast.BasicLit" <type 44>
 func (? <esc:0x1> <type 42>) .go/ast.exprNode ()
 func (x <esc:0x1> <type 42>) End () <type 12>
 func (x <esc:0x1> <type 42>) Pos () <type 12>
type 44 struct { ValuePos <type 12>; Kind <type 45>; Value <type -16>; }
type 45 "go/token.Token" <type -11>
 func (tok <type 45>) String () <type -16>
 func (op <type 45>) Precedence () <type -11>
 func (tok <type 45>) IsLiteral () <type -15>
 func (tok <type 45>) IsOperator () <type -15>
 func (tok <type 45>) IsKeyword () <type -15>
type 46 [] <type 23>
type 47 [] <type 16>
type 48 [] <type 13>
type 49 [] <type 50>
type 50 *<type 1>
type 51 (? <type -16>) <type -15>
type 52 struct { Doc <type -16>; Name <type -16>; Decl <type 53>; Recv <type -16>; Orig <type -16>; Level <type -11>; }
type 53 *<type 54>
type 54 "go/ast.FuncDecl" <type 55>
 func (? <esc:0x1> <type 53>) .go/ast.declNode ()
 func (d <esc:0x9> <type 53>) End () <type 12>
 func (d <esc:0x9> <type 53>) Pos () <type 12>
type 55 struct { Doc <type 16>; Recv <type 56>; Name <type 23>; Type <type 65>; Body <type 68>; }
type 56 *<type 57>
type 57 "go/ast.FieldList" <type 58>
 func (f <esc:0x1> <type 56>) NumFields () <type -11>
 func (f <esc:0x9> <type 56>) End () <type 12>
 func (f <esc:0x9> <type 56>) Pos () <type 12>
type 58 struct { Opening <type 12>; List <type 59>; Closing <type 12>; }
type 59 [] <type 60>
type 60 *<type 61>
type 61 "go/ast.Field" <type 62>
 func (f <esc:0x9> <type 60>) End () <type 12>
 func (f <esc:0x9> <type 60>) Pos () <type 12>
type 62 struct { Doc <type 16>; Names <type 46>; Type <type 63>; Tag <type 42>; Comment <type 16>; }
type 63 "go/ast.Expr" <type 64>
type 64 interface { ? <type 10>; .go/ast.exprNode (); }
type 65 *<type 66>
type 66 "go/ast.FuncType" <type 67>
 func (? <esc:0x1> <type 65>) .go/ast.exprNode ()
 func (x <esc:0x9> <type 65>) End () <type 12>
 func (x <esc:0x9> <type 65>) Pos () <type 12>
type 67 struct { Func <type 12>; Params <type 56>; Results <type 56>; }
type 68 *<type 69>
type 69 "go/ast.BlockStmt" <type 70>
 func (? <esc:0x1> <type 68>) .go/ast.stmtNode ()
 func (s <esc:0x1> <type 68>) End () <type 12>
 func (s <esc:0x1> <type 68>) Pos () <type 12>
type 70 struct { Lbrace <type 12>; List <type 71>; Rbrace <type 12>; }
type 71 [] <type 72>
type 72 "go/ast.Stmt" <type 73>
type 73 interface { ? <type 10>; .go/ast.stmtNode (); }
type 74 [] <type -16>
type 75 *<type 76>
type 76 "go/ast.Package" <type 77>
 func (p <esc:0x1> <type 75>) End () <type 12>
 func (p <esc:0x1> <type 75>) Pos () <type 12>
type 77 struct { Name <type -16>; Scope <type 34>; Imports <type 37>; Files <type 78>; }
type 78 map [<type -16>] <type 13>
type 79 *<type 6>
type 80 struct { Pos <type 12>; End <type 12>; UID <type -16>; Body <type -16>; }
type 81 struct { Doc <type -16>; Name <type -16>; ImportPath <type -16>; Imports <type 74>; Filenames <type 74>; Notes <type 82>; Bugs <type 74>; Consts <type 85>; Types <type 87>; Vars <type 85>; Funcs <type 89>; }
type 82 map [<type -16>] <type 83>
type 83 [] <type 84>
type 84 *<type 5>
type 85 [] <type 86>
type 86 *<type 8>
type 87 [] <type 88>
type 88 *<type 7>
type 89 [] <type 90>
type 90 *<type 3>
type 91 "io.Writer" <type 92>
type 92 interface { Write (p <type 93>) (n <type -11>, err <type -19>); }
type 93 [] <type -20>
type 94 map [<type -16>] <type -16>
type 95 struct { Doc <type -16>; Name <type -16>; Decl <type 96>; Consts <type 85>; Vars <type 85>; Funcs <type 89>; Methods <type 89>; }
type 96 *<type 97>
type 97 "go/ast.GenDecl" <type 98>
 func (? <esc:0x1> <type 96>) .go/ast.declNode ()
 func (d <esc:0x9> <type 96>) End () <type 12>
 func (d <esc:0x1> <type 96>) Pos () <type 12>
type 98 struct { Doc <type 16>; TokPos <type 12>; Tok <type 45>; Lparen <type 12>; Specs <type 99>; Rparen <type 12>; }
type 99 [] <type 100>
type 100 "go/ast.Spec" <type 101>
type 101 interface { ? <type 10>; .go/ast.specNode (); }
type 102 struct { Doc <type -16>; Names <type 74>; Decl <type 96>; .go/doc.order <type -11>; }
const AllDecls <type 4> = 1 
const AllMethods <type 4> = 2 
func Examples (files <esc:0x9> ...<type 13>) <type 49>
var IllegalPrefixes <type 74>
func IsPredeclared (s <esc:0x1> <type -16>) <type -15>
func New (pkg <esc:0xa> <type 75>, importPath <type -16>, mode <type 4>) <type 79>
const PreserveAST <type 4> = 4 
func Synopsis (s <type -16>) <type -16>
func ToHTML (w <type 91>, text <type -16>, words <esc:0x1> <type 94>)
func ToText (w <type 91>, text <type -16>, indent <type -16>, preIndent <esc:0x1> <type -16>, width <type -11>)
checksum E5C6A1E4322ED00C7F925F7FFA448E999AC5FE4E
v3;
package format
pkgpath go/format
import bytes bytes "bytes"
import fmt fmt "fmt"
import ast go/ast "go/ast"
import parser go/parser "go/parser"
import printer go/printer "go/printer"
import token go/token "go/token"
import io io "io"
import strings strings "strings"
indirectimport sync sync
init bytes bytes..import fmt fmt..import ast go..z2fast..import parser go..z2fparser..import printer go..z2fprinter..import scanner go..z2fscanner..import token go..z2ftoken..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import ioutil io..z2fioutil..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import tabwriter text..z2ftabwriter..import time time..import unicode unicode..import
init_graph 0 7 0 10 0 15 0 16 0 18 0 22 1 7 1 8 1 9 1 10 1 12 1 14 1 15 1 16 1 17 1 18 1 19 1 21 1 22 2 0 2 1 2 5 2 6 2 7 2 8 2 9 2 10 2 12 2 13 2 14 2 15 2 16 2 17 2 18 2 19 2 21 2 22 3 0 3 1 3 2 3 5 3 6 3 7 3 8 3 9 3 10 3 11 3 12 3 13 3 14 3 15 3 16 3 17 3 18 3 19 3 21 3 22 4 0 4 1 4 2 4 5 4 6 4 7 4 8 4 9 4 10 4 12 4 13 4 14 4 15 4 16 4 17 4 18 4 19 4 20 4 21 4 22 5 0 5 1 5 6 5 7 5 8 5 9 5 10 5 12 5 13 5 14 5 15 5 16 5 17 5 18 5 19 5 21 5 22 6 1 6 7 6 8 6 9 6 10 6 12 6 14 6 15 6 16 6 17 6 18 6 19 6 21 6 22 8 7 8 10 8 15 8 16 8 18 8 19 8 21 10 7 10 15 10 16 10 18 11 0 11 7 11 8 11 9 11 10 11 12 11 13 11 14 11 15 11 16 11 17 11 18 11 19 11 21 11 22 12 7 12 8 12 9 12 10 12 15 12 16 12 18 12 19 12 21 13 7 13 8 13 9 13 10 13 12 13 14 13 15 13 16 13 17 13 18 13 19 13 21 13 22 14 7 14 15 14 16 14 17 14 18 14 22 15 7 15 16 17 7 17 15 17 16 18 7 18 15 18 16 19 7 19 15 19 16 19 18 20 7 20 10 20 15 20 16 20 18 21 7 21 15 21 16 21 18 21 19
types 30 1 28 72 21 17 593 74 131 17 94 19 1245 22 205 89 19 64 21 39 95 33 22 33 126 216 19 32 42 149 21
type 1 "io.Writer" <type 2>
type 2 interface { Write (p <type 3>) (n <type -11>, err <type -19>); }
type 3 [] <type -20>
type 4 *<type 5>
type 5 "go/token.FileSet" <type 23>
 func (s <type 4>) Base () <type -11>
 func (s <type 4>) Position (p <type 6>) (pos <type 7>)
 func (s <type 4>) AddFile (filename <type -16>, base <type -11>, size <type -11>) <type 10>
 func (s <type 4>) Write (encode <esc:0x22> <type 20>) <type -19>
 func (s <type 4>) Iterate (f <esc:0x1> <type 22>)
 func (s <type 4>) File (p <type 6>) (f <type 10>)
 func (s <type 4>) .go/token.file (p <type 6>) <type 10>
 func (s <type 4>) PositionFor (p <type 6>, adjusted <type -15>) (pos <type 7>)
 func (s <type 4>) Read (decode <esc:0x22> <type 20>) <type -19>
type 6 "go/token.Pos" <type -11>
 func (p <type 6>) IsValid () <type -15>
type 7 "go/token.Position" <type 9>
 func (pos <esc:0x1> <type 8>) IsValid () <type -15>
 func (pos <type 7>) String () <type -16>
type 8 *<type 7>
type 9 struct { Filename <type -16>; Offset <type -11>; Line <type -11>; Column <type -11>; }
type 10 *<type 11>
type 11 "go/token.File" <type 13>
 func (f <esc:0x1> <type 10>) Offset (p <type 6>) <type -11>
 func (f <type 10>) AddLineInfo (offset <type -11>, filename <type -16>, line <type -11>)
 func (f <type 10>) LineStart (line <type -11>) <type 6>
 func (f <type 10>) SetLines (lines <type 12>) <type -15>
 func (f <type 10>) MergeLine (line <type -11>)
 func (f <type 10>) Line (p <type 6>) <type -11>
 func (f <type 10>) .go/token.unpack (offset <type -11>, adjusted <type -15>) (filename <type -16>, line <type -11>, column <type -11>)
 func (f <esc:0x1> <type 10>) Pos (offset <type -11>) <type 6>
 func (f <type 10>) Position (p <type 6>) (pos <type 7>)
 func (f <esc:0x1> <type 10>) Base () <type -11>
 func (f <type 10>) AddLine (offset <type -11>)
 func (f <type 10>) SetLinesForContent (content <esc:0x1> <type 3>)
 func (f <esc:0x22> <type 10>) Name () <type -16>
 func (f <type 10>) PositionFor (p <type 6>, adjusted <type -15>) (pos <type 7>)
 func (f <esc:0x1> <type 10>) Size () <type -11>
 func (f <type 10>) LineCount () <type -11>
 func (f <type 10>) AddLineColumnInfo (offset <type -11>, filename <type -16>, line <type -11>, column <type -11>)
 func (f <type 10>) .go/token.position (p <type 6>, adjusted <type -15>) (pos <type 7>)
type 12 [] <type -11>
type 13 struct { .go/token.set <type 4>; .go/token.name <type -16>; .go/token.base <type -11>; .go/token.size <type -11>; .go/token.mutex <type 14>; .go/token.lines <type 12>; .go/token.infos <type 17>; }
type 14 "sync.Mutex" <type 16>
 func (m <type 15>) Unlock ()
 func (m <type 15>) Lock ()
type 15 *<type 14>
type 16 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 17 [] <type 18>
type 18 ".go/token.lineInfo" <type 19>
type 19 struct { Offset <type -11>; Filename <type -16>; Line <type -11>; Column <type -11>; }
type 20 (? <type 21>) <type -19>
type 21 interface { }
type 22 (? <type 10>) <type -15>
type 23 struct { .go/token.mutex <type 24>; .go/token.base <type -11>; .go/token.files <type 29>; .go/token.last <type 10>; }
type 24 "sync.RWMutex" <type 28>
 func (rw <esc:0x12> <type 25>) RLocker () ($ret8 <type 26>)
 func (rw <type 25>) Unlock ()
 func (rw <type 25>) Lock ()
 func (rw <type 25>) RUnlock ()
 func (rw <type 25>) RLock ()
type 25 *<type 24>
type 26 "sync.Locker" <type 27>
type 27 interface { Lock (); Unlock (); }
type 28 struct { .sync.w <type 14>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 29 [] <type 10>
func Node (dst <type 1>, fset <type 4>, node <type 21>) <type -19>
func Source (src <type 3>) (? <type 3>, ? <type -19>)
checksum D0F41C7346A56099E37845CA5349783C921EBA36
v3;
package importer
pkgpath go/importer
import build go/build "go/build"
import gccgoimporter go/internal/gccgoimporter "go/internal/gccgoimporter"
import gcimporter go/internal/gcimporter "go/internal/gcimporter"
import srcimporter go/internal/srcimporter "go/internal/srcimporter"
import token go/token "go/token"
import types go/types "go/types"
import io io "io"
import os os "os"
import runtime runtime "runtime"
indirectimport sync sync
init bufio bufio..import bytes bytes..import flate compress..z2fflate..import zlib compress..z2fzlib..import context context..import dwarf debug..z2fdwarf..import elf debug..z2felf..import binary encoding..z2fbinary..import fmt fmt..import ast go..z2fast..import build go..z2fbuild..import constant go..z2fconstant..import doc go..z2fdoc..import gccgoimporter go..z2finternal..z2fgccgoimporter..import gcimporter go..z2finternal..z2fgcimporter..import srcimporter go..z2finternal..z2fsrcimporter..import parser go..z2fparser..import scanner go..z2fscanner..import token go..z2ftoken..import types go..z2ftypes..import cpu internal..z2fcpu..import goroot internal..z2fgoroot..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import ioutil io..z2fioutil..import log log..import big math..z2fbig..import rand math..z2frand..import os os..import exec os..z2fexec..import path path..import filepath path..z2ffilepath..import reflect reflect..import regexp regexp..import syntax regexp..z2fsyntax..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import scanner text..z2fscanner..import template text..z2ftemplate..import parse text..z2ftemplate..z2fparse..import time time..import unicode unicode..import
init_graph
types 55 2 26 36 74 17 510 17 852 21 35 479 76 34 69 77 30 74 22 212 20 34 20 186 19 609 135 19 95 19 1256 22 206 89 19 64 21 39 95 33 22 33 126 216 19 32 42 149 21 54 34 48 30 73 30 43
type 1 "Lookup" <type 48>
type 2 "go/types.Importer" <type 3>
type 3 interface { Import (path <type -16>) (? <type 4>, ? <type -19>); }
type 4 *<type 5>
type 5 "go/types.Package" <type 22>
 func (pkg <esc:0x22> <type 4>) Path () <type -16>
 func (pkg <esc:0x1> <type 4>) SetName (name <type -16>)
 func (pkg <esc:0x22> <type 4>) Name () <type -16>
 func (pkg <esc:0x22> <type 4>) Scope () <type 6>
 func (pkg <esc:0x1> <type 4>) Complete () <type -15>
 func (pkg <esc:0x22> <type 4>) Imports () <type 21>
 func (pkg <esc:0x1> <type 4>) SetImports (list <type 21>)
 func (pkg <esc:0x1> <type 4>) MarkComplete ()
 func (pkg <esc:0x9> <type 4>) String () <type -16>
type 6 *<type 7>
type 7 "go/types.Scope" <type 18>
 func (s <type 6>) String () <type -16>
 func (s <esc:0x22> <type 6>) Parent () <type 6>
 func (s <esc:0x1> <type 6>) Names () <type 8>
 func (s <esc:0x1> <type 6>) Len () <type -11>
 func (s <esc:0x1> <type 6>) Lookup (name <esc:0x1> <type -16>) <type 9>
 func (s <type 6>) Insert (obj <type 9>) <type 9>
 func (s <esc:0x1> <type 6>) NumChildren () <type -11>
 func (s <esc:0x32> <type 6>) Child (i <type -11>) <type 6>
 func (s <esc:0x12> <type 6>) LookupParent (name <esc:0x1> <type -16>, pos <type 11>) (? <type 6>, ? <type 9>)
 func (s <esc:0x1> <type 6>) End () <type 11>
 func (s <esc:0x1> <type 6>) Contains (pos <type 11>) <type -15>
 func (s <type 6>) Innermost (pos <type 11>) <type 6>
 func (s <type 6>) WriteTo (w <type 15>, n <type -11>, recurse <type -15>)
 func (s <esc:0x1> <type 6>) Pos () <type 11>
type 8 [] <type -16>
type 9 "go/types.Object" <type 10>
type 10 interface { Exported () <type -15>; Id () <type -16>; Name () <type -16>; Parent () <type 6>; Pkg () <type 4>; Pos () <type 11>; String () <type -16>; Type () <type 12>; .go/types.color () <type 14>; .go/types.order () <type -7>; .go/types.sameId (pkg <type 4>, name <type -16>) <type -15>; .go/types.scopePos () <type 11>; .go/types.setColor (color <type 14>); .go/types.setOrder (? <type -7>); .go/types.setParent (? <type 6>); .go/types.setScopePos (pos <type 11>); }
type 11 "go/token.Pos" <type -11>
 func (p <type 11>) IsValid () <type -15>
type 12 "go/types.Type" <type 13>
type 13 interface { String () <type -16>; Underlying () <type 12>; }
type 14 ".go/types.color" <type -7>
 func (c <type 14>) String () <type -16>
type 15 "io.Writer" <type 16>
type 16 interface { Write (p <type 17>) (n <type -11>, err <type -19>); }
type 17 [] <type -20>
type 18 struct { .go/types.parent <type 6>; .go/types.children <type 19>; .go/types.elems <type 20>; .go/types.pos <type 11>; .go/types.end <type 11>; .go/types.comment <type -16>; .go/types.isFunc <type -15>; }
type 19 [] <type 6>
type 20 map [<type -16>] <type 9>
type 21 [] <type 4>
type 22 struct { .go/types.path <type -16>; .go/types.name <type -16>; .go/types.scope <type 6>; .go/types.complete <type -15>; .go/types.imports <type 21>; .go/types.fake <type -15>; }
type 23 *<type 24>
type 24 "go/token.FileSet" <type 41>
 func (s <type 23>) Base () <type -11>
 func (s <type 23>) Position (p <type 11>) (pos <type 25>)
 func (s <type 23>) AddFile (filename <type -16>, base <type -11>, size <type -11>) <type 28>
 func (s <type 23>) Write (encode <esc:0x22> <type 38>) <type -19>
 func (s <type 23>) Iterate (f <esc:0x1> <type 40>)
 func (s <type 23>) File (p <type 11>) (f <type 28>)
 func (s <type 23>) .go/token.file (p <type 11>) <type 28>
 func (s <type 23>) PositionFor (p <type 11>, adjusted <type -15>) (pos <type 25>)
 func (s <type 23>) Read (decode <esc:0x22> <type 38>) <type -19>
type 25 "go/token.Position" <type 27>
 func (pos <type 25>) String () <type -16>
 func (pos <esc:0x1> <type 26>) IsValid () <type -15>
type 26 *<type 25>
type 27 struct { Filename <type -16>; Offset <type -11>; Line <type -11>; Column <type -11>; }
type 28 *<type 29>
type 29 "go/token.File" <type 31>
 func (f <esc:0x1> <type 28>) Offset (p <type 11>) <type -11>
 func (f <type 28>) AddLineInfo (offset <type -11>, filename <type -16>, line <type -11>)
 func (f <type 28>) LineStart (line <type -11>) <type 11>
 func (f <type 28>) SetLines (lines <type 30>) <type -15>
 func (f <type 28>) MergeLine (line <type -11>)
 func (f <type 28>) Line (p <type 11>) <type -11>
 func (f <type 28>) .go/token.unpack (offset <type -11>, adjusted <type -15>) (filename <type -16>, line <type -11>, column <type -11>)
 func (f <esc:0x1> <type 28>) Pos (offset <type -11>) <type 11>
 func (f <type 28>) Position (p <type 11>) (pos <type 25>)
 func (f <esc:0x1> <type 28>) Base () <type -11>
 func (f <type 28>) AddLine (offset <type -11>)
 func (f <type 28>) SetLinesForContent (content <esc:0x1> <type 17>)
 func (f <esc:0x22> <type 28>) Name () <type -16>
 func (f <type 28>) PositionFor (p <type 11>, adjusted <type -15>) (pos <type 25>)
 func (f <esc:0x1> <type 28>) Size () <type -11>
 func (f <type 28>) LineCount () <type -11>
 func (f <type 28>) AddLineColumnInfo (offset <type -11>, filename <type -16>, line <type -11>, column <type -11>)
 func (f <type 28>) .go/token.position (p <type 11>, adjusted <type -15>) (pos <type 25>)
type 30 [] <type -11>
type 31 struct { .go/token.set <type 23>; .go/token.name <type -16>; .go/token.base <type -11>; .go/token.size <type -11>; .go/token.mutex <type 32>; .go/token.lines <type 30>; .go/token.infos <type 35>; }
type 32 "sync.Mutex" <type 34>
 func (m <type 33>) Unlock ()
 func (m <type 33>) Lock ()
type 33 *<type 32>
type 34 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 35 [] <type 36>
type 36 ".go/token.lineInfo" <type 37>
type 37 struct { Offset <type -11>; Filename <type -16>; Line <type -11>; Column <type -11>; }
type 38 (? <type 39>) <type -19>
type 39 interface { }
type 40 (? <type 28>) <type -15>
type 41 struct { .go/token.mutex <type 42>; .go/token.base <type -11>; .go/token.files <type 47>; .go/token.last <type 28>; }
type 42 "sync.RWMutex" <type 46>
 func (rw <esc:0x12> <type 43>) RLocker () ($ret8 <type 44>)
 func (rw <type 43>) Unlock ()
 func (rw <type 43>) Lock ()
 func (rw <type 43>) RUnlock ()
 func (rw <type 43>) RLock ()
type 43 *<type 42>
type 44 "sync.Locker" <type 45>
type 45 interface { Lock (); Unlock (); }
type 46 struct { .sync.w <type 32>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 47 [] <type 28>
type 48 (path <type -16>) (? <type 49>, ? <type -19>)
type 49 "io.ReadCloser" <type 50>
type 50 interface { ? <type 51>; ? <type 53>; }
type 51 "io.Reader" <type 52>
type 52 interface { Read (p <type 17>) (n <type -11>, err <type -19>); }
type 53 "io.Closer" <type 54>
type 54 interface { Close () <type -19>; }
func Default () <type 2>
func For (compiler <esc:0x1> <type -16>, lookup <type 1>) <type 2>
func ForCompiler (fset <type 23>, compiler <esc:0x1> <type -16>, lookup <type 1>) <type 2>
checksum 4C79C99577BA02E8A6B5EEE544834A10442B4497
v3;
package gccgoimporter
pkgpath go/internal/gccgoimporter
import bufio bufio "bufio"
import bytes bytes "bytes"
import elf debug/elf "debug/elf"
import errors errors "errors"
import fmt fmt "fmt"
import constant go/constant "go/constant"
import token go/token "go/token"
import types go/types "go/types"
import xcoff internal/xcoff "internal/xcoff"
import io io "io"
import os os "os"
import exec os/exec "os/exec"
import filepath path/filepath "path/filepath"
import strconv strconv "strconv"
import strings strings "strings"
import scanner text/scanner "text/scanner"
import utf8 unicode/utf8 "unicode/utf8"
init gccgoimporter go..z2finternal..z2fgccgoimporter..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import zlib compress..z2fzlib..import context context..import dwarf debug..z2fdwarf..import elf debug..z2felf..import binary encoding..z2fbinary..import fmt fmt..import ast go..z2fast..import constant go..z2fconstant..import parser go..z2fparser..import scanner go..z2fscanner..import token go..z2ftoken..import types go..z2ftypes..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import ioutil io..z2fioutil..import big math..z2fbig..import rand math..z2frand..import os os..import exec os..z2fexec..import path path..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import scanner text..z2fscanner..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 1 2 1 16 1 19 1 28 1 29 1 31 1 35 2 16 2 19 2 28 2 29 2 31 2 35 3 1 3 2 3 9 3 16 3 17 3 18 3 19 3 23 3 27 3 28 3 29 3 30 3 31 3 32 3 34 3 35 4 1 4 2 4 3 4 8 4 9 4 16 4 17 4 18 4 19 4 23 4 27 4 28 4 29 4 30 4 31 4 32 4 34 4 35 5 9 5 16 5 17 5 18 5 19 5 23 5 27 5 28 5 29 5 30 5 31 5 32 5 34 5 35 6 8 6 9 6 16 6 17 6 18 6 19 6 23 6 25 6 27 6 28 6 29 6 30 6 31 6 32 6 34 6 35 7 1 7 2 7 3 7 4 7 6 7 8 7 9 7 16 7 17 7 18 7 19 7 23 7 25 7 27 7 28 7 29 7 30 7 31 7 32 7 34 7 35 8 16 8 19 8 27 8 28 8 29 8 30 8 31 8 35 9 16 9 17 9 18 9 19 9 23 9 27 9 28 9 29 9 30 9 31 9 32 9 34 9 35 10 2 10 9 10 13 10 14 10 16 10 17 10 18 10 19 10 23 10 26 10 27 10 28 10 29 10 30 10 31 10 32 10 34 10 35 11 2 11 8 11 9 11 14 11 16 11 17 11 18 11 19 11 21 11 22 11 23 11 27 11 28 11 29 11 30 11 31 11 32 11 34 11 35 12 2 12 9 12 10 12 13 12 14 12 16 12 17 12 18 12 19 12 20 12 23 12 26 12 27 12 28 12 29 12 30 12 31 12 32 12 34 12 35 13 2 13 9 13 14 13 16 13 17 13 18 13 19 13 23 13 26 13 27 13 28 13 29 13 30 13 31 13 32 13 34 13 35 14 9 14 16 14 17 14 18 14 19 14 23 14 27 14 28 14 29 14 30 14 31 14 32 14 34 14 35 15 2 15 8 15 9 15 10 15 11 15 12 15 13 15 14 15 16 15 17 15 18 15 19 15 20 15 21 15 22 15 23 15 25 15 26 15 27 15 28 15 29 15 30 15 31 15 32 15 34 15 35 17 16 17 19 17 28 17 29 17 31 17 32 17 34 19 16 19 28 19 29 19 31 20 2 20 16 20 17 20 18 20 19 20 23 20 26 20 27 20 28 20 29 20 30 20 31 20 32 20 34 20 35 21 2 21 8 21 9 21 16 21 17 21 18 21 19 21 22 21 23 21 27 21 28 21 29 21 30 21 31 21 32 21 34 21 35 22 16 22 28 22 29 22 31 23 16 23 17 23 18 23 19 23 28 23 29 23 31 23 32 23 34 24 2 24 5 24 9 24 16 24 17 24 18 24 19 24 23 24 26 24 27 24 28 24 29 24 30 24 31 24 32 24 34 24 35 25 16 25 19 25 28 25 29 25 31 25 35 26 16 26 17 26 18 26 19 26 23 26 27 26 28 26 29 26 30 26 31 26 32 26 34 26 35 27 16 27 28 27 29 27 30 27 31 27 35 28 16 28 29 30 16 30 28 30 29 31 16 31 28 31 29 32 16 32 28 32 29 32 31 33 2 33 9 33 16 33 17 33 18 33 19 33 23 33 27 33 28 33 29 33 30 33 31 33 32 33 34 33 35 34 16 34 28 34 29 34 31 34 32
types 39 5 308 28 28 31 85 21 17 31 18 512 20 19 875 36 481 76 34 69 77 30 74 22 213 21 35 187 109 34 51 34 48 30 73 30 43 57 20 78
type 1 "GccgoInstallation" <type 5>
 func (inst <esc:0x9> <type 7>) InitFromDriver (gccgoPath <type -16>, args <esc:0x9> ...<type -16>) (err <type -19>)
 func (inst <esc:0x9> <type 7>) SearchPaths () (paths <type 6>)
 func (inst <esc:0x9> <type 7>) GetImporter (incpaths <type 6>, initmap <type 8>) <type 2>
type 2 "Importer" <type 27>
type 3 "InitData" <type 36>
type 4 "PackageInit" <type 38>
type 5 struct { GccVersion <type -16>; TargetTriple <type -16>; LibPaths <type 6>; }
type 6 [] <type -16>
type 7 *<type 1>
type 8 map [<type 9>] <type 3>
type 9 *<type 10>
type 10 "go/types.Package" <type 26>
 func (pkg <esc:0x9> <type 9>) String () <type -16>
 func (pkg <esc:0x1> <type 9>) MarkComplete ()
 func (pkg <esc:0x1> <type 9>) SetImports (list <type 11>)
 func (pkg <esc:0x22> <type 9>) Imports () <type 11>
 func (pkg <esc:0x1> <type 9>) Complete () <type -15>
 func (pkg <esc:0x22> <type 9>) Scope () <type 12>
 func (pkg <esc:0x22> <type 9>) Name () <type -16>
 func (pkg <esc:0x1> <type 9>) SetName (name <type -16>)
 func (pkg <esc:0x22> <type 9>) Path () <type -16>
type 11 [] <type 9>
type 12 *<type 13>
type 13 "go/types.Scope" <type 23>
 func (s <type 12>) String () <type -16>
 func (s <esc:0x22> <type 12>) Parent () <type 12>
 func (s <esc:0x1> <type 12>) Names () <type 6>
 func (s <esc:0x1> <type 12>) Len () <type -11>
 func (s <esc:0x1> <type 12>) Lookup (name <esc:0x1> <type -16>) <type 14>
 func (s <type 12>) Insert (obj <type 14>) <type 14>
 func (s <esc:0x1> <type 12>) NumChildren () <type -11>
 func (s <esc:0x32> <type 12>) Child (i <type -11>) <type 12>
 func (s <esc:0x12> <type 12>) LookupParent (name <esc:0x1> <type -16>, pos <type 16>) (? <type 12>, ? <type 14>)
 func (s <esc:0x1> <type 12>) End () <type 16>
 func (s <esc:0x1> <type 12>) Contains (pos <type 16>) <type -15>
 func (s <type 12>) Innermost (pos <type 16>) <type 12>
 func (s <esc:0x1> <type 12>) Pos () <type 16>
 func (s <type 12>) WriteTo (w <type 20>, n <type -11>, recurse <type -15>)
type 14 "go/types.Object" <type 15>
type 15 interface { Exported () <type -15>; Id () <type -16>; Name () <type -16>; Parent () <type 12>; Pkg () <type 9>; Pos () <type 16>; String () <type -16>; Type () <type 17>; .go/types.color () <type 19>; .go/types.order () <type -7>; .go/types.sameId (pkg <type 9>, name <type -16>) <type -15>; .go/types.scopePos () <type 16>; .go/types.setColor (color <type 19>); .go/types.setOrder (? <type -7>); .go/types.setParent (? <type 12>); .go/types.setScopePos (pos <type 16>); }
type 16 "go/token.Pos" <type -11>
 func (p <type 16>) IsValid () <type -15>
type 17 "go/types.Type" <type 18>
type 18 interface { String () <type -16>; Underlying () <type 17>; }
type 19 ".go/types.color" <type -7>
 func (c <type 19>) String () <type -16>
type 20 "io.Writer" <type 21>
type 21 interface { Write (p <type 22>) (n <type -11>, err <type -19>); }
type 22 [] <type -20>
type 23 struct { .go/types.parent <type 12>; .go/types.children <type 24>; .go/types.elems <type 25>; .go/types.pos <type 16>; .go/types.end <type 16>; .go/types.comment <type -16>; .go/types.isFunc <type -15>; }
type 24 [] <type 12>
type 25 map [<type -16>] <type 14>
type 26 struct { .go/types.path <type -16>; .go/types.name <type -16>; .go/types.scope <type 12>; .go/types.complete <type -15>; .go/types.imports <type 11>; .go/types.fake <type -15>; }
type 27 (imports <type 28>, path <type -16>, srcDir <type -16>, lookup <type 29>) (? <type 9>, ? <type -19>)
type 28 map [<type -16>] <type 9>
type 29 (? <type -16>) (? <type 30>, ? <type -19>)
type 30 "io.ReadCloser" <type 31>
type 31 interface { ? <type 32>; ? <type 34>; }
type 32 "io.Reader" <type 33>
type 33 interface { Read (p <type 22>) (n <type -11>, err <type -19>); }
type 34 "io.Closer" <type 35>
type 35 interface { Close () <type -19>; }
type 36 struct { Priority <type -11>; Inits <type 37>; }
type 37 [] <type 4>
type 38 struct { Name <type -16>; InitFunc <type -16>; Priority <type -11>; }
func GetImporter (searchpaths <type 6>, initmap <type 8>) <type 2>
checksum D20ED12F6B486186108B997562D8FA9177196A5D
v3;
package gcimporter
pkgpath go/internal/gcimporter
import bufio bufio "bufio"
import bytes bytes "bytes"
import binary encoding/binary "encoding/binary"
import fmt fmt "fmt"
import build go/build "go/build"
import constant go/constant "go/constant"
import token go/token "go/token"
import types go/types "go/types"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import os os "os"
import filepath path/filepath "path/filepath"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
init gcimporter go..z2finternal..z2fgcimporter..import bufio bufio..import bytes bytes..import context context..import binary encoding..z2fbinary..import fmt fmt..import ast go..z2fast..import build go..z2fbuild..import constant go..z2fconstant..import doc go..z2fdoc..import parser go..z2fparser..import scanner go..z2fscanner..import token go..z2ftoken..import types go..z2ftypes..import cpu internal..z2fcpu..import goroot internal..z2fgoroot..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import ioutil io..z2fioutil..import log log..import big math..z2fbig..import rand math..z2frand..import os os..import exec os..z2fexec..import path path..import filepath path..z2ffilepath..import reflect reflect..import regexp regexp..import syntax regexp..z2fsyntax..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import template text..z2ftemplate..import parse text..z2ftemplate..z2fparse..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 1 2 1 14 1 18 1 30 1 31 1 33 1 38 2 14 2 18 2 30 2 31 2 33 2 38 3 5 3 14 3 16 3 17 3 18 3 23 3 27 3 30 3 31 3 32 3 33 3 34 3 37 3 38 4 14 4 18 4 27 4 30 4 31 4 32 4 33 4 38 5 14 5 16 5 17 5 18 5 23 5 27 5 30 5 31 5 32 5 33 5 34 5 37 5 38 6 2 6 5 6 11 6 12 6 14 6 16 6 17 6 18 6 23 6 26 6 27 6 30 6 31 6 32 6 33 6 34 6 37 6 38 7 1 7 2 7 3 7 5 7 6 7 9 7 10 7 11 7 12 7 14 7 15 7 16 7 17 7 18 7 19 7 20 7 23 7 24 7 25 7 26 7 27 7 28 7 29 7 30 7 31 7 32 7 33 7 34 7 35 7 36 7 37 7 38 8 2 8 4 8 5 8 12 8 14 8 16 8 17 8 18 8 21 8 22 8 23 8 27 8 30 8 31 8 32 8 33 8 34 8 37 8 38 9 2 9 5 9 6 9 11 9 12 9 14 9 16 9 17 9 18 9 19 9 23 9 25 9 26 9 27 9 28 9 29 9 30 9 31 9 32 9 33 9 34 9 35 9 36 9 37 9 38 10 2 10 5 10 6 10 11 10 12 10 14 10 16 10 17 10 18 10 19 10 23 10 26 10 27 10 30 10 31 10 32 10 33 10 34 10 37 10 38 11 2 11 5 11 12 11 14 11 16 11 17 11 18 11 23 11 26 11 27 11 30 11 31 11 32 11 33 11 34 11 37 11 38 12 5 12 14 12 16 12 17 12 18 12 23 12 27 12 30 12 31 12 32 12 33 12 34 12 37 12 38 13 2 13 4 13 5 13 6 13 8 13 10 13 11 13 12 13 14 13 16 13 17 13 18 13 19 13 21 13 22 13 23 13 25 13 26 13 27 13 30 13 31 13 32 13 33 13 34 13 37 13 38 15 14 15 16 15 17 15 18 15 23 15 26 15 27 15 30 15 31 15 32 15 33 15 34 15 37 15 38 16 14 16 18 16 30 16 31 16 33 16 34 16 37 18 14 18 30 18 31 18 33 19 2 19 14 19 16 19 17 19 18 19 23 19 26 19 27 19 30 19 31 19 32 19 33 19 34 19 37 19 38 20 5 20 14 20 16 20 17 20 18 20 23 20 27 20 30 20 31 20 32 20 33 20 34 20 37 20 38 21 2 21 4 21 5 21 14 21 16 21 17 21 18 21 22 21 23 21 27 21 30 21 31 21 32 21 33 21 34 21 37 21 38 22 14 22 30 22 31 22 33 23 14 23 16 23 17 23 18 23 30 23 31 23 33 23 34 23 37 24 2 24 3 24 5 24 14 24 16 24 17 24 18 24 23 24 26 24 27 24 30 24 31 24 32 24 33 24 34 24 37 24 38 25 14 25 18 25 30 25 31 25 33 25 38 26 14 26 16 26 17 26 18 26 23 26 27 26 30 26 31 26 32 26 33 26 34 26 37 26 38 27 14 27 30 27 31 27 32 27 33 27 38 28 2 28 14 28 18 28 27 28 29 28 30 28 31 28 32 28 33 28 38 29 14 29 18 29 27 29 30 29 31 29 32 29 33 29 38 30 14 30 31 32 14 32 30 32 31 33 14 33 30 33 31 34 14 34 30 34 31 34 33 35 2 35 5 35 14 35 16 35 17 35 18 35 19 35 23 35 26 35 27 35 30 35 31 35 32 35 33 35 34 35 36 35 37 35 38 36 2 36 5 36 14 36 16 36 17 36 18 36 23 36 27 36 30 36 31 36 32 36 33 36 34 36 37 36 38 37 14 37 30 37 31 37 33 37 34
types 56 1 17 588 31 21 74 131 17 94 18 1228 22 22 205 89 19 64 21 39 95 32 125 216 19 32 42 149 20 35 19 521 21 19 871 22 36 480 34 69 77 30 74 211 21 35 187 19 1437 30 73 187 54 34 48 30 43
type 1 *<type 2>
type 2 "go/token.FileSet" <type 21>
 func (s <type 1>) Read (decode <esc:0x22> <type 3>) <type -19>
 func (s <type 1>) PositionFor (p <type 5>, adjusted <type -15>) (pos <type 6>)
 func (s <type 1>) .go/token.file (p <type 5>) <type 9>
 func (s <type 1>) File (p <type 5>) (f <type 9>)
 func (s <type 1>) Iterate (f <esc:0x1> <type 20>)
 func (s <type 1>) Write (encode <esc:0x22> <type 3>) <type -19>
 func (s <type 1>) AddFile (filename <type -16>, base <type -11>, size <type -11>) <type 9>
 func (s <type 1>) Position (p <type 5>) (pos <type 6>)
 func (s <type 1>) Base () <type -11>
type 3 (? <type 4>) <type -19>
type 4 interface { }
type 5 "go/token.Pos" <type -11>
 func (p <type 5>) IsValid () <type -15>
type 6 "go/token.Position" <type 8>
 func (pos <type 6>) String () <type -16>
 func (pos <esc:0x1> <type 7>) IsValid () <type -15>
type 7 *<type 6>
type 8 struct { Filename <type -16>; Offset <type -11>; Line <type -11>; Column <type -11>; }
type 9 *<type 10>
type 10 "go/token.File" <type 13>
 func (f <type 9>) Line (p <type 5>) <type -11>
 func (f <type 9>) .go/token.unpack (offset <type -11>, adjusted <type -15>) (filename <type -16>, line <type -11>, column <type -11>)
 func (f <esc:0x1> <type 9>) Pos (offset <type -11>) <type 5>
 func (f <type 9>) Position (p <type 5>) (pos <type 6>)
 func (f <esc:0x1> <type 9>) Base () <type -11>
 func (f <type 9>) AddLine (offset <type -11>)
 func (f <type 9>) SetLinesForContent (content <esc:0x1> <type 11>)
 func (f <type 9>) PositionFor (p <type 5>, adjusted <type -15>) (pos <type 6>)
 func (f <esc:0x22> <type 9>) Name () <type -16>
 func (f <esc:0x1> <type 9>) Size () <type -11>
 func (f <type 9>) .go/token.position (p <type 5>, adjusted <type -15>) (pos <type 6>)
 func (f <type 9>) AddLineColumnInfo (offset <type -11>, filename <type -16>, line <type -11>, column <type -11>)
 func (f <type 9>) LineCount () <type -11>
 func (f <type 9>) MergeLine (line <type -11>)
 func (f <type 9>) SetLines (lines <type 12>) <type -15>
 func (f <type 9>) LineStart (line <type -11>) <type 5>
 func (f <type 9>) AddLineInfo (offset <type -11>, filename <type -16>, line <type -11>)
 func (f <esc:0x1> <type 9>) Offset (p <type 5>) <type -11>
type 11 [] <type -20>
type 12 [] <type -11>
type 13 struct { .go/token.set <type 1>; .go/token.name <type -16>; .go/token.base <type -11>; .go/token.size <type -11>; .go/token.mutex <type 14>; .go/token.lines <type 12>; .go/token.infos <type 17>; }
type 14 "sync.Mutex" <type 16>
 func (m <type 15>) Lock ()
 func (m <type 15>) Unlock ()
type 15 *<type 14>
type 16 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 17 [] <type 18>
type 18 ".go/token.lineInfo" <type 19>
type 19 struct { Offset <type -11>; Filename <type -16>; Line <type -11>; Column <type -11>; }
type 20 (? <type 9>) <type -15>
type 21 struct { .go/token.mutex <type 22>; .go/token.base <type -11>; .go/token.files <type 27>; .go/token.last <type 9>; }
type 22 "sync.RWMutex" <type 26>
 func (rw <type 23>) RLock ()
 func (rw <type 23>) RUnlock ()
 func (rw <type 23>) Lock ()
 func (rw <type 23>) Unlock ()
 func (rw <esc:0x12> <type 23>) RLocker () ($ret8 <type 24>)
type 23 *<type 22>
type 24 "sync.Locker" <type 25>
type 25 interface { Lock (); Unlock (); }
type 26 struct { .sync.w <type 14>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 27 [] <type 9>
type 28 map [<type -16>] <type 29>
type 29 *<type 30>
type 30 "go/types.Package" <type 45>
 func (pkg <esc:0x9> <type 29>) String () <type -16>
 func (pkg <esc:0x1> <type 29>) MarkComplete ()
 func (pkg <esc:0x1> <type 29>) SetImports (list <type 31>)
 func (pkg <esc:0x22> <type 29>) Imports () <type 31>
 func (pkg <esc:0x1> <type 29>) Complete () <type -15>
 func (pkg <esc:0x22> <type 29>) Scope () <type 32>
 func (pkg <esc:0x22> <type 29>) Name () <type -16>
 func (pkg <esc:0x1> <type 29>) SetName (name <type -16>)
 func (pkg <esc:0x22> <type 29>) Path () <type -16>
type 31 [] <type 29>
type 32 *<type 33>
type 33 "go/types.Scope" <type 42>
 func (s <type 32>) String () <type -16>
 func (s <esc:0x22> <type 32>) Parent () <type 32>
 func (s <esc:0x1> <type 32>) Names () <type 34>
 func (s <esc:0x1> <type 32>) Len () <type -11>
 func (s <esc:0x1> <type 32>) Lookup (name <esc:0x1> <type -16>) <type 35>
 func (s <type 32>) Insert (obj <type 35>) <type 35>
 func (s <esc:0x1> <type 32>) NumChildren () <type -11>
 func (s <esc:0x32> <type 32>) Child (i <type -11>) <type 32>
 func (s <esc:0x12> <type 32>) LookupParent (name <esc:0x1> <type -16>, pos <type 5>) (? <type 32>, ? <type 35>)
 func (s <esc:0x1> <type 32>) End () <type 5>
 func (s <esc:0x1> <type 32>) Contains (pos <type 5>) <type -15>
 func (s <type 32>) Innermost (pos <type 5>) <type 32>
 func (s <esc:0x1> <type 32>) Pos () <type 5>
 func (s <type 32>) WriteTo (w <type 40>, n <type -11>, recurse <type -15>)
type 34 [] <type -16>
type 35 "go/types.Object" <type 36>
type 36 interface { Exported () <type -15>; Id () <type -16>; Name () <type -16>; Parent () <type 32>; Pkg () <type 29>; Pos () <type 5>; String () <type -16>; Type () <type 37>; .go/types.color () <type 39>; .go/types.order () <type -7>; .go/types.sameId (pkg <type 29>, name <type -16>) <type -15>; .go/types.scopePos () <type 5>; .go/types.setColor (color <type 39>); .go/types.setOrder (? <type -7>); .go/types.setParent (? <type 32>); .go/types.setScopePos (pos <type 5>); }
type 37 "go/types.Type" <type 38>
type 38 interface { String () <type -16>; Underlying () <type 37>; }
type 39 ".go/types.color" <type -7>
 func (c <type 39>) String () <type -16>
type 40 "io.Writer" <type 41>
type 41 interface { Write (p <type 11>) (n <type -11>, err <type -19>); }
type 42 struct { .go/types.parent <type 32>; .go/types.children <type 43>; .go/types.elems <type 44>; .go/types.pos <type 5>; .go/types.end <type 5>; .go/types.comment <type -16>; .go/types.isFunc <type -15>; }
type 43 [] <type 32>
type 44 map [<type -16>] <type 35>
type 45 struct { .go/types.path <type -16>; .go/types.name <type -16>; .go/types.scope <type 32>; .go/types.complete <type -15>; .go/types.imports <type 31>; .go/types.fake <type -15>; }
type 46 *<type 47>
type 47 "bufio.Reader" <type 50>
 func (b <esc:0x9> <type 46>) .bufio.writeBuf (w <type 40>) (? <type -4>, ? <type -19>)
 func (b <esc:0x10a> <type 46>) WriteTo (w <type 40>) (n <type -4>, err <type -19>)
 func (b <esc:0x10a> <type 46>) ReadString (delim <type -20>) (? <type -16>, ? <type -19>)
 func (b <esc:0x82a> <type 46>) ReadLine () (line <type 11>, isPrefix <type -15>, err <type -19>)
 func (b <esc:0x1> <type 46>) Size () <type -11>
 func (b <esc:0x9> <type 46>) Reset (r <type 48>)
 func (b <esc:0x9> <type 46>) .bufio.fill ()
 func (b <esc:0x1> <type 46>) UnreadByte () <type -19>
 func (b <esc:0x80a> <type 46>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x1> <type 46>) .bufio.reset (buf <type 11>, r <type 48>)
 func (b <esc:0x22> <type 46>) .bufio.readErr () <type -19>
 func (b <esc:0x1> <type 46>) UnreadRune () <type -19>
 func (b <esc:0x12a> <type 46>) ReadSlice (delim <type -20>) (line <type 11>, err <type -19>)
 func (b <esc:0x12a> <type 46>) Peek (n <type -11>) (? <type 11>, ? <type -19>)
 func (b <esc:0x10a> <type 46>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x10a> <type 46>) Discard (n <type -11>) (discarded <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 46>) Read (p <type 11>) (n <type -11>, err <type -19>)
 func (b <esc:0x10a> <type 46>) ReadBytes (delim <type -20>) (? <type 11>, ? <type -19>)
 func (b <esc:0x1> <type 46>) Buffered () <type -11>
type 48 "io.Reader" <type 49>
type 49 interface { Read (p <type 11>) (n <type -11>, err <type -19>); }
type 50 struct { .bufio.buf <type 11>; .bufio.rd <type 48>; .bufio.r <type -11>; .bufio.w <type -11>; .bufio.err <type -19>; .bufio.lastByte <type -11>; .bufio.lastRuneSize <type -11>; }
type 51 (path <type -16>) (? <type 52>, ? <type -19>)
type 52 "io.ReadCloser" <type 53>
type 53 interface { ? <type 48>; ? <type 54>; }
type 54 "io.Closer" <type 55>
type 55 interface { Close () <type -19>; }
func BImportData (fset <type 1>, imports <type 28>, data <type 11>, path <type -16>) (_ <type -11>, pkg <type 29>, err <type -19>)
func FindExportData (r <type 46>) (hdr <type -16>, err <type -19>)
func FindPkg (path <type -16>, srcDir <type -16>) (filename <type -16>, id <type -16>)
func Import (fset <type 1>, packages <type 28>, path <type -16>, srcDir <type -16>, lookup <esc:0x10a> <type 51>) (pkg <type 29>, err <type -19>)
checksum 6445BF19226C58718693B8D9DE0096BFB3231E99
v3;
package srcimporter
pkgpath go/internal/srcimporter
import fmt fmt "fmt"
import ast go/ast "go/ast"
import build go/build "go/build"
import parser go/parser "go/parser"
import token go/token "go/token"
import types go/types "go/types"
import io io "io"
import os os "os"
import filepath path/filepath "path/filepath"
import sync sync "sync"
indirectimport time time
init srcimporter go..z2finternal..z2fsrcimporter..import bufio bufio..import bytes bytes..import context context..import binary encoding..z2fbinary..import fmt fmt..import ast go..z2fast..import build go..z2fbuild..import constant go..z2fconstant..import doc go..z2fdoc..import parser go..z2fparser..import scanner go..z2fscanner..import token go..z2ftoken..import types go..z2ftypes..import cpu internal..z2fcpu..import goroot internal..z2fgoroot..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import ioutil io..z2fioutil..import log log..import big math..z2fbig..import rand math..z2frand..import os os..import exec os..z2fexec..import path path..import filepath path..z2ffilepath..import reflect reflect..import regexp regexp..import syntax regexp..z2fsyntax..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import template text..z2ftemplate..import parse text..z2ftemplate..z2fparse..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 1 2 1 14 1 18 1 30 1 31 1 33 1 38 2 14 2 18 2 30 2 31 2 33 2 38 3 5 3 14 3 16 3 17 3 18 3 23 3 27 3 30 3 31 3 32 3 33 3 34 3 37 3 38 4 14 4 18 4 27 4 30 4 31 4 32 4 33 4 38 5 14 5 16 5 17 5 18 5 23 5 27 5 30 5 31 5 32 5 33 5 34 5 37 5 38 6 2 6 5 6 11 6 12 6 14 6 16 6 17 6 18 6 23 6 26 6 27 6 30 6 31 6 32 6 33 6 34 6 37 6 38 7 1 7 2 7 3 7 5 7 6 7 9 7 10 7 11 7 12 7 14 7 15 7 16 7 17 7 18 7 19 7 20 7 23 7 24 7 25 7 26 7 27 7 28 7 29 7 30 7 31 7 32 7 33 7 34 7 35 7 36 7 37 7 38 8 2 8 4 8 5 8 12 8 14 8 16 8 17 8 18 8 21 8 22 8 23 8 27 8 30 8 31 8 32 8 33 8 34 8 37 8 38 9 2 9 5 9 6 9 11 9 12 9 14 9 16 9 17 9 18 9 19 9 23 9 25 9 26 9 27 9 28 9 29 9 30 9 31 9 32 9 33 9 34 9 35 9 36 9 37 9 38 10 2 10 5 10 6 10 11 10 12 10 14 10 16 10 17 10 18 10 19 10 23 10 26 10 27 10 30 10 31 10 32 10 33 10 34 10 37 10 38 11 2 11 5 11 12 11 14 11 16 11 17 11 18 11 23 11 26 11 27 11 30 11 31 11 32 11 33 11 34 11 37 11 38 12 5 12 14 12 16 12 17 12 18 12 23 12 27 12 30 12 31 12 32 12 33 12 34 12 37 12 38 13 2 13 4 13 5 13 6 13 8 13 10 13 11 13 12 13 14 13 16 13 17 13 18 13 19 13 21 13 22 13 23 13 25 13 26 13 27 13 30 13 31 13 32 13 33 13 34 13 37 13 38 15 14 15 16 15 17 15 18 15 23 15 26 15 27 15 30 15 31 15 32 15 33 15 34 15 37 15 38 16 14 16 18 16 30 16 31 16 33 16 34 16 37 18 14 18 30 18 31 18 33 19 2 19 14 19 16 19 17 19 18 19 23 19 26 19 27 19 30 19 31 19 32 19 33 19 34 19 37 19 38 20 5 20 14 20 16 20 17 20 18 20 23 20 27 20 30 20 31 20 32 20 33 20 34 20 37 20 38 21 2 21 4 21 5 21 14 21 16 21 17 21 18 21 22 21 23 21 27 21 30 21 31 21 32 21 33 21 34 21 37 21 38 22 14 22 30 22 31 22 33 23 14 23 16 23 17 23 18 23 30 23 31 23 33 23 34 23 37 24 2 24 3 24 5 24 14 24 16 24 17 24 18 24 23 24 26 24 27 24 30 24 31 24 32 24 33 24 34 24 37 24 38 25 14 25 18 25 30 25 31 25 33 25 38 26 14 26 16 26 17 26 18 26 23 26 27 26 30 26 31 26 32 26 33 26 34 26 37 26 38 27 14 27 30 27 31 27 32 27 33 27 38 28 2 28 14 28 18 28 27 28 29 28 30 28 31 28 32 28 33 28 38 29 14 29 18 29 27 29 30 29 31 29 32 29 33 29 38 30 14 30 31 32 14 32 30 32 31 33 14 33 30 33 31 34 14 34 30 34 31 34 33 35 2 35 5 35 14 35 16 35 17 35 18 35 19 35 23 35 26 35 27 35 30 35 31 35 32 35 33 35 34 35 36 35 37 35 38 36 2 36 5 36 14 36 16 36 17 36 18 36 23 36 27 36 30 36 31 36 32 36 33 36 34 36 37 36 38 37 14 37 30 37 31 37 33 37 34
types 140 2 663 187 17 2150 35 21 19 21 18 90 884 35 21 135 19 95 41 21 32 141 3300 19 73 75 19 525 165 21 31 91 21 36 112 19 356 83 195 22 34 48 30 72 30 43 19 183 76 35 21 19 129 53 372 40 35 37 74 53 54 19 609 19 1255 22 206 89 19 64 21 39 95 33 33 126 216 19 32 42 149 21 35 128 34 69 21 19 297 120 1029 19 19 522 21 19 876 36 483 77 31 74 216 22 36 188 237 22 36 19 42 23 21 130 171 21 293 72 21 86 102 82 23 34 58 34 59 21 226 58 37 23 21 187 106 21 185 75 270 23 22
type 1 "Importer" <type 2>
 func (p <type 108>) Import (path <type -16>) (? <type 91>, ? <type -19>)
 func (p <type 108>) ImportFrom (path <type -16>, srcDir <type -16>, mode <type 109>) (? <type 91>, ? <type -19>)
 func (p <type 108>) .go/internal/srcimporter.parseFiles (dir <type -16>, filenames <esc:0x9> <type 8>) (? <type 110>, ? <type -19>)
 func (p <esc:0x1> <type 108>) .go/internal/srcimporter.absPath (path <esc:0x12> <type -16>) (? <type -16>, ? <type -19>)
 func (p <esc:0x1> <type 108>) .go/internal/srcimporter.isAbsPath (path <type -16>) <type -15>
 func (p <esc:0x42> <type 108>) .go/internal/srcimporter.joinPath (elem ...<type -16>) <type -16>
type 2 struct { .go/internal/srcimporter.ctxt <type 3>; .go/internal/srcimporter.fset <type 60>; .go/internal/srcimporter.sizes <type 81>; .go/internal/srcimporter.packages <type 107>; }
type 3 *<type 4>
type 4 "go/build.Context" <type 53>
 func (ctxt <esc:0x1> <type 3>) .go/build.goodOSArchFile (name <type -16>, allTags <esc:0x1> <type 5>) <type -15>
 func (ctxt <esc:0x1> <type 3>) .go/build.shouldBuild (content <esc:0x1> <type 6>, allTags <esc:0x1> <type 5>, binaryOnly <esc:0x1> <type 7>) <type -15>
 func (ctxt <esc:0x6c0a> <type 3>) .go/build.matchFile (dir <type -16>, name <type -16>, allTags <esc:0x1> <type 5>, binaryOnly <esc:0x1> <type 7>) (match <type -15>, data <type 6>, filename <type -16>, err <type -19>)
 func (ctxt <esc:0x18a> <type 3>) MatchFile (dir <type -16>, name <type -16>) (match <type -15>, err <type -19>)
 func (ctxt <esc:0x32> <type 3>) .go/build.joinPath (elem ...<type -16>) <type -16>
 func (ctxt <esc:0x1> <type 3>) .go/build.match (name <type -16>, allTags <esc:0x1> <type 5>) <type -15>
 func (ctxt <esc:0x1> <type 3>) .go/build.makePathsAbsolute (args <esc:0x9> <type 8>, srcDir <type -16>)
 func (ctxt <esc:0x9> <type 3>) .go/build.gopath () <type 8>
 func (ctxt <type 3>) .go/build.importGo (p <esc:0x1> <type 9>, path <type -16>, srcDir <type -16>, mode <type 17>, gopath <esc:0x9> <type 8>) <type -19>
 func (ctxt <esc:0x32> <type 3>) .go/build.splitPathList (s <type -16>) <type 8>
 func (ctxt <esc:0x1> <type 3>) .go/build.isDir (path <type -16>) <type -15>
 func (ctxt <esc:0x1> <type 3>) .go/build.isAbsPath (path <type -16>) <type -15>
 func (ctxt <esc:0x9> <type 3>) .go/build.isFile (path <type -16>) <type -15>
 func (ctxt <type 3>) Import (path <type -16>, srcDir <type -16>, mode <type 17>) (? <type 9>, ? <type -19>)
 func (ctxt <esc:0x32> <type 3>) .go/build.hasSubdir (root <type -16>, dir <type -16>) (rel <type -16>, ok <type -15>)
 func (ctxt <type 3>) SrcDirs () <type 8>
 func (ctxt <esc:0x1b2> <type 3>) .go/build.readDir (path <type -16>) (? <type 18>, ? <type -19>)
 func (ctxt <esc:0x1b2> <type 3>) .go/build.openFile (path <type -16>) (? <type 39>, ? <type -19>)
 func (ctxt <esc:0x1> <type 3>) .go/build.saveCgo (filename <type -16>, di <esc:0x9> <type 9>, cg <esc:0x9> <type 45>) <type -19>
 func (ctxt <type 3>) ImportDir (dir <type -16>, mode <type 17>) (? <type 9>, ? <type -19>)
type 5 map [<type -16>] <type -15>
type 6 [] <type -20>
type 7 *<type -15>
type 8 [] <type -16>
type 9 *<type 10>
type 10 "go/build.Package" <type 11>
 func (p <esc:0x1> <type 9>) IsCommand () <type -15>
type 11 struct { Dir <type -16>; Name <type -16>; ImportComment <type -16>; Doc <type -16>; ImportPath <type -16>; Root <type -16>; SrcRoot <type -16>; PkgRoot <type -16>; PkgTargetRoot <type -16>; BinDir <type -16>; Goroot <type -15>; PkgObj <type -16>; AllTags <type 8>; ConflictDir <type -16>; BinaryOnly <type -15>; GoFiles <type 8>; CgoFiles <type 8>; IgnoredGoFiles <type 8>; InvalidGoFiles <type 8>; CFiles <type 8>; CXXFiles <type 8>; MFiles <type 8>; HFiles <type 8>; FFiles <type 8>; SFiles <type 8>; SwigFiles <type 8>; SwigCXXFiles <type 8>; SysoFiles <type 8>; CgoCFLAGS <type 8>; CgoCPPFLAGS <type 8>; CgoCXXFLAGS <type 8>; CgoFFLAGS <type 8>; CgoLDFLAGS <type 8>; CgoPkgConfig <type 8>; Imports <type 8>; ImportPos <type 12>; TestGoFiles <type 8>; TestImports <type 8>; TestImportPos <type 12>; XTestGoFiles <type 8>; XTestImports <type 8>; XTestImportPos <type 12>; }
type 12 map [<type -16>] <type 13>
type 13 [] <type 14>
type 14 "go/token.Position" <type 16>
 func (pos <esc:0x1> <type 15>) IsValid () <type -15>
 func (pos <type 14>) String () <type -16>
type 15 *<type 14>
type 16 struct { Filename <type -16>; Offset <type -11>; Line <type -11>; Column <type -11>; }
type 17 "go/build.ImportMode" <type -12>
type 18 [] <type 19>
type 19 "os.FileInfo" <type 20>
type 20 interface { IsDir () <type -15>; ModTime () <type 21>; Mode () <type 37>; Name () <type -16>; Size () <type -4>; Sys () <type 38>; }
type 21 "time.Time" <type 36>
 func (t <esc:0x1> <type 21>) AppendFormat (b <esc:0x12> <type 6>, layout <esc:0x1> <type -16>) <type 6>
 func (t <esc:0x1> <type 21>) Minute () <type -11>
 func (t <esc:0x1> <type 22>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 21>) UnixNano () <type -4>
 func (t <esc:0x1> <type 21>) After (u <esc:0x1> <type 21>) <type -15>
 func (t <esc:0x1> <type 22>) GobDecode (data <esc:0x1> <type 6>) <type -19>
 func (t <esc:0x1> <type 21>) Day () <type -11>
 func (t <esc:0x1> <type 22>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 21>) Unix () <type -4>
 func (t <esc:0x1> <type 21>) YearDay () <type -11>
 func (t <esc:0x12> <type 21>) Local () <type 21>
 func (t <esc:0x1> <type 21>) IsZero () <type -15>
 func (t <esc:0x1> <type 22>) .time.sec () <type -4>
 func (t <type 21>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 21>
 func (t <esc:0x1> <type 21>) .time.date (full <type -15>) (year <type -11>, month <type 23>, day <type -11>, yday <type -11>)
 func (t <esc:0x1> <type 21>) MarshalJSON () (? <type 6>, ? <type -19>)
 func (t <esc:0x1> <type 21>) Weekday () <type 24>
 func (t <esc:0x1> <type 21>) MarshalText () (? <type 6>, ? <type -19>)
 func (t <esc:0x1> <type 22>) .time.stripMono ()
 func (t <esc:0x1> <type 21>) Hour () <type -11>
 func (t <esc:0x1> <type 21>) .time.abs () <type -8>
 func (t <esc:0x1> <type 21>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 22>) UnmarshalBinary (data <esc:0x1> <type 6>) <type -19>
 func (t <esc:0x1> <type 21>) Second () <type -11>
 func (t <esc:0x1> <type 22>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 22>) UnmarshalJSON (data <esc:0x1> <type 6>) <type -19>
 func (t <esc:0x1> <type 21>) Year () <type -11>
 func (t <esc:0x1> <type 22>) UnmarshalText (data <esc:0x1> <type 6>) <type -19>
 func (t <esc:0x1> <type 21>) Month () <type 23>
 func (t <esc:0x12> <type 21>) Location () <type 25>
 func (t <esc:0x1> <type 21>) GobEncode () (? <type 6>, ? <type -19>)
 func (t <esc:0x1> <type 22>) .time.setLoc (loc <type 25>)
 func (t <esc:0x32> <type 21>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 21>) Before (u <esc:0x1> <type 21>) <type -15>
 func (t <esc:0x1> <type 22>) .time.nsec () <type -3>
 func (t <esc:0x12> <type 21>) Round (d <type 35>) <type 21>
 func (t <esc:0x1> <type 21>) String () <type -16>
 func (t <esc:0x1> <type 21>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x12> <type 21>) Add (d <type 35>) <type 21>
 func (t <esc:0x12> <type 21>) Truncate (d <type 35>) <type 21>
 func (t <esc:0x1> <type 21>) Date () (year <type -11>, month <type 23>, day <type -11>)
 func (t <esc:0x12> <type 21>) UTC () <type 21>
 func (t <esc:0x1> <type 21>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 21>) In (loc <type 25>) <type 21>
 func (t <esc:0x1> <type 21>) Equal (u <esc:0x1> <type 21>) <type -15>
 func (t <esc:0x32> <type 21>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 21>) Sub (u <esc:0x1> <type 21>) <type 35>
 func (t <esc:0x1> <type 21>) MarshalBinary () (? <type 6>, ? <type -19>)
 func (t <esc:0x1> <type 21>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 22>) .time.mono () <type -4>
type 22 *<type 21>
type 23 "time.Month" <type -11>
 func (m <type 23>) String () <type -16>
type 24 "time.Weekday" <type -11>
 func (d <type 24>) String () <type -16>
type 25 *<type 26>
type 26 "time.Location" <type 27>
 func (l <esc:0x12> <type 25>) .time.get () <type 25>
 func (l <esc:0x22> <type 25>) String () <type -16>
 func (l <esc:0x32> <type 25>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 25>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 25>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 25>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 27 struct { .time.name <type -16>; .time.zone <type 28>; .time.tx <type 31>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 34>; }
type 28 [] <type 29>
type 29 ".time.zone" <type 30>
type 30 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 31 [] <type 32>
type 32 ".time.zoneTrans" <type 33>
type 33 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 34 *<type 29>
type 35 "time.Duration" <type -4>
 func (d <type 35>) String () <type -16>
 func (d <type 35>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 35>) Seconds () <type -10>
 func (d <type 35>) Minutes () <type -10>
 func (d <type 35>) Hours () <type -10>
 func (d <type 35>) Truncate (m <type 35>) <type 35>
 func (d <type 35>) Round (m <type 35>) <type 35>
type 36 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 25>; }
type 37 "os.FileMode" <type -7>
 func (m <type 37>) String () <type -16>
 func (m <type 37>) IsRegular () <type -15>
 func (m <type 37>) IsDir () <type -15>
 func (m <type 37>) Perm () <type 37>
type 38 interface { }
type 39 "io.ReadCloser" <type 40>
type 40 interface { ? <type 41>; ? <type 43>; }
type 41 "io.Reader" <type 42>
type 42 interface { Read (p <type 6>) (n <type -11>, err <type -19>); }
type 43 "io.Closer" <type 44>
type 44 interface { Close () <type -19>; }
type 45 *<type 46>
type 46 "go/ast.CommentGroup" <type 48>
 func (g <esc:0x9> <type 45>) Text () <type -16>
 func (g <esc:0x1> <type 45>) End () <type 47>
 func (g <esc:0x1> <type 45>) Pos () <type 47>
type 47 "go/token.Pos" <type -11>
 func (p <type 47>) IsValid () <type -15>
type 48 struct { List <type 49>; }
type 49 [] <type 50>
type 50 *<type 51>
type 51 "go/ast.Comment" <type 52>
 func (c <esc:0x1> <type 50>) End () <type 47>
 func (c <esc:0x1> <type 50>) Pos () <type 47>
type 52 struct { Slash <type 47>; Text <type -16>; }
type 53 struct { GOARCH <type -16>; GOOS <type -16>; GOROOT <type -16>; GOPATH <type -16>; CgoEnabled <type -15>; UseAllFiles <type -15>; Compiler <type -16>; BuildTags <type 8>; ReleaseTags <type 8>; InstallSuffix <type -16>; JoinPath <type 54>; SplitPathList <type 55>; IsAbsPath <type 56>; IsDir <type 56>; HasSubdir <type 57>; ReadDir <type 58>; OpenFile <type 59>; }
type 54 (elem ...<type -16>) <type -16>
type 55 (list <type -16>) <type 8>
type 56 (path <type -16>) <type -15>
type 57 (root <type -16>, dir <type -16>) (rel <type -16>, ok <type -15>)
type 58 (dir <type -16>) (? <type 18>, ? <type -19>)
type 59 (path <type -16>) (? <type 39>, ? <type -19>)
type 60 *<type 61>
type 61 "go/token.FileSet" <type 74>
 func (s <type 60>) Base () <type -11>
 func (s <type 60>) Position (p <type 47>) (pos <type 14>)
 func (s <type 60>) AddFile (filename <type -16>, base <type -11>, size <type -11>) <type 62>
 func (s <type 60>) Write (encode <esc:0x22> <type 72>) <type -19>
 func (s <type 60>) Iterate (f <esc:0x1> <type 73>)
 func (s <type 60>) File (p <type 47>) (f <type 62>)
 func (s <type 60>) .go/token.file (p <type 47>) <type 62>
 func (s <type 60>) PositionFor (p <type 47>, adjusted <type -15>) (pos <type 14>)
 func (s <type 60>) Read (decode <esc:0x22> <type 72>) <type -19>
type 62 *<type 63>
type 63 "go/token.File" <type 65>
 func (f <esc:0x1> <type 62>) Offset (p <type 47>) <type -11>
 func (f <type 62>) AddLineInfo (offset <type -11>, filename <type -16>, line <type -11>)
 func (f <type 62>) LineStart (line <type -11>) <type 47>
 func (f <type 62>) SetLines (lines <type 64>) <type -15>
 func (f <type 62>) MergeLine (line <type -11>)
 func (f <type 62>) Line (p <type 47>) <type -11>
 func (f <type 62>) .go/token.unpack (offset <type -11>, adjusted <type -15>) (filename <type -16>, line <type -11>, column <type -11>)
 func (f <esc:0x1> <type 62>) Pos (offset <type -11>) <type 47>
 func (f <type 62>) Position (p <type 47>) (pos <type 14>)
 func (f <esc:0x1> <type 62>) Base () <type -11>
 func (f <type 62>) AddLine (offset <type -11>)
 func (f <type 62>) SetLinesForContent (content <esc:0x1> <type 6>)
 func (f <esc:0x22> <type 62>) Name () <type -16>
 func (f <type 62>) PositionFor (p <type 47>, adjusted <type -15>) (pos <type 14>)
 func (f <esc:0x1> <type 62>) Size () <type -11>
 func (f <type 62>) LineCount () <type -11>
 func (f <type 62>) AddLineColumnInfo (offset <type -11>, filename <type -16>, line <type -11>, column <type -11>)
 func (f <type 62>) .go/token.position (p <type 47>, adjusted <type -15>) (pos <type 14>)
type 64 [] <type -11>
type 65 struct { .go/token.set <type 60>; .go/token.name <type -16>; .go/token.base <type -11>; .go/token.size <type -11>; .go/token.mutex <type 66>; .go/token.lines <type 64>; .go/token.infos <type 69>; }
type 66 "sync.Mutex" <type 68>
 func (m <type 67>) Unlock ()
 func (m <type 67>) Lock ()
type 67 *<type 66>
type 68 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 69 [] <type 70>
type 70 ".go/token.lineInfo" <type 71>
type 71 struct { Offset <type -11>; Filename <type -16>; Line <type -11>; Column <type -11>; }
type 72 (? <type 38>) <type -19>
type 73 (? <type 62>) <type -15>
type 74 struct { .go/token.mutex <type 75>; .go/token.base <type -11>; .go/token.files <type 80>; .go/token.last <type 62>; }
type 75 "sync.RWMutex" <type 79>
 func (rw <esc:0x12> <type 76>) RLocker () ($ret8 <type 77>)
 func (rw <type 76>) Unlock ()
 func (rw <type 76>) Lock ()
 func (rw <type 76>) RUnlock ()
 func (rw <type 76>) RLock ()
type 76 *<type 75>
type 77 "sync.Locker" <type 78>
type 78 interface { Lock (); Unlock (); }
type 79 struct { .sync.w <type 66>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 80 [] <type 62>
type 81 "go/types.Sizes" <type 82>
type 82 interface { Alignof (T <type 83>) <type -4>; Offsetsof (fields <type 85>) <type 106>; Sizeof (T <type 83>) <type -4>; }
type 83 "go/types.Type" <type 84>
type 84 interface { String () <type -16>; Underlying () <type 83>; }
type 85 [] <type 86>
type 86 *<type 87>
type 87 "go/types.Var" <type 88>
 func (? <esc:0x1> <type 86>) .go/types.isDependency ()
 func (obj <type 86>) String () <type -16>
 func (obj <esc:0x1> <type 86>) IsField () <type -15>
 func (obj <esc:0x1> <type 86>) Embedded () <type -15>
 func (obj <esc:0x1> <type 86>) Anonymous () <type -15>
type 88 struct { ? <type 89>; .go/types.embedded <type -15>; .go/types.isField <type -15>; .go/types.used <type -15>; }
type 89 ".go/types.object" <type 105>
 func (obj <esc:0x1> <type 90>) .go/types.sameId (pkg <esc:0x1> <type 91>, name <esc:0x1> <type -16>) <type -15>
 func (obj <esc:0x1> <type 90>) .go/types.setScopePos (pos <type 47>)
 func (obj <esc:0x1> <type 90>) .go/types.setColor (color <type 98>)
 func (obj <esc:0x1> <type 90>) .go/types.color () <type 98>
 func (obj <esc:0x22> <type 90>) Parent () <type 94>
 func (obj <esc:0x22> <type 90>) Name () <type -16>
 func (obj <esc:0x22> <type 90>) Pkg () <type 91>
 func (obj <esc:0x22> <type 90>) Type () <type 83>
 func (obj <esc:0x1> <type 90>) Pos () <type 47>
 func (obj <esc:0x1> <type 90>) Exported () <type -15>
 func (obj <esc:0x1> <type 90>) .go/types.scopePos () <type 47>
 func (obj <esc:0x22> <type 90>) Id () <type -16>
 func (obj <esc:0x1> <type 90>) String () <type -16>
 func (obj <esc:0x1> <type 90>) .go/types.setParent (parent <type 94>)
 func (obj <esc:0x1> <type 90>) .go/types.order () <type -7>
 func (obj <esc:0x1> <type 90>) .go/types.setOrder (order <type -7>)
type 90 *<type 89>
type 91 *<type 92>
type 92 "go/types.Package" <type 104>
 func (pkg <esc:0x9> <type 91>) String () <type -16>
 func (pkg <esc:0x1> <type 91>) MarkComplete ()
 func (pkg <esc:0x1> <type 91>) SetImports (list <type 93>)
 func (pkg <esc:0x22> <type 91>) Imports () <type 93>
 func (pkg <esc:0x1> <type 91>) Complete () <type -15>
 func (pkg <esc:0x22> <type 91>) Scope () <type 94>
 func (pkg <esc:0x22> <type 91>) Name () <type -16>
 func (pkg <esc:0x1> <type 91>) SetName (name <type -16>)
 func (pkg <esc:0x22> <type 91>) Path () <type -16>
type 93 [] <type 91>
type 94 *<type 95>
type 95 "go/types.Scope" <type 101>
 func (s <type 94>) String () <type -16>
 func (s <esc:0x22> <type 94>) Parent () <type 94>
 func (s <esc:0x1> <type 94>) Names () <type 8>
 func (s <esc:0x1> <type 94>) Len () <type -11>
 func (s <esc:0x1> <type 94>) Lookup (name <esc:0x1> <type -16>) <type 96>
 func (s <type 94>) Insert (obj <type 96>) <type 96>
 func (s <esc:0x1> <type 94>) NumChildren () <type -11>
 func (s <esc:0x32> <type 94>) Child (i <type -11>) <type 94>
 func (s <esc:0x12> <type 94>) LookupParent (name <esc:0x1> <type -16>, pos <type 47>) (? <type 94>, ? <type 96>)
 func (s <esc:0x1> <type 94>) End () <type 47>
 func (s <esc:0x1> <type 94>) Contains (pos <type 47>) <type -15>
 func (s <type 94>) Innermost (pos <type 47>) <type 94>
 func (s <esc:0x1> <type 94>) Pos () <type 47>
 func (s <type 94>) WriteTo (w <type 99>, n <type -11>, recurse <type -15>)
type 96 "go/types.Object" <type 97>
type 97 interface { Exported () <type -15>; Id () <type -16>; Name () <type -16>; Parent () <type 94>; Pkg () <type 91>; Pos () <type 47>; String () <type -16>; Type () <type 83>; .go/types.color () <type 98>; .go/types.order () <type -7>; .go/types.sameId (pkg <type 91>, name <type -16>) <type -15>; .go/types.scopePos () <type 47>; .go/types.setColor (color <type 98>); .go/types.setOrder (? <type -7>); .go/types.setParent (? <type 94>); .go/types.setScopePos (pos <type 47>); }
type 98 ".go/types.color" <type -7>
 func (c <type 98>) String () <type -16>
type 99 "io.Writer" <type 100>
type 100 interface { Write (p <type 6>) (n <type -11>, err <type -19>); }
type 101 struct { .go/types.parent <type 94>; .go/types.children <type 102>; .go/types.elems <type 103>; .go/types.pos <type 47>; .go/types.end <type 47>; .go/types.comment <type -16>; .go/types.isFunc <type -15>; }
type 102 [] <type 94>
type 103 map [<type -16>] <type 96>
type 104 struct { .go/types.path <type -16>; .go/types.name <type -16>; .go/types.scope <type 94>; .go/types.complete <type -15>; .go/types.imports <type 93>; .go/types.fake <type -15>; }
type 105 struct { .go/types.parent <type 94>; .go/types.pos <type 47>; .go/types.pkg <type 91>; .go/types.name <type -16>; .go/types.typ <type 83>; .go/types.order_ <type -7>; .go/types.color_ <type 98>; .go/types.scopePos_ <type 47>; }
type 106 [] <type -4>
type 107 map [<type -16>] <type 91>
type 108 *<type 1>
type 109 "go/types.ImportMode" <type -11>
type 110 [] <type 111>
type 111 *<type 112>
type 112 "go/ast.File" <type 113>
 func (f <esc:0x9> <type 111>) End () <type 47>
 func (f <esc:0x1> <type 111>) Pos () <type 47>
type 113 struct { Doc <type 45>; Package <type 47>; Name <type 114>; Decls <type 121>; Scope <type 126>; Imports <type 130>; Unresolved <type 138>; Comments <type 139>; }
type 114 *<type 115>
type 115 "go/ast.Ident" <type 116>
 func (id <esc:0x22> <type 114>) String () <type -16>
 func (id <esc:0x1> <type 114>) IsExported () <type -15>
 func (? <esc:0x1> <type 114>) .go/ast.exprNode ()
 func (x <esc:0x1> <type 114>) End () <type 47>
 func (x <esc:0x1> <type 114>) Pos () <type 47>
type 116 struct { NamePos <type 47>; Name <type -16>; Obj <type 117>; }
type 117 *<type 118>
type 118 "go/ast.Object" <type 119>
 func (obj <esc:0x1> <type 117>) Pos () <type 47>
type 119 struct { Kind <type 120>; Name <type -16>; Decl <type 38>; Data <type 38>; Type <type 38>; }
type 120 "go/ast.ObjKind" <type -11>
 func (kind <type 120>) String () <type -16>
type 121 [] <type 122>
type 122 "go/ast.Decl" <type 123>
type 123 interface { ? <type 124>; .go/ast.declNode (); }
type 124 "go/ast.Node" <type 125>
type 125 interface { End () <type 47>; Pos () <type 47>; }
type 126 *<type 127>
type 127 "go/ast.Scope" <type 128>
 func (s <type 126>) String () <type -16>
 func (s <esc:0x1> <type 126>) Insert (obj <type 117>) (alt <type 117>)
 func (s <esc:0x1> <type 126>) Lookup (name <esc:0x1> <type -16>) <type 117>
type 128 struct { Outer <type 126>; Objects <type 129>; }
type 129 map [<type -16>] <type 117>
type 130 [] <type 131>
type 131 *<type 132>
type 132 "go/ast.ImportSpec" <type 133>
 func (? <esc:0x1> <type 131>) .go/ast.specNode ()
 func (s <esc:0x1> <type 131>) End () <type 47>
 func (s <esc:0x1> <type 131>) Pos () <type 47>
type 133 struct { Doc <type 45>; Name <type 114>; Path <type 134>; Comment <type 45>; EndPos <type 47>; }
type 134 *<type 135>
type 135 "go/ast.BasicLit" <type 136>
 func (? <esc:0x1> <type 134>) .go/ast.exprNode ()
 func (x <esc:0x1> <type 134>) End () <type 47>
 func (x <esc:0x1> <type 134>) Pos () <type 47>
type 136 struct { ValuePos <type 47>; Kind <type 137>; Value <type -16>; }
type 137 "go/token.Token" <type -11>
 func (tok <type 137>) String () <type -16>
 func (op <type 137>) Precedence () <type -11>
 func (tok <type 137>) IsLiteral () <type -15>
 func (tok <type 137>) IsOperator () <type -15>
 func (tok <type 137>) IsKeyword () <type -15>
type 138 [] <type 114>
type 139 [] <type 45>
func New (ctxt <type 3>, fset <type 60>, packages <type 107>) <type 108>
checksum 1E8608FA8626BC80FF27078479498435673B862B
v3;
package parser
pkgpath go/parser
import bytes bytes "bytes"
import errors errors "errors"
import fmt fmt "fmt"
import ast go/ast "go/ast"
import scanner go/scanner "go/scanner"
import token go/token "go/token"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import os os "os"
import filepath path/filepath "path/filepath"
import strconv strconv "strconv"
import strings strings "strings"
import unicode unicode "unicode"
indirectimport sync sync
indirectimport time time
init parser go..z2fparser..import bytes bytes..import fmt fmt..import ast go..z2fast..import scanner go..z2fscanner..import token go..z2ftoken..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import ioutil io..z2fioutil..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 1 6 1 9 1 14 1 15 1 17 1 20 2 6 2 7 2 8 2 9 2 11 2 13 2 14 2 15 2 16 2 17 2 18 2 19 2 20 3 1 3 2 3 4 3 5 3 6 3 7 3 8 3 9 3 11 3 12 3 13 3 14 3 15 3 16 3 17 3 18 3 19 3 20 4 1 4 2 4 5 4 6 4 7 4 8 4 9 4 11 4 12 4 13 4 14 4 15 4 16 4 17 4 18 4 19 4 20 5 2 5 6 5 7 5 8 5 9 5 11 5 13 5 14 5 15 5 16 5 17 5 18 5 19 5 20 7 6 7 9 7 14 7 15 7 17 7 18 7 19 9 6 9 14 9 15 9 17 10 1 10 6 10 7 10 8 10 9 10 11 10 12 10 13 10 14 10 15 10 16 10 17 10 18 10 19 10 20 11 6 11 7 11 8 11 9 11 14 11 15 11 17 11 18 11 19 12 6 12 7 12 8 12 9 12 11 12 13 12 14 12 15 12 16 12 17 12 18 12 19 12 20 13 6 13 14 13 15 13 16 13 17 13 20 14 6 14 15 16 6 16 14 16 15 17 6 17 14 17 15 18 6 18 14 18 15 18 17 19 6 19 14 19 15 19 17 19 18
types 92 2 25 17 590 74 131 17 94 17 1227 22 22 205 89 19 64 21 39 95 33 22 32 125 216 19 32 42 149 20 33 32 141 3310 19 73 356 19 525 165 21 31 91 21 36 112 19 75 83 195 35 19 127 89 19 218 19 82 100 80 55 35 35 19 124 163 19 181 35 21 19 127 52 19 284 69 21 32 56 32 56 21 19 180 102 19 178 72 264 21 21 32 56
type 1 "Mode" <type -12>
type 2 *<type 3>
type 3 "go/token.FileSet" <type 22>
 func (s <type 2>) Base () <type -11>
 func (s <type 2>) Position (p <type 4>) (pos <type 5>)
 func (s <type 2>) AddFile (filename <type -16>, base <type -11>, size <type -11>) <type 8>
 func (s <type 2>) Write (encode <esc:0x22> <type 19>) <type -19>
 func (s <type 2>) Iterate (f <esc:0x1> <type 21>)
 func (s <type 2>) File (p <type 4>) (f <type 8>)
 func (s <type 2>) .go/token.file (p <type 4>) <type 8>
 func (s <type 2>) PositionFor (p <type 4>, adjusted <type -15>) (pos <type 5>)
 func (s <type 2>) Read (decode <esc:0x22> <type 19>) <type -19>
type 4 "go/token.Pos" <type -11>
 func (p <type 4>) IsValid () <type -15>
type 5 "go/token.Position" <type 7>
 func (pos <esc:0x1> <type 6>) IsValid () <type -15>
 func (pos <type 5>) String () <type -16>
type 6 *<type 5>
type 7 struct { Filename <type -16>; Offset <type -11>; Line <type -11>; Column <type -11>; }
type 8 *<type 9>
type 9 "go/token.File" <type 12>
 func (f <esc:0x1> <type 8>) Offset (p <type 4>) <type -11>
 func (f <type 8>) AddLineInfo (offset <type -11>, filename <type -16>, line <type -11>)
 func (f <type 8>) LineStart (line <type -11>) <type 4>
 func (f <type 8>) SetLines (lines <type 10>) <type -15>
 func (f <type 8>) MergeLine (line <type -11>)
 func (f <type 8>) Line (p <type 4>) <type -11>
 func (f <type 8>) .go/token.unpack (offset <type -11>, adjusted <type -15>) (filename <type -16>, line <type -11>, column <type -11>)
 func (f <esc:0x1> <type 8>) Pos (offset <type -11>) <type 4>
 func (f <type 8>) Position (p <type 4>) (pos <type 5>)
 func (f <esc:0x1> <type 8>) Base () <type -11>
 func (f <type 8>) AddLine (offset <type -11>)
 func (f <type 8>) SetLinesForContent (content <esc:0x1> <type 11>)
 func (f <esc:0x22> <type 8>) Name () <type -16>
 func (f <type 8>) PositionFor (p <type 4>, adjusted <type -15>) (pos <type 5>)
 func (f <esc:0x1> <type 8>) Size () <type -11>
 func (f <type 8>) LineCount () <type -11>
 func (f <type 8>) AddLineColumnInfo (offset <type -11>, filename <type -16>, line <type -11>, column <type -11>)
 func (f <type 8>) .go/token.position (p <type 4>, adjusted <type -15>) (pos <type 5>)
type 10 [] <type -11>
type 11 [] <type -20>
type 12 struct { .go/token.set <type 2>; .go/token.name <type -16>; .go/token.base <type -11>; .go/token.size <type -11>; .go/token.mutex <type 13>; .go/token.lines <type 10>; .go/token.infos <type 16>; }
type 13 "sync.Mutex" <type 15>
 func (m <type 14>) Unlock ()
 func (m <type 14>) Lock ()
type 14 *<type 13>
type 15 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 16 [] <type 17>
type 17 ".go/token.lineInfo" <type 18>
type 18 struct { Offset <type -11>; Filename <type -16>; Line <type -11>; Column <type -11>; }
type 19 (? <type 20>) <type -19>
type 20 interface { }
type 21 (? <type 8>) <type -15>
type 22 struct { .go/token.mutex <type 23>; .go/token.base <type -11>; .go/token.files <type 28>; .go/token.last <type 8>; }
type 23 "sync.RWMutex" <type 27>
 func (rw <esc:0x12> <type 24>) RLocker () ($ret8 <type 25>)
 func (rw <type 24>) Unlock ()
 func (rw <type 24>) Lock ()
 func (rw <type 24>) RUnlock ()
 func (rw <type 24>) RLock ()
type 24 *<type 23>
type 25 "sync.Locker" <type 26>
type 26 interface { Lock (); Unlock (); }
type 27 struct { .sync.w <type 13>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 28 [] <type 8>
type 29 (? <type 30>) <type -15>
type 30 "os.FileInfo" <type 31>
type 31 interface { IsDir () <type -15>; ModTime () <type 32>; Mode () <type 48>; Name () <type -16>; Size () <type -4>; Sys () <type 20>; }
type 32 "time.Time" <type 47>
 func (t <esc:0x1> <type 33>) .time.sec () <type -4>
 func (t <type 32>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 32>
 func (t <esc:0x1> <type 32>) .time.date (full <type -15>) (year <type -11>, month <type 34>, day <type -11>, yday <type -11>)
 func (t <esc:0x1> <type 32>) MarshalJSON () (? <type 11>, ? <type -19>)
 func (t <esc:0x1> <type 33>) .time.stripMono ()
 func (t <esc:0x1> <type 32>) MarshalText () (? <type 11>, ? <type -19>)
 func (t <esc:0x1> <type 33>) .time.mono () <type -4>
 func (t <esc:0x1> <type 32>) Sub (u <esc:0x1> <type 32>) <type 35>
 func (t <esc:0x32> <type 32>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x12> <type 32>) UTC () <type 32>
 func (t <esc:0x1> <type 32>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 32>) In (loc <type 36>) <type 32>
 func (t <esc:0x1> <type 32>) Equal (u <esc:0x1> <type 32>) <type -15>
 func (t <esc:0x1> <type 32>) IsZero () <type -15>
 func (t <esc:0x12> <type 32>) Local () <type 32>
 func (t <esc:0x1> <type 32>) YearDay () <type -11>
 func (t <esc:0x1> <type 32>) Unix () <type -4>
 func (t <esc:0x1> <type 32>) Weekday () <type 46>
 func (t <esc:0x1> <type 32>) Date () (year <type -11>, month <type 34>, day <type -11>)
 func (t <esc:0x1> <type 33>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 32>) MarshalBinary () (? <type 11>, ? <type -19>)
 func (t <esc:0x1> <type 32>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 32>) Day () <type -11>
 func (t <esc:0x1> <type 33>) GobDecode (data <esc:0x1> <type 11>) <type -19>
 func (t <esc:0x1> <type 32>) After (u <esc:0x1> <type 32>) <type -15>
 func (t <esc:0x1> <type 32>) UnixNano () <type -4>
 func (t <esc:0x1> <type 33>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 32>) Minute () <type -11>
 func (t <esc:0x1> <type 32>) AppendFormat (b <esc:0x12> <type 11>, layout <esc:0x1> <type -16>) <type 11>
 func (t <esc:0x12> <type 32>) Truncate (d <type 35>) <type 32>
 func (t <esc:0x12> <type 32>) Add (d <type 35>) <type 32>
 func (t <esc:0x1> <type 32>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 32>) String () <type -16>
 func (t <esc:0x12> <type 32>) Round (d <type 35>) <type 32>
 func (t <esc:0x1> <type 33>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 32>) Before (u <esc:0x1> <type 32>) <type -15>
 func (t <esc:0x32> <type 32>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 33>) .time.setLoc (loc <type 36>)
 func (t <esc:0x1> <type 33>) UnmarshalText (data <esc:0x1> <type 11>) <type -19>
 func (t <esc:0x1> <type 33>) UnmarshalBinary (data <esc:0x1> <type 11>) <type -19>
 func (t <esc:0x1> <type 32>) Hour () <type -11>
 func (t <esc:0x1> <type 32>) .time.abs () <type -8>
 func (t <esc:0x1> <type 32>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 32>) Year () <type -11>
 func (t <esc:0x1> <type 33>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 33>) UnmarshalJSON (data <esc:0x1> <type 11>) <type -19>
 func (t <esc:0x1> <type 32>) Second () <type -11>
 func (t <esc:0x1> <type 32>) Month () <type 34>
 func (t <esc:0x12> <type 32>) Location () <type 36>
 func (t <esc:0x1> <type 32>) GobEncode () (? <type 11>, ? <type -19>)
type 33 *<type 32>
type 34 "time.Month" <type -11>
 func (m <type 34>) String () <type -16>
type 35 "time.Duration" <type -4>
 func (d <type 35>) String () <type -16>
 func (d <type 35>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 35>) Seconds () <type -10>
 func (d <type 35>) Minutes () <type -10>
 func (d <type 35>) Hours () <type -10>
 func (d <type 35>) Truncate (m <type 35>) <type 35>
 func (d <type 35>) Round (m <type 35>) <type 35>
type 36 *<type 37>
type 37 "time.Location" <type 38>
 func (l <esc:0x12> <type 36>) .time.get () <type 36>
 func (l <esc:0x22> <type 36>) String () <type -16>
 func (l <esc:0x32> <type 36>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 36>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 36>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 36>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 38 struct { .time.name <type -16>; .time.zone <type 39>; .time.tx <type 42>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 45>; }
type 39 [] <type 40>
type 40 ".time.zone" <type 41>
type 41 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 42 [] <type 43>
type 43 ".time.zoneTrans" <type 44>
type 44 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 45 *<type 40>
type 46 "time.Weekday" <type -11>
 func (d <type 46>) String () <type -16>
type 47 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 36>; }
type 48 "os.FileMode" <type -7>
 func (m <type 48>) String () <type -16>
 func (m <type 48>) IsRegular () <type -15>
 func (m <type 48>) IsDir () <type -15>
 func (m <type 48>) Perm () <type 48>
type 49 map [<type -16>] <type 50>
type 50 *<type 51>
type 51 "go/ast.Package" <type 52>
 func (p <esc:0x1> <type 50>) End () <type 4>
 func (p <esc:0x1> <type 50>) Pos () <type 4>
type 52 struct { Name <type -16>; Scope <type 53>; Imports <type 60>; Files <type 61>; }
type 53 *<type 54>
type 54 "go/ast.Scope" <type 59>
 func (s <type 53>) String () <type -16>
 func (s <esc:0x1> <type 53>) Insert (obj <type 55>) (alt <type 55>)
 func (s <esc:0x1> <type 53>) Lookup (name <esc:0x1> <type -16>) <type 55>
type 55 *<type 56>
type 56 "go/ast.Object" <type 57>
 func (obj <esc:0x1> <type 55>) Pos () <type 4>
type 57 struct { Kind <type 58>; Name <type -16>; Decl <type 20>; Data <type 20>; Type <type 20>; }
type 58 "go/ast.ObjKind" <type -11>
 func (kind <type 58>) String () <type -16>
type 59 struct { Outer <type 53>; Objects <type 60>; }
type 60 map [<type -16>] <type 55>
type 61 map [<type -16>] <type 62>
type 62 *<type 63>
type 63 "go/ast.File" <type 64>
 func (f <esc:0x9> <type 62>) End () <type 4>
 func (f <esc:0x1> <type 62>) Pos () <type 4>
type 64 struct { Doc <type 65>; Package <type 4>; Name <type 72>; Decls <type 75>; Scope <type 53>; Imports <type 80>; Unresolved <type 88>; Comments <type 89>; }
type 65 *<type 66>
type 66 "go/ast.CommentGroup" <type 67>
 func (g <esc:0x9> <type 65>) Text () <type -16>
 func (g <esc:0x1> <type 65>) End () <type 4>
 func (g <esc:0x1> <type 65>) Pos () <type 4>
type 67 struct { List <type 68>; }
type 68 [] <type 69>
type 69 *<type 70>
type 70 "go/ast.Comment" <type 71>
 func (c <esc:0x1> <type 69>) End () <type 4>
 func (c <esc:0x1> <type 69>) Pos () <type 4>
type 71 struct { Slash <type 4>; Text <type -16>; }
type 72 *<type 73>
type 73 "go/ast.Ident" <type 74>
 func (id <esc:0x22> <type 72>) String () <type -16>
 func (id <esc:0x1> <type 72>) IsExported () <type -15>
 func (? <esc:0x1> <type 72>) .go/ast.exprNode ()
 func (x <esc:0x1> <type 72>) End () <type 4>
 func (x <esc:0x1> <type 72>) Pos () <type 4>
type 74 struct { NamePos <type 4>; Name <type -16>; Obj <type 55>; }
type 75 [] <type 76>
type 76 "go/ast.Decl" <type 77>
type 77 interface { ? <type 78>; .go/ast.declNode (); }
type 78 "go/ast.Node" <type 79>
type 79 interface { End () <type 4>; Pos () <type 4>; }
type 80 [] <type 81>
type 81 *<type 82>
type 82 "go/ast.ImportSpec" <type 83>
 func (? <esc:0x1> <type 81>) .go/ast.specNode ()
 func (s <esc:0x1> <type 81>) End () <type 4>
 func (s <esc:0x1> <type 81>) Pos () <type 4>
type 83 struct { Doc <type 65>; Name <type 72>; Path <type 84>; Comment <type 65>; EndPos <type 4>; }
type 84 *<type 85>
type 85 "go/ast.BasicLit" <type 86>
 func (? <esc:0x1> <type 84>) .go/ast.exprNode ()
 func (x <esc:0x1> <type 84>) End () <type 4>
 func (x <esc:0x1> <type 84>) Pos () <type 4>
type 86 struct { ValuePos <type 4>; Kind <type 87>; Value <type -16>; }
type 87 "go/token.Token" <type -11>
 func (tok <type 87>) String () <type -16>
 func (op <type 87>) Precedence () <type -11>
 func (tok <type 87>) IsLiteral () <type -15>
 func (tok <type 87>) IsOperator () <type -15>
 func (tok <type 87>) IsKeyword () <type -15>
type 88 [] <type 72>
type 89 [] <type 65>
type 90 "go/ast.Expr" <type 91>
type 91 interface { ? <type 78>; .go/ast.exprNode (); }
const AllErrors <type 1> = 32 
const DeclarationErrors <type 1> = 16 
const ImportsOnly <type 1> = 2 
const PackageClauseOnly <type 1> = 1 
const ParseComments <type 1> = 4 
func ParseDir (fset <type 2>, path <type -16>, filter <esc:0x1> <type 29>, mode <type 1>) (pkgs <type 49>, first <type -19>)
func ParseExpr (x <esc:0x1> <type -16>) (? <type 90>, ? <type -19>)
func ParseExprFrom (fset <type 2>, filename <type -16>, src <type 20>, mode <type 1>) (? <type 90>, ? <type -19>)
func ParseFile (fset <type 2>, filename <type -16>, src <type 20>, mode <type 1>) (f <type 62>, err <type -19>)
const SpuriousErrors <type 1> = 32 
const Trace <type 1> = 8 
checksum 9E3E987A84CB137540E29485A49CE1C0FDA87460
v3;
package printer
pkgpath go/printer
import bytes bytes "bytes"
import fmt fmt "fmt"
import ast go/ast "go/ast"
import token go/token "go/token"
import io io "io"
import math math "math"
import os os "os"
import strconv strconv "strconv"
import strings strings "strings"
import tabwriter text/tabwriter "text/tabwriter"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
indirectimport sync sync
init printer go..z2fprinter..import bytes bytes..import fmt fmt..import ast go..z2fast..import scanner go..z2fscanner..import token go..z2ftoken..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import tabwriter text..z2ftabwriter..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 1 6 1 9 1 13 1 14 1 16 1 20 2 6 2 7 2 8 2 9 2 10 2 12 2 13 2 14 2 15 2 16 2 17 2 19 2 20 3 1 3 2 3 4 3 5 3 6 3 7 3 8 3 9 3 10 3 11 3 12 3 13 3 14 3 15 3 16 3 17 3 19 3 20 4 1 4 2 4 5 4 6 4 7 4 8 4 9 4 10 4 11 4 12 4 13 4 14 4 15 4 16 4 17 4 19 4 20 5 2 5 6 5 7 5 8 5 9 5 10 5 12 5 13 5 14 5 15 5 16 5 17 5 19 5 20 7 6 7 9 7 13 7 14 7 16 7 17 7 19 9 6 9 13 9 14 9 16 10 6 10 7 10 8 10 9 10 13 10 14 10 16 10 17 10 19 11 6 11 7 11 8 11 9 11 10 11 12 11 13 11 14 11 15 11 16 11 17 11 19 11 20 12 6 12 13 12 14 12 15 12 16 12 20 13 6 13 14 15 6 15 13 15 14 16 6 16 13 16 14 17 6 17 13 17 14 17 16 18 6 18 9 18 13 18 14 18 16 19 6 19 13 19 14 19 16 19 17
types 47 4 32 265 25 52 21 19 17 177 74 35 21 19 127 52 74 18 30 74 22 19 605 135 19 95 19 1249 22 206 89 19 64 21 39 95 32 33 126 216 19 32 42 149 21 35 32 56
type 1 "CommentedNode" <type 4>
type 2 "Config" <type 15>
 func (cfg <esc:0x1> <type 16>) .go/printer.fprint (output <type 17>, fset <type 20>, node <type 5>, nodeSizes <type 44>) (err <type -19>)
 func (cfg <esc:0x1> <type 16>) Fprint (output <type 17>, fset <type 20>, node <type 5>) <type -19>
type 3 "Mode" <type -12>
type 4 struct { Node <type 5>; Comments <type 6>; }
type 5 interface { }
type 6 [] <type 7>
type 7 *<type 8>
type 8 "go/ast.CommentGroup" <type 10>
 func (g <esc:0x9> <type 7>) Text () <type -16>
 func (g <esc:0x1> <type 7>) End () <type 9>
 func (g <esc:0x1> <type 7>) Pos () <type 9>
type 9 "go/token.Pos" <type -11>
 func (p <type 9>) IsValid () <type -15>
type 10 struct { List <type 11>; }
type 11 [] <type 12>
type 12 *<type 13>
type 13 "go/ast.Comment" <type 14>
 func (c <esc:0x1> <type 12>) End () <type 9>
 func (c <esc:0x1> <type 12>) Pos () <type 9>
type 14 struct { Slash <type 9>; Text <type -16>; }
type 15 struct { Mode <type 3>; Tabwidth <type -11>; Indent <type -11>; }
type 16 *<type 2>
type 17 "io.Writer" <type 18>
type 18 interface { Write (p <type 19>) (n <type -11>, err <type -19>); }
type 19 [] <type -20>
type 20 *<type 21>
type 21 "go/token.FileSet" <type 37>
 func (s <type 20>) Base () <type -11>
 func (s <type 20>) Position (p <type 9>) (pos <type 22>)
 func (s <type 20>) AddFile (filename <type -16>, base <type -11>, size <type -11>) <type 25>
 func (s <type 20>) Write (encode <esc:0x22> <type 35>) <type -19>
 func (s <type 20>) Iterate (f <esc:0x1> <type 36>)
 func (s <type 20>) File (p <type 9>) (f <type 25>)
 func (s <type 20>) .go/token.file (p <type 9>) <type 25>
 func (s <type 20>) PositionFor (p <type 9>, adjusted <type -15>) (pos <type 22>)
 func (s <type 20>) Read (decode <esc:0x22> <type 35>) <type -19>
type 22 "go/token.Position" <type 24>
 func (pos <esc:0x1> <type 23>) IsValid () <type -15>
 func (pos <type 22>) String () <type -16>
type 23 *<type 22>
type 24 struct { Filename <type -16>; Offset <type -11>; Line <type -11>; Column <type -11>; }
type 25 *<type 26>
type 26 "go/token.File" <type 28>
 func (f <esc:0x1> <type 25>) Offset (p <type 9>) <type -11>
 func (f <type 25>) AddLineInfo (offset <type -11>, filename <type -16>, line <type -11>)
 func (f <type 25>) LineStart (line <type -11>) <type 9>
 func (f <type 25>) SetLines (lines <type 27>) <type -15>
 func (f <type 25>) MergeLine (line <type -11>)
 func (f <type 25>) Line (p <type 9>) <type -11>
 func (f <type 25>) .go/token.unpack (offset <type -11>, adjusted <type -15>) (filename <type -16>, line <type -11>, column <type -11>)
 func (f <esc:0x1> <type 25>) Pos (offset <type -11>) <type 9>
 func (f <type 25>) Position (p <type 9>) (pos <type 22>)
 func (f <esc:0x1> <type 25>) Base () <type -11>
 func (f <type 25>) AddLine (offset <type -11>)
 func (f <type 25>) SetLinesForContent (content <esc:0x1> <type 19>)
 func (f <esc:0x22> <type 25>) Name () <type -16>
 func (f <type 25>) PositionFor (p <type 9>, adjusted <type -15>) (pos <type 22>)
 func (f <esc:0x1> <type 25>) Size () <type -11>
 func (f <type 25>) LineCount () <type -11>
 func (f <type 25>) AddLineColumnInfo (offset <type -11>, filename <type -16>, line <type -11>, column <type -11>)
 func (f <type 25>) .go/token.position (p <type 9>, adjusted <type -15>) (pos <type 22>)
type 27 [] <type -11>
type 28 struct { .go/token.set <type 20>; .go/token.name <type -16>; .go/token.base <type -11>; .go/token.size <type -11>; .go/token.mutex <type 29>; .go/token.lines <type 27>; .go/token.infos <type 32>; }
type 29 "sync.Mutex" <type 31>
 func (m <type 30>) Unlock ()
 func (m <type 30>) Lock ()
type 30 *<type 29>
type 31 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 32 [] <type 33>
type 33 ".go/token.lineInfo" <type 34>
type 34 struct { Offset <type -11>; Filename <type -16>; Line <type -11>; Column <type -11>; }
type 35 (? <type 5>) <type -19>
type 36 (? <type 25>) <type -15>
type 37 struct { .go/token.mutex <type 38>; .go/token.base <type -11>; .go/token.files <type 43>; .go/token.last <type 25>; }
type 38 "sync.RWMutex" <type 42>
 func (rw <esc:0x12> <type 39>) RLocker () ($ret8 <type 40>)
 func (rw <type 39>) Unlock ()
 func (rw <type 39>) Lock ()
 func (rw <type 39>) RUnlock ()
 func (rw <type 39>) RLock ()
type 39 *<type 38>
type 40 "sync.Locker" <type 41>
type 41 interface { Lock (); Unlock (); }
type 42 struct { .sync.w <type 29>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 43 [] <type 25>
type 44 map [<type 45>] <type -11>
type 45 "go/ast.Node" <type 46>
type 46 interface { End () <type 9>; Pos () <type 9>; }
func Fprint (output <type 17>, fset <type 20>, node <type 5>) <type -19>
const RawFormat <type 3> = 1 
const SourcePos <type 3> = 8 
const TabIndent <type 3> = 2 
const UseSpaces <type 3> = 4 
checksum A46493BF796311BB286DFAB6875B4603654E1DAF
v3;
package scanner
pkgpath go/scanner
import bytes bytes "bytes"
import fmt fmt "fmt"
import token go/token "go/token"
import io io "io"
import filepath path/filepath "path/filepath"
import sort sort "sort"
import strconv strconv "strconv"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
indirectimport sync sync
init scanner go..z2fscanner..import bytes bytes..import fmt fmt..import token go..z2ftoken..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 1 4 1 7 1 11 1 12 1 14 1 17 2 4 2 5 2 6 2 7 2 8 2 10 2 11 2 12 2 13 2 14 2 15 2 16 2 17 3 2 3 4 3 5 3 6 3 7 3 8 3 10 3 11 3 12 3 13 3 14 3 15 3 16 3 17 5 4 5 7 5 11 5 12 5 14 5 15 5 16 7 4 7 11 7 12 7 14 8 4 8 5 8 6 8 7 8 11 8 12 8 14 8 15 8 16 9 4 9 5 9 6 9 7 9 8 9 10 9 11 9 12 9 13 9 14 9 15 9 16 9 17 10 4 10 11 10 12 10 13 10 14 10 17 11 4 11 12 13 4 13 11 13 12 14 4 14 11 14 12 15 4 15 11 15 12 15 14 16 4 16 11 16 12 16 14 16 15
types 43 6 63 32 480 25 1614 48 131 17 94 39 21 18 18 30 74 22 339 19 1253 76 22 206 19 607 33 22 33 126 216 19 32 42 149 89 19 64 21 21 39 95 18 264
type 1 "Error" <type 6>
 func (e <type 1>) Error () <type -16>
type 2 "ErrorHandler" <type 10>
type 3 "ErrorList" <type 11>
 func (p <esc:0x9> <type 13>) Add (pos <type 7>, msg <type -16>)
 func (p <esc:0x1> <type 13>) Reset ()
 func (p <esc:0x1> <type 3>) Len () <type -11>
 func (p <esc:0x9> <type 3>) Swap (i <type -11>, j <type -11>)
 func (p <esc:0x1> <type 3>) Less (i <type -11>, j <type -11>) <type -15>
 func (p <type 3>) Sort ()
 func (p <type 13>) RemoveMultiples ()
 func (p <esc:0x9> <type 3>) Error () <type -16>
 func (p <esc:0x12> <type 3>) Err () <type -19>
type 4 "Mode" <type -12>
type 5 "Scanner" <type 17>
 func (s <esc:0x9> <type 41>) .go/scanner.next ()
 func (s <esc:0x1> <type 41>) .go/scanner.peek () <type -20>
 func (s <esc:0x9> <type 41>) Init (file <type 18>, src <type 16>, err <type 2>, mode <type 4>)
 func (s <esc:0x9> <type 41>) .go/scanner.error (offs <type -11>, msg <type -16>)
 func (s <esc:0x9> <type 41>) .go/scanner.scanComment () <type -16>
 func (s <esc:0x9> <type 41>) .go/scanner.updateLineInfo (next <type -11>, offs <type -11>, text <esc:0x1> <type 16>)
 func (s <esc:0x9> <type 41>) .go/scanner.findLineEnd () <type -15>
 func (s <esc:0x9> <type 41>) .go/scanner.scanIdentifier () <type -16>
 func (s <esc:0x9> <type 41>) .go/scanner.scanMantissa (base <type -11>)
 func (s <esc:0x9> <type 41>) .go/scanner.scanNumber (seenDecimalPoint <type -15>) (? <type 42>, ? <type -16>)
 func (s <esc:0x9> <type 41>) .go/scanner.scanEscape (quote <type -21>) <type -15>
 func (s <esc:0x9> <type 41>) .go/scanner.scanRune () <type -16>
 func (s <esc:0x9> <type 41>) .go/scanner.scanString () <type -16>
 func (s <esc:0x9> <type 41>) .go/scanner.scanRawString () <type -16>
 func (s <esc:0x9> <type 41>) .go/scanner.skipWhitespace ()
 func (s <esc:0x9> <type 41>) .go/scanner.switch2 (tok0 <type 42>, tok1 <type 42>) <type 42>
 func (s <esc:0x9> <type 41>) .go/scanner.switch3 (tok0 <type 42>, tok1 <type 42>, ch2 <type -21>, tok2 <type 42>) <type 42>
 func (s <esc:0x9> <type 41>) .go/scanner.switch4 (tok0 <type 42>, tok1 <type 42>, ch2 <type -21>, tok2 <type 42>, tok3 <type 42>) <type 42>
 func (s <esc:0x9> <type 41>) Scan () (pos <type 20>, tok <type 42>, lit <type -16>)
type 6 struct { Pos <type 7>; Msg <type -16>; }
type 7 "go/token.Position" <type 9>
 func (pos <type 7>) String () <type -16>
 func (pos <esc:0x1> <type 8>) IsValid () <type -15>
type 8 *<type 7>
type 9 struct { Filename <type -16>; Offset <type -11>; Line <type -11>; Column <type -11>; }
type 10 (pos <type 7>, msg <type -16>)
type 11 [] <type 12>
type 12 *<type 1>
type 13 *<type 3>
type 14 "io.Writer" <type 15>
type 15 interface { Write (p <type 16>) (n <type -11>, err <type -19>); }
type 16 [] <type -20>
type 17 struct { .go/scanner.file <type 18>; .go/scanner.dir <type -16>; .go/scanner.src <type 16>; .go/scanner.err <type 2>; .go/scanner.mode <type 4>; .go/scanner.ch <type -21>; .go/scanner.offset <type -11>; .go/scanner.rdOffset <type -11>; .go/scanner.lineOffset <type -11>; .go/scanner.insertSemi <type -15>; ErrorCount <type -11>; }
type 18 *<type 19>
type 19 "go/token.File" <type 22>
 func (f <type 18>) Line (p <type 20>) <type -11>
 func (f <type 18>) .go/token.unpack (offset <type -11>, adjusted <type -15>) (filename <type -16>, line <type -11>, column <type -11>)
 func (f <esc:0x1> <type 18>) Pos (offset <type -11>) <type 20>
 func (f <type 18>) Position (p <type 20>) (pos <type 7>)
 func (f <esc:0x1> <type 18>) Base () <type -11>
 func (f <type 18>) AddLine (offset <type -11>)
 func (f <type 18>) SetLinesForContent (content <esc:0x1> <type 16>)
 func (f <type 18>) PositionFor (p <type 20>, adjusted <type -15>) (pos <type 7>)
 func (f <esc:0x22> <type 18>) Name () <type -16>
 func (f <esc:0x1> <type 18>) Size () <type -11>
 func (f <type 18>) .go/token.position (p <type 20>, adjusted <type -15>) (pos <type 7>)
 func (f <type 18>) AddLineColumnInfo (offset <type -11>, filename <type -16>, line <type -11>, column <type -11>)
 func (f <type 18>) LineCount () <type -11>
 func (f <type 18>) MergeLine (line <type -11>)
 func (f <type 18>) SetLines (lines <type 21>) <type -15>
 func (f <type 18>) LineStart (line <type -11>) <type 20>
 func (f <type 18>) AddLineInfo (offset <type -11>, filename <type -16>, line <type -11>)
 func (f <esc:0x1> <type 18>) Offset (p <type 20>) <type -11>
type 20 "go/token.Pos" <type -11>
 func (p <type 20>) IsValid () <type -15>
type 21 [] <type -11>
type 22 struct { .go/token.set <type 23>; .go/token.name <type -16>; .go/token.base <type -11>; .go/token.size <type -11>; .go/token.mutex <type 34>; .go/token.lines <type 21>; .go/token.infos <type 38>; }
type 23 *<type 24>
type 24 "go/token.FileSet" <type 28>
 func (s <type 23>) Read (decode <esc:0x22> <type 25>) <type -19>
 func (s <type 23>) PositionFor (p <type 20>, adjusted <type -15>) (pos <type 7>)
 func (s <type 23>) .go/token.file (p <type 20>) <type 18>
 func (s <type 23>) File (p <type 20>) (f <type 18>)
 func (s <type 23>) Iterate (f <esc:0x1> <type 27>)
 func (s <type 23>) Write (encode <esc:0x22> <type 25>) <type -19>
 func (s <type 23>) AddFile (filename <type -16>, base <type -11>, size <type -11>) <type 18>
 func (s <type 23>) Position (p <type 20>) (pos <type 7>)
 func (s <type 23>) Base () <type -11>
type 25 (? <type 26>) <type -19>
type 26 interface { }
type 27 (? <type 18>) <type -15>
type 28 struct { .go/token.mutex <type 29>; .go/token.base <type -11>; .go/token.files <type 37>; .go/token.last <type 18>; }
type 29 "sync.RWMutex" <type 33>
 func (rw <type 30>) RLock ()
 func (rw <type 30>) RUnlock ()
 func (rw <type 30>) Lock ()
 func (rw <type 30>) Unlock ()
 func (rw <esc:0x12> <type 30>) RLocker () ($ret8 <type 31>)
type 30 *<type 29>
type 31 "sync.Locker" <type 32>
type 32 interface { Lock (); Unlock (); }
type 33 struct { .sync.w <type 34>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 34 "sync.Mutex" <type 36>
 func (m <type 35>) Lock ()
 func (m <type 35>) Unlock ()
type 35 *<type 34>
type 36 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 37 [] <type 18>
type 38 [] <type 39>
type 39 ".go/token.lineInfo" <type 40>
type 40 struct { Offset <type -11>; Filename <type -16>; Line <type -11>; Column <type -11>; }
type 41 *<type 5>
type 42 "go/token.Token" <type -11>
 func (tok <type 42>) IsKeyword () <type -15>
 func (tok <type 42>) IsOperator () <type -15>
 func (tok <type 42>) IsLiteral () <type -15>
 func (op <type 42>) Precedence () <type -11>
 func (tok <type 42>) String () <type -16>
func PrintError (w <type 14>, err <type -19>)
const ScanComments <type 4> = 1 
checksum D050D6929AAC49F605C19827F44EC173BD4DE8C6
v3;
package token
pkgpath go/token
import fmt fmt "fmt"
import sort sort "sort"
import strconv strconv "strconv"
import sync sync "sync"
init token go..z2ftoken..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1 13 1 14 3 2 3 5 3 8 3 9 3 11 3 12 3 13 5 2 5 8 5 9 5 11 6 2 6 3 6 4 6 5 6 8 6 9 6 11 6 12 6 13 7 2 7 8 7 9 7 10 7 11 7 14 8 2 8 9 10 2 10 8 10 9 11 2 11 8 11 9 12 2 12 8 12 9 12 11 13 2 13 8 13 9 13 11 13 12
types 29 6 1235 584 65 124 249 203 17 86 17 64 22 21 39 95 18 22 126 216 19 32 42 148 21 33 33 22 95 18
type 1 "File" <type 6>
 func (f <esc:0x22> <type 15>) Name () <type -16>
 func (f <esc:0x1> <type 15>) Base () <type -11>
 func (f <esc:0x1> <type 15>) Size () <type -11>
 func (f <type 15>) LineCount () <type -11>
 func (f <type 15>) AddLine (offset <type -11>)
 func (f <type 15>) MergeLine (line <type -11>)
 func (f <type 15>) SetLines (lines <type 11>) <type -15>
 func (f <type 15>) SetLinesForContent (content <esc:0x1> <type 16>)
 func (f <type 15>) LineStart (line <type -11>) <type 3>
 func (f <type 15>) AddLineInfo (offset <type -11>, filename <type -16>, line <type -11>)
 func (f <type 15>) AddLineColumnInfo (offset <type -11>, filename <type -16>, line <type -11>, column <type -11>)
 func (f <esc:0x1> <type 15>) Pos (offset <type -11>) <type 3>
 func (f <esc:0x1> <type 15>) Offset (p <type 3>) <type -11>
 func (f <type 15>) Line (p <type 3>) <type -11>
 func (f <type 15>) .go/token.unpack (offset <type -11>, adjusted <type -15>) (filename <type -16>, line <type -11>, column <type -11>)
 func (f <type 15>) .go/token.position (p <type 3>, adjusted <type -15>) (pos <type 4>)
 func (f <type 15>) PositionFor (p <type 3>, adjusted <type -15>) (pos <type 4>)
 func (f <type 15>) Position (p <type 3>) (pos <type 4>)
type 2 "FileSet" <type 17>
 func (s <type 7>) Base () <type -11>
 func (s <type 7>) AddFile (filename <type -16>, base <type -11>, size <type -11>) <type 15>
 func (s <type 7>) Iterate (f <esc:0x1> <type 24>)
 func (s <type 7>) .go/token.file (p <type 3>) <type 15>
 func (s <type 7>) File (p <type 3>) (f <type 15>)
 func (s <type 7>) PositionFor (p <type 3>, adjusted <type -15>) (pos <type 4>)
 func (s <type 7>) Position (p <type 3>) (pos <type 4>)
 func (s <type 7>) Read (decode <esc:0x22> <type 25>) <type -19>
 func (s <type 7>) Write (encode <esc:0x22> <type 25>) <type -19>
type 3 "Pos" <type -11>
 func (p <type 3>) IsValid () <type -15>
type 4 "Position" <type 27>
 func (pos <esc:0x1> <type 28>) IsValid () <type -15>
 func (pos <type 4>) String () <type -16>
type 5 "Token" <type -11>
 func (tok <type 5>) String () <type -16>
 func (op <type 5>) Precedence () <type -11>
 func (tok <type 5>) IsLiteral () <type -15>
 func (tok <type 5>) IsOperator () <type -15>
 func (tok <type 5>) IsKeyword () <type -15>
type 6 struct { .go/token.set <type 7>; .go/token.name <type -16>; .go/token.base <type -11>; .go/token.size <type -11>; .go/token.mutex <type 8>; .go/token.lines <type 11>; .go/token.infos <type 12>; }
type 7 *<type 2>
type 8 "sync.Mutex" <type 10>
 func (m <type 9>) Unlock ()
 func (m <type 9>) Lock ()
type 9 *<type 8>
type 10 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 11 [] <type -11>
type 12 [] <type 13>
type 13 ".go/token.lineInfo" <type 14>
type 14 struct { Offset <type -11>; Filename <type -16>; Line <type -11>; Column <type -11>; }
type 15 *<type 1>
type 16 [] <type -20>
type 17 struct { .go/token.mutex <type 18>; .go/token.base <type -11>; .go/token.files <type 23>; .go/token.last <type 15>; }
type 18 "sync.RWMutex" <type 22>
 func (rw <esc:0x12> <type 19>) RLocker () ($ret8 <type 20>)
 func (rw <type 19>) Unlock ()
 func (rw <type 19>) Lock ()
 func (rw <type 19>) RUnlock ()
 func (rw <type 19>) RLock ()
type 19 *<type 18>
type 20 "sync.Locker" <type 21>
type 21 interface { Lock (); Unlock (); }
type 22 struct { .sync.w <type 8>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 23 [] <type 15>
type 24 (? <type 15>) <type -15>
type 25 (? <type 26>) <type -19>
type 26 interface { }
type 27 struct { Filename <type -16>; Offset <type -11>; Line <type -11>; Column <type -11>; }
type 28 *<type 4>
const ADD <type 5> = 12 
const ADD_ASSIGN <type 5> = 23 
const AND <type 5> = 17 
const AND_ASSIGN <type 5> = 28 
const AND_NOT <type 5> = 22 
const AND_NOT_ASSIGN <type 5> = 33 
const ARROW <type 5> = 36 
const ASSIGN <type 5> = 42 
const BREAK <type 5> = 61 
const CASE <type 5> = 62 
const CHAN <type 5> = 63 
const CHAR <type 5> = 8 
const COLON <type 5> = 58 
const COMMA <type 5> = 52 
const COMMENT <type 5> = 2 
const CONST <type 5> = 64 
const CONTINUE <type 5> = 65 
const DEC <type 5> = 38 
const DEFAULT <type 5> = 66 
const DEFER <type 5> = 67 
const DEFINE <type 5> = 47 
const ELLIPSIS <type 5> = 48 
const ELSE <type 5> = 68 
const EOF <type 5> = 1 
const EQL <type 5> = 39 
const FALLTHROUGH <type 5> = 69 
const FLOAT <type 5> = 6 
const FOR <type 5> = 70 
const FUNC <type 5> = 71 
const GEQ <type 5> = 46 
const GO <type 5> = 72 
const GOTO <type 5> = 73 
const GTR <type 5> = 41 
const HighestPrec = 7 
const IDENT <type 5> = 4 
const IF <type 5> = 74 
const ILLEGAL <type 5> = 0 
const IMAG <type 5> = 7 
const IMPORT <type 5> = 75 
const INC <type 5> = 37 
const INT <type 5> = 5 
const INTERFACE <type 5> = 76 
const LAND <type 5> = 34 
const LBRACE <type 5> = 51 
const LBRACK <type 5> = 50 
const LEQ <type 5> = 45 
const LOR <type 5> = 35 
const LPAREN <type 5> = 49 
const LSS <type 5> = 40 
func Lookup (ident <esc:0x1> <type -16>) <type 5>
const LowestPrec = 0 
const MAP <type 5> = 77 
const MUL <type 5> = 14 
const MUL_ASSIGN <type 5> = 25 
const NEQ <type 5> = 44 
const NOT <type 5> = 43 
func NewFileSet () <type 7>
const NoPos <type 3> = 0 
const OR <type 5> = 18 
const OR_ASSIGN <type 5> = 29 
const PACKAGE <type 5> = 78 
const PERIOD <type 5> = 53 
const QUO <type 5> = 15 
const QUO_ASSIGN <type 5> = 26 
const RANGE <type 5> = 79 
const RBRACE <type 5> = 56 
const RBRACK <type 5> = 55 
const REM <type 5> = 16 
const REM_ASSIGN <type 5> = 27 
const RETURN <type 5> = 80 
const RPAREN <type 5> = 54 
const SELECT <type 5> = 81 
const SEMICOLON <type 5> = 57 
const SHL <type 5> = 20 
const SHL_ASSIGN <type 5> = 31 
const SHR <type 5> = 21 
const SHR_ASSIGN <type 5> = 32 
const STRING <type 5> = 9 
const STRUCT <type 5> = 82 
const SUB <type 5> = 13 
const SUB_ASSIGN <type 5> = 24 
const SWITCH <type 5> = 83 
const TYPE <type 5> = 84 
const UnaryPrec = 6 
const VAR <type 5> = 85 
const XOR <type 5> = 19 
const XOR_ASSIGN <type 5> = 30 
checksum AD3153D6DD347D08D3D5E7DF8D660774C8C197A6
v3;
package types
pkgpath go/types
import bytes bytes "bytes"
import heap container/heap "container/heap"
import fmt fmt "fmt"
import ast go/ast "go/ast"
import constant go/constant "go/constant"
import parser go/parser "go/parser"
import token go/token "go/token"
import io io "io"
import math math "math"
import path path "path"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
import unicode unicode "unicode"
indirectimport sync sync
init types go..z2ftypes..import bytes bytes..import binary encoding..z2fbinary..import fmt fmt..import ast go..z2fast..import constant go..z2fconstant..import parser go..z2fparser..import scanner go..z2fscanner..import token go..z2ftoken..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import ioutil io..z2fioutil..import big math..z2fbig..import rand math..z2frand..import os os..import path path..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 1 9 1 12 1 20 1 21 1 23 1 26 2 9 2 12 2 19 2 20 2 21 2 22 2 23 2 26 3 9 3 10 3 11 3 12 3 16 3 19 3 20 3 21 3 22 3 23 3 24 3 25 3 26 4 1 4 3 4 7 4 8 4 9 4 10 4 11 4 12 4 16 4 18 4 19 4 20 4 21 4 22 4 23 4 24 4 25 4 26 5 1 5 2 5 3 5 8 5 9 5 10 5 11 5 12 5 14 5 15 5 16 5 19 5 20 5 21 5 22 5 23 5 24 5 25 5 26 6 1 6 3 6 4 6 7 6 8 6 9 6 10 6 11 6 12 6 13 6 16 6 18 6 19 6 20 6 21 6 22 6 23 6 24 6 25 6 26 7 1 7 3 7 8 7 9 7 10 7 11 7 12 7 16 7 18 7 19 7 20 7 21 7 22 7 23 7 24 7 25 7 26 8 3 8 9 8 10 8 11 8 12 8 16 8 19 8 20 8 21 8 22 8 23 8 24 8 25 8 26 10 9 10 12 10 20 10 21 10 23 10 24 10 25 12 9 12 20 12 21 12 23 13 1 13 9 13 10 13 11 13 12 13 16 13 18 13 19 13 20 13 21 13 22 13 23 13 24 13 25 13 26 14 1 14 2 14 3 14 9 14 10 14 11 14 12 14 15 14 16 14 19 14 20 14 21 14 22 14 23 14 24 14 25 14 26 15 9 15 20 15 21 15 23 16 9 16 10 16 11 16 12 16 20 16 21 16 23 16 24 16 25 17 9 17 12 17 20 17 21 17 23 17 26 18 9 18 10 18 11 18 12 18 16 18 19 18 20 18 21 18 22 18 23 18 24 18 25 18 26 19 9 19 20 19 21 19 22 19 23 19 26 20 9 20 21 22 9 22 20 22 21 23 9 23 20 23 21 24 9 24 20 24 21 24 23 25 9 25 20 25 21 25 23 25 24
types 314 42 435 483 30 30 70 433 28 11811 505 335 69 391 32 30 34 178 88 883 71 440 296 491 69 28 515 129 395 31 870 365 35 558 27 393 236 524 452 26 461 129 444 70 18 19 96 18 56 1028 19 19 76 19 77 236 41 18 69 18 460 18 19 609 135 19 95 19 1256 22 22 206 89 19 64 21 39 95 33 22 33 126 216 19 32 42 149 21 19 34 19 171 203 21 19 32 56 32 58 19 181 104 21 188 37 23 21 133 54 21 190 75 23 21 131 106 23 21 293 72 21 86 102 82 21 185 75 270 21 185 75 21 186 73 23 34 57 39 36 36 42 73 23 21 130 172 23 34 57 21 226 58 37 23 21 187 108 23 36 35 37 20 23 20 37 21 97 82 23 21 235 99 36 41 126 44 40 125 39 23 12 22 129 21 248 20 37 21 185 108 22 19 21 518 21 148 20 41 39 38 21 189 49 21 24 20 22 45 37 34 21 186 65 21 187 78 21 145 37 21 190 84 23 21 289 21 188 72 106 37 23 21 187 72 21 186 109 44 41 36 23 42 70 35 21 113 36 20 21 187 80 165 26 22 59 84 66 77 126 158 35 36 35 37 20 35 23 20 50 115 22 60 20 71 20 47 23 20 108 23 20 20 20 20 23 33 20 484 189 22 90 46 34 216 22 32 75 155 163 129 46 60 20 75 46 22 70 81 121 21 1839 32 74 93 35
type 1 "Array" <type 42>
 func (a <esc:0x1> <type 43>) Len () <type -4>
 func (a <esc:0x22> <type 43>) Elem () <type 38>
 func (a <esc:0x12> <type 43>) Underlying () ($ret265 <type 38>) <inl:198>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/types/type.go:469
  { //469
   $ret265 = a //469
   return //469
  } //0
 func (a <type 43>) String () <type -16>
type 2 "Basic" <type 45>
 func (b <esc:0x1> <type 46>) Kind () <type 4>
 func (b <esc:0x1> <type 46>) Info () <type 3>
 func (b <esc:0x22> <type 46>) Name () <type -16>
 func (b <esc:0x12> <type 46>) Underlying () ($ret264 <type 38>) <inl:198>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/types/type.go:468
  { //468
   $ret264 = b //468
   return //468
  } //0
 func (b <type 46>) String () <type -16>
type 3 "BasicInfo" <type -11>
type 4 "BasicKind" <type -11>
type 5 "Builtin" <type 47>
 func (obj <type 56>) String () <type -16>
type 6 "Chan" <type 57>
 func (c <esc:0x1> <type 58>) Dir () <type 7>
 func (c <esc:0x22> <type 58>) Elem () <type 38>
 func (c <esc:0x12> <type 58>) Underlying () ($ret273 <type 38>) <inl:198>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/types/type.go:477
  { //477
   $ret273 = c //477
   return //477
  } //0
 func (c <type 58>) String () <type -16>
type 7 "ChanDir" <type -11>
type 8 "Checker" <type 59>
 func (check <type 190>) .go/types.assignment (x <type 191>, T <type 38>, context <type -16>)
 func (check <type 190>) .go/types.initConst (lhs <esc:0x9> <type 195>, x <type 191>)
 func (check <type 190>) .go/types.initVar (lhs <esc:0x9> <type 93>, x <type 191>, context <type -16>) <type 38>
 func (check <type 190>) .go/types.assignVar (lhs <type 94>, x <type 191>) <type 38>
 func (check <type 190>) .go/types.initVars (lhs <esc:0x9> <type 92>, rhs <type 189>, returnPos <type 51>)
 func (check <type 190>) .go/types.assignVars (lhs <type 189>, rhs <type 189>)
 func (check <type 190>) .go/types.shortVarDecl (pos <type 51>, lhs <type 189>, rhs <type 189>)
 func (check <type 190>) .go/types.builtin (x <type 191>, call <type 186>, id <type 55>) (_ <type -15>)
 func (check <type 190>) .go/types.call (x <type 191>, e <type 186>) <type 196>
 func (check <type 190>) .go/types.use (arg ...<type 94>)
 func (check <type 190>) .go/types.useLHS (arg ...<type 94>)
 func (check <esc:0x1> <type 190>) .go/types.useGetter (get <esc:0x1> <type 197>, n <type -11>)
 func (check <type 190>) .go/types.arguments (x <type 191>, call <esc:0x9> <type 186>, sig <esc:0x9> <type 184>, arg <esc:0x1> <type 197>, n <type -11>)
 func (check <type 190>) .go/types.argument (fun <esc:0x1> <type 94>, sig <esc:0x9> <type 184>, i <type -11>, x <type 191>, ellipsis <type 51>, context <type -16>)
 func (check <type 190>) .go/types.selector (x <type 191>, e <type 199>)
 func (check <esc:0x9> <type 190>) .go/types.addUnusedDotImport (scope <type 50>, pkg <type 52>, pos <type 51>)
 func (check <esc:0x9> <type 190>) .go/types.addDeclDep (to <type 24>)
 func (check <esc:0x9> <type 190>) .go/types.rememberUntyped (e <type 94>, lhs <type -15>, mode <type 174>, typ <type 46>, val <type 175>)
 func (check <esc:0x9> <type 190>) .go/types.later (f <type 179>)
 func (check <esc:0x9> <type 190>) .go/types.push (obj <type 24>) <type -11>
 func (check <esc:0x32> <type 190>) .go/types.pop () <type 24>
 func (check <type 190>) .go/types.initFiles (files <esc:0x9> <type 141>)
 func (check <esc:0x9> <type 190>) .go/types.handleBailout (err <esc:0x1> <type 202>)
 func (check <type 190>) Files (files <esc:0x9> <type 141>) <type -19>
 func (check <type 190>) .go/types.checkFiles (files <esc:0x9> <type 141>) (err <type -19>)
 func (check <type 190>) .go/types.recordUntyped ()
 func (check <esc:0x1> <type 190>) .go/types.recordTypeAndValue (x <type 94>, mode <type 174>, typ <type 38>, val <type 175>)
 func (check <esc:0x1> <type 190>) .go/types.recordBuiltinType (f <type 94>, sig <type 184>)
 func (check <esc:0x9> <type 190>) .go/types.recordCommaOkTypes (x <type 94>, a <type 203>)
 func (check <esc:0x1> <type 190>) .go/types.recordDef (id <type 116>, obj <type 24>)
 func (check <esc:0x1> <type 190>) .go/types.recordUse (id <type 116>, obj <type 24>)
 func (check <esc:0x1> <type 190>) .go/types.recordImplicit (node <type 96>, obj <type 24>)
 func (check <esc:0x1> <type 190>) .go/types.recordSelection (x <type 199>, kind <type 31>, recv <type 38>, obj <type 24>, index <type 68>, indirect <type -15>)
 func (check <esc:0x1> <type 190>) .go/types.recordScope (node <type 96>, scope <type 50>)
 func (check <type 190>) .go/types.conversion (x <type 191>, T <type 38>)
 func (check <type 190>) .go/types.reportAltDecl (obj <type 24>)
 func (check <type 190>) .go/types.declare (scope <type 50>, id <type 116>, obj <type 24>, pos <type 51>)
 func (check <type 190>) .go/types.objDecl (obj <type 24>, def <esc:0x1> <type 204>)
 func (check <type 190>) .go/types.typeCycle (obj <type 24>) (isCycle <type -15>)
 func (check <type 190>) .go/types.constDecl (obj <esc:0x9> <type 195>, typ <type 94>, init <type 94>)
 func (check <type 190>) .go/types.varDecl (obj <esc:0x9> <type 93>, lhs <esc:0x9> <type 92>, typ <type 94>, init <type 94>)
 func (check <type 190>) .go/types.typeDecl (obj <type 160>, typ <type 94>, def <esc:0x1> <type 204>, alias <type -15>)
 func (check <type 190>) .go/types.addMethodDecls (obj <type 160>)
 func (check <type 190>) .go/types.funcDecl (obj <type 162>, decl <type 89>)
 func (check <type 190>) .go/types.declStmt (decl <type 146>)
 func (check <esc:0x1> <type 190>) .go/types.qualifier (pkg <esc:0x22> <type 52>) <type -16>
 func (check <type 190>) .go/types.sprintf (format <esc:0x1> <type -16>, args <esc:0x9> ...<type 78>) <type -16>
 func (check <type 190>) .go/types.trace (pos <type 51>, format <esc:0x1> <type -16>, args <esc:0x9> ...<type 78>)
 func (check <type 190>) .go/types.dump (format <esc:0x1> <type -16>, args <esc:0x9> ...<type 78>)
 func (check <esc:0x9> <type 190>) .go/types.err (pos <type 51>, msg <type -16>, soft <type -15>)
 func (check <esc:0x9> <type 190>) .go/types.error (pos <type 51>, msg <type -16>)
 func (check <type 190>) .go/types.errorf (pos <type 51>, format <esc:0x1> <type -16>, args <esc:0x9> ...<type 78>)
 func (check <type 190>) .go/types.softErrorf (pos <type 51>, format <esc:0x1> <type -16>, args <esc:0x9> ...<type 78>)
 func (check <type 190>) .go/types.invalidAST (pos <type 51>, format <esc:0x1> <type -16>, args <esc:0x9> ...<type 78>)
 func (check <type 190>) .go/types.invalidArg (pos <type 51>, format <esc:0x1> <type -16>, args <esc:0x9> ...<type 78>)
 func (check <type 190>) .go/types.invalidOp (pos <type 51>, format <esc:0x1> <type -16>, args <esc:0x9> ...<type 78>)
 func (check <type 190>) .go/types.op (m <esc:0x1> <type 206>, x <type 191>, op <type 126>) <type -15>
 func (check <type 190>) .go/types.unary (x <type 191>, e <type 209>, op <type 126>)
 func (check <type 190>) .go/types.representable (x <type 191>, typ <type 46>)
 func (check <type 190>) .go/types.updateExprType (x <type 94>, typ <type 38>, final <type -15>)
 func (check <esc:0x1> <type 190>) .go/types.updateExprVal (x <type 94>, val <type 175>)
 func (check <type 190>) .go/types.convertUntyped (x <type 191>, target <type 38>)
 func (check <type 190>) .go/types.comparison (x <esc:0x9> <type 191>, y <esc:0x9> <type 191>, op <type 126>)
 func (check <type 190>) .go/types.shift (x <type 191>, y <type 191>, e <type 212>, op <type 126>)
 func (check <type 190>) .go/types.binary (x <type 191>, e <type 212>, lhs <type 94>, rhs <type 94>, op <type 126>)
 func (check <type 190>) .go/types.index (index <type 94>, max <type -4>) (i <type -4>, valid <type -15>)
 func (check <type 190>) .go/types.indexedElts (elts <type 189>, typ <type 38>, length <type -4>) <type -4>
 func (check <type 190>) .go/types.rawExpr (x <type 191>, e <type 94>, hint <type 38>) <type 196>
 func (check <type 190>) .go/types.exprInternal (x <type 191>, e <type 94>, hint <type 38>) <type 196>
 func (check <type 190>) .go/types.typeAssertion (pos <type 51>, x <type 191>, xtyp <esc:0x9> <type 44>, T <type 38>)
 func (check <type 190>) .go/types.singleValue (x <type 191>)
 func (check <type 190>) .go/types.expr (x <type 191>, e <type 94>)
 func (check <type 190>) .go/types.multiExpr (x <type 191>, e <type 94>)
 func (check <type 190>) .go/types.exprWithHint (x <type 191>, e <type 94>, hint <type 38>)
 func (check <type 190>) .go/types.exprOrType (x <type 191>, e <type 94>)
 func (check <type 190>) .go/types.initOrder ()
 func (check <type 190>) .go/types.reportCycle (cycle <esc:0x9> <type 180>)
 func (check <type 190>) .go/types.declareInMethodSet (mset <esc:0x1> <type 215>, pos <type 51>, m <type 168>) <type -15>
 func (check <type 190>) .go/types.reportAltMethod (m <type 168>)
 func (check <type 190>) .go/types.infoFromTypeLit (scope <type 50>, iface <type 218>, tname <type 160>, path <esc:0x9> <type 221>) (info <type 164>)
 func (check <type 190>) .go/types.infoFromTypeName (scope <esc:0x1> <type 50>, name <esc:0x1> <type 116>, path <esc:0x9> <type 221>) <type 164>
 func (check <esc:0x1> <type 190>) .go/types.infoFromQualifiedTypeName (scope <esc:0x1> <type 50>, qname <esc:0x1> <type 199>) <type 164>
 func (check <type 190>) .go/types.labels (body <esc:0x9> <type 130>)
 func (check <type 190>) .go/types.blockBranches (all <type 50>, parent <type 222>, lstmt <type 224>, list <esc:0x9> <type 133>) <type 229>
 func (check <type 190>) .go/types.missingMethod (V <type 38>, T <esc:0x3a> <type 44>, static <type -15>) (method <type 162>, wrongType <type -15>)
 func (check <type 190>) .go/types.assertableTo (V <esc:0x3a> <type 44>, T <type 38>) (method <type 162>, wrongType <type -15>)
 func (check <type 190>) .go/types.arityMatch (s <esc:0x9> <type 233>, init <esc:0x1> <type 233>)
 func (check <type 190>) .go/types.declarePkgObj (ident <type 116>, obj <type 24>, d <type 89>)
 func (check <esc:0x9> <type 190>) .go/types.filename (fileNo <type -11>) <type -16>
 func (check <type 190>) .go/types.importPackage (pos <type 51>, path <type -16>, dir <type -16>) <type 52>
 func (check <type 190>) .go/types.collectObjects ()
 func (check <type 190>) .go/types.resolveBaseTypeName (typ <esc:0x1> <type 94>) (ptr <type -15>, base <type 160>)
 func (check <type 190>) .go/types.cycle (obj <esc:0x9> <type 160>, path <esc:0x9> <type 221>, report <type -15>) <type -15>
 func (check <type 190>) .go/types.packageObjects ()
 func (check <esc:0x1> <type 190>) .go/types.processDelayed (top <type -11>)
 func (check <type 190>) .go/types.unusedImports ()
 func (check <esc:0x1> <type 190>) .go/types.isTerminating (s <esc:0x1> <type 134>, label <esc:0x1> <type -16>) <type -15>
 func (check <esc:0x1> <type 190>) .go/types.isTerminatingList (list <esc:0x1> <type 133>, label <esc:0x1> <type -16>) <type -15>
 func (check <esc:0x1> <type 190>) .go/types.isTerminatingSwitch (body <esc:0x1> <type 130>, label <esc:0x1> <type -16>) <type -15>
 func (check <type 190>) .go/types.funcBody (decl <type 89>, name <type -16>, sig <type 184>, body <type 130>, iota <type 175>)
 func (check <type 190>) .go/types.usage (scope <esc:0x1> <type 50>)
 func (check <type 190>) .go/types.simpleStmt (s <type 134>)
 func (check <type 190>) .go/types.stmtList (ctxt <type 236>, list <type 133>)
 func (check <type 190>) .go/types.multipleDefaults (list <esc:0x9> <type 133>)
 func (check <esc:0x9> <type 190>) .go/types.openScope (s <type 134>, comment <type -16>)
 func (check <esc:0x9> <type 190>) .go/types.closeScope ()
 func (check <type 190>) .go/types.suspendedCall (keyword <type -16>, call <type 186>)
 func (check <type 190>) .go/types.caseValues (x <esc:0x9> <type 191>, values <type 189>, seen <esc:0x9> <type 237>)
 func (check <type 190>) .go/types.caseTypes (x <type 191>, xtyp <esc:0x9> <type 44>, types <type 189>, seen <esc:0x1> <type 242>) (T <type 38>)
 func (check <type 190>) .go/types.stmt (ctxt <type 236>, s <type 134>)
 func (check <type 190>) .go/types.ident (x <esc:0x1> <type 191>, e <type 116>, def <esc:0x1> <type 204>, wantType <type -15>)
 func (check <type 190>) .go/types.typ (e <type 94>) <type 38>
 func (check <type 190>) .go/types.definedType (e <type 94>, def <type 204>) (T <type 38>)
 func (check <type 190>) .go/types.indirectType (e <type 94>) <type 38>
 func (check <type 190>) .go/types.funcType (sig <esc:0x1> <type 184>, recvPar <type 108>, ftyp <type 127>)
 func (check <type 190>) .go/types.typInternal (e <type 94>, def <type 204>) <type 38>
 func (check <type 190>) .go/types.typOrNil (e <type 94>) <type 38>
 func (check <type 190>) .go/types.arrayLength (e <type 94>) <type -4>
 func (check <type 190>) .go/types.collectParams (scope <type 50>, list <type 108>, variadicOk <type -15>) (params <type 92>, variadic <type -15>)
 func (check <type 190>) .go/types.declareInSet (oset <esc:0x1> <type 243>, pos <type 51>, obj <type 24>) <type -15>
 func (check <type 190>) .go/types.interfaceType (ityp <type 44>, iface <type 218>, def <type 204>)
 func (check <type 190>) .go/types.tag (t <esc:0x2a> <type 123>) <type -16>
 func (check <type 190>) .go/types.structType (styp <esc:0x1> <type 246>, e <type 247>)
type 9 "Config" <type 250>
 func (conf <type 60>) Check (path <type -16>, fset <type 61>, files <esc:0x9> <type 141>, info <type 87>) (? <type 52>, ? <type -19>)
 func (conf <esc:0x9> <type 60>) .go/types.alignof (T <type 38>) <type -4>
 func (conf <esc:0x9> <type 60>) .go/types.offsetsof (T <esc:0x9> <type 246>) <type 252>
 func (conf <esc:0x9> <type 60>) .go/types.offsetof (typ <type 38>, index <esc:0x1> <type 68>) <type -4>
 func (conf <esc:0x9> <type 60>) .go/types.sizeof (T <type 38>) <type -4>
type 10 "Const" <type 253>
 func (obj <esc:0x22> <type 195>) Val () <type 175>
 func (? <esc:0x1> <type 195>) .go/types.isDependency () <inl:145>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/types/object.go:212
 func (obj <type 195>) String () <type -16>
type 11 "Error" <type 254>
 func (err <type 11>) Error () <type -16>
type 12 "Func" <type 255>
 func (obj <esc:0x9> <type 162>) FullName () <type -16>
 func (obj <esc:0x32> <type 162>) Scope () <type 50>
 func (? <esc:0x1> <type 162>) .go/types.isDependency () <inl:145>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/types/object.go:322
 func (obj <type 162>) String () <type -16>
type 13 "ImportMode" <type -11>
type 14 "Importer" <type 256>
type 15 "ImporterFrom" <type 257>
type 16 "Info" <type 258>
 func (info <esc:0x1> <type 87>) TypeOf (e <esc:0x1> <type 94>) <type 38>
 func (info <esc:0x1> <type 87>) ObjectOf (id <esc:0x1> <type 116>) <type 24>
type 17 "Initializer" <type 267>
 func (init <esc:0x1> <type 266>) String () <type -16>
type 18 "Interface" <type 268>
 func (t <esc:0x1> <type 44>) NumExplicitMethods () <type -11>
 func (t <esc:0x32> <type 44>) ExplicitMethod (i <type -11>) <type 162>
 func (t <esc:0x1> <type 44>) NumEmbeddeds () <type -11>
 func (t <esc:0x32> <type 44>) Embedded (i <type -11>) <type 204>
 func (t <esc:0x32> <type 44>) EmbeddedType (i <type -11>) <type 38>
 func (t <esc:0x1> <type 44>) NumMethods () <type -11>
 func (t <esc:0x32> <type 44>) Method (i <type -11>) <type 162>
 func (t <esc:0x1> <type 44>) Empty () <type -15>
 func (t <type 44>) Complete () <type 44>
 func (t <esc:0x12> <type 44>) Underlying () ($ret271 <type 38>) <inl:198>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/types/type.go:475
  { //475
   $ret271 = t //475
   return //475
  } //0
 func (t <type 44>) String () <type -16>
type 19 "Label" <type 270>
 func (obj <type 271>) String () <type -16>
type 20 "Map" <type 272>
 func (m <esc:0x22> <type 273>) Key () <type 38>
 func (m <esc:0x22> <type 273>) Elem () <type 38>
 func (m <esc:0x12> <type 273>) Underlying () ($ret272 <type 38>) <inl:198>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/types/type.go:476
  { //476
   $ret272 = m //476
   return //476
  } //0
 func (m <type 273>) String () <type -16>
type 21 "MethodSet" <type 274>
 func (s <esc:0x9> <type 276>) String () <type -16>
 func (s <esc:0x1> <type 276>) Len () <type -11>
 func (s <esc:0x32> <type 276>) At (i <type -11>) <type 263>
 func (s <esc:0x3a> <type 276>) Lookup (pkg <esc:0x1> <type 52>, name <esc:0x1> <type -16>) <type 263>
type 22 "Named" <type 277>
 func (n <esc:0x1> <type 204>) .go/types.setUnderlying (typ <type 38>)
 func (t <esc:0x22> <type 204>) Obj () <type 160>
 func (t <esc:0x1> <type 204>) NumMethods () <type -11>
 func (t <esc:0x32> <type 204>) Method (i <type -11>) <type 162>
 func (t <esc:0x1> <type 204>) SetUnderlying (underlying <type 38>)
 func (t <esc:0x9> <type 204>) AddMethod (m <type 162>)
 func (t <esc:0x22> <type 204>) Underlying () <type 38>
 func (t <type 204>) String () <type -16>
type 23 "Nil" <type 284>
 func (obj <type 285>) String () <type -16>
type 24 "Object" <type 286>
type 25 "Package" <type 287>
 func (pkg <esc:0x22> <type 52>) Path () <type -16>
 func (pkg <esc:0x22> <type 52>) Name () <type -16>
 func (pkg <esc:0x1> <type 52>) SetName (name <type -16>)
 func (pkg <esc:0x22> <type 52>) Scope () <type 50>
 func (pkg <esc:0x1> <type 52>) Complete () <type -15>
 func (pkg <esc:0x1> <type 52>) MarkComplete ()
 func (pkg <esc:0x22> <type 52>) Imports () <type 288>
 func (pkg <esc:0x1> <type 52>) SetImports (list <type 288>)
 func (pkg <esc:0x9> <type 52>) String () <type -16>
type 26 "PkgName" <type 289>
 func (obj <esc:0x22> <type 279>) Imported () <type 52>
 func (obj <type 279>) String () <type -16>
type 27 "Pointer" <type 290>
 func (p <esc:0x22> <type 280>) Elem () <type 38>
 func (p <esc:0x12> <type 280>) Underlying () ($ret268 <type 38>) <inl:198>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/types/type.go:472
  { //472
   $ret268 = p //472
   return //472
  } //0
 func (p <type 280>) String () <type -16>
type 28 "Qualifier" <type 291>
type 29 "Scope" <type 292>
 func (s <esc:0x22> <type 50>) Parent () <type 50>
 func (s <esc:0x1> <type 50>) Len () <type -11>
 func (s <esc:0x1> <type 50>) Names () <type 283>
 func (s <esc:0x1> <type 50>) NumChildren () <type -11>
 func (s <esc:0x32> <type 50>) Child (i <type -11>) <type 50>
 func (s <esc:0x1> <type 50>) Lookup (name <esc:0x1> <type -16>) <type 24>
 func (s <esc:0x12> <type 50>) LookupParent (name <esc:0x1> <type -16>, pos <type 51>) (? <type 50>, ? <type 24>)
 func (s <type 50>) Insert (obj <type 24>) <type 24>
 func (s <esc:0x1> <type 50>) Pos () <type 51>
 func (s <esc:0x1> <type 50>) End () <type 51>
 func (s <esc:0x1> <type 50>) Contains (pos <type 51>) <type -15>
 func (s <type 50>) Innermost (pos <type 51>) <type 50>
 func (s <type 50>) WriteTo (w <type 294>, n <type -11>, recurse <type -15>)
 func (s <type 50>) String () <type -16>
type 30 "Selection" <type 296>
 func (s <esc:0x1> <type 263>) Kind () <type 31>
 func (s <esc:0x22> <type 263>) Recv () <type 38>
 func (s <esc:0x22> <type 263>) Obj () <type 24>
 func (s <type 263>) Type () <type 38>
 func (s <esc:0x22> <type 263>) Index () <type 68>
 func (s <esc:0x1> <type 263>) Indirect () <type -15>
 func (s <type 263>) String () <type -16>
type 31 "SelectionKind" <type -11>
type 32 "Signature" <type 297>
 func (s <esc:0x22> <type 184>) Recv () <type 93>
 func (s <esc:0x22> <type 184>) Params () <type 281>
 func (s <esc:0x22> <type 184>) Results () <type 281>
 func (s <esc:0x1> <type 184>) Variadic () <type -15>
 func (s <esc:0x12> <type 184>) Underlying () ($ret270 <type 38>) <inl:198>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/types/type.go:474
  { //474
   $ret270 = s //474
   return //474
  } //0
 func (s <type 184>) String () <type -16>
type 33 "Sizes" <type 298>
type 34 "Slice" <type 299>
 func (s <esc:0x22> <type 282>) Elem () <type 38>
 func (s <esc:0x12> <type 282>) Underlying () ($ret266 <type 38>) <inl:198>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/types/type.go:470
  { //470
   $ret266 = s //470
   return //470
  } //0
 func (s <type 282>) String () <type -16>
type 35 "StdSizes" <type 300>
 func (s <esc:0x1> <type 301>) Alignof (T <type 38>) <type -4>
 func (s <esc:0x1> <type 301>) Offsetsof (fields <esc:0x9> <type 92>) <type 252>
 func (s <esc:0x1> <type 301>) Sizeof (T <type 38>) <type -4>
type 36 "Struct" <type 302>
 func (s <esc:0x1> <type 246>) NumFields () <type -11>
 func (s <esc:0x32> <type 246>) Field (i <type -11>) <type 93>
 func (s <esc:0x32> <type 246>) Tag (i <type -11>) <type -16>
 func (s <esc:0x12> <type 246>) Underlying () ($ret267 <type 38>) <inl:198>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/types/type.go:471
  { //471
   $ret267 = s //471
   return //471
  } //0
 func (s <type 246>) String () <type -16>
type 37 "Tuple" <type 303>
 func (t <esc:0x1> <type 281>) Len () <type -11>
 func (t <esc:0x32> <type 281>) At (i <type -11>) <type 93>
 func (t <esc:0x12> <type 281>) Underlying () ($ret269 <type 38>) <inl:198>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/types/type.go:473
  { //473
   $ret269 = t //473
   return //473
  } //0
 func (t <type 281>) String () <type -16>
type 38 "Type" <type 305>
type 39 "TypeAndValue" <type 306>
 func (tv <esc:0x1> <type 39>) IsVoid () <type -15>
 func (tv <esc:0x1> <type 39>) IsType () <type -15>
 func (tv <esc:0x1> <type 39>) IsBuiltin () <type -15>
 func (tv <esc:0x1> <type 39>) IsValue () <type -15>
 func (tv <esc:0x1> <type 39>) IsNil () <type -15>
 func (tv <esc:0x1> <type 39>) Addressable () <type -15>
 func (tv <esc:0x1> <type 39>) Assignable () <type -15>
 func (tv <esc:0x1> <type 39>) HasOk () <type -15>
type 40 "TypeName" <type 284>
 func (obj <esc:0x1> <type 160>) IsAlias () <type -15>
 func (obj <type 160>) String () <type -16>
type 41 "Var" <type 307>
 func (obj <esc:0x1> <type 93>) Anonymous () <type -15>
 func (obj <esc:0x1> <type 93>) Embedded () <type -15>
 func (obj <esc:0x1> <type 93>) IsField () <type -15>
 func (? <esc:0x1> <type 93>) .go/types.isDependency () <inl:145>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/go/types/object.go:290
 func (obj <type 93>) String () <type -16>
type 42 struct { .go/types.len <type -4>; .go/types.elem <type 38>; }
type 43 *<type 1>
type 44 *<type 18>
type 45 struct { .go/types.kind <type 4>; .go/types.info <type 3>; .go/types.name <type -16>; }
type 46 *<type 2>
type 47 struct { ? <type 48>; .go/types.id <type 55>; }
type 48 ".go/types.object" <type 54>
 func (obj <esc:0x22> <type 49>) Parent () <type 50>
 func (obj <esc:0x1> <type 49>) Pos () <type 51>
 func (obj <esc:0x22> <type 49>) Pkg () <type 52>
 func (obj <esc:0x22> <type 49>) Name () <type -16>
 func (obj <esc:0x22> <type 49>) Type () <type 38>
 func (obj <esc:0x1> <type 49>) Exported () <type -15>
 func (obj <esc:0x22> <type 49>) Id () <type -16>
 func (obj <esc:0x1> <type 49>) String () <type -16>
 func (obj <esc:0x1> <type 49>) .go/types.order () <type -7>
 func (obj <esc:0x1> <type 49>) .go/types.color () <type 53>
 func (obj <esc:0x1> <type 49>) .go/types.scopePos () <type 51>
 func (obj <esc:0x1> <type 49>) .go/types.setParent (parent <type 50>)
 func (obj <esc:0x1> <type 49>) .go/types.setOrder (order <type -7>)
 func (obj <esc:0x1> <type 49>) .go/types.setColor (color <type 53>)
 func (obj <esc:0x1> <type 49>) .go/types.setScopePos (pos <type 51>)
 func (obj <esc:0x1> <type 49>) .go/types.sameId (pkg <esc:0x1> <type 52>, name <esc:0x1> <type -16>) <type -15>
type 49 *<type 48>
type 50 *<type 29>
type 51 "go/token.Pos" <type -11>
 func (p <type 51>) IsValid () <type -15>
type 52 *<type 25>
type 53 ".go/types.color" <type -7>
 func (c <type 53>) String () <type -16>
type 54 struct { .go/types.parent <type 50>; .go/types.pos <type 51>; .go/types.pkg <type 52>; .go/types.name <type -16>; .go/types.typ <type 38>; .go/types.order_ <type -7>; .go/types.color_ <type 53>; .go/types.scopePos_ <type 51>; }
type 55 ".go/types.builtinId" <type -11>
type 56 *<type 5>
type 57 struct { .go/types.dir <type 7>; .go/types.elem <type 38>; }
type 58 *<type 6>
type 59 struct { .go/types.conf <type 60>; .go/types.fset <type 61>; .go/types.pkg <type 52>; ? <type 87>; .go/types.objMap <type 88>; .go/types.impMap <type 138>; .go/types.files <type 141>; .go/types.unusedDotImports <type 157>; .go/types.firstErr <type -19>; .go/types.methods <type 159>; .go/types.interfaces <type 163>; .go/types.untyped <type 171>; .go/types.delayed <type 178>; .go/types.objPath <type 180>; ? <type 181>; .go/types.indent <type -11>; }
type 60 *<type 9>
type 61 *<type 62>
type 62 "go/token.FileSet" <type 80>
 func (s <type 61>) Base () <type -11>
 func (s <type 61>) Position (p <type 51>) (pos <type 63>)
 func (s <type 61>) AddFile (filename <type -16>, base <type -11>, size <type -11>) <type 66>
 func (s <type 61>) Write (encode <esc:0x22> <type 77>) <type -19>
 func (s <type 61>) Iterate (f <esc:0x1> <type 79>)
 func (s <type 61>) File (p <type 51>) (f <type 66>)
 func (s <type 61>) .go/token.file (p <type 51>) <type 66>
 func (s <type 61>) PositionFor (p <type 51>, adjusted <type -15>) (pos <type 63>)
 func (s <type 61>) Read (decode <esc:0x22> <type 77>) <type -19>
type 63 "go/token.Position" <type 65>
 func (pos <esc:0x1> <type 64>) IsValid () <type -15>
 func (pos <type 63>) String () <type -16>
type 64 *<type 63>
type 65 struct { Filename <type -16>; Offset <type -11>; Line <type -11>; Column <type -11>; }
type 66 *<type 67>
type 67 "go/token.File" <type 70>
 func (f <esc:0x1> <type 66>) Offset (p <type 51>) <type -11>
 func (f <type 66>) AddLineInfo (offset <type -11>, filename <type -16>, line <type -11>)
 func (f <type 66>) LineStart (line <type -11>) <type 51>
 func (f <type 66>) SetLines (lines <type 68>) <type -15>
 func (f <type 66>) MergeLine (line <type -11>)
 func (f <type 66>) Line (p <type 51>) <type -11>
 func (f <type 66>) .go/token.unpack (offset <type -11>, adjusted <type -15>) (filename <type -16>, line <type -11>, column <type -11>)
 func (f <esc:0x1> <type 66>) Pos (offset <type -11>) <type 51>
 func (f <type 66>) Position (p <type 51>) (pos <type 63>)
 func (f <esc:0x1> <type 66>) Base () <type -11>
 func (f <type 66>) AddLine (offset <type -11>)
 func (f <type 66>) SetLinesForContent (content <esc:0x1> <type 69>)
 func (f <esc:0x22> <type 66>) Name () <type -16>
 func (f <type 66>) PositionFor (p <type 51>, adjusted <type -15>) (pos <type 63>)
 func (f <esc:0x1> <type 66>) Size () <type -11>
 func (f <type 66>) LineCount () <type -11>
 func (f <type 66>) AddLineColumnInfo (offset <type -11>, filename <type -16>, line <type -11>, column <type -11>)
 func (f <type 66>) .go/token.position (p <type 51>, adjusted <type -15>) (pos <type 63>)
type 68 [] <type -11>
type 69 [] <type -20>
type 70 struct { .go/token.set <type 61>; .go/token.name <type -16>; .go/token.base <type -11>; .go/token.size <type -11>; .go/token.mutex <type 71>; .go/token.lines <type 68>; .go/token.infos <type 74>; }
type 71 "sync.Mutex" <type 73>
 func (m <type 72>) Unlock ()
 func (m <type 72>) Lock ()
type 72 *<type 71>
type 73 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 74 [] <type 75>
type 75 ".go/token.lineInfo" <type 76>
type 76 struct { Offset <type -11>; Filename <type -16>; Line <type -11>; Column <type -11>; }
type 77 (? <type 78>) <type -19>
type 78 interface { }
type 79 (? <type 66>) <type -15>
type 80 struct { .go/token.mutex <type 81>; .go/token.base <type -11>; .go/token.files <type 86>; .go/token.last <type 66>; }
type 81 "sync.RWMutex" <type 85>
 func (rw <esc:0x12> <type 82>) RLocker () ($ret8 <type 83>)
 func (rw <type 82>) Unlock ()
 func (rw <type 82>) Lock ()
 func (rw <type 82>) RUnlock ()
 func (rw <type 82>) RLock ()
type 82 *<type 81>
type 83 "sync.Locker" <type 84>
type 84 interface { Lock (); Unlock (); }
type 85 struct { .sync.w <type 71>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 86 [] <type 66>
type 87 *<type 16>
type 88 map [<type 24>] <type 89>
type 89 *<type 90>
type 90 ".go/types.declInfo" <type 91>
 func (d <esc:0x1> <type 89>) .go/types.hasInitializer () <type -15>
 func (d <esc:0x9> <type 89>) .go/types.addDep (obj <type 24>)
type 91 struct { .go/types.file <type 50>; .go/types.lhs <type 92>; .go/types.typ <type 94>; .go/types.init <type 94>; .go/types.fdecl <type 98>; .go/types.alias <type -15>; .go/types.deps <type 136>; }
type 92 [] <type 93>
type 93 *<type 41>
type 94 "go/ast.Expr" <type 95>
type 95 interface { ? <type 96>; .go/ast.exprNode (); }
type 96 "go/ast.Node" <type 97>
type 97 interface { End () <type 51>; Pos () <type 51>; }
type 98 *<type 99>
type 99 "go/ast.FuncDecl" <type 100>
 func (? <esc:0x1> <type 98>) .go/ast.declNode ()
 func (d <esc:0x9> <type 98>) End () <type 51>
 func (d <esc:0x9> <type 98>) Pos () <type 51>
type 100 struct { Doc <type 101>; Recv <type 108>; Name <type 116>; Type <type 127>; Body <type 130>; }
type 101 *<type 102>
type 102 "go/ast.CommentGroup" <type 103>
 func (g <esc:0x9> <type 101>) Text () <type -16>
 func (g <esc:0x1> <type 101>) End () <type 51>
 func (g <esc:0x1> <type 101>) Pos () <type 51>
type 103 struct { List <type 104>; }
type 104 [] <type 105>
type 105 *<type 106>
type 106 "go/ast.Comment" <type 107>
 func (c <esc:0x1> <type 105>) End () <type 51>
 func (c <esc:0x1> <type 105>) Pos () <type 51>
type 107 struct { Slash <type 51>; Text <type -16>; }
type 108 *<type 109>
type 109 "go/ast.FieldList" <type 110>
 func (f <esc:0x1> <type 108>) NumFields () <type -11>
 func (f <esc:0x9> <type 108>) End () <type 51>
 func (f <esc:0x9> <type 108>) Pos () <type 51>
type 110 struct { Opening <type 51>; List <type 111>; Closing <type 51>; }
type 111 [] <type 112>
type 112 *<type 113>
type 113 "go/ast.Field" <type 114>
 func (f <esc:0x9> <type 112>) End () <type 51>
 func (f <esc:0x9> <type 112>) Pos () <type 51>
type 114 struct { Doc <type 101>; Names <type 115>; Type <type 94>; Tag <type 123>; Comment <type 101>; }
type 115 [] <type 116>
type 116 *<type 117>
type 117 "go/ast.Ident" <type 118>
 func (id <esc:0x22> <type 116>) String () <type -16>
 func (id <esc:0x1> <type 116>) IsExported () <type -15>
 func (? <esc:0x1> <type 116>) .go/ast.exprNode ()
 func (x <esc:0x1> <type 116>) End () <type 51>
 func (x <esc:0x1> <type 116>) Pos () <type 51>
type 118 struct { NamePos <type 51>; Name <type -16>; Obj <type 119>; }
type 119 *<type 120>
type 120 "go/ast.Object" <type 121>
 func (obj <esc:0x1> <type 119>) Pos () <type 51>
type 121 struct { Kind <type 122>; Name <type -16>; Decl <type 78>; Data <type 78>; Type <type 78>; }
type 122 "go/ast.ObjKind" <type -11>
 func (kind <type 122>) String () <type -16>
type 123 *<type 124>
type 124 "go/ast.BasicLit" <type 125>
 func (? <esc:0x1> <type 123>) .go/ast.exprNode ()
 func (x <esc:0x1> <type 123>) End () <type 51>
 func (x <esc:0x1> <type 123>) Pos () <type 51>
type 125 struct { ValuePos <type 51>; Kind <type 126>; Value <type -16>; }
type 126 "go/token.Token" <type -11>
 func (tok <type 126>) String () <type -16>
 func (op <type 126>) Precedence () <type -11>
 func (tok <type 126>) IsLiteral () <type -15>
 func (tok <type 126>) IsOperator () <type -15>
 func (tok <type 126>) IsKeyword () <type -15>
type 127 *<type 128>
type 128 "go/ast.FuncType" <type 129>
 func (? <esc:0x1> <type 127>) .go/ast.exprNode ()
 func (x <esc:0x9> <type 127>) End () <type 51>
 func (x <esc:0x9> <type 127>) Pos () <type 51>
type 129 struct { Func <type 51>; Params <type 108>; Results <type 108>; }
type 130 *<type 131>
type 131 "go/ast.BlockStmt" <type 132>
 func (? <esc:0x1> <type 130>) .go/ast.stmtNode ()
 func (s <esc:0x1> <type 130>) End () <type 51>
 func (s <esc:0x1> <type 130>) Pos () <type 51>
type 132 struct { Lbrace <type 51>; List <type 133>; Rbrace <type 51>; }
type 133 [] <type 134>
type 134 "go/ast.Stmt" <type 135>
type 135 interface { ? <type 96>; .go/ast.stmtNode (); }
type 136 ".go/types.objSet" <type 137>
type 137 map [<type 24>] <type -15>
type 138 map [<type 139>] <type 52>
type 139 ".go/types.importKey" <type 140>
type 140 struct { .go/types.path <type -16>; .go/types.dir <type -16>; }
type 141 [] <type 142>
type 142 *<type 143>
type 143 "go/ast.File" <type 144>
 func (f <esc:0x9> <type 142>) End () <type 51>
 func (f <esc:0x1> <type 142>) Pos () <type 51>
type 144 struct { Doc <type 101>; Package <type 51>; Name <type 116>; Decls <type 145>; Scope <type 148>; Imports <type 152>; Unresolved <type 115>; Comments <type 156>; }
type 145 [] <type 146>
type 146 "go/ast.Decl" <type 147>
type 147 interface { ? <type 96>; .go/ast.declNode (); }
type 148 *<type 149>
type 149 "go/ast.Scope" <type 150>
 func (s <type 148>) String () <type -16>
 func (s <esc:0x1> <type 148>) Insert (obj <type 119>) (alt <type 119>)
 func (s <esc:0x1> <type 148>) Lookup (name <esc:0x1> <type -16>) <type 119>
type 150 struct { Outer <type 148>; Objects <type 151>; }
type 151 map [<type -16>] <type 119>
type 152 [] <type 153>
type 153 *<type 154>
type 154 "go/ast.ImportSpec" <type 155>
 func (? <esc:0x1> <type 153>) .go/ast.specNode ()
 func (s <esc:0x1> <type 153>) End () <type 51>
 func (s <esc:0x1> <type 153>) Pos () <type 51>
type 155 struct { Doc <type 101>; Name <type 116>; Path <type 123>; Comment <type 101>; EndPos <type 51>; }
type 156 [] <type 101>
type 157 map [<type 50>] <type 158>
type 158 map [<type 52>] <type 51>
type 159 map [<type 160>] <type 161>
type 160 *<type 40>
type 161 [] <type 162>
type 162 *<type 12>
type 163 map [<type 160>] <type 164>
type 164 *<type 165>
type 165 ".go/types.ifaceInfo" <type 166>
 func (info <esc:0x9> <type 164>) String () <type -16>
type 166 struct { .go/types.explicits <type -11>; .go/types.methods <type 167>; }
type 167 [] <type 168>
type 168 *<type 169>
type 169 ".go/types.methodInfo" <type 170>
 func (info <esc:0x32> <type 168>) String () <type -16>
 func (info <esc:0x9> <type 168>) Pos () <type 51>
 func (info <esc:0x32> <type 168>) .go/types.id (pkg <esc:0x1> <type 52>) <type -16>
type 170 struct { .go/types.scope <type 50>; .go/types.src <type 112>; .go/types.fun <type 162>; }
type 171 map [<type 94>] <type 172>
type 172 ".go/types.exprInfo" <type 173>
type 173 struct { .go/types.isLhs <type -15>; .go/types.mode <type 174>; .go/types.typ <type 46>; .go/types.val <type 175>; }
type 174 ".go/types.operandMode" <type -20>
type 175 "go/constant.Value" <type 176>
type 176 interface { ExactString () <type -16>; Kind () <type 177>; String () <type -16>; .go/constant.implementsValue (); }
type 177 "go/constant.Kind" <type -11>
type 178 [] <type 179>
type 179 ()
type 180 [] <type 24>
type 181 ".go/types.context" <type 183>
 func (ctxt <esc:0x1> <type 182>) .go/types.lookup (name <esc:0x1> <type -16>) <type 24>
type 182 *<type 181>
type 183 struct { .go/types.decl <type 89>; .go/types.scope <type 50>; .go/types.pos <type 51>; .go/types.iota <type 175>; .go/types.sig <type 184>; .go/types.isPanic <type 185>; .go/types.hasLabel <type -15>; .go/types.hasCallOrRecv <type -15>; }
type 184 *<type 32>
type 185 map [<type 186>] <type -15>
type 186 *<type 187>
type 187 "go/ast.CallExpr" <type 188>
 func (? <esc:0x1> <type 186>) .go/ast.exprNode ()
 func (x <esc:0x1> <type 186>) End () <type 51>
 func (x <esc:0x9> <type 186>) Pos () <type 51>
type 188 struct { Fun <type 94>; Lparen <type 51>; Args <type 189>; Ellipsis <type 51>; Rparen <type 51>; }
type 189 [] <type 94>
type 190 *<type 8>
type 191 *<type 192>
type 192 ".go/types.operand" <type 194>
 func (x <esc:0x9> <type 191>) .go/types.convertibleTo (check <type 190>, T <type 38>) <type -15>
 func (x <esc:0x9> <type 191>) .go/types.pos () <type 51>
 func (x <esc:0x9> <type 191>) String () <type -16>
 func (x <esc:0x1> <type 191>) .go/types.setConst (tok <type 126>, lit <type -16>)
 func (x <esc:0x1> <type 191>) .go/types.isNil () <type -15>
 func (x <esc:0x9> <type 191>) .go/types.assignableTo (check <type 190>, T <type 38>, reason <esc:0x1> <type 193>) <type -15>
type 193 *<type -16>
type 194 struct { .go/types.mode <type 174>; .go/types.expr <type 94>; .go/types.typ <type 38>; .go/types.val <type 175>; .go/types.id <type 55>; }
type 195 *<type 10>
type 196 ".go/types.exprKind" <type -11>
type 197 ".go/types.getter" <type 198>
type 198 (x <type 191>, i <type -11>)
type 199 *<type 200>
type 200 "go/ast.SelectorExpr" <type 201>
 func (? <esc:0x1> <type 199>) .go/ast.exprNode ()
 func (x <esc:0x1> <type 199>) End () <type 51>
 func (x <esc:0x9> <type 199>) Pos () <type 51>
type 201 struct { X <type 94>; Sel <type 116>; }
type 202 *<type -19>
type 203 [2 ] <type 38>
type 204 *<type 22>
type 205 [] <type 78>
type 206 ".go/types.opPredicates" <type 207>
type 207 map [<type 126>] <type 208>
type 208 (? <type 38>) <type -15>
type 209 *<type 210>
type 210 "go/ast.UnaryExpr" <type 211>
 func (? <esc:0x1> <type 209>) .go/ast.exprNode ()
 func (x <esc:0x9> <type 209>) End () <type 51>
 func (x <esc:0x1> <type 209>) Pos () <type 51>
type 211 struct { OpPos <type 51>; Op <type 126>; X <type 94>; }
type 212 *<type 213>
type 213 "go/ast.BinaryExpr" <type 214>
 func (? <esc:0x1> <type 212>) .go/ast.exprNode ()
 func (x <esc:0x9> <type 212>) End () <type 51>
 func (x <esc:0x9> <type 212>) Pos () <type 51>
type 214 struct { X <type 94>; OpPos <type 51>; Op <type 126>; Y <type 94>; }
type 215 *<type 216>
type 216 ".go/types.methodInfoSet" <type 217>
 func (s <esc:0x1> <type 215>) .go/types.insert (pkg <esc:0x1> <type 52>, m <type 168>) <type 168>
type 217 map [<type -16>] <type 168>
type 218 *<type 219>
type 219 "go/ast.InterfaceType" <type 220>
 func (? <esc:0x1> <type 218>) .go/ast.exprNode ()
 func (x <esc:0x9> <type 218>) End () <type 51>
 func (x <esc:0x1> <type 218>) Pos () <type 51>
type 220 struct { Interface <type 51>; Methods <type 108>; Incomplete <type -15>; }
type 221 [] <type 160>
type 222 *<type 223>
type 223 ".go/types.block" <type 227>
 func (b <esc:0x9> <type 222>) .go/types.insert (s <type 224>)
 func (b <esc:0x1> <type 222>) .go/types.gotoTarget (name <esc:0x1> <type -16>) <type 224>
 func (b <esc:0x22> <type 222>) .go/types.enclosingTarget (name <esc:0x1> <type -16>) <type 224>
type 224 *<type 225>
type 225 "go/ast.LabeledStmt" <type 226>
 func (? <esc:0x1> <type 224>) .go/ast.stmtNode ()
 func (s <esc:0x9> <type 224>) End () <type 51>
 func (s <esc:0x1> <type 224>) Pos () <type 51>
type 226 struct { Label <type 116>; Colon <type 51>; Stmt <type 134>; }
type 227 struct { .go/types.parent <type 222>; .go/types.lstmt <type 224>; .go/types.labels <type 228>; }
type 228 map [<type -16>] <type 224>
type 229 [] <type 230>
type 230 *<type 231>
type 231 "go/ast.BranchStmt" <type 232>
 func (? <esc:0x1> <type 230>) .go/ast.stmtNode ()
 func (s <esc:0x1> <type 230>) End () <type 51>
 func (s <esc:0x1> <type 230>) Pos () <type 51>
type 232 struct { TokPos <type 51>; Tok <type 126>; Label <type 116>; }
type 233 *<type 234>
type 234 "go/ast.ValueSpec" <type 235>
 func (? <esc:0x1> <type 233>) .go/ast.specNode ()
 func (s <esc:0x9> <type 233>) End () <type 51>
 func (s <esc:0x1> <type 233>) Pos () <type 51>
type 235 struct { Doc <type 101>; Names <type 115>; Type <type 94>; Values <type 189>; Comment <type 101>; }
type 236 ".go/types.stmtContext" <type -12>
type 237 ".go/types.valueMap" <type 238>
type 238 map [<type 78>] <type 239>
type 239 [] <type 240>
type 240 ".go/types.valueType" <type 241>
type 241 struct { .go/types.pos <type 51>; .go/types.typ <type 38>; }
type 242 map [<type 38>] <type 51>
type 243 *<type 244>
type 244 ".go/types.objset" <type 245>
 func (s <esc:0x1> <type 243>) .go/types.insert (obj <type 24>) <type 24>
type 245 map [<type -16>] <type 24>
type 246 *<type 36>
type 247 *<type 248>
type 248 "go/ast.StructType" <type 249>
 func (? <esc:0x1> <type 247>) .go/ast.exprNode ()
 func (x <esc:0x9> <type 247>) End () <type 51>
 func (x <esc:0x1> <type 247>) Pos () <type 51>
type 249 struct { Struct <type 51>; Fields <type 108>; Incomplete <type -15>; }
type 250 struct { IgnoreFuncBodies <type -15>; FakeImportC <type -15>; Error <type 251>; Importer <type 14>; Sizes <type 33>; DisableUnusedImportCheck <type -15>; }
type 251 (err <type -19>)
type 252 [] <type -4>
type 253 struct { ? <type 48>; .go/types.val <type 175>; }
type 254 struct { Fset <type 61>; Pos <type 51>; Msg <type -16>; Soft <type -15>; }
type 255 struct { ? <type 48>; .go/types.hasPtrRecv <type -15>; }
type 256 interface { Import (path <type -16>) (? <type 52>, ? <type -19>); }
type 257 interface { ? <type 14>; ImportFrom (path <type -16>, dir <type -16>, mode <type 13>) (? <type 52>, ? <type -19>); }
type 258 struct { Types <type 259>; Defs <type 260>; Uses <type 260>; Implicits <type 261>; Selections <type 262>; Scopes <type 264>; InitOrder <type 265>; }
type 259 map [<type 94>] <type 39>
type 260 map [<type 116>] <type 24>
type 261 map [<type 96>] <type 24>
type 262 map [<type 199>] <type 263>
type 263 *<type 30>
type 264 map [<type 96>] <type 50>
type 265 [] <type 266>
type 266 *<type 17>
type 267 struct { Lhs <type 92>; Rhs <type 94>; }
type 268 struct { .go/types.methods <type 161>; .go/types.embeddeds <type 269>; .go/types.allMethods <type 161>; }
type 269 [] <type 38>
type 270 struct { ? <type 48>; .go/types.used <type -15>; }
type 271 *<type 19>
type 272 struct { .go/types.key <type 38>; .go/types.elem <type 38>; }
type 273 *<type 20>
type 274 struct { .go/types.list <type 275>; }
type 275 [] <type 263>
type 276 *<type 21>
type 277 struct { .go/types.obj <type 160>; .go/types.underlying <type 38>; .go/types.methods <type 161>; }
type 278 [] <type 204>
type 279 *<type 26>
type 280 *<type 27>
type 281 *<type 37>
type 282 *<type 34>
type 283 [] <type -16>
type 284 struct { ? <type 48>; }
type 285 *<type 23>
type 286 interface { Exported () <type -15>; Id () <type -16>; Name () <type -16>; Parent () <type 50>; Pkg () <type 52>; Pos () <type 51>; String () <type -16>; Type () <type 38>; .go/types.color () <type 53>; .go/types.order () <type -7>; .go/types.sameId (pkg <type 52>, name <type -16>) <type -15>; .go/types.scopePos () <type 51>; .go/types.setColor (color <type 53>); .go/types.setOrder (? <type -7>); .go/types.setParent (? <type 50>); .go/types.setScopePos (pos <type 51>); }
type 287 struct { .go/types.path <type -16>; .go/types.name <type -16>; .go/types.scope <type 50>; .go/types.complete <type -15>; .go/types.imports <type 288>; .go/types.fake <type -15>; }
type 288 [] <type 52>
type 289 struct { ? <type 48>; .go/types.imported <type 52>; .go/types.used <type -15>; }
type 290 struct { .go/types.base <type 38>; }
type 291 (? <type 52>) <type -16>
type 292 struct { .go/types.parent <type 50>; .go/types.children <type 293>; .go/types.elems <type 245>; .go/types.pos <type 51>; .go/types.end <type 51>; .go/types.comment <type -16>; .go/types.isFunc <type -15>; }
type 293 [] <type 50>
type 294 "io.Writer" <type 295>
type 295 interface { Write (p <type 69>) (n <type -11>, err <type -19>); }
type 296 struct { .go/types.kind <type 31>; .go/types.recv <type 38>; .go/types.obj <type 24>; .go/types.index <type 68>; .go/types.indirect <type -15>; }
type 297 struct { .go/types.scope <type 50>; .go/types.recv <type 93>; .go/types.params <type 281>; .go/types.results <type 281>; .go/types.variadic <type -15>; }
type 298 interface { Alignof (T <type 38>) <type -4>; Offsetsof (fields <type 92>) <type 252>; Sizeof (T <type 38>) <type -4>; }
type 299 struct { .go/types.elem <type 38>; }
type 300 struct { WordSize <type -4>; MaxAlign <type -4>; }
type 301 *<type 35>
type 302 struct { .go/types.fields <type 92>; .go/types.tags <type 283>; }
type 303 struct { .go/types.vars <type 92>; }
type 304 [] <type 46>
type 305 interface { String () <type -16>; Underlying () <type 38>; }
type 306 struct { .go/types.mode <type 174>; Type <type 38>; Value <type 175>; }
type 307 struct { ? <type 48>; .go/types.embedded <type -15>; .go/types.isField <type -15>; .go/types.used <type -15>; }
type 308 *<type 309>
type 309 "bytes.Buffer" <type 312>
 func (b <esc:0x22> <type 308>) .bytes.readSlice (delim <type -20>) (line <type 69>, err <type -19>)
 func (b <esc:0x1> <type 308>) ReadBytes (delim <type -20>) (line <type 69>, err <type -19>)
 func (b <esc:0x1> <type 308>) UnreadByte () <type -19>
 func (b <esc:0x1> <type 308>) UnreadRune () <type -19>
 func (b <esc:0x1> <type 308>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x1> <type 308>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x9> <type 308>) WriteTo (w <type 294>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 308>) Read (p <esc:0x1> <type 69>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 308>) Truncate (n <type -11>)
 func (b <esc:0x1> <type 308>) .bytes.tryGrowByReslice (n <type -11>) (? <type -11>, ? <type -15>)
 func (b <esc:0x1> <type 308>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x22> <type 308>) Bytes () <type 69>
 func (b <esc:0x1> <type 308>) String () <type -16>
 func (b <esc:0x1> <type 308>) Cap () <type -11>
 func (b <esc:0x1> <type 308>) Len () <type -11>
 func (b <esc:0x1> <type 308>) WriteRune (r <type -21>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 308>) .bytes.empty () <type -15>
 func (b <esc:0x1> <type 308>) Reset ()
 func (b <esc:0x22> <type 308>) Next (n <type -11>) <type 69>
 func (b <esc:0x1> <type 308>) .bytes.grow (n <type -11>) <type -11>
 func (b <esc:0x1> <type 308>) Grow (n <type -11>)
 func (b <esc:0x1> <type 308>) Write (p <esc:0x1> <type 69>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 308>) ReadString (delim <type -20>) (line <type -16>, err <type -19>)
 func (b <esc:0x1> <type 308>) WriteString (s <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (b <esc:0x9> <type 308>) ReadFrom (r <type 310>) (n <type -4>, err <type -19>)
type 310 "io.Reader" <type 311>
type 311 interface { Read (p <type 69>) (n <type -11>, err <type -19>); }
type 312 struct { .bytes.buf <type 69>; .bytes.off <type -11>; .bytes.lastRead <type 313>; }
type 313 ".bytes.readOp" <type -1>
func AssertableTo (V <esc:0x9> <type 44>, T <type 38>) <type -15>
func AssignableTo (V <type 38>, T <type 38>) <type -15>
const Bool <type 4> = 1 
const Byte <type 4> = 8 
func Comparable (T <type 38>) <type -15>
const Complex128 <type 4> = 16 
const Complex64 <type 4> = 15 
func ConvertibleTo (V <type 38>, T <type 38>) <type -15>
func DefPredeclaredTestFuncs ()
func Default (typ <esc:0x12> <type 38>) <type 38>
func Eval (fset <type 61>, pkg <type 52>, pos <type 51>, expr <type -16>) (_ <type 39>, err <type -19>)
func ExprString (x <esc:0x1> <type 94>) <type -16>
const FieldVal <type 31> = 0 
const Float32 <type 4> = 13 
const Float64 <type 4> = 14 
func Id (pkg <esc:0x1> <type 52>, name <esc:0x12> <type -16>) <type -16>
func Identical (x <esc:0x9> <type 38>, y <esc:0x9> <type 38>) <type -15>
func IdenticalIgnoreTags (x <esc:0x9> <type 38>, y <esc:0x9> <type 38>) <type -15>
func Implements (V <type 38>, T <esc:0x9> <type 44>) <type -15>
const Int <type 4> = 2 
const Int16 <type 4> = 4 
const Int32 <type 4> = 5 
const Int64 <type 4> = 6 
const Int8 <type 4> = 3 
const Invalid <type 4> = 0 
const IsBoolean <type 3> = 1 
const IsComplex <type 3> = 16 
const IsConstType <type 3> = 59 
const IsFloat <type 3> = 8 
const IsInteger <type 3> = 2 
func IsInterface (typ <type 38>) <type -15>
const IsNumeric <type 3> = 26 
const IsOrdered <type 3> = 42 
const IsString <type 3> = 32 
const IsUnsigned <type 3> = 4 
const IsUntyped <type 3> = 64 
func LookupFieldOrMethod (T <type 38>, addressable <type -15>, pkg <esc:0x1> <type 52>, name <esc:0x1> <type -16>) (obj <type 24>, index <type 68>, indirect <type -15>)
const MethodExpr <type 31> = 2 
const MethodVal <type 31> = 1 
func MissingMethod (V <type 38>, T <esc:0x3a> <type 44>, static <type -15>) (method <type 162>, wrongType <type -15>)
func NewArray (elem <type 38>, len <type -4>) <type 43>
func NewChan (dir <type 7>, elem <type 38>) <type 58>
func NewChecker (conf <type 60>, fset <type 61>, pkg <type 52>, info <type 87>) <type 190>
func NewConst (pos <type 51>, pkg <type 52>, name <type -16>, typ <type 38>, val <type 175>) <type 195>
func NewField (pos <type 51>, pkg <type 52>, name <type -16>, typ <type 38>, embedded <type -15>) <type 93>
func NewFunc (pos <type 51>, pkg <type 52>, name <type -16>, sig <type 184>) <type 162>
func NewInterface (methods <type 161>, embeddeds <esc:0x9> <type 278>) <type 44>
func NewInterfaceType (methods <type 161>, embeddeds <type 269>) <type 44>
func NewLabel (pos <type 51>, pkg <type 52>, name <type -16>) <type 271>
func NewMap (key <type 38>, elem <type 38>) <type 273>
func NewMethodSet (T <type 38>) <type 276>
func NewNamed (obj <type 160>, underlying <type 38>, methods <type 161>) <type 204>
func NewPackage (path <type -16>, name <type -16>) <type 52>
func NewParam (pos <type 51>, pkg <type 52>, name <type -16>, typ <type 38>) <type 93>
func NewPkgName (pos <type 51>, pkg <type 52>, name <type -16>, imported <type 52>) <type 279>
func NewPointer (elem <type 38>) <type 280>
func NewScope (parent <type 50>, pos <type 51>, end <type 51>, comment <type -16>) <type 50>
func NewSignature (recv <type 93>, params <type 281>, results <type 281>, variadic <type -15>) <type 184>
func NewSlice (elem <type 38>) <type 282>
func NewStruct (fields <type 92>, tags <type 283>) <type 246>
func NewTuple (x ...<type 93>) <type 281>
func NewTypeName (pos <type 51>, pkg <type 52>, name <type -16>, typ <type 38>) <type 160>
func NewVar (pos <type 51>, pkg <type 52>, name <type -16>, typ <type 38>) <type 93>
func ObjectString (obj <type 24>, qf <esc:0x1> <type 28>) <type -16>
const RecvOnly <type 7> = 2 
func RelativeTo (pkg <type 52>) <type 28>
const Rune <type 4> = 5 
func SelectionString (s <type 263>, qf <esc:0x1> <type 28>) <type -16>
const SendOnly <type 7> = 1 
const SendRecv <type 7> = 0 
func SizesFor (compiler <esc:0x1> <type -16>, arch <esc:0x1> <type -16>) <type 33>
const String <type 4> = 17 
var Typ <type 304>
func TypeString (typ <type 38>, qf <esc:0x1> <type 28>) <type -16>
const Uint <type 4> = 7 
const Uint16 <type 4> = 9 
const Uint32 <type 4> = 10 
const Uint64 <type 4> = 11 
const Uint8 <type 4> = 8 
const Uintptr <type 4> = 12 
var Universe <type 50>
var Unsafe <type 52>
const UnsafePointer <type 4> = 18 
const UntypedBool <type 4> = 19 
const UntypedComplex <type 4> = 23 
const UntypedFloat <type 4> = 22 
const UntypedInt <type 4> = 20 
const UntypedNil <type 4> = 25 
const UntypedRune <type 4> = 21 
const UntypedString <type 4> = 24 
func WriteExpr (buf <esc:0x1> <type 308>, x <esc:0x1> <type 94>)
func WriteSignature (buf <type 308>, sig <esc:0x9> <type 184>, qf <esc:0x1> <type 28>)
func WriteType (buf <type 308>, typ <type 38>, qf <esc:0x1> <type 28>)
checksum A389BAD5F7F7C2E3DB504B7AFEA7217785744582
v3;
package hash
pkgpath hash
import io io "io"
init cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import
init_graph 1 0 1 2 1 3 1 4 2 0 2 3 4 0 4 2 4 3
types 10 4 23 25 25 115 28 72 21 53 53
type 1 "Hash" <type 4>
type 2 "Hash32" <type 8>
type 3 "Hash64" <type 9>
type 4 interface { ? <type 5>; BlockSize () <type -11>; Reset (); Size () <type -11>; Sum (b <type 7>) <type 7>; }
type 5 "io.Writer" <type 6>
type 6 interface { Write (p <type 7>) (n <type -11>, err <type -19>); }
type 7 [] <type -20>
type 8 interface { ? <type 1>; Sum32 () <type -7>; }
type 9 interface { ? <type 1>; Sum64 () <type -8>; }
checksum B0C7AAF332F2CF11ACE3E7AD09CE75AB19F4B1DD
v3;
package adler32
pkgpath hash/adler32
import errors errors "errors"
import hash hash "hash"
indirectimport io io
init cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import
init_graph 1 0 1 2 1 3 1 4 2 0 2 3 4 0 4 2 4 3
types 8 1 21 30 53 28 115 28 72
type 1 [] <type -20>
type 2 "hash.Hash32" <type 3>
type 3 interface { ? <type 4>; Sum32 () <type -7>; }
type 4 "hash.Hash" <type 5>
type 5 interface { ? <type 6>; BlockSize () <type -11>; Reset (); Size () <type -11>; Sum (b <type 1>) <type 1>; }
type 6 "io.Writer" <type 7>
type 7 interface { Write (p <type 1>) (n <type -11>, err <type -19>); }
func Checksum (data <esc:0x1> <type 1>) <type -7>
func New () <type 2>
const Size = 4 
checksum A86C4293DCA259B9BA254D51CB96067E411F8699
v3;
package crc32
pkgpath hash/crc32
import errors errors "errors"
import hash hash "hash"
import sync sync "sync"
indirectimport io io
init crc32 hash..z2fcrc32..import cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import
init_graph 0 1 0 2 0 3 0 4 0 5 2 1 2 3 2 4 2 5 3 1 3 4 5 1 5 3 5 4
types 11 2 25 21 17 30 53 28 115 28 72 25
type 1 "Table" <type 10>
type 2 [] <type -20>
type 3 *<type 1>
type 4 "hash.Hash32" <type 5>
type 5 interface { ? <type 6>; Sum32 () <type -7>; }
type 6 "hash.Hash" <type 7>
type 7 interface { ? <type 8>; BlockSize () <type -11>; Reset (); Size () <type -11>; Sum (b <type 2>) <type 2>; }
type 8 "io.Writer" <type 9>
type 9 interface { Write (p <type 2>) (n <type -11>, err <type -19>); }
type 10 [256 ] <type -7>
const Castagnoli = 2197175160 
func Checksum (data <type 2>, tab <esc:0x1> <type 3>) <type -7>
func ChecksumIEEE (data <type 2>) <type -7>
const IEEE = 3988292384 
var IEEETable <type 3>
const Koopman = 3945912366 
func MakeTable (poly <type -7>) <type 3>
func New (tab <type 3>) <type 4>
func NewIEEE () <type 4>
const Size = 4 
func Update (crc <type -7>, tab <esc:0x1> <type 3>, p <type 2>) <type -7>
checksum E18A18BDBC6FD5743C20C3CC94D6683D68ABBDA7
v3;
package crc64
pkgpath hash/crc64
import errors errors "errors"
import hash hash "hash"
import sync sync "sync"
indirectimport io io
init crc64 hash..z2fcrc64..import cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import
init_graph 0 1 0 2 0 3 0 4 0 5 2 1 2 3 2 4 2 5 3 1 3 4 5 1 5 3 5 4
types 11 2 25 21 17 30 53 28 115 28 72 25
type 1 "Table" <type 10>
type 2 [] <type -20>
type 3 *<type 1>
type 4 "hash.Hash64" <type 5>
type 5 interface { ? <type 6>; Sum64 () <type -8>; }
type 6 "hash.Hash" <type 7>
type 7 interface { ? <type 8>; BlockSize () <type -11>; Reset (); Size () <type -11>; Sum (b <type 2>) <type 2>; }
type 8 "io.Writer" <type 9>
type 9 interface { Write (p <type 2>) (n <type -11>, err <type -19>); }
type 10 [256 ] <type -8>
func Checksum (data <esc:0x1> <type 2>, tab <esc:0x1> <type 3>) <type -8>
const ECMA = 14514072000185962306 
const ISO = 15564440312192434176 
func MakeTable (poly <type -8>) <type 3>
func New (tab <type 3>) <type 4>
const Size = 8 
func Update (crc <type -8>, tab <esc:0x1> <type 3>, p <esc:0x1> <type 2>) <type -8>
checksum B4ACAF59AD37BFF640DB53010541EB2D97CCE0D8
v3;
package fnv
pkgpath hash/fnv
import errors errors "errors"
import hash hash "hash"
import bits math/bits "math/bits"
indirectimport io io
init cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import
init_graph 1 0 1 2 1 3 1 4 2 0 2 3 4 0 4 2 4 3
types 10 1 28 115 28 72 21 30 53 30 53
type 1 "hash.Hash" <type 2>
type 2 interface { ? <type 3>; BlockSize () <type -11>; Reset (); Size () <type -11>; Sum (b <type 5>) <type 5>; }
type 3 "io.Writer" <type 4>
type 4 interface { Write (p <type 5>) (n <type -11>, err <type -19>); }
type 5 [] <type -20>
type 6 "hash.Hash32" <type 7>
type 7 interface { ? <type 1>; Sum32 () <type -7>; }
type 8 "hash.Hash64" <type 9>
type 9 interface { ? <type 1>; Sum64 () <type -8>; }
func New128 () <type 1>
func New128a () <type 1>
func New32 () <type 6>
func New32a () <type 6>
func New64 () <type 8>
func New64a () <type 8>
checksum 4352D487C6A59EF48CC14D228994412F1F068C5B
v3;
package html
pkgpath html
import strings strings "strings"
import sync sync "sync"
import utf8 unicode/utf8 "unicode/utf8"
init html html..import cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 2 1 2 3 2 4 2 5 3 1 3 4 5 1 5 3 5 4
types 1 1
func EscapeString (s <type -16>) <type -16>
func UnescapeString (s <esc:0x12> <type -16>) <type -16>
checksum 6AB53DF4CFFED64B911F4D60927651D44242AACF
v3;
package template
pkgpath html/template
import bytes bytes "bytes"
import json encoding/json "encoding/json"
import fmt fmt "fmt"
import html html "html"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import filepath path/filepath "path/filepath"
import reflect reflect "reflect"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import template text/template "text/template"
import parse text/template/parse "text/template/parse"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
indirectimport unsafe unsafe
init template html..z2ftemplate..import bytes bytes..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import json encoding..z2fjson..import fmt fmt..import html html..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import ioutil io..z2fioutil..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import template text..z2ftemplate..import parse text..z2ftemplate..z2fparse..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 1 7 1 10 1 15 1 16 1 18 1 23 2 3 2 7 2 10 2 14 2 15 2 16 2 17 2 18 2 23 3 7 3 10 3 14 3 15 3 16 3 17 3 18 3 23 4 1 4 2 4 3 4 5 4 7 4 8 4 9 4 10 4 12 4 14 4 15 4 16 4 17 4 18 4 19 4 22 4 23 5 7 5 8 5 9 5 10 5 12 5 14 5 15 5 16 5 17 5 18 5 19 5 22 5 23 6 7 6 10 6 15 6 16 6 18 6 23 8 7 8 10 8 15 8 16 8 18 8 19 8 22 10 7 10 15 10 16 10 18 11 1 11 7 11 8 11 9 11 10 11 12 11 13 11 14 11 15 11 16 11 17 11 18 11 19 11 22 11 23 12 7 12 8 12 9 12 10 12 15 12 16 12 18 12 19 12 22 13 7 13 8 13 9 13 10 13 12 13 14 13 15 13 16 13 17 13 18 13 19 13 22 13 23 14 7 14 15 14 16 14 17 14 18 14 23 15 7 15 16 17 7 17 15 17 16 18 7 18 15 18 16 19 7 19 15 19 16 19 18 20 1 20 5 20 7 20 8 20 9 20 10 20 11 20 12 20 13 20 14 20 15 20 16 20 17 20 18 20 19 20 21 20 22 20 23 21 1 21 5 21 7 21 8 21 9 21 10 21 12 21 14 21 15 21 16 21 17 21 18 21 19 21 22 21 23 22 7 22 15 22 16 22 18 22 19
types 179 12 24 75 30 27 25 29 23 26 27 1544 25 113 45 145 96 97 19 5444 21 22 87 166 51 20 35 21 35 19 219 97 22 19 350 19 296 96 21 150 21 19 222 21 19 344 97 19 97 32 220 19 149 19 98 19 218 80 19 95 19 218 96 22 19 220 113 19 222 130 19 218 97 19 265 19 291 254 19 272 113 19 267 97 19 265 19 1138 49 32 458 23 19 221 116 344 23 18 30 74 19 119 21 1601 43 23 21 44 196 37 44 58 54 224 21 34 43 151 93 21 65 37 4033 35 992 80 42 149 218 23 35 77 37 109 21 2140 23 38 151 21 37 14 362 49 49 21 21 282 104 25 23 23 21 191 67 84 289 154 21 47 147 36 1730 21 273 251 84 84 86 84 83 86 49 282 37 37 35 36 35 22
type 1 "CSS" <type -16>
type 2 "Error" <type 12>
 func (e <esc:0x9> <type 96>) Error () <type -16>
type 3 "ErrorCode" <type -11>
type 4 "FuncMap" <type 27>
type 5 "HTML" <type -16>
type 6 "HTMLAttr" <type -16>
type 7 "JS" <type -16>
type 8 "JSStr" <type -16>
type 9 "Srcset" <type -16>
type 10 "Template" <type 100>
 func (t <esc:0x9> <type 99>) Templates () <type 178>
 func (t <esc:0x12> <type 99>) Option (opt <esc:0x9> ...<type -16>) <type 99>
 func (t <esc:0x9> <type 99>) .html/template.checkCanParse () <type -19>
 func (t <esc:0x2a> <type 99>) .html/template.escape () <type -19>
 func (t <esc:0x2a> <type 99>) Execute (wr <type 97>, data <type 20>) <type -19>
 func (t <esc:0x9> <type 99>) ExecuteTemplate (wr <type 97>, name <type -16>, data <type 20>) <type -19>
 func (t <esc:0x9> <type 99>) .html/template.lookupAndEscapeTemplate (name <type -16>) (tmpl <type 99>, err <type -19>)
 func (t <esc:0x1> <type 99>) DefinedTemplates () <type -16>
 func (t <esc:0x1a> <type 99>) Parse (text <type -16>) (? <type 99>, ? <type -19>)
 func (t <esc:0xa> <type 99>) AddParseTree (name <type -16>, tree <type 17>) (? <type 99>, ? <type -19>)
 func (t <esc:0x9> <type 99>) Clone () (? <type 99>, ? <type -19>)
 func (t <esc:0x9> <type 99>) New (name <type -16>) <type 99>
 func (t <esc:0xa> <type 99>) .html/template.new (name <type -16>) <type 99>
 func (t <esc:0x32> <type 99>) Name () <type -16>
 func (t <esc:0x1a> <type 99>) Funcs (funcMap <esc:0x1> <type 4>) <type 99>
 func (t <esc:0x12> <type 99>) Delims (left <type -16>, right <type -16>) <type 99>
 func (t <esc:0x9> <type 99>) Lookup (name <esc:0x1> <type -16>) <type 99>
 func (t <esc:0x1a> <type 99>) ParseFiles (filenames <esc:0x9> ...<type -16>) (? <type 99>, ? <type -19>)
 func (t <esc:0x1a> <type 99>) ParseGlob (pattern <type -16>) (? <type 99>, ? <type -19>)
type 11 "URL" <type -16>
type 12 struct { ErrorCode <type 3>; Node <type 13>; Name <type -16>; Line <type -11>; Description <type -16>; }
type 13 "text/template/parse.Node" <type 14>
type 14 interface { Copy () <type 13>; Position () <type 15>; String () <type -16>; Type () <type 16>; .text/template/parse.tree () <type 17>; }
type 15 "text/template/parse.Pos" <type -11>
 func (p <type 15>) Position () ($ret28 <type 15>)
type 16 "text/template/parse.NodeType" <type -11>
 func (t <type 16>) Type () ($ret29 <type 16>)
type 17 *<type 18>
type 18 "text/template/parse.Tree" <type 94>
 func (t <esc:0x9> <type 17>) ErrorContext (n <type 13>) (location <type -16>, context <type -16>)
 func (t <esc:0x9> <type 17>) .text/template/parse.errorf (format <type -16>, args <esc:0x9> ...<type 20>)
 func (t <esc:0x22> <type 17>) .text/template/parse.nextNonSpace () (token <type 21>)
 func (t <esc:0x22> <type 17>) .text/template/parse.peek () <type 21>
 func (t <esc:0x1> <type 17>) .text/template/parse.recover (errp <esc:0x1> <type 24>)
 func (t <type 17>) Parse (text <type -16>, leftDelim <type -16>, rightDelim <type -16>, treeSet <type 25>, funcs ...<type 27>) (tree <type 17>, err <type -19>)
 func (t <esc:0x1> <type 17>) .text/template/parse.backup2 (t1 <type 21>)
 func (t <esc:0x2a> <type 17>) .text/template/parse.expectOneOf (expected1 <type 23>, expected2 <type 23>, context <type -16>) <type 21>
 func (t <esc:0x1> <type 17>) .text/template/parse.backup ()
 func (t <type 17>) .text/template/parse.newField (pos <type 15>, ident <type -16>) <type 28>
 func (t <esc:0x1> <type 17>) .text/template/parse.hasFunction (name <esc:0x1> <type -16>) <type -15>
 func (t <esc:0x1> <type 17>) .text/template/parse.popVars (n <type -11>)
 func (t <type 17>) .text/template/parse.newWith (pos <type 15>, line <type -11>, pipe <type 32>, list <type 43>, elseList <type 43>) <type 46>
 func (t <type 17>) .text/template/parse.command () <type 34>
 func (t <esc:0x9> <type 17>) .text/template/parse.checkPipeline (pipe <esc:0x9> <type 32>, context <type -16>)
 func (t <type 17>) .text/template/parse.newRange (pos <type 15>, line <type -11>, pipe <type 32>, list <type 43>, elseList <type 43>) <type 52>
 func (t <type 17>) .text/template/parse.newEnd (pos <type 15>) <type 54>
 func (t <type 17>) .text/template/parse.newIf (pos <type 15>, line <type -11>, pipe <type 32>, list <type 43>, elseList <type 43>) <type 57>
 func (t <type 17>) .text/template/parse.newText (pos <type 15>, text <esc:0x1> <type -16>) <type 59>
 func (t <type 17>) .text/template/parse.newList (pos <type 15>) <type 43>
 func (t <type 17>) .text/template/parse.newPipeline (pos <type 15>, line <type -11>, vars <type 39>) <type 32>
 func (t <type 17>) .text/template/parse.newAction (pos <type 15>, line <type -11>, pipe <type 32>) <type 63>
 func (t <esc:0x9> <type 17>) .text/template/parse.error (err <type -19>)
 func (t <type 17>) .text/template/parse.newVariable (pos <type 15>, ident <type -16>) <type 40>
 func (t <type 17>) .text/template/parse.newTemplate (pos <type 15>, line <type -11>, name <type -16>, pipe <type 32>) <type 66>
 func (t <type 17>) .text/template/parse.newCommand (pos <type 15>) <type 34>
 func (t <esc:0x22> <type 17>) .text/template/parse.peekNonSpace () (token <type 21>)
 func (t <type 17>) .text/template/parse.newBool (pos <type 15>, true <type -15>) <type 69>
 func (t <esc:0x9> <type 17>) .text/template/parse.parseTemplateName (token <type 21>, context <type -16>) (name <type -16>)
 func (t <type 17>) .text/template/parse.term () <type 13>
 func (t <type 17>) .text/template/parse.newDot (pos <type 15>) <type 72>
 func (t <type 17>) .text/template/parse.parse ()
 func (t <type 17>) .text/template/parse.useVar (pos <type 15>, name <type -16>) <type 13>
 func (t <type 17>) .text/template/parse.elseControl () <type 13>
 func (t <type 17>) .text/template/parse.templateControl () <type 13>
 func (t <type 17>) .text/template/parse.newNumber (pos <type 15>, text <type -16>, typ <type 23>) (? <type 74>, ? <type -19>)
 func (t <type 17>) .text/template/parse.newChain (pos <type 15>, node <type 13>) <type 77>
 func (t <type 17>) .text/template/parse.newElse (pos <type 15>, line <type -11>) <type 80>
 func (t <type 17>) .text/template/parse.newNil (pos <type 15>) <type 83>
 func (t <esc:0x2a> <type 17>) .text/template/parse.expect (expected <type 23>, context <type -16>) <type 21>
 func (t <esc:0x9> <type 17>) .text/template/parse.unexpected (token <type 21>, context <type -16>)
 func (t <esc:0x1> <type 17>) .text/template/parse.startParse (funcs <type 26>, lex <type 85>, treeSet <type 25>)
 func (t <type 17>) .text/template/parse.endControl () <type 13>
 func (t <esc:0x1> <type 17>) .text/template/parse.stopParse ()
 func (t <type 17>) .text/template/parse.parseControl (allowElseIf <type -15>, context <type -16>) (pos <type 15>, line <type -11>, pipe <type 32>, list <type 43>, elseList <type 43>)
 func (t <type 17>) .text/template/parse.newString (pos <type 15>, orig <type -16>, text <type -16>) <type 91>
 func (t <esc:0xa> <type 17>) Copy () <type 17>
 func (t <type 17>) .text/template/parse.add ()
 func (t <esc:0x22> <type 17>) .text/template/parse.next () <type 21>
 func (t <type 17>) .text/template/parse.parseDefinition ()
 func (t <type 17>) .text/template/parse.itemList () (list <type 43>, next <type 13>)
 func (t <type 17>) .text/template/parse.textOrAction () <type 13>
 func (t <type 17>) .text/template/parse.action () (n <type 13>)
 func (t <esc:0x1> <type 17>) .text/template/parse.backup3 (t2 <type 21>, t1 <type 21>)
 func (t <type 17>) .text/template/parse.pipeline (context <type -16>) (pipe <type 32>)
 func (t <type 17>) .text/template/parse.ifControl () <type 13>
 func (t <type 17>) .text/template/parse.rangeControl () <type 13>
 func (t <type 17>) .text/template/parse.blockControl () <type 13>
 func (t <type 17>) .text/template/parse.operand () <type 13>
 func (t <type 17>) .text/template/parse.withControl () <type 13>
type 19 [] <type 20>
type 20 interface { }
type 21 ".text/template/parse.item" <type 22>
 func (i <type 21>) String () <type -16>
type 22 struct { .text/template/parse.typ <type 23>; .text/template/parse.pos <type 15>; .text/template/parse.val <type -16>; .text/template/parse.line <type -11>; }
type 23 ".text/template/parse.itemType" <type -11>
type 24 *<type -19>
type 25 map [<type -16>] <type 17>
type 26 [] <type 27>
type 27 map [<type -16>] <type 20>
type 28 *<type 29>
type 29 "text/template/parse.FieldNode" <type 30>
 func (f <esc:0xa> <type 28>) Copy () <type 13>
 func (f <esc:0x22> <type 28>) .text/template/parse.tree () <type 17>
 func (f <esc:0x1> <type 28>) String () <type -16>
type 30 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; Ident <type 31>; }
type 31 [] <type -16>
type 32 *<type 33>
type 33 "text/template/parse.PipeNode" <type 38>
 func (p <esc:0x1a> <type 32>) Copy () <type 13>
 func (p <esc:0x1a> <type 32>) CopyPipe () <type 32>
 func (p <esc:0x22> <type 32>) .text/template/parse.tree () <type 17>
 func (p <esc:0x9> <type 32>) String () <type -16>
 func (p <esc:0x9> <type 32>) .text/template/parse.append (command <type 34>)
type 34 *<type 35>
type 35 "text/template/parse.CommandNode" <type 36>
 func (c <esc:0x1a> <type 34>) Copy () <type 13>
 func (c <esc:0x22> <type 34>) .text/template/parse.tree () <type 17>
 func (c <esc:0x9> <type 34>) String () <type -16>
 func (c <esc:0x9> <type 34>) .text/template/parse.append (arg <type 13>)
type 36 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; Args <type 37>; }
type 37 [] <type 13>
type 38 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; Line <type -11>; IsAssign <type -15>; Decl <type 39>; Cmds <type 42>; }
type 39 [] <type 40>
type 40 *<type 41>
type 41 "text/template/parse.VariableNode" <type 30>
 func (v <esc:0xa> <type 40>) Copy () <type 13>
 func (v <esc:0x22> <type 40>) .text/template/parse.tree () <type 17>
 func (v <esc:0x1> <type 40>) String () <type -16>
type 42 [] <type 34>
type 43 *<type 44>
type 44 "text/template/parse.ListNode" <type 45>
 func (l <esc:0x1a> <type 43>) Copy () <type 13>
 func (l <esc:0x9> <type 43>) String () <type -16>
 func (l <esc:0x1a> <type 43>) CopyList () <type 43>
 func (l <esc:0x22> <type 43>) .text/template/parse.tree () <type 17>
 func (l <esc:0x9> <type 43>) .text/template/parse.append (n <type 13>)
type 45 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; Nodes <type 37>; }
type 46 *<type 47>
type 47 "text/template/parse.WithNode" <type 48>
 func (w <esc:0x9> <type 46>) Copy () <type 13>
type 48 struct { ? <type 49>; }
type 49 "text/template/parse.BranchNode" <type 51>
 func (b <esc:0x9> <type 50>) Copy () <type 13>
 func (b <esc:0x22> <type 50>) .text/template/parse.tree () <type 17>
 func (b <esc:0x9> <type 50>) String () <type -16>
type 50 *<type 49>
type 51 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; Line <type -11>; Pipe <type 32>; List <type 43>; ElseList <type 43>; }
type 52 *<type 53>
type 53 "text/template/parse.RangeNode" <type 48>
 func (r <esc:0x9> <type 52>) Copy () <type 13>
type 54 *<type 55>
type 55 ".text/template/parse.endNode" <type 56>
 func (e <esc:0x9> <type 54>) Copy () <type 13>
 func (e <esc:0x22> <type 54>) .text/template/parse.tree () <type 17>
 func (e <esc:0x1> <type 54>) String () <type -16>
type 56 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; }
type 57 *<type 58>
type 58 "text/template/parse.IfNode" <type 48>
 func (i <esc:0x9> <type 57>) Copy () <type 13>
type 59 *<type 60>
type 60 "text/template/parse.TextNode" <type 61>
 func (t <esc:0xa> <type 59>) Copy () <type 13>
 func (t <esc:0x22> <type 59>) .text/template/parse.tree () <type 17>
 func (t <esc:0x9> <type 59>) String () <type -16>
type 61 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; Text <type 62>; }
type 62 [] <type -20>
type 63 *<type 64>
type 64 "text/template/parse.ActionNode" <type 65>
 func (a <esc:0x9> <type 63>) Copy () <type 13>
 func (a <esc:0x22> <type 63>) .text/template/parse.tree () <type 17>
 func (a <esc:0x9> <type 63>) String () <type -16>
type 65 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; Line <type -11>; Pipe <type 32>; }
type 66 *<type 67>
type 67 "text/template/parse.TemplateNode" <type 68>
 func (t <esc:0x9> <type 66>) Copy () <type 13>
 func (t <esc:0x22> <type 66>) .text/template/parse.tree () <type 17>
 func (t <esc:0x9> <type 66>) String () <type -16>
type 68 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; Line <type -11>; Name <type -16>; Pipe <type 32>; }
type 69 *<type 70>
type 70 "text/template/parse.BoolNode" <type 71>
 func (b <esc:0x9> <type 69>) Copy () <type 13>
 func (b <esc:0x22> <type 69>) .text/template/parse.tree () <type 17>
 func (b <esc:0x1> <type 69>) String () <type -16>
type 71 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; True <type -15>; }
type 72 *<type 73>
type 73 "text/template/parse.DotNode" <type 56>
 func (d <esc:0x9> <type 72>) Copy () <type 13>
 func (d <esc:0x22> <type 72>) .text/template/parse.tree () <type 17>
 func (d <esc:0x1> <type 72>) String () <type -16>
 func (d <esc:0x1> <type 72>) Type () <type 16>
type 74 *<type 75>
type 75 "text/template/parse.NumberNode" <type 76>
 func (n <esc:0x9> <type 74>) Copy () <type 13>
 func (n <esc:0x22> <type 74>) .text/template/parse.tree () <type 17>
 func (n <esc:0x22> <type 74>) String () <type -16>
 func (n <esc:0x1> <type 74>) .text/template/parse.simplifyComplex ()
type 76 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; IsInt <type -15>; IsUint <type -15>; IsFloat <type -15>; IsComplex <type -15>; Int64 <type -4>; Uint64 <type -8>; Float64 <type -10>; Complex128 <type -18>; Text <type -16>; }
type 77 *<type 78>
type 78 "text/template/parse.ChainNode" <type 79>
 func (c <esc:0xa> <type 77>) Copy () <type 13>
 func (c <esc:0x22> <type 77>) .text/template/parse.tree () <type 17>
 func (c <esc:0x9> <type 77>) String () <type -16>
 func (c <esc:0x9> <type 77>) Add (field <type -16>)
type 79 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; Node <type 13>; Field <type 31>; }
type 80 *<type 81>
type 81 ".text/template/parse.elseNode" <type 82>
 func (e <esc:0x9> <type 80>) Copy () <type 13>
 func (e <esc:0x22> <type 80>) .text/template/parse.tree () <type 17>
 func (e <esc:0x1> <type 80>) String () <type -16>
 func (e <esc:0x1> <type 80>) Type () <type 16>
type 82 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; Line <type -11>; }
type 83 *<type 84>
type 84 "text/template/parse.NilNode" <type 56>
 func (n <esc:0x9> <type 83>) Copy () <type 13>
 func (n <esc:0x22> <type 83>) .text/template/parse.tree () <type 17>
 func (n <esc:0x1> <type 83>) String () <type -16>
 func (n <esc:0x1> <type 83>) Type () <type 16>
type 85 *<type 86>
type 86 ".text/template/parse.lexer" <type 89>
 func (l <esc:0x1> <type 85>) .text/template/parse.scanNumber () <type -15>
 func (l <esc:0x1> <type 85>) .text/template/parse.next () <type -21>
 func (l <esc:0x1> <type 85>) .text/template/parse.backup ()
 func (l <esc:0x1> <type 85>) .text/template/parse.peek () <type -21>
 func (l <esc:0x1> <type 85>) .text/template/parse.atRightDelim () (delim <type -15>, trimSpaces <type -15>)
 func (l <esc:0x1> <type 85>) .text/template/parse.ignore ()
 func (l <type 85>) .text/template/parse.run ()
 func (l <esc:0x1> <type 85>) .text/template/parse.accept (valid <esc:0x1> <type -16>) <type -15>
 func (l <esc:0x1> <type 85>) .text/template/parse.acceptRun (valid <esc:0x1> <type -16>)
 func (l <esc:0x9> <type 85>) .text/template/parse.emit (t <type 23>)
 func (l <esc:0x1> <type 85>) .text/template/parse.errorf (format <esc:0x1> <type -16>, args <esc:0x9> ...<type 20>) <type 87>
 func (l <esc:0x1> <type 85>) .text/template/parse.nextItem () <type 21>
 func (l <esc:0x1> <type 85>) .text/template/parse.drain ()
 func (l <esc:0x1> <type 85>) .text/template/parse.atTerminator () <type -15>
type 87 ".text/template/parse.stateFn" <type 88>
type 88 (? <type 85>) <type 87>
type 89 struct { .text/template/parse.name <type -16>; .text/template/parse.input <type -16>; .text/template/parse.leftDelim <type -16>; .text/template/parse.rightDelim <type -16>; .text/template/parse.pos <type 15>; .text/template/parse.start <type 15>; .text/template/parse.width <type 15>; .text/template/parse.items <type 90>; .text/template/parse.parenDepth <type -11>; .text/template/parse.line <type -11>; .text/template/parse.startLine <type -11>; }
type 90 chan <type 21>
type 91 *<type 92>
type 92 "text/template/parse.StringNode" <type 93>
 func (s <esc:0x9> <type 91>) Copy () <type 13>
 func (s <esc:0x22> <type 91>) .text/template/parse.tree () <type 17>
 func (s <esc:0x22> <type 91>) String () <type -16>
type 93 struct { ? <type 16>; ? <type 15>; .text/template/parse.tr <type 17>; Quoted <type -16>; Text <type -16>; }
type 94 struct { Name <type -16>; ParseName <type -16>; Root <type 43>; .text/template/parse.text <type -16>; .text/template/parse.funcs <type 26>; .text/template/parse.lex <type 85>; .text/template/parse.token <type 95>; .text/template/parse.peekCount <type -11>; .text/template/parse.vars <type 31>; .text/template/parse.treeSet <type 25>; }
type 95 [3 ] <type 21>
type 96 *<type 2>
type 97 "io.Writer" <type 98>
type 98 interface { Write (p <type 62>) (n <type -11>, err <type -19>); }
type 99 *<type 10>
type 100 struct { .html/template.escapeErr <type -19>; .html/template.text <type 101>; Tree <type 17>; ? <type 157>; }
type 101 *<type 102>
type 102 "text/template.Template" <type 156>
 func (t <esc:0x1> <type 101>) Lookup (name <esc:0x1> <type -16>) <type 101>
 func (t <esc:0x1a> <type 101>) Funcs (funcMap <esc:0x1> <type 103>) <type 101>
 func (t <esc:0x12> <type 101>) Delims (left <type -16>, right <type -16>) <type 101>
 func (t <esc:0x1> <type 101>) Templates () <type 104>
 func (t <type 101>) Parse (text <type -16>) (? <type 101>, ? <type -19>)
 func (t <type 101>) AddParseTree (name <type -16>, tree <type 17>) (? <type 101>, ? <type -19>)
 func (t <esc:0x9> <type 101>) ExecuteTemplate (wr <type 97>, name <type -16>, data <type 20>) <type -19>
 func (t <type 101>) ParseFiles (filenames <esc:0x9> ...<type -16>) (? <type 101>, ? <type -19>)
 func (t <type 101>) Execute (wr <type 97>, data <type 20>) <type -19>
 func (t <type 101>) .text/template.execute (wr <type 97>, data <type 20>) (err <type -19>)
 func (t <esc:0x1> <type 101>) DefinedTemplates () <type -16>
 func (t <esc:0x1> <type 101>) .text/template.associate (new <type 101>, tree <esc:0x9> <type 17>) <type -15>
 func (t <type 101>) ParseGlob (pattern <type -16>) (? <type 101>, ? <type -19>)
 func (t <esc:0x12> <type 101>) Option (opt <esc:0x9> ...<type -16>) <type 101>
 func (t <esc:0x1> <type 101>) .text/template.setOption (opt <type -16>)
 func (t <esc:0x1> <type 101>) .text/template.init ()
 func (t <esc:0x22> <type 101>) Name () <type -16>
 func (t <esc:0x9> <type 101>) Clone () (? <type 101>, ? <type -19>)
 func (t <esc:0xa> <type 101>) New (name <type -16>) <type 101>
 func (t <esc:0x9> <type 101>) .text/template.copy (c <type 105>) <type 101>
type 103 "text/template.FuncMap" <type 27>
type 104 [] <type 101>
type 105 *<type 106>
type 106 ".text/template.common" <type 107>
type 107 struct { .text/template.tmpl <type 108>; .text/template.option <type 109>; .text/template.muFuncs <type 112>; .text/template.parseFuncs <type 103>; .text/template.execFuncs <type 120>; }
type 108 map [<type -16>] <type 101>
type 109 ".text/template.option" <type 110>
type 110 struct { .text/template.missingKey <type 111>; }
type 111 ".text/template.missingKeyAction" <type -11>
type 112 "sync.RWMutex" <type 116>
 func (rw <type 113>) RLock ()
 func (rw <type 113>) RUnlock ()
 func (rw <type 113>) Lock ()
 func (rw <type 113>) Unlock ()
 func (rw <esc:0x12> <type 113>) RLocker () ($ret8 <type 114>)
type 113 *<type 112>
type 114 "sync.Locker" <type 115>
type 115 interface { Lock (); Unlock (); }
type 116 struct { .sync.w <type 117>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 117 "sync.Mutex" <type 119>
 func (m <type 118>) Unlock ()
 func (m <type 118>) Lock ()
type 118 *<type 117>
type 119 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 120 map [<type -16>] <type 121>
type 121 "reflect.Value" <type 154>
 func (v <type 121>) Convert (t <type 122>) <type 121>
 func (v <type 121>) .reflect.assignTo (context <esc:0x1> <type -16>, dst <type 133>, target <type 139>) <type 121>
 func (v <esc:0x12> <type 121>) UnsafeAddr () <type -13>
 func (v <esc:0x1> <type 121>) Uint () <type -8>
 func (v <esc:0x9> <type 121>) TrySend (x <type 121>) <type -15>
 func (v <type 121>) String () <type -16>
 func (v <esc:0x1> <type 121>) IsNil () <type -15>
 func (v <esc:0x1> <type 121>) InterfaceData () <type 148>
 func (v <esc:0x1> <type 121>) SetInt (x <type -4>)
 func (v <type 121>) Len () <type -11>
 func (v <esc:0x1> <type 121>) SetPointer (x <type 139>)
 func (v <esc:0x1> <type 121>) Int () <type -4>
 func (v <esc:0x1> <type 121>) SetLen (n <type -11>)
 func (v <esc:0x12> <type 121>) Index (i <type -11>) <type 121>
 func (v <esc:0x1> <type 121>) SetFloat (x <type -10>)
 func (v <esc:0x1> <type 121>) SetCap (n <type -11>)
 func (v <esc:0x9> <type 121>) SetMapIndex (key <type 121>, val <type 121>)
 func (v <esc:0x1a> <type 121>) Elem () <type 121>
 func (v <type 121>) Type () <type 122>
 func (v <esc:0x9> <type 121>) NumMethod () <type -11>
 func (v <esc:0x1> <type 121>) IsValid () <type -15>
 func (v <type 121>) Set (x <type 121>)
 func (v <esc:0x1> <type 121>) CanAddr () <type -15>
 func (v <type 121>) FieldByName (name <esc:0x1> <type -16>) <type 121>
 func (v <esc:0x12> <type 121>) Field (i <type -11>) <type 121>
 func (v <esc:0x1> <type 121>) OverflowComplex (x <type -18>) <type -15>
 func (v <esc:0x1> <type 121>) Float () <type -10>
 func (v <esc:0x1> <type 121>) Kind () <type 130>
 func (v <esc:0x1> <type 121>) SetString (x <type -16>)
 func (v <esc:0x12> <type 121>) .reflect.pointer () <type 139>
 func (v <type 121>) Interface () (i <type 20>)
 func (v <esc:0x9> <type 121>) MapKeys () <type 149>
 func (v <esc:0x9> <type 121>) .reflect.send (x <type 121>, nb <type -15>) (selected <type -15>)
 func (v <type 121>) Addr () <type 121>
 func (v <type 121>) TryRecv () (x <type 121>, ok <type -15>)
 func (v <esc:0x1> <type 121>) Bool () <type -15>
 func (v <esc:0x1a> <type 121>) Method (i <type -11>) <type 121>
 func (v <type 121>) Call (in <esc:0x9> <type 149>) <type 149>
 func (v <type 121>) Close ()
 func (v <esc:0x2a> <type 121>) .reflect.runes () <type 150>
 func (v <esc:0x9> <type 121>) SetBytes (x <type 62>)
 func (v <esc:0x1> <type 121>) CanSet () <type -15>
 func (v <esc:0x1> <type 121>) CanInterface () <type -15>
 func (v <esc:0x9> <type 121>) MapIndex (key <type 121>) <type 121>
 func (v <esc:0x2a> <type 121>) Bytes () <type 62>
 func (v <type 121>) Slice (i <type -11>, j <type -11>) <type 121>
 func (v <type 121>) Cap () <type -11>
 func (v <esc:0x1a> <type 121>) FieldByIndex (index <esc:0x1> <type 128>) <type 121>
 func (v <type 121>) CallSlice (in <esc:0x9> <type 149>) <type 149>
 func (v <esc:0x1> <type 121>) Complex () <type -18>
 func (v <type 121>) MapRange () <type 151>
 func (v <esc:0x1a> <type 121>) MethodByName (name <esc:0x1> <type -16>) <type 121>
 func (v <esc:0x1> <type 121>) NumField () <type -11>
 func (v <esc:0x1> <type 121>) OverflowInt (x <type -4>) <type -15>
 func (v <esc:0x12> <type 121>) Pointer () <type -13>
 func (v <esc:0x1> <type 121>) OverflowFloat (x <type -10>) <type -15>
 func (v <esc:0x9> <type 121>) .reflect.setRunes (x <type 150>)
 func (v <esc:0x1> <type 121>) OverflowUint (x <type -8>) <type -15>
 func (v <type 121>) .reflect.recv (nb <type -15>) (val <type 121>, ok <type -15>)
 func (v <type 121>) Recv () (x <type 121>, ok <type -15>)
 func (v <type 121>) FieldByNameFunc (match <esc:0x1> <type 129>) <type 121>
 func (v <type 121>) .reflect.call (op <esc:0x1> <type -16>, in <esc:0x9> <type 149>) <type 149>
 func (v <esc:0x9> <type 121>) Send (x <type 121>)
 func (v <esc:0x1> <type 121>) SetComplex (x <type -18>)
 func (v <esc:0x1> <type 121>) SetBool (x <type -15>)
 func (v <type 121>) Slice3 (i <type -11>, j <type -11>, k <type -11>) <type 121>
 func (v <esc:0x1> <type 121>) SetUint (x <type -8>)
type 122 "reflect.Type" <type 123>
type 123 interface { Align () <type -11>; AssignableTo (u <type 122>) <type -15>; Bits () <type -11>; ChanDir () <type 124>; Comparable () <type -15>; ConvertibleTo (u <type 122>) <type -15>; Elem () <type 122>; Field (i <type -11>) <type 125>; FieldAlign () <type -11>; FieldByIndex (index <type 128>) <type 125>; FieldByName (name <type -16>) (? <type 125>, ? <type -15>); FieldByNameFunc (match <type 129>) (? <type 125>, ? <type -15>); Implements (u <type 122>) <type -15>; In (i <type -11>) <type 122>; IsVariadic () <type -15>; Key () <type 122>; Kind () <type 130>; Len () <type -11>; Method (? <type -11>) <type 131>; MethodByName (? <type -16>) (? <type 131>, ? <type -15>); Name () <type -16>; NumField () <type -11>; NumIn () <type -11>; NumMethod () <type -11>; NumOut () <type -11>; Out (i <type -11>) <type 122>; PkgPath () <type -16>; Size () <type -13>; String () <type -16>; .reflect.common () <type 133>; .reflect.rawString () <type -16>; .reflect.uncommon () <type 145>; }
type 124 "reflect.ChanDir" <type -11>
 func (d <type 124>) String () <type -16>
type 125 "reflect.StructField" <type 126>
type 126 struct { Name <type -16>; PkgPath <type -16>; Type <type 122>; Tag <type 127>; Offset <type -13>; Index <type 128>; Anonymous <type -15>; }
type 127 "reflect.StructTag" <type -16>
 func (tag <esc:0x12> <type 127>) Lookup (key <esc:0x1> <type -16>) (value <type -16>, ok <type -15>)
 func (tag <esc:0x12> <type 127>) Get (key <esc:0x1> <type -16>) <type -16>
type 128 [] <type -11>
type 129 (? <type -16>) <type -15>
type 130 "reflect.Kind" <type -12>
 func (k <type 130>) String () <type -16>
type 131 "reflect.Method" <type 132>
type 132 struct { Name <type -16>; PkgPath <type -16>; Type <type 122>; Func <type 121>; Index <type -11>; }
type 133 *<type 134>
type 134 ".reflect.rtype" <type 141>
 func (t <esc:0x1> <type 133>) Comparable () <type -15>
 func (t <esc:0x9> <type 133>) AssignableTo (u <esc:0x9> <type 122>) <type -15>
 func (t <esc:0x4a> <type 133>) MethodByName (name <esc:0x1> <type -16>) (m <type 131>, ok <type -15>)
 func (t <type 133>) FieldByIndex (index <esc:0x1> <type 128>) <type 125>
 func (t <esc:0x9> <type 133>) ConvertibleTo (u <esc:0x9> <type 122>) <type -15>
 func (t <esc:0x1> <type 133>) .reflect.pointers () <type -15>
 func (t <esc:0x32> <type 133>) .reflect.rawString () <type -16>
 func (t <esc:0x4a> <type 133>) Method (i <type -11>) (m <type 131>)
 func (t <esc:0x9> <type 133>) Out (i <type -11>) <type 122>
 func (t <esc:0x9> <type 133>) NumMethod () <type -11>
 func (t <type 133>) FieldByName (name <esc:0x1> <type -16>) (? <type 125>, ? <type -15>)
 func (t <esc:0x1> <type 133>) Align () <type -11>
 func (t <esc:0x1> <type 133>) Kind () <type 130>
 func (t <esc:0x9> <type 133>) Elem () <type 122>
 func (t <esc:0x1> <type 133>) FieldAlign () <type -11>
 func (t <esc:0x1> <type 133>) Size () <type -13>
 func (t <esc:0x42> <type 133>) Name () <type -16>
 func (t <esc:0x1> <type 133>) Bits () <type -11>
 func (t <esc:0x9> <type 133>) .reflect.exportedMethods () <type 135>
 func (t <esc:0x1> <type 133>) String () <type -16>
 func (t <esc:0x12> <type 133>) .reflect.common () ($ret23 <type 133>)
 func (t <esc:0x9> <type 133>) In (i <type -11>) <type 122>
 func (t <esc:0x1> <type 133>) Len () <type -11>
 func (t <esc:0x1> <type 133>) NumField () <type -11>
 func (t <esc:0x42> <type 133>) PkgPath () <type -16>
 func (t <esc:0x1> <type 133>) ChanDir () <type 124>
 func (t <type 133>) .reflect.ptrTo () <type 133>
 func (t <esc:0x1> <type 133>) NumIn () <type -11>
 func (t <esc:0x1> <type 133>) IsVariadic () <type -15>
 func (t <type 133>) FieldByNameFunc (match <esc:0x1> <type 129>) (? <type 125>, ? <type -15>)
 func (t <esc:0x4a> <type 133>) Field (i <type -11>) <type 125>
 func (t <esc:0x9> <type 133>) Key () <type 122>
 func (t <esc:0x9> <type 133>) Implements (u <type 122>) <type -15>
 func (t <esc:0x1> <type 133>) NumOut () <type -11>
type 135 [] <type 136>
type 136 ".reflect.method" <type 137>
type 137 struct { .reflect.name <type 138>; .reflect.pkgPath <type 138>; .reflect.mtyp <type 133>; .reflect.typ <type 133>; .reflect.tfn <type 139>; }
type 138 *<type -16>
type 139 "unsafe.Pointer" <type 140>
type 140 *any
type 141 struct { .reflect.size <type -13>; .reflect.ptrdata <type -13>; .reflect.hash <type -7>; .reflect.kind <type -5>; .reflect.align <type -1>; .reflect.fieldAlign <type -5>; .reflect._ <type -5>; .reflect.hashfn <type 142>; .reflect.equalfn <type 143>; .reflect.gcdata <type 144>; .reflect.string <type 138>; ? <type 145>; .reflect.ptrToThis <type 133>; }
type 142 (? <type 139>, ? <type -13>) <type -13>
type 143 (? <type 139>, ? <type 139>) <type -15>
type 144 *<type -20>
type 145 *<type 146>
type 146 ".reflect.uncommonType" <type 147>
 func (t <esc:0x32> <type 145>) Name () <type -16>
 func (t <esc:0x32> <type 145>) PkgPath () <type -16>
 func (t <type 145>) .reflect.exportedMethods () <type 135>
 func (t <esc:0x12> <type 145>) .reflect.uncommon () ($ret11 <type 145>)
type 147 struct { .reflect.name <type 138>; .reflect.pkgPath <type 138>; .reflect.methods <type 135>; }
type 148 [2 ] <type -13>
type 149 [] <type 121>
type 150 [] <type -21>
type 151 *<type 152>
type 152 "reflect.MapIter" <type 153>
 func (it <esc:0x9> <type 151>) Value () <type 121>
 func (it <esc:0x1> <type 151>) Next () <type -15>
 func (it <esc:0x9> <type 151>) Key () <type 121>
type 153 struct { .reflect.m <type 121>; .reflect.it <type 139>; }
type 154 struct { .reflect.typ <type 133>; .reflect.ptr <type 139>; ? <type 155>; }
type 155 ".reflect.flag" <type -13>
 func (f <type 155>) .reflect.mustBeAssignable ()
 func (f <type 155>) .reflect.mustBeExported ()
 func (f <type 155>) .reflect.mustBe (expected <type 130>)
 func (f <type 155>) .reflect.ro () <type 155>
 func (f <type 155>) .reflect.kind () <type 130>
type 156 struct { .text/template.name <type -16>; ? <type 17>; ? <type 105>; .text/template.leftDelim <type -16>; .text/template.rightDelim <type -16>; }
type 157 *<type 158>
type 158 ".html/template.nameSpace" <type 159>
type 159 struct { .html/template.mu <type 117>; .html/template.set <type 160>; .html/template.escaped <type -15>; .html/template.esc <type 161>; }
type 160 map [<type -16>] <type 99>
type 161 ".html/template.escaper" <type 172>
 func (e <esc:0x9> <type 162>) .html/template.escape (c <type 163>, n <type 13>) <type 163>
 func (e <esc:0x1> <type 162>) .html/template.escapeAction (c <esc:0x12> <type 163>, n <type 63>) <type 163>
 func (e <esc:0x9> <type 162>) .html/template.escapeBranch (c <type 163>, n <type 50>, nodeName <type -16>) <type 163>
 func (e <esc:0x9> <type 162>) .html/template.escapeList (c <type 163>, n <esc:0x9> <type 43>) <type 163>
 func (e <esc:0x9> <type 162>) .html/template.escapeListConditionally (c <type 163>, n <esc:0x9> <type 43>, filter <esc:0x1> <type 171>) (? <type 163>, ? <type -15>)
 func (e <esc:0x9> <type 162>) .html/template.escapeTemplate (c <type 163>, n <type 66>) <type 163>
 func (e <esc:0x9> <type 162>) .html/template.escapeTree (c <type 163>, node <type 13>, name <type -16>, line <type -11>) (? <type 163>, ? <type -16>)
 func (e <esc:0x9> <type 162>) .html/template.computeOutCtx (c <type 163>, t <esc:0x9> <type 101>) <type 163>
 func (e <esc:0x9> <type 162>) .html/template.escapeTemplateBody (c <type 163>, t <esc:0x9> <type 101>) (? <type 163>, ? <type -15>)
 func (e <esc:0x1> <type 162>) .html/template.escapeText (c <type 163>, n <type 59>) <type 163>
 func (e <esc:0x1> <type 162>) .html/template.editActionNode (n <type 63>, cmds <type 31>)
 func (e <esc:0x1> <type 162>) .html/template.editTemplateNode (n <type 66>, callee <type -16>)
 func (e <esc:0x1> <type 162>) .html/template.editTextNode (n <type 59>, text <type 62>)
 func (e <esc:0x1> <type 162>) .html/template.commit ()
 func (e <esc:0x1> <type 162>) .html/template.template (name <esc:0x1> <type -16>) <type 101>
 func (e <esc:0x1> <type 162>) .html/template.arbitraryTemplate () <type 99>
type 162 *<type 161>
type 163 ".html/template.context" <type 164>
 func (c <type 163>) String () <type -16>
 func (c <esc:0x1> <type 163>) .html/template.eq (d <esc:0x1> <type 163>) <type -15>
 func (c <esc:0x1> <type 163>) .html/template.mangle (templateName <esc:0x12> <type -16>) <type -16>
type 164 struct { .html/template.state <type 165>; .html/template.delim <type 166>; .html/template.urlPart <type 167>; .html/template.jsCtx <type 168>; .html/template.attr <type 169>; .html/template.element <type 170>; .html/template.err <type 96>; }
type 165 ".html/template.state" <type -5>
 func (i <type 165>) String () <type -16>
type 166 ".html/template.delim" <type -5>
 func (i <type 166>) String () <type -16>
type 167 ".html/template.urlPart" <type -5>
 func (i <type 167>) String () <type -16>
type 168 ".html/template.jsCtx" <type -5>
 func (i <type 168>) String () <type -16>
type 169 ".html/template.attr" <type -5>
 func (i <type 169>) String () <type -16>
type 170 ".html/template.element" <type -5>
 func (i <type 170>) String () <type -16>
type 171 (? <type 162>, ? <type 163>) <type -15>
type 172 struct { .html/template.ns <type 157>; .html/template.output <type 173>; .html/template.derived <type 108>; .html/template.called <type 174>; .html/template.actionNodeEdits <type 175>; .html/template.templateNodeEdits <type 176>; .html/template.textNodeEdits <type 177>; }
type 173 map [<type -16>] <type 163>
type 174 map [<type -16>] <type -15>
type 175 map [<type 63>] <type 31>
type 176 map [<type 66>] <type -16>
type 177 map [<type 59>] <type 62>
type 178 [] <type 99>
const ErrAmbigContext <type 3> = 1 
const ErrBadHTML <type 3> = 2 
const ErrBranchEnd <type 3> = 3 
const ErrEndContext <type 3> = 4 
const ErrNoSuchTemplate <type 3> = 5 
const ErrOutputContext <type 3> = 6 
const ErrPartialCharset <type 3> = 7 
const ErrPartialEscape <type 3> = 8 
const ErrPredefinedEscaper <type 3> = 11 
const ErrRangeLoopReentry <type 3> = 9 
const ErrSlashAmbig <type 3> = 10 
func HTMLEscape (w <type 97>, b <type 62>)
func HTMLEscapeString (s <esc:0x12> <type -16>) <type -16>
func HTMLEscaper (args <esc:0x2a> ...<type 20>) <type -16>
func IsTrue (val <type 20>) (truth <type -15>, ok <type -15>)
func JSEscape (w <type 97>, b <type 62>)
func JSEscapeString (s <esc:0x12> <type -16>) <type -16>
func JSEscaper (args <esc:0x2a> ...<type 20>) <type -16>
func Must (t <esc:0x12> <type 99>, err <type -19>) <type 99>
func New (name <type -16>) <type 99>
const OK <type 3> = 0 
func ParseFiles (filenames <esc:0x9> ...<type -16>) (? <type 99>, ? <type -19>)
func ParseGlob (pattern <type -16>) (? <type 99>, ? <type -19>)
func URLQueryEscaper (args <esc:0x2a> ...<type 20>) <type -16>
checksum E0ACC1C24E247633FAE622EF1DC19622F86CFA71
v3;
package image
pkgpath image
import bufio bufio "bufio"
import errors errors "errors"
import color image/color "image/color"
import io io "io"
import strconv strconv "strconv"
import sync sync "sync"
import atomic sync/atomic "sync/atomic"
init image image..import bufio bufio..import bytes bytes..import color image..z2fcolor..import cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 1 2 1 4 1 5 1 6 1 7 1 9 1 10 2 4 2 5 2 6 2 7 2 9 2 10 5 4 5 6 5 7 5 9 6 4 6 7 8 4 8 6 8 7 9 4 9 6 9 7
types 75 20 628 634 625 26 625 631 25 628 634 424 648 34 405 626 632 1022 633 548 82 69 21 18 38 55 38 84 119 32 18 121 32 19 18 118 71 78 30 73 22 18 118 32 18 120 32 111 18 119 71 18 121 71 65 19 121 45 119 60 164 21 19 19 19 19 88 87 47 118 120 49 49 49 32 142
type 1 "Alpha" <type 20>
 func (p <esc:0x1> <type 22>) ColorModel () <type 23>
 func (p <esc:0x1> <type 22>) Bounds () <type 16>
 func (p <esc:0x1> <type 22>) At (x <type -11>, y <type -11>) <type 25>
 func (p <esc:0x1> <type 22>) AlphaAt (x <type -11>, y <type -11>) <type 27>
 func (p <esc:0x1> <type 22>) PixOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 22>) Set (x <type -11>, y <type -11>, c <type 25>)
 func (p <esc:0x1> <type 22>) SetAlpha (x <type -11>, y <type -11>, c <type 27>)
 func (p <esc:0xa> <type 22>) SubImage (r <type 16>) <type 7>
 func (p <esc:0x1> <type 22>) Opaque () <type -15>
type 2 "Alpha16" <type 20>
 func (p <esc:0x1> <type 29>) ColorModel () <type 23>
 func (p <esc:0x1> <type 29>) Bounds () <type 16>
 func (p <esc:0x1> <type 29>) At (x <type -11>, y <type -11>) <type 25>
 func (p <esc:0x1> <type 29>) Alpha16At (x <type -11>, y <type -11>) <type 30>
 func (p <esc:0x1> <type 29>) PixOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 29>) Set (x <type -11>, y <type -11>, c <type 25>)
 func (p <esc:0x1> <type 29>) SetAlpha16 (x <type -11>, y <type -11>, c <type 30>)
 func (p <esc:0xa> <type 29>) SubImage (r <type 16>) <type 7>
 func (p <esc:0x1> <type 29>) Opaque () <type -15>
type 3 "CMYK" <type 20>
 func (p <esc:0x1> <type 33>) ColorModel () <type 23>
 func (p <esc:0x1> <type 33>) Bounds () <type 16>
 func (p <esc:0x1> <type 33>) At (x <type -11>, y <type -11>) <type 25>
 func (p <esc:0x1> <type 33>) CMYKAt (x <type -11>, y <type -11>) <type 34>
 func (p <esc:0x1> <type 33>) PixOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 33>) Set (x <type -11>, y <type -11>, c <type 25>)
 func (p <esc:0x1> <type 33>) SetCMYK (x <type -11>, y <type -11>, c <type 34>)
 func (p <esc:0xa> <type 33>) SubImage (r <type 16>) <type 7>
 func (p <esc:0x1> <type 33>) Opaque () <type -15>
type 4 "Config" <type 36>
type 5 "Gray" <type 20>
 func (p <esc:0x1> <type 40>) ColorModel () <type 23>
 func (p <esc:0x1> <type 40>) Bounds () <type 16>
 func (p <esc:0x1> <type 40>) At (x <type -11>, y <type -11>) <type 25>
 func (p <esc:0x1> <type 40>) GrayAt (x <type -11>, y <type -11>) <type 41>
 func (p <esc:0x1> <type 40>) PixOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 40>) Set (x <type -11>, y <type -11>, c <type 25>)
 func (p <esc:0x1> <type 40>) SetGray (x <type -11>, y <type -11>, c <type 41>)
 func (p <esc:0xa> <type 40>) SubImage (r <type 16>) <type 7>
 func (p <esc:0x1> <type 40>) Opaque () <type -15>
type 6 "Gray16" <type 20>
 func (p <esc:0x1> <type 43>) ColorModel () <type 23>
 func (p <esc:0x1> <type 43>) Bounds () <type 16>
 func (p <esc:0x1> <type 43>) At (x <type -11>, y <type -11>) <type 25>
 func (p <esc:0x1> <type 43>) Gray16At (x <type -11>, y <type -11>) <type 44>
 func (p <esc:0x1> <type 43>) PixOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 43>) Set (x <type -11>, y <type -11>, c <type 25>)
 func (p <esc:0x1> <type 43>) SetGray16 (x <type -11>, y <type -11>, c <type 44>)
 func (p <esc:0xa> <type 43>) SubImage (r <type 16>) <type 7>
 func (p <esc:0x1> <type 43>) Opaque () <type -15>
type 7 "Image" <type 46>
type 8 "NRGBA" <type 20>
 func (p <esc:0x1> <type 47>) ColorModel () <type 23>
 func (p <esc:0x1> <type 47>) Bounds () <type 16>
 func (p <esc:0x1> <type 47>) At (x <type -11>, y <type -11>) <type 25>
 func (p <esc:0x1> <type 47>) NRGBAAt (x <type -11>, y <type -11>) <type 48>
 func (p <esc:0x1> <type 47>) PixOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 47>) Set (x <type -11>, y <type -11>, c <type 25>)
 func (p <esc:0x1> <type 47>) SetNRGBA (x <type -11>, y <type -11>, c <type 48>)
 func (p <esc:0xa> <type 47>) SubImage (r <type 16>) <type 7>
 func (p <esc:0x1> <type 47>) Opaque () <type -15>
type 9 "NRGBA64" <type 20>
 func (p <esc:0x1> <type 50>) ColorModel () <type 23>
 func (p <esc:0x1> <type 50>) Bounds () <type 16>
 func (p <esc:0x1> <type 50>) At (x <type -11>, y <type -11>) <type 25>
 func (p <esc:0x1> <type 50>) NRGBA64At (x <type -11>, y <type -11>) <type 51>
 func (p <esc:0x1> <type 50>) PixOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 50>) Set (x <type -11>, y <type -11>, c <type 25>)
 func (p <esc:0x1> <type 50>) SetNRGBA64 (x <type -11>, y <type -11>, c <type 51>)
 func (p <esc:0xa> <type 50>) SubImage (r <type 16>) <type 7>
 func (p <esc:0x1> <type 50>) Opaque () <type -15>
type 10 "NYCbCrA" <type 53>
 func (p <esc:0x1> <type 54>) ColorModel () <type 23>
 func (p <esc:0x1> <type 54>) At (x <type -11>, y <type -11>) <type 25>
 func (p <esc:0x1> <type 54>) NYCbCrAAt (x <type -11>, y <type -11>) <type 55>
 func (p <esc:0x1> <type 54>) AOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0xa> <type 54>) SubImage (r <type 16>) <type 7>
 func (p <esc:0x1> <type 54>) Opaque () <type -15>
type 11 "Paletted" <type 65>
 func (p <esc:0x22> <type 61>) ColorModel () <type 23>
 func (p <esc:0x1> <type 61>) Bounds () <type 16>
 func (p <esc:0x32> <type 61>) At (x <type -11>, y <type -11>) <type 25>
 func (p <esc:0x1> <type 61>) PixOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x9> <type 61>) Set (x <type -11>, y <type -11>, c <type 25>)
 func (p <esc:0x1> <type 61>) ColorIndexAt (x <type -11>, y <type -11>) <type -5>
 func (p <esc:0x1> <type 61>) SetColorIndex (x <type -11>, y <type -11>, index <type -5>)
 func (p <esc:0xa> <type 61>) SubImage (r <type 16>) <type 7>
 func (p <esc:0x9> <type 61>) Opaque () <type -15>
type 12 "PalettedImage" <type 66>
type 13 "Point" <type 67>
 func (p <type 13>) String () <type -16>
 func (p <type 13>) Add (q <type 13>) <type 13>
 func (p <type 13>) Sub (q <type 13>) <type 13>
 func (p <type 13>) Mul (k <type -11>) <type 13>
 func (p <type 13>) Div (k <type -11>) <type 13>
 func (p <type 13>) In (r <type 16>) <type -15>
 func (p <type 13>) Mod (r <type 16>) <type 13>
 func (p <type 13>) Eq (q <type 13>) <type -15>
type 14 "RGBA" <type 20>
 func (p <esc:0x1> <type 62>) ColorModel () <type 23>
 func (p <esc:0x1> <type 62>) Bounds () <type 16>
 func (p <esc:0x1> <type 62>) At (x <type -11>, y <type -11>) <type 25>
 func (p <esc:0x1> <type 62>) RGBAAt (x <type -11>, y <type -11>) <type 68>
 func (p <esc:0x1> <type 62>) PixOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 62>) Set (x <type -11>, y <type -11>, c <type 25>)
 func (p <esc:0x1> <type 62>) SetRGBA (x <type -11>, y <type -11>, c <type 68>)
 func (p <esc:0xa> <type 62>) SubImage (r <type 16>) <type 7>
 func (p <esc:0x1> <type 62>) Opaque () <type -15>
type 15 "RGBA64" <type 20>
 func (p <esc:0x1> <type 63>) ColorModel () <type 23>
 func (p <esc:0x1> <type 63>) Bounds () <type 16>
 func (p <esc:0x1> <type 63>) At (x <type -11>, y <type -11>) <type 25>
 func (p <esc:0x1> <type 63>) RGBA64At (x <type -11>, y <type -11>) <type 69>
 func (p <esc:0x1> <type 63>) PixOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 63>) Set (x <type -11>, y <type -11>, c <type 25>)
 func (p <esc:0x1> <type 63>) SetRGBA64 (x <type -11>, y <type -11>, c <type 69>)
 func (p <esc:0xa> <type 63>) SubImage (r <type 16>) <type 7>
 func (p <esc:0x1> <type 63>) Opaque () <type -15>
type 16 "Rectangle" <type 70>
 func (r <type 16>) String () <type -16>
 func (r <type 16>) Dx () <type -11>
 func (r <type 16>) Dy () <type -11>
 func (r <type 16>) Size () <type 13>
 func (r <type 16>) Add (p <type 13>) <type 16>
 func (r <type 16>) Sub (p <type 13>) <type 16>
 func (r <type 16>) Inset (n <type -11>) <type 16>
 func (r <type 16>) Intersect (s <type 16>) <type 16>
 func (r <type 16>) Union (s <type 16>) <type 16>
 func (r <type 16>) Empty () <type -15>
 func (r <type 16>) Eq (s <type 16>) <type -15>
 func (r <type 16>) Overlaps (s <type 16>) <type -15>
 func (r <type 16>) In (s <type 16>) <type -15>
 func (r <type 16>) Canon () <type 16>
 func (r <type 16>) At (x <type -11>, y <type -11>) <type 25>
 func (r <type 16>) Bounds () ($ret33 <type 16>) <inl:194>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/image/geom.go:247
  { //248
   $ret33 = r //248
   return //248
  } //0
 func (r <type 16>) ColorModel () <type 23>
type 17 "Uniform" <type 73>
 func (c <esc:0x9> <type 32>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
 func (c <esc:0x12> <type 32>) ColorModel () ($ret116 <type 23>) <inl:192>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/image/names.go:32
  { //33
   $ret116 = c //33
   return //33
  } //0
 func (c <esc:0x22> <type 32>) Convert (? <esc:0x1> <type 25>) <type 25>
 func (c <esc:0x1> <type 32>) Bounds () <type 16>
 func (c <esc:0x22> <type 32>) At (x <type -11>, y <type -11>) <type 25>
 func (c <esc:0x9> <type 32>) Opaque () <type -15>
type 18 "YCbCr" <type 74>
 func (p <esc:0x1> <type 64>) ColorModel () <type 23>
 func (p <esc:0x1> <type 64>) Bounds () <type 16>
 func (p <esc:0x1> <type 64>) At (x <type -11>, y <type -11>) <type 25>
 func (p <esc:0x1> <type 64>) YCbCrAt (x <type -11>, y <type -11>) <type 57>
 func (p <esc:0x1> <type 64>) YOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 64>) COffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0xa> <type 64>) SubImage (r <type 16>) <type 7>
 func (p <esc:0x1> <type 64>) Opaque () <type -15>
type 19 "YCbCrSubsampleRatio" <type -11>
 func (s <type 19>) String () <type -16>
type 20 struct { Pix <type 21>; Stride <type -11>; Rect <type 16>; }
type 21 [] <type -5>
type 22 *<type 1>
type 23 "image/color.Model" <type 24>
type 24 interface { Convert (c <type 25>) <type 25>; }
type 25 "image/color.Color" <type 26>
type 26 interface { RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>); }
type 27 "image/color.Alpha" <type 28>
 func (c <type 27>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 28 struct { A <type -5>; }
type 29 *<type 2>
type 30 "image/color.Alpha16" <type 31>
 func (c <type 30>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 31 struct { A <type -6>; }
type 32 *<type 17>
type 33 *<type 3>
type 34 "image/color.CMYK" <type 35>
 func (c <type 34>) RGBA () (? <type -7>, ? <type -7>, ? <type -7>, ? <type -7>)
type 35 struct { C <type -5>; M <type -5>; Y <type -5>; K <type -5>; }
type 36 struct { ColorModel <type 23>; Width <type -11>; Height <type -11>; }
type 37 "io.Reader" <type 38>
type 38 interface { Read (p <type 39>) (n <type -11>, err <type -19>); }
type 39 [] <type -20>
type 40 *<type 5>
type 41 "image/color.Gray" <type 42>
 func (c <type 41>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 42 struct { Y <type -5>; }
type 43 *<type 6>
type 44 "image/color.Gray16" <type 45>
 func (c <type 44>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 45 struct { Y <type -6>; }
type 46 interface { At (x <type -11>, y <type -11>) <type 25>; Bounds () <type 16>; ColorModel () <type 23>; }
type 47 *<type 8>
type 48 "image/color.NRGBA" <type 49>
 func (c <type 48>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 49 struct { R <type -5>; G <type -5>; B <type -5>; A <type -5>; }
type 50 *<type 9>
type 51 "image/color.NRGBA64" <type 52>
 func (c <type 51>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 52 struct { R <type -6>; G <type -6>; B <type -6>; A <type -6>; }
type 53 struct { ? <type 18>; A <type 21>; AStride <type -11>; }
type 54 *<type 10>
type 55 "image/color.NYCbCrA" <type 56>
 func (c <type 55>) RGBA () (? <type -7>, ? <type -7>, ? <type -7>, ? <type -7>)
type 56 struct { ? <type 57>; A <type -5>; }
type 57 "image/color.YCbCr" <type 58>
 func (c <type 57>) RGBA () (? <type -7>, ? <type -7>, ? <type -7>, ? <type -7>)
type 58 struct { Y <type -5>; Cb <type -5>; Cr <type -5>; }
type 59 "image/color.Palette" <type 60>
 func (p <esc:0x9> <type 59>) Index (c <type 25>) <type -11>
 func (p <esc:0x2a> <type 59>) Convert (c <type 25>) <type 25>
type 60 [] <type 25>
type 61 *<type 11>
type 62 *<type 14>
type 63 *<type 15>
type 64 *<type 18>
type 65 struct { Pix <type 21>; Stride <type -11>; Rect <type 16>; Palette <type 59>; }
type 66 interface { ? <type 7>; ColorIndexAt (x <type -11>, y <type -11>) <type -5>; }
type 67 struct { X <type -11>; Y <type -11>; }
type 68 "image/color.RGBA" <type 49>
 func (c <type 68>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 69 "image/color.RGBA64" <type 52>
 func (c <type 69>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 70 struct { Min <type 13>; Max <type 13>; }
type 71 (? <type 37>) (? <type 7>, ? <type -19>)
type 72 (? <type 37>) (? <type 4>, ? <type -19>)
type 73 struct { C <type 25>; }
type 74 struct { Y <type 21>; Cb <type 21>; Cr <type 21>; YStride <type -11>; CStride <type -11>; SubsampleRatio <type 19>; Rect <type 16>; }
var Black <type 32>
func Decode (r <type 37>) (? <type 7>, ? <type -16>, ? <type -19>)
func DecodeConfig (r <type 37>) (? <type 4>, ? <type -16>, ? <type -19>)
var ErrFormat <type -19>
func NewAlpha (r <type 16>) <type 22>
func NewAlpha16 (r <type 16>) <type 29>
func NewCMYK (r <type 16>) <type 33>
func NewGray (r <type 16>) <type 40>
func NewGray16 (r <type 16>) <type 43>
func NewNRGBA (r <type 16>) <type 47>
func NewNRGBA64 (r <type 16>) <type 50>
func NewNYCbCrA (r <type 16>, subsampleRatio <type 19>) <type 54>
func NewPaletted (r <type 16>, p <type 59>) <type 61>
func NewRGBA (r <type 16>) <type 62>
func NewRGBA64 (r <type 16>) <type 63>
func NewUniform (c <type 25>) <type 32>
func NewYCbCr (r <type 16>, subsampleRatio <type 19>) <type 64>
var Opaque <type 32>
func Pt (X <type -11>, Y <type -11>) <type 13>
func Rect (x0 <type -11>, y0 <type -11>, x1 <type -11>, y1 <type -11>) <type 16>
func RegisterFormat (name <type -16>, magic <type -16>, decode <type 71>, decodeConfig <type 72>)
var Transparent <type 32>
var White <type 32>
const YCbCrSubsampleRatio410 <type 19> = 5 
const YCbCrSubsampleRatio411 <type 19> = 4 
const YCbCrSubsampleRatio420 <type 19> = 2 
const YCbCrSubsampleRatio422 <type 19> = 1 
const YCbCrSubsampleRatio440 <type 19> = 3 
const YCbCrSubsampleRatio444 <type 19> = 0 
var ZP <type 13>
var ZR <type 16>
checksum 3F1E2721E0371084EE81712C63488AC1FD4F6338
v3;
package color
pkgpath image/color
init color image..z2fcolor..import
types 28 15 105 107 104 25 104 106 25 105 107 109 149 106 108 107 32 32 71 84 32 32 53 30 71 71 45 20 60
type 1 "Alpha" <type 15>
 func (c <type 1>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 2 "Alpha16" <type 16>
 func (c <type 2>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 3 "CMYK" <type 17>
 func (c <type 3>) RGBA () (? <type -7>, ? <type -7>, ? <type -7>, ? <type -7>)
type 4 "Color" <type 18>
type 5 "Gray" <type 19>
 func (c <type 5>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 6 "Gray16" <type 20>
 func (c <type 6>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 7 "Model" <type 21>
type 8 "NRGBA" <type 23>
 func (c <type 8>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 9 "NRGBA64" <type 24>
 func (c <type 9>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 10 "NYCbCrA" <type 25>
 func (c <type 10>) RGBA () (? <type -7>, ? <type -7>, ? <type -7>, ? <type -7>)
type 11 "Palette" <type 26>
 func (p <esc:0x2a> <type 11>) Convert (c <type 4>) <type 4>
 func (p <esc:0x9> <type 11>) Index (c <type 4>) <type -11>
type 12 "RGBA" <type 23>
 func (c <type 12>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 13 "RGBA64" <type 24>
 func (c <type 13>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 14 "YCbCr" <type 27>
 func (c <type 14>) RGBA () (? <type -7>, ? <type -7>, ? <type -7>, ? <type -7>)
type 15 struct { A <type -5>; }
type 16 struct { A <type -6>; }
type 17 struct { C <type -5>; M <type -5>; Y <type -5>; K <type -5>; }
type 18 interface { RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>); }
type 19 struct { Y <type -5>; }
type 20 struct { Y <type -6>; }
type 21 interface { Convert (c <type 4>) <type 4>; }
type 22 (? <type 4>) <type 4>
type 23 struct { R <type -5>; G <type -5>; B <type -5>; A <type -5>; }
type 24 struct { R <type -6>; G <type -6>; B <type -6>; A <type -6>; }
type 25 struct { ? <type 14>; A <type -5>; }
type 26 [] <type 4>
type 27 struct { Y <type -5>; Cb <type -5>; Cr <type -5>; }
var Alpha16Model <type 7>
var AlphaModel <type 7>
var Black <type 6>
var CMYKModel <type 7>
func CMYKToRGB (c <type -5>, m <type -5>, y <type -5>, k <type -5>) (? <type -5>, ? <type -5>, ? <type -5>)
var Gray16Model <type 7>
var GrayModel <type 7>
func ModelFunc (f <type 22>) <type 7>
var NRGBA64Model <type 7>
var NRGBAModel <type 7>
var NYCbCrAModel <type 7>
var Opaque <type 2>
var RGBA64Model <type 7>
var RGBAModel <type 7>
func RGBToCMYK (r <type -5>, g <type -5>, b <type -5>) (? <type -5>, ? <type -5>, ? <type -5>, ? <type -5>)
func RGBToYCbCr (r <type -5>, g <type -5>, b <type -5>) (? <type -5>, ? <type -5>, ? <type -5>)
var Transparent <type 2>
var White <type 6>
var YCbCrModel <type 7>
func YCbCrToRGB (y <type -5>, cb <type -5>, cr <type -5>) (? <type -5>, ? <type -5>, ? <type -5>)
checksum 60C2E34BB878C0EA286DC0D4EFC098A1505898E7
v3;
package palette
pkgpath image/color/palette
import color image/color "image/color"
init palette image..z2fcolor..z2fpalette..import color image..z2fcolor..import
init_graph 0 1
types 4 1 19 36 83
type 1 [] <type 2>
type 2 "image/color.Color" <type 3>
type 3 interface { RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>); }
var Plan9 <type 1>
var WebSafe <type 1>
checksum 0798C804D85975539986A9746BA9F658AEBA12C0
v3;
package draw
pkgpath image/draw
import image image "image"
import color image/color "image/color"
import imageutil image/internal/imageutil "image/internal/imageutil"
init draw image..z2fdraw..import bufio bufio..import bytes bytes..import image image..import color image..z2fcolor..import cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 1 2 1 5 1 6 1 7 1 8 1 10 1 11 2 5 2 6 2 7 2 8 2 10 2 11 3 1 3 2 3 4 3 5 3 6 3 7 3 8 3 9 3 10 3 11 6 5 6 7 6 8 6 10 7 5 7 8 9 5 9 7 9 8 10 5 10 7 10 8
types 20 5 26 25 104 29 792 36 52 36 83 409 47 49 32 108 84 81 69 161 20
type 1 "Drawer" <type 15>
type 2 "Image" <type 16>
type 3 "Op" <type -11>
 func (op <type 3>) Draw (dst <type 2>, r <type 5>, src <type 13>, sp <type 10>)
type 4 "Quantizer" <type 17>
type 5 "image.Rectangle" <type 12>
 func (r <type 5>) ColorModel () <type 6>
 func (r <type 5>) Bounds () ($ret33 <type 5>)
 func (r <type 5>) Canon () <type 5>
 func (r <type 5>) String () <type -16>
 func (r <type 5>) At (x <type -11>, y <type -11>) <type 8>
 func (r <type 5>) Empty () <type -15>
 func (r <type 5>) Dy () <type -11>
 func (r <type 5>) Size () <type 10>
 func (r <type 5>) Sub (p <type 10>) <type 5>
 func (r <type 5>) Dx () <type -11>
 func (r <type 5>) Inset (n <type -11>) <type 5>
 func (r <type 5>) Intersect (s <type 5>) <type 5>
 func (r <type 5>) Add (p <type 10>) <type 5>
 func (r <type 5>) In (s <type 5>) <type -15>
 func (r <type 5>) Union (s <type 5>) <type 5>
 func (r <type 5>) Overlaps (s <type 5>) <type -15>
 func (r <type 5>) Eq (s <type 5>) <type -15>
type 6 "image/color.Model" <type 7>
type 7 interface { Convert (c <type 8>) <type 8>; }
type 8 "image/color.Color" <type 9>
type 9 interface { RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>); }
type 10 "image.Point" <type 11>
 func (p <type 10>) Eq (q <type 10>) <type -15>
 func (p <type 10>) Mod (r <type 5>) <type 10>
 func (p <type 10>) In (r <type 5>) <type -15>
 func (p <type 10>) Div (k <type -11>) <type 10>
 func (p <type 10>) Mul (k <type -11>) <type 10>
 func (p <type 10>) Sub (q <type 10>) <type 10>
 func (p <type 10>) Add (q <type 10>) <type 10>
 func (p <type 10>) String () <type -16>
type 11 struct { X <type -11>; Y <type -11>; }
type 12 struct { Min <type 10>; Max <type 10>; }
type 13 "image.Image" <type 14>
type 14 interface { At (x <type -11>, y <type -11>) <type 8>; Bounds () <type 5>; ColorModel () <type 6>; }
type 15 interface { Draw (dst <type 2>, r <type 5>, src <type 13>, sp <type 10>); }
type 16 interface { ? <type 13>; Set (x <type -11>, y <type -11>, c <type 8>); }
type 17 interface { Quantize (p <type 18>, m <type 13>) <type 18>; }
type 18 "image/color.Palette" <type 19>
 func (p <esc:0x2a> <type 18>) Convert (c <type 8>) <type 8>
 func (p <esc:0x9> <type 18>) Index (c <type 8>) <type -11>
type 19 [] <type 8>
func Draw (dst <type 2>, r <type 5>, src <type 13>, sp <type 10>, op <type 3>)
func DrawMask (dst <type 2>, r <type 5>, src <type 13>, sp <type 10>, mask <type 13>, mp <type 10>, op <type 3>)
var FloydSteinberg <type 1>
const Over <type 3> = 0 
const Src <type 3> = 1 
checksum 95B7C3E2F0FFC12EE357F1113E0ADC884A75CF4C
v3;
package gif
pkgpath image/gif
import bufio bufio "bufio"
import bytes bytes "bytes"
import lzw compress/lzw "compress/lzw"
import errors errors "errors"
import fmt fmt "fmt"
import image image "image"
import color image/color "image/color"
import palette image/color/palette "image/color/palette"
import draw image/draw "image/draw"
import io io "io"
init gif image..z2fgif..import bufio bufio..import bytes bytes..import lzw compress..z2flzw..import fmt fmt..import image image..import color image..z2fcolor..import palette image..z2fcolor..z2fpalette..import draw image..z2fdraw..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 1 2 1 9 1 12 1 15 1 16 1 18 1 21 2 9 2 12 2 15 2 16 2 18 2 21 3 1 3 2 3 4 3 9 3 10 3 11 3 12 3 13 3 14 3 15 3 16 3 17 3 18 3 19 3 20 3 21 4 9 4 10 4 11 4 12 4 13 4 14 4 15 4 16 4 17 4 18 4 19 4 20 4 21 5 1 5 2 5 6 5 9 5 12 5 15 5 16 5 17 5 18 5 21 7 6 8 1 8 2 8 5 8 6 8 9 8 12 8 15 8 16 8 17 8 18 8 21 10 9 10 12 10 15 10 16 10 18 10 19 10 20 12 9 12 15 12 16 12 18 13 9 13 10 13 11 13 12 13 15 13 16 13 18 13 19 13 20 14 9 14 15 14 16 14 17 14 18 14 21 15 9 15 16 17 9 17 15 17 16 18 9 18 15 18 16 19 9 19 15 19 16 19 18 20 9 20 15 20 16 20 18 20 19
types 38 3 23 27 28 71 21 30 109 36 83 823 38 53 411 47 49 18 33 78 30 73 18 140 21 19 652 88 21 161 20 22 80 41 68 38 85 37 80
type 1 "GIF" <type 22>
type 2 "Options" <type 31>
type 3 "io.Reader" <type 4>
type 4 interface { Read (p <type 5>) (n <type -11>, err <type -19>); }
type 5 [] <type -20>
type 6 "image.Image" <type 7>
type 7 interface { At (x <type -11>, y <type -11>) <type 8>; Bounds () <type 10>; ColorModel () <type 11>; }
type 8 "image/color.Color" <type 9>
type 9 interface { RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>); }
type 10 "image.Rectangle" <type 15>
 func (r <type 10>) ColorModel () <type 11>
 func (r <type 10>) Bounds () ($ret33 <type 10>)
 func (r <type 10>) Canon () <type 10>
 func (r <type 10>) String () <type -16>
 func (r <type 10>) At (x <type -11>, y <type -11>) <type 8>
 func (r <type 10>) Empty () <type -15>
 func (r <type 10>) Dy () <type -11>
 func (r <type 10>) Size () <type 13>
 func (r <type 10>) Sub (p <type 13>) <type 10>
 func (r <type 10>) Dx () <type -11>
 func (r <type 10>) Inset (n <type -11>) <type 10>
 func (r <type 10>) Intersect (s <type 10>) <type 10>
 func (r <type 10>) Add (p <type 13>) <type 10>
 func (r <type 10>) In (s <type 10>) <type -15>
 func (r <type 10>) Union (s <type 10>) <type 10>
 func (r <type 10>) Overlaps (s <type 10>) <type -15>
 func (r <type 10>) Eq (s <type 10>) <type -15>
type 11 "image/color.Model" <type 12>
type 12 interface { Convert (c <type 8>) <type 8>; }
type 13 "image.Point" <type 14>
 func (p <type 13>) Eq (q <type 13>) <type -15>
 func (p <type 13>) Mod (r <type 10>) <type 13>
 func (p <type 13>) In (r <type 10>) <type -15>
 func (p <type 13>) Div (k <type -11>) <type 13>
 func (p <type 13>) Mul (k <type -11>) <type 13>
 func (p <type 13>) Sub (q <type 13>) <type 13>
 func (p <type 13>) Add (q <type 13>) <type 13>
 func (p <type 13>) String () <type -16>
type 14 struct { X <type -11>; Y <type -11>; }
type 15 struct { Min <type 13>; Max <type 13>; }
type 16 *<type 1>
type 17 "image.Config" <type 18>
type 18 struct { ColorModel <type 11>; Width <type -11>; Height <type -11>; }
type 19 "io.Writer" <type 20>
type 20 interface { Write (p <type 5>) (n <type -11>, err <type -19>); }
type 21 *<type 2>
type 22 struct { Image <type 23>; Delay <type 30>; LoopCount <type -11>; Disposal <type 5>; Config <type 17>; BackgroundIndex <type -20>; }
type 23 [] <type 24>
type 24 *<type 25>
type 25 "image.Paletted" <type 26>
 func (p <esc:0x1> <type 24>) SetColorIndex (x <type -11>, y <type -11>, index <type -5>)
 func (p <esc:0x1> <type 24>) ColorIndexAt (x <type -11>, y <type -11>) <type -5>
 func (p <esc:0x9> <type 24>) Opaque () <type -15>
 func (p <esc:0x9> <type 24>) Set (x <type -11>, y <type -11>, c <type 8>)
 func (p <esc:0xa> <type 24>) SubImage (r <type 10>) <type 6>
 func (p <esc:0x32> <type 24>) At (x <type -11>, y <type -11>) <type 8>
 func (p <esc:0x1> <type 24>) PixOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 24>) Bounds () <type 10>
 func (p <esc:0x22> <type 24>) ColorModel () <type 11>
type 26 struct { Pix <type 27>; Stride <type -11>; Rect <type 10>; Palette <type 28>; }
type 27 [] <type -5>
type 28 "image/color.Palette" <type 29>
 func (p <esc:0x2a> <type 28>) Convert (c <type 8>) <type 8>
 func (p <esc:0x9> <type 28>) Index (c <type 8>) <type -11>
type 29 [] <type 8>
type 30 [] <type -11>
type 31 struct { NumColors <type -11>; Quantizer <type 32>; Drawer <type 34>; }
type 32 "image/draw.Quantizer" <type 33>
type 33 interface { Quantize (p <type 28>, m <type 6>) <type 28>; }
type 34 "image/draw.Drawer" <type 35>
type 35 interface { Draw (dst <type 36>, r <type 10>, src <type 6>, sp <type 13>); }
type 36 "image/draw.Image" <type 37>
type 37 interface { ? <type 6>; Set (x <type -11>, y <type -11>, c <type 8>); }
func Decode (r <type 3>) (? <type 6>, ? <type -19>)
func DecodeAll (r <type 3>) (? <type 16>, ? <type -19>)
func DecodeConfig (r <type 3>) (? <type 17>, ? <type -19>)
const DisposalBackground = 2 
const DisposalNone = 1 
const DisposalPrevious = 3 
func Encode (w <type 19>, m <type 6>, o <esc:0x9> <type 21>) <type -19>
func EncodeAll (w <type 19>, g <esc:0x2a> <type 16>) <type -19>
checksum 4F1F436022384F129A81B10DFBB4F50C29E9A783
v3;
package imageutil
pkgpath image/internal/imageutil
import image image "image"
indirectimport color image/color
init bufio bufio..import bytes bytes..import image image..import color image..z2fcolor..import cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 4 0 5 0 6 0 7 0 9 0 10 1 4 1 5 1 6 1 7 1 9 1 10 2 0 2 1 2 3 2 4 2 5 2 6 2 7 2 8 2 9 2 10 5 4 5 6 5 7 5 9 6 4 6 7 8 4 8 6 8 7 9 4 9 6 9 7
types 23 1 17 616 115 70 36 83 792 36 52 409 47 49 32 108 68 21 19 551 119 60 141 88
type 1 *<type 2>
type 2 "image.RGBA" <type 15>
 func (p <esc:0x1> <type 1>) SetRGBA (x <type -11>, y <type -11>, c <type 3>)
 func (p <esc:0x1> <type 1>) Opaque () <type -15>
 func (p <esc:0x1> <type 1>) Set (x <type -11>, y <type -11>, c <type 5>)
 func (p <esc:0x1> <type 1>) RGBAAt (x <type -11>, y <type -11>) <type 3>
 func (p <esc:0xa> <type 1>) SubImage (r <type 7>) <type 13>
 func (p <esc:0x1> <type 1>) At (x <type -11>, y <type -11>) <type 5>
 func (p <esc:0x1> <type 1>) PixOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 1>) Bounds () <type 7>
 func (p <esc:0x1> <type 1>) ColorModel () <type 8>
type 3 "image/color.RGBA" <type 4>
 func (c <type 3>) RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>)
type 4 struct { R <type -5>; G <type -5>; B <type -5>; A <type -5>; }
type 5 "image/color.Color" <type 6>
type 6 interface { RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>); }
type 7 "image.Rectangle" <type 12>
 func (r <type 7>) ColorModel () <type 8>
 func (r <type 7>) Bounds () ($ret33 <type 7>)
 func (r <type 7>) Canon () <type 7>
 func (r <type 7>) String () <type -16>
 func (r <type 7>) At (x <type -11>, y <type -11>) <type 5>
 func (r <type 7>) Empty () <type -15>
 func (r <type 7>) Dy () <type -11>
 func (r <type 7>) Size () <type 10>
 func (r <type 7>) Sub (p <type 10>) <type 7>
 func (r <type 7>) Dx () <type -11>
 func (r <type 7>) Inset (n <type -11>) <type 7>
 func (r <type 7>) Intersect (s <type 7>) <type 7>
 func (r <type 7>) Add (p <type 10>) <type 7>
 func (r <type 7>) In (s <type 7>) <type -15>
 func (r <type 7>) Union (s <type 7>) <type 7>
 func (r <type 7>) Overlaps (s <type 7>) <type -15>
 func (r <type 7>) Eq (s <type 7>) <type -15>
type 8 "image/color.Model" <type 9>
type 9 interface { Convert (c <type 5>) <type 5>; }
type 10 "image.Point" <type 11>
 func (p <type 10>) Eq (q <type 10>) <type -15>
 func (p <type 10>) Mod (r <type 7>) <type 10>
 func (p <type 10>) In (r <type 7>) <type -15>
 func (p <type 10>) Div (k <type -11>) <type 10>
 func (p <type 10>) Mul (k <type -11>) <type 10>
 func (p <type 10>) Sub (q <type 10>) <type 10>
 func (p <type 10>) Add (q <type 10>) <type 10>
 func (p <type 10>) String () <type -16>
type 11 struct { X <type -11>; Y <type -11>; }
type 12 struct { Min <type 10>; Max <type 10>; }
type 13 "image.Image" <type 14>
type 14 interface { At (x <type -11>, y <type -11>) <type 5>; Bounds () <type 7>; ColorModel () <type 8>; }
type 15 struct { Pix <type 16>; Stride <type -11>; Rect <type 7>; }
type 16 [] <type -5>
type 17 *<type 18>
type 18 "image.YCbCr" <type 21>
 func (p <esc:0x1> <type 17>) Opaque () <type -15>
 func (p <esc:0x1> <type 17>) COffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 17>) YCbCrAt (x <type -11>, y <type -11>) <type 19>
 func (p <esc:0xa> <type 17>) SubImage (r <type 7>) <type 13>
 func (p <esc:0x1> <type 17>) YOffset (x <type -11>, y <type -11>) <type -11>
 func (p <esc:0x1> <type 17>) At (x <type -11>, y <type -11>) <type 5>
 func (p <esc:0x1> <type 17>) Bounds () <type 7>
 func (p <esc:0x1> <type 17>) ColorModel () <type 8>
type 19 "image/color.YCbCr" <type 20>
 func (c <type 19>) RGBA () (? <type -7>, ? <type -7>, ? <type -7>, ? <type -7>)
type 20 struct { Y <type -5>; Cb <type -5>; Cr <type -5>; }
type 21 struct { Y <type 16>; Cb <type 16>; Cr <type 16>; YStride <type -11>; CStride <type -11>; SubsampleRatio <type 22>; Rect <type 7>; }
type 22 "image.YCbCrSubsampleRatio" <type -11>
 func (s <type 22>) String () <type -16>
func DrawYCbCr (dst <esc:0x1> <type 1>, r <type 7>, src <esc:0x1> <type 17>, sp <type 10>) (ok <type -15>)
checksum F00967F5D7A0A2B7CE4EEDDC88B37CB300699800
v3;
package jpeg
pkgpath image/jpeg
import bufio bufio "bufio"
import errors errors "errors"
import image image "image"
import color image/color "image/color"
import imageutil image/internal/imageutil "image/internal/imageutil"
import io io "io"
init jpeg image..z2fjpeg..import bufio bufio..import bytes bytes..import image image..import color image..z2fcolor..import cpu internal..z2fcpu..import io io..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 1 2 1 5 1 6 1 7 1 8 1 10 1 11 2 5 2 6 2 7 2 8 2 10 2 11 3 1 3 2 3 4 3 5 3 6 3 7 3 8 3 9 3 10 3 11 6 5 6 7 6 8 6 10 7 5 7 8 9 5 9 7 9 8 10 5 10 7 10 8
types 27 5 81 27 26 86 28 71 21 30 110 38 84 824 38 55 411 47 49 33 78 30 73 18 39 47 34 64
type 1 "FormatError" <type -16>
 func (e <esc:0x1> <type 1>) Error () <type -16>
type 2 "Options" <type 23>
type 3 "Reader" <type 24>
type 4 "UnsupportedError" <type -16>
 func (e <esc:0x1> <type 4>) Error () <type -16>
type 5 "io.Reader" <type 6>
type 6 interface { Read (p <type 7>) (n <type -11>, err <type -19>); }
type 7 [] <type -20>
type 8 "image.Image" <type 9>
type 9 interface { At (x <type -11>, y <type -11>) <type 10>; Bounds () <type 12>; ColorModel () <type 13>; }
type 10 "image/color.Color" <type 11>
type 11 interface { RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>); }
type 12 "image.Rectangle" <type 17>
 func (r <type 12>) ColorModel () <type 13>
 func (r <type 12>) Bounds () ($ret33 <type 12>)
 func (r <type 12>) Canon () <type 12>
 func (r <type 12>) String () <type -16>
 func (r <type 12>) At (x <type -11>, y <type -11>) <type 10>
 func (r <type 12>) Empty () <type -15>
 func (r <type 12>) Dy () <type -11>
 func (r <type 12>) Size () <type 15>
 func (r <type 12>) Sub (p <type 15>) <type 12>
 func (r <type 12>) Dx () <type -11>
 func (r <type 12>) Inset (n <type -11>) <type 12>
 func (r <type 12>) Intersect (s <type 12>) <type 12>
 func (r <type 12>) Add (p <type 15>) <type 12>
 func (r <type 12>) In (s <type 12>) <type -15>
 func (r <type 12>) Union (s <type 12>) <type 12>
 func (r <type 12>) Overlaps (s <type 12>) <type -15>
 func (r <type 12>) Eq (s <type 12>) <type -15>
type 13 "image/color.Model" <type 14>
type 14 interface { Convert (c <type 10>) <type 10>; }
type 15 "image.Point" <type 16>
 func (p <type 15>) Eq (q <type 15>) <type -15>
 func (p <type 15>) Mod (r <type 12>) <type 15>
 func (p <type 15>) In (r <type 12>) <type -15>
 func (p <type 15>) Div (k <type -11>) <type 15>
 func (p <type 15>) Mul (k <type -11>) <type 15>
 func (p <type 15>) Sub (q <type 15>) <type 15>
 func (p <type 15>) Add (q <type 15>) <type 15>
 func (p <type 15>) String () <type -16>
type 16 struct { X <type -11>; Y <type -11>; }
type 17 struct { Min <type 15>; Max <type 15>; }
type 18 "image.Config" <type 19>
type 19 struct { ColorModel <type 13>; Width <type -11>; Height <type -11>; }
type 20 "io.Writer" <type 21>
type 21 interface { Write (p <type 7>) (n <type -11>, err <type -19>); }
type 22 *<type 2>
type 23 struct { Quality <type -11>; }
type 24 interface { ? <type 25>; ? <type 5>; }
type 25 "io.ByteReader" <type 26>
type 26 interface { ReadByte () (? <type -20>, ? <type -19>); }
func Decode (r <type 5>) (? <type 8>, ? <type -19>)
func DecodeConfig (r <type 5>) (? <type 18>, ? <type -19>)
const DefaultQuality = 75 
func Encode (w <type 20>, m <type 8>, o <esc:0x1> <type 22>) <type -19>
checksum 435C82CA76E6590C2638626F1DDCCDFB8F16C919
v3;
package png
pkgpath image/png
import bufio bufio "bufio"
import zlib compress/zlib "compress/zlib"
import binary encoding/binary "encoding/binary"
import fmt fmt "fmt"
import hash hash "hash"
import crc32 hash/crc32 "hash/crc32"
import image image "image"
import color image/color "image/color"
import io io "io"
import strconv strconv "strconv"
indirectimport flate compress/flate
init png image..z2fpng..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import zlib compress..z2fzlib..import binary encoding..z2fbinary..import fmt fmt..import crc32 hash..z2fcrc32..import image image..import color image..z2fcolor..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 1 2 1 10 1 13 1 16 1 17 1 19 1 22 2 10 2 13 2 16 2 17 2 19 2 22 3 1 3 2 3 6 3 10 3 11 3 12 3 13 3 14 3 15 3 16 3 17 3 18 3 19 3 20 3 21 3 22 4 1 4 2 4 3 4 5 4 6 4 10 4 11 4 12 4 13 4 14 4 15 4 16 4 17 4 18 4 19 4 20 4 21 4 22 5 10 5 13 5 15 5 16 5 17 5 18 5 19 5 22 6 10 6 11 6 12 6 13 6 14 6 15 6 16 6 17 6 18 6 19 6 20 6 21 6 22 7 10 7 13 7 16 7 17 7 19 8 1 8 2 8 9 8 10 8 13 8 16 8 17 8 18 8 19 8 22 11 10 11 13 11 16 11 17 11 19 11 20 11 21 13 10 13 16 13 17 13 19 14 10 14 11 14 12 14 13 14 16 14 17 14 19 14 20 14 21 15 10 15 16 15 17 15 18 15 19 15 22 16 10 16 17 18 10 18 16 18 17 19 10 19 16 19 17 20 10 20 16 20 17 20 19 21 10 21 16 21 17 21 19 21 20
types 92 7 37 94 33 37 81 86 28 71 21 32 111 38 84 824 38 55 411 47 49 33 78 30 73 67 18 517 19 164 21 361 24 24 27 23 21 19 308 284 19 237 79 1356 19 21 211 816 53 230 19 1864 127 19 82 21 19 454 21 21 48 86 187 24 288 19 285 19 498 26 24 34 21 45 22 19 391 114 27 47 84 28 27 25 32 55 30 117 19 713 105 59 18
type 1 "CompressionLevel" <type -11>
type 2 "Encoder" <type 24>
 func (enc <type 25>) Encode (w <type 22>, m <type 10>) <type -19>
type 3 "EncoderBuffer" <type 26>
type 4 "EncoderBufferPool" <type 90>
type 5 "FormatError" <type -16>
 func (e <esc:0x1> <type 5>) Error () <type -16>
type 6 "UnsupportedError" <type -16>
 func (e <esc:0x1> <type 6>) Error () <type -16>
type 7 "io.Reader" <type 8>
type 8 interface { Read (p <type 9>) (n <type -11>, err <type -19>); }
type 9 [] <type -20>
type 10 "image.Image" <type 11>
type 11 interface { At (x <type -11>, y <type -11>) <type 12>; Bounds () <type 14>; ColorModel () <type 15>; }
type 12 "image/color.Color" <type 13>
type 13 interface { RGBA () (r <type -7>, g <type -7>, b <type -7>, a <type -7>); }
type 14 "image.Rectangle" <type 19>
 func (r <type 14>) ColorModel () <type 15>
 func (r <type 14>) Bounds () ($ret33 <type 14>)
 func (r <type 14>) Canon () <type 14>
 func (r <type 14>) String () <type -16>
 func (r <type 14>) At (x <type -11>, y <type -11>) <type 12>
 func (r <type 14>) Empty () <type -15>
 func (r <type 14>) Dy () <type -11>
 func (r <type 14>) Size () <type 17>
 func (r <type 14>) Sub (p <type 17>) <type 14>
 func (r <type 14>) Dx () <type -11>
 func (r <type 14>) Inset (n <type -11>) <type 14>
 func (r <type 14>) Intersect (s <type 14>) <type 14>
 func (r <type 14>) Add (p <type 17>) <type 14>
 func (r <type 14>) In (s <type 14>) <type -15>
 func (r <type 14>) Union (s <type 14>) <type 14>
 func (r <type 14>) Overlaps (s <type 14>) <type -15>
 func (r <type 14>) Eq (s <type 14>) <type -15>
type 15 "image/color.Model" <type 16>
type 16 interface { Convert (c <type 12>) <type 12>; }
type 17 "image.Point" <type 18>
 func (p <type 17>) Eq (q <type 17>) <type -15>
 func (p <type 17>) Mod (r <type 14>) <type 17>
 func (p <type 17>) In (r <type 14>) <type -15>
 func (p <type 17>) Div (k <type -11>) <type 17>
 func (p <type 17>) Mul (k <type -11>) <type 17>
 func (p <type 17>) Sub (q <type 17>) <type 17>
 func (p <type 17>) Add (q <type 17>) <type 17>
 func (p <type 17>) String () <type -16>
type 18 struct { X <type -11>; Y <type -11>; }
type 19 struct { Min <type 17>; Max <type 17>; }
type 20 "image.Config" <type 21>
type 21 struct { ColorModel <type 15>; Width <type -11>; Height <type -11>; }
type 22 "io.Writer" <type 23>
type 23 interface { Write (p <type 9>) (n <type -11>, err <type -19>); }
type 24 struct { CompressionLevel <type 1>; BufferPool <type 4>; }
type 25 *<type 2>
type 26 ".image/png.encoder" <type 30>
 func (e <type 27>) .image/png.writeChunk (b <type 9>, name <esc:0x1> <type -16>)
 func (e <type 27>) .image/png.writeIHDR ()
 func (e <type 27>) .image/png.writePLTEAndTRNS (p <esc:0x9> <type 28>)
 func (e <type 27>) Write (b <type 9>) (? <type -11>, ? <type -19>)
 func (e <esc:0x9> <type 27>) .image/png.writeImage (w <type 22>, m <type 10>, cb <type -11>, level <type -11>) <type -19>
 func (e <type 27>) .image/png.writeIDATs ()
 func (e <type 27>) .image/png.writeIEND ()
type 27 *<type 26>
type 28 "image/color.Palette" <type 29>
 func (p <esc:0x2a> <type 28>) Convert (c <type 12>) <type 12>
 func (p <esc:0x9> <type 28>) Index (c <type 12>) <type -11>
type 29 [] <type 12>
type 30 struct { .image/png.enc <type 25>; .image/png.w <type 22>; .image/png.m <type 10>; .image/png.cb <type -11>; .image/png.err <type -19>; .image/png.header <type 31>; .image/png.footer <type 32>; .image/png.tmp <type 33>; .image/png.cr <type 34>; .image/png.pr <type 35>; .image/png.zw <type 36>; .image/png.zwLevel <type -11>; .image/png.bw <type 87>; }
type 31 [8 ] <type -20>
type 32 [4 ] <type -20>
type 33 [1024 ] <type -20>
type 34 [5 ] <type 35>
type 35 [] <type -5>
type 36 *<type 37>
type 37 "compress/zlib.Writer" <type 38>
 func (z <type 36>) Close () <type -19>
 func (z <type 36>) Flush () <type -19>
 func (z <type 36>) Write (p <type 9>) (n <type -11>, err <type -19>)
 func (z <type 36>) .compress/zlib.writeHeader () (err <type -19>)
 func (z <esc:0x9> <type 36>) Reset (w <type 22>)
type 38 struct { .compress/zlib.w <type 22>; .compress/zlib.level <type -11>; .compress/zlib.dict <type 9>; .compress/zlib.compressor <type 39>; .compress/zlib.digest <type 83>; .compress/zlib.err <type -19>; .compress/zlib.scratch <type 32>; .compress/zlib.wroteHeader <type -15>; }
type 39 *<type 40>
type 40 "compress/flate.Writer" <type 41>
 func (w <type 39>) Write (data <type 9>) (n <type -11>, err <type -19>)
 func (w <type 39>) Flush () <type -19>
 func (w <type 39>) Close () <type -19>
 func (w <type 39>) Reset (dst <type 22>)
type 41 struct { .compress/flate.d <type 42>; .compress/flate.dict <type 9>; }
type 42 ".compress/flate.compressor" <type 46>
 func (d <type 43>) .compress/flate.write (b <type 9>) (n <type -11>, err <type -19>)
 func (d <esc:0x9> <type 43>) .compress/flate.encSpeed ()
 func (d <type 43>) .compress/flate.syncFlush () <type -19>
 func (d <esc:0x1> <type 43>) .compress/flate.init (w <type 22>, level <type -11>) (err <type -19>)
 func (d <esc:0x1> <type 43>) .compress/flate.initDeflate ()
 func (d <esc:0x1> <type 43>) .compress/flate.fillStore (b <esc:0x1> <type 9>) <type -11>
 func (d <esc:0x1> <type 43>) .compress/flate.fillDeflate (b <esc:0x1> <type 9>) <type -11>
 func (d <esc:0x3a> <type 43>) .compress/flate.writeBlock (tokens <esc:0x1> <type 44>, index <type -11>) <type -19>
 func (d <esc:0x1> <type 43>) .compress/flate.reset (w <type 22>)
 func (d <esc:0x1> <type 43>) .compress/flate.findMatch (pos <type -11>, prevHead <type -11>, prevLength <type -11>, lookahead <type -11>) (length <type -11>, offset <type -11>, ok <type -15>)
 func (d <esc:0x9> <type 43>) .compress/flate.deflate ()
 func (d <esc:0x9> <type 43>) .compress/flate.store ()
 func (d <esc:0x3a> <type 43>) .compress/flate.writeStoredBlock (buf <type 9>) <type -19>
 func (d <esc:0x9> <type 43>) .compress/flate.storeHuff ()
 func (d <type 43>) .compress/flate.close () <type -19>
 func (d <type 43>) .compress/flate.fillWindow (b <esc:0x1> <type 9>)
type 43 *<type 42>
type 44 [] <type 45>
type 45 ".compress/flate.token" <type -7>
 func (t <type 45>) .compress/flate.literal () <type -7>
 func (t <type 45>) .compress/flate.offset () <type -7>
 func (t <type 45>) .compress/flate.length () <type -7>
type 46 struct { ? <type 47>; .compress/flate.w <type 49>; .compress/flate.bulkHasher <type 70>; .compress/flate.fill <type 72>; .compress/flate.step <type 73>; .compress/flate.sync <type -15>; .compress/flate.bestSpeed <type 74>; .compress/flate.chainHead <type -11>; .compress/flate.hashHead <type 80>; .compress/flate.hashPrev <type 81>; .compress/flate.hashOffset <type -11>; .compress/flate.index <type -11>; .compress/flate.window <type 9>; .compress/flate.windowEnd <type -11>; .compress/flate.blockStart <type -11>; .compress/flate.byteAvailable <type -15>; .compress/flate.tokens <type 44>; .compress/flate.length <type -11>; .compress/flate.offset <type -11>; .compress/flate.hash <type -7>; .compress/flate.maxInsertIndex <type -11>; .compress/flate.err <type -19>; .compress/flate.hashMatch <type 82>; }
type 47 ".compress/flate.compressionLevel" <type 48>
type 48 struct { .compress/flate.level <type -11>; .compress/flate.good <type -11>; .compress/flate.lazy <type -11>; .compress/flate.nice <type -11>; .compress/flate.chain <type -11>; .compress/flate.fastSkipHashing <type -11>; }
type 49 *<type 50>
type 50 ".compress/flate.huffmanBitWriter" <type 67>
 func (w <type 49>) .compress/flate.writeDynamicHeader (numLiterals <type -11>, numOffsets <type -11>, numCodegens <type -11>, isEof <type -15>)
 func (w <type 49>) .compress/flate.writeFixedHeader (isEof <type -15>)
 func (w <type 49>) .compress/flate.writeCode (c <type 51>)
 func (w <type 49>) .compress/flate.writeTokens (tokens <esc:0x1> <type 44>, leCodes <esc:0x1> <type 54>, oeCodes <esc:0x1> <type 54>)
 func (w <esc:0x9> <type 49>) .compress/flate.indexTokens (tokens <esc:0x1> <type 44>) (numLiterals <type -11>, numOffsets <type -11>)
 func (w <type 49>) .compress/flate.flu