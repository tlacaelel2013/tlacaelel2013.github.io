rt <esc:0x1> <type 19>) <type -15>
 func (s <esc:0x1> <type 94>) .crypto/x509.findPotentialParents (cert <esc:0x1> <type 19>) <type 39>
 func (s <esc:0x9> <type 94>) .crypto/x509.copy () <type 94>
type 96 struct { .crypto/x509.bySubjectKeyId <type 97>; .crypto/x509.byName <type 97>; .crypto/x509.certs <type 98>; }
type 97 map [<type -16>] <type 39>
type 98 [] <type 19>
type 99 [] <type 100>
type 100 "crypto/x509.ExtKeyUsage" <type -11>
type 101 [] <type 98>
type 102 *<type -11>
type 103 (parsedName <type 18>, constraint <type 18>) (match <type -15>, err <type -19>)
type 104 map [<type 19>] <type 101>
type 105 "crypto/x509.SignatureAlgorithm" <type -11>
 func (algo <type 105>) String () <type -16>
 func (algo <type 105>) .crypto/x509.isRSAPSS () <type -15>
type 106 struct { Raw <type 16>; RawTBSCertificate <type 16>; RawSubjectPublicKeyInfo <type 16>; RawSubject <type 16>; RawIssuer <type 16>; Signature <type 16>; SignatureAlgorithm <type 105>; PublicKeyAlgorithm <type 107>; PublicKey <type 18>; Version <type -11>; SerialNumber <type 26>; Issuer <type 108>; Subject <type 108>; NotBefore <type 53>; NotAfter <type 53>; KeyUsage <type 113>; Extensions <type 69>; ExtraExtensions <type 69>; UnhandledCriticalExtensions <type 114>; ExtKeyUsage <type 99>; UnknownExtKeyUsage <type 114>; BasicConstraintsValid <type -15>; IsCA <type -15>; MaxPathLen <type -11>; MaxPathLenZero <type -15>; SubjectKeyId <type 16>; AuthorityKeyId <type 16>; OCSPServer <type 111>; IssuingCertificateURL <type 111>; DNSNames <type 111>; EmailAddresses <type 111>; IPAddresses <type 115>; URIs <type 119>; PermittedDNSDomainsCritical <type -15>; PermittedDNSDomains <type 111>; ExcludedDNSDomains <type 111>; PermittedIPRanges <type 128>; ExcludedIPRanges <type 128>; PermittedEmailAddresses <type 111>; ExcludedEmailAddresses <type 111>; PermittedURIDomains <type 111>; ExcludedURIDomains <type 111>; CRLDistributionPoints <type 111>; PolicyIdentifiers <type 114>; }
type 107 "crypto/x509.PublicKeyAlgorithm" <type -11>
 func (algo <type 107>) String () <type -16>
type 108 "crypto/x509/pkix.Name" <type 112>
 func (n <esc:0x9> <type 109>) FillFromRDNSequence (rdns <esc:0x9> <type 110>)
 func (n <esc:0x1> <type 108>) .crypto/x509/pkix.appendRDNs (in <esc:0x1a> <type 83>, values <esc:0x9> <type 111>, oid <type 72>) <type 83>
 func (n <type 108>) ToRDNSequence () (ret <type 83>)
 func (n <type 108>) String () <type -16>
type 109 *<type 108>
type 110 *<type 83>
type 111 [] <type -16>
type 112 struct { Country <type 111>; Organization <type 111>; OrganizationalUnit <type 111>; Locality <type 111>; Province <type 111>; StreetAddress <type 111>; PostalCode <type 111>; SerialNumber <type -16>; CommonName <type -16>; Names <type 86>; ExtraNames <type 86>; }
type 113 "crypto/x509.KeyUsage" <type -11>
type 114 [] <type 72>
type 115 [] <type 116>
type 116 "net.IP" <type 16>
 func (ip <esc:0x1> <type 116>) MarshalText () (? <type 16>, ? <type -19>)
 func (ip <esc:0x1> <type 116>) String () <type -16>
 func (ip <esc:0x1> <type 116>) DefaultMask () <type 117>
 func (ip <esc:0x1> <type 116>) .net.matchAddrFamily (x <esc:0x1> <type 116>) <type -15>
 func (ip <esc:0x1> <type 118>) UnmarshalText (text <esc:0x1> <type 16>) <type -19>
 func (ip <esc:0x1> <type 116>) IsGlobalUnicast () <type -15>
 func (ip <esc:0x12> <type 116>) To4 () <type 116>
 func (ip <esc:0x12> <type 116>) To16 () <type 116>
 func (ip <esc:0x1> <type 116>) IsLoopback () <type -15>
 func (ip <esc:0x1> <type 116>) IsMulticast () <type -15>
 func (ip <esc:0x1> <type 116>) IsUnspecified () <type -15>
 func (ip <esc:0x1> <type 116>) IsInterfaceLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 116>) IsLinkLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 116>) IsLinkLocalUnicast () <type -15>
 func (ip <esc:0x1> <type 116>) Mask (mask <esc:0x1> <type 117>) <type 116>
 func (ip <esc:0x1> <type 116>) Equal (x <esc:0x1> <type 116>) <type -15>
type 117 "net.IPMask" <type 16>
 func (m <esc:0x1> <type 117>) Size () (ones <type -11>, bits <type -11>)
 func (m <esc:0x1> <type 117>) String () <type -16>
type 118 *<type 116>
type 119 [] <type 120>
type 120 *<type 121>
type 121 "net/url.URL" <type 124>
 func (u <esc:0x1> <type 120>) .net/url.setPath (p <type -16>) <type -19>
 func (u <esc:0x22> <type 120>) Port () <type -16>
 func (u <esc:0x22> <type 120>) EscapedPath () <type -16>
 func (u <esc:0x22> <type 120>) Hostname () <type -16>
 func (u <esc:0x1> <type 120>) String () <type -16>
 func (u <esc:0x1> <type 120>) IsAbs () <type -15>
 func (u <esc:0x9> <type 120>) Parse (ref <type -16>) (? <type 120>, ? <type -19>)
 func (u <esc:0x22> <type 120>) RequestURI () <type -16>
 func (u <esc:0xa> <type 120>) ResolveReference (ref <esc:0xa> <type 120>) <type 120>
 func (u <esc:0x9> <type 120>) Query () <type 122>
 func (u <esc:0x1> <type 120>) MarshalBinary () (text <type 16>, err <type -19>)
 func (u <esc:0x1> <type 120>) UnmarshalBinary (text <esc:0x1> <type 16>) <type -19>
type 122 "net/url.Values" <type 123>
 func (v <esc:0x1> <type 122>) Get (key <esc:0x1> <type -16>) <type -16>
 func (v <esc:0x1> <type 122>) Set (key <type -16>, value <type -16>)
 func (v <esc:0x9> <type 122>) Add (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 122>) Del (key <esc:0x1> <type -16>)
 func (v <esc:0x1> <type 122>) Encode () <type -16>
type 123 map [<type -16>] <type 111>
type 124 struct { Scheme <type -16>; Opaque <type -16>; User <type 125>; Host <type -16>; Path <type -16>; RawPath <type -16>; ForceQuery <type -15>; RawQuery <type -16>; Fragment <type -16>; }
type 125 *<type 126>
type 126 "net/url.Userinfo" <type 127>
 func (u <esc:0x22> <type 125>) Username () <type -16>
 func (u <esc:0x22> <type 125>) String () <type -16>
 func (u <esc:0x22> <type 125>) Password () (? <type -16>, ? <type -15>)
type 127 struct { .net/url.username <type -16>; .net/url.password <type -16>; .net/url.passwordSet <type -15>; }
type 128 [] <type 129>
type 129 *<type 130>
type 130 "net.IPNet" <type 131>
 func (n <esc:0x1> <type 129>) Contains (ip <esc:0x1> <type 116>) <type -15>
 func (n <esc:0x1> <type 129>) Network () ($ret178 <type -16>)
 func (n <esc:0x1> <type 129>) String () <type -16>
type 131 struct { IP <type 116>; Mask <type 117>; }
type 132 struct { AcceptableCAs <type 15>; SignatureSchemes <type 133>; }
type 133 [] <type 13>
type 134 "net.Conn" <type 135>
type 135 interface { Close () <type -19>; LocalAddr () <type 136>; Read (b <type 16>) (n <type -11>, err <type -19>); RemoteAddr () <type 136>; SetDeadline (t <type 53>) <type -19>; SetReadDeadline (t <type 53>) <type -19>; SetWriteDeadline (t <type 53>) <type -19>; Write (b <type 16>) (n <type -11>, err <type -19>); }
type 136 "net.Addr" <type 137>
type 137 interface { Network () <type -16>; String () <type -16>; }
type 138 *<type 7>
type 139 *<type 8>
type 140 struct { CipherSuites <type 141>; ServerName <type -16>; SupportedCurves <type 142>; SupportedPoints <type 143>; SignatureSchemes <type 133>; SupportedProtos <type 111>; SupportedVersions <type 141>; Conn <type 134>; }
type 141 [] <type -6>
type 142 [] <type 10>
type 143 [] <type -5>
type 144 interface { Get (sessionKey <type -16>) (session <type 145>, ok <type -15>); Put (sessionKey <type -16>, cs <type 145>); }
type 145 *<type 6>
type 146 struct { .crypto/tls.sessionTicket <type 143>; .crypto/tls.vers <type -6>; .crypto/tls.cipherSuite <type -6>; .crypto/tls.masterSecret <type 16>; .crypto/tls.serverCertificates <type 98>; .crypto/tls.verifiedChains <type 101>; .crypto/tls.receivedAt <type 53>; .crypto/tls.nonce <type 16>; .crypto/tls.useBy <type 53>; .crypto/tls.ageAdd <type -7>; }
type 147 struct { Rand <type 21>; Time <type 148>; Certificates <type 149>; NameToCertificate <type 150>; GetCertificate <type 152>; GetClientCertificate <type 154>; GetConfigForClient <type 156>; VerifyPeerCertificate <type 157>; RootCAs <type 94>; NextProtos <type 111>; ServerName <type -16>; ClientAuth <type 3>; ClientCAs <type 94>; InsecureSkipVerify <type -15>; CipherSuites <type 141>; PreferServerCipherSuites <type -15>; SessionTicketsDisabled <type -15>; SessionTicketKey <type 158>; ClientSessionCache <type 5>; MinVersion <type -6>; MaxVersion <type -6>; CurvePreferences <type 142>; DynamicRecordSizingDisabled <type -15>; Renegotiation <type 12>; KeyLogWriter <type 159>; .crypto/tls.serverInitOnce <type 161>; .crypto/tls.mutex <type 168>; .crypto/tls.sessionTicketKeys <type 173>; }
type 148 () <type 53>
type 149 [] <type 1>
type 150 map [<type -16>] <type 151>
type 151 *<type 1>
type 152 (? <type 153>) (? <type 151>, ? <type -19>)
type 153 *<type 4>
type 154 (? <type 155>) (? <type 151>, ? <type -19>)
type 155 *<type 2>
type 156 (? <type 153>) (? <type 138>, ? <type -19>)
type 157 (rawCerts <type 15>, verifiedChains <type 101>) <type -19>
type 158 [32 ] <type -20>
type 159 "io.Writer" <type 160>
type 160 interface { Write (p <type 16>) (n <type -11>, err <type -19>); }
type 161 "sync.Once" <type 164>
 func (o <type 162>) Do (f <esc:0x1> <type 163>)
type 162 *<type 161>
type 163 ()
type 164 struct { .sync.m <type 165>; .sync.done <type -7>; }
type 165 "sync.Mutex" <type 167>
 func (m <type 166>) Lock ()
 func (m <type 166>) Unlock ()
type 166 *<type 165>
type 167 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 168 "sync.RWMutex" <type 172>
 func (rw <esc:0x12> <type 169>) RLocker () ($ret8 <type 170>)
 func (rw <type 169>) Unlock ()
 func (rw <type 169>) Lock ()
 func (rw <type 169>) RUnlock ()
 func (rw <type 169>) RLock ()
type 169 *<type 168>
type 170 "sync.Locker" <type 171>
type 171 interface { Lock (); Unlock (); }
type 172 struct { .sync.w <type 165>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 173 [] <type 174>
type 174 ".crypto/tls.ticketKey" <type 175>
type 175 struct { .crypto/tls.keyName <type 176>; .crypto/tls.aesKey <type 176>; .crypto/tls.hmacKey <type 176>; }
type 176 [16 ] <type -20>
type 177 [] <type 158>
type 178 struct { .crypto/tls.conn <type 134>; .crypto/tls.isClient <type -15>; .crypto/tls.handshakeStatus <type -7>; .crypto/tls.handshakeMutex <type 165>; .crypto/tls.handshakeErr <type -19>; .crypto/tls.vers <type -6>; .crypto/tls.haveVers <type -15>; .crypto/tls.config <type 138>; .crypto/tls.handshakes <type -11>; .crypto/tls.didResume <type -15>; .crypto/tls.cipherSuite <type -6>; .crypto/tls.ocspResponse <type 16>; .crypto/tls.scts <type 15>; .crypto/tls.peerCertificates <type 98>; .crypto/tls.verifiedChains <type 101>; .crypto/tls.serverName <type -16>; .crypto/tls.secureRenegotiation <type -15>; .crypto/tls.ekm <type 179>; .crypto/tls.resumptionSecret <type 16>; .crypto/tls.clientFinishedIsFirst <type -15>; .crypto/tls.closeNotifyErr <type -19>; .crypto/tls.closeNotifySent <type -15>; .crypto/tls.clientFinished <type 180>; .crypto/tls.serverFinished <type 180>; .crypto/tls.clientProtocol <type -16>; .crypto/tls.clientProtocolFallback <type -15>; .crypto/tls.in <type 181>; .crypto/tls.out <type 181>; .crypto/tls.rawInput <type 200>; .crypto/tls.input <type 204>; .crypto/tls.hand <type 200>; .crypto/tls.outBuf <type 16>; .crypto/tls.buffering <type -15>; .crypto/tls.sendBuf <type 16>; .crypto/tls.bytesSent <type -4>; .crypto/tls.packetsSent <type -4>; .crypto/tls.retryCount <type -11>; .crypto/tls.activeCall <type -3>; .crypto/tls.tmp <type 176>; }
type 179 (label <type -16>, context <type 16>, length <type -11>) (? <type 16>, ? <type -19>)
type 180 [12 ] <type -20>
type 181 ".crypto/tls.halfConn" <type 197>
 func (hc <esc:0x1> <type 182>) .crypto/tls.setErrorLocked (err <type -19>) <type -19>
 func (hc <esc:0x1> <type 182>) .crypto/tls.prepareCipherSpec (version <type -6>, cipher <type 18>, mac <type 183>)
 func (hc <esc:0x9> <type 182>) .crypto/tls.changeCipherSpec () <type -19>
 func (hc <esc:0x1> <type 182>) .crypto/tls.setTrafficSecret (suite <esc:0x9> <type 185>, secret <type 16>)
 func (hc <esc:0x1> <type 182>) .crypto/tls.incSeq ()
 func (hc <esc:0x9> <type 182>) .crypto/tls.explicitNonceLen () <type -11>
 func (hc <type 182>) .crypto/tls.decrypt (record <type 16>) (? <type 16>, ? <type 196>, ? <type -19>)
 func (hc <type 182>) .crypto/tls.encrypt (record <type 16>, payload <type 16>, rand <type 21>) (? <type 16>, ? <type -19>)
type 182 *<type 181>
type 183 ".crypto/tls.macFunction" <type 184>
type 184 interface { MAC (seq <type 16>, header <type 16>, data <type 16>, extra <type 16>) <type 16>; Size () <type -11>; }
type 185 *<type 186>
type 186 ".crypto/tls.cipherSuiteTLS13" <type 189>
 func (c <esc:0x1> <type 185>) .crypto/tls.expandLabel (secret <type 16>, label <esc:0x1> <type -16>, context <esc:0x1> <type 16>, length <type -11>) <type 16>
 func (c <esc:0x1> <type 185>) .crypto/tls.deriveSecret (secret <type 16>, label <esc:0x1> <type -16>, transcript <type 187>) <type 16>
 func (c <esc:0x1> <type 185>) .crypto/tls.extract (newSecret <type 16>, currentSecret <type 16>) <type 16>
 func (c <esc:0x1> <type 185>) .crypto/tls.nextTrafficSecret (trafficSecret <type 16>) <type 16>
 func (c <esc:0x1> <type 185>) .crypto/tls.trafficKey (trafficSecret <type 16>) (key <type 16>, iv <type 16>)
 func (c <esc:0x1> <type 185>) .crypto/tls.finishedHash (baseKey <type 16>, transcript <type 187>) <type 16>
 func (c <type 185>) .crypto/tls.exportKeyingMaterial (masterSecret <type 16>, transcript <type 187>) <type 179>
type 187 "hash.Hash" <type 188>
type 188 interface { ? <type 159>; BlockSize () <type -11>; Reset (); Size () <type -11>; Sum (b <type 16>) <type 16>; }
type 189 struct { .crypto/tls.id <type -6>; .crypto/tls.keyLen <type -11>; .crypto/tls.aead <type 190>; .crypto/tls.hash <type 195>; }
type 190 (key <type 16>, fixedNonce <type 16>) <type 191>
type 191 ".crypto/tls.aead" <type 192>
type 192 interface { ? <type 193>; .crypto/tls.explicitNonceLen () <type -11>; }
type 193 "crypto/cipher.AEAD" <type 194>
type 194 interface { NonceSize () <type -11>; Open (dst <type 16>, nonce <type 16>, ciphertext <type 16>, additionalData <type 16>) (? <type 16>, ? <type -19>); Overhead () <type -11>; Seal (dst <type 16>, nonce <type 16>, plaintext <type 16>, additionalData <type 16>) <type 16>; }
type 195 "crypto.Hash" <type -12>
 func (h <type 195>) Available () <type -15>
 func (h <type 195>) New () <type 187>
 func (h <type 195>) Size () <type -11>
 func (h <type 195>) HashFunc () ($ret0 <type 195>)
type 196 ".crypto/tls.recordType" <type -5>
type 197 struct { ? <type 165>; .crypto/tls.err <type -19>; .crypto/tls.version <type -6>; .crypto/tls.cipher <type 18>; .crypto/tls.mac <type 183>; .crypto/tls.seq <type 198>; .crypto/tls.additionalData <type 199>; .crypto/tls.nextCipher <type 18>; .crypto/tls.nextMac <type 183>; .crypto/tls.trafficSecret <type 16>; }
type 198 [8 ] <type -20>
type 199 [13 ] <type -20>
type 200 "bytes.Buffer" <type 202>
 func (b <esc:0x22> <type 201>) .bytes.readSlice (delim <type -20>) (line <type 16>, err <type -19>)
 func (b <esc:0x1> <type 201>) ReadBytes (delim <type -20>) (line <type 16>, err <type -19>)
 func (b <esc:0x1> <type 201>) UnreadByte () <type -19>
 func (b <esc:0x1> <type 201>) UnreadRune () <type -19>
 func (b <esc:0x1> <type 201>) ReadByte () (? <type -20>, ? <type -19>)
 func (b <esc:0x1> <type 201>) WriteByte (c <type -20>) <type -19>
 func (b <esc:0x9> <type 201>) WriteTo (w <type 159>) (n <type -4>, err <type -19>)
 func (b <esc:0x1> <type 201>) Read (p <esc:0x1> <type 16>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 201>) Truncate (n <type -11>)
 func (b <esc:0x1> <type 201>) .bytes.tryGrowByReslice (n <type -11>) (? <type -11>, ? <type -15>)
 func (b <esc:0x1> <type 201>) ReadRune () (r <type -21>, size <type -11>, err <type -19>)
 func (b <esc:0x22> <type 201>) Bytes () <type 16>
 func (b <esc:0x1> <type 201>) String () <type -16>
 func (b <esc:0x1> <type 201>) Cap () <type -11>
 func (b <esc:0x1> <type 201>) Len () <type -11>
 func (b <esc:0x1> <type 201>) WriteRune (r <type -21>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 201>) .bytes.empty () <type -15>
 func (b <esc:0x1> <type 201>) Reset ()
 func (b <esc:0x22> <type 201>) Next (n <type -11>) <type 16>
 func (b <esc:0x1> <type 201>) .bytes.grow (n <type -11>) <type -11>
 func (b <esc:0x1> <type 201>) Grow (n <type -11>)
 func (b <esc:0x1> <type 201>) Write (p <esc:0x1> <type 16>) (n <type -11>, err <type -19>)
 func (b <esc:0x1> <type 201>) ReadString (delim <type -20>) (line <type -16>, err <type -19>)
 func (b <esc:0x1> <type 201>) WriteString (s <esc:0x1> <type -16>) (n <type -11>, err <type -19>)
 func (b <esc:0x9> <type 201>) ReadFrom (r <type 21>) (n <type -4>, err <type -19>)
type 201 *<type 200>
type 202 struct { .bytes.buf <type 16>; .bytes.off <type -11>; .bytes.lastRead <type 203>; }
type 203 ".bytes.readOp" <type -1>
type 204 "bytes.Reader" <type 206>
 func (r <esc:0x9> <type 205>) WriteTo (w <type 159>) (n <type -4>, err <type -19>)
 func (r <esc:0x1> <type 205>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (r <esc:0x1> <type 205>) UnreadRune () <type -19>
 func (r <esc:0x1> <type 205>) ReadByte () (? <type -20>, ? <type -19>)
 func (r <esc:0x1> <type 205>) ReadAt (b <esc:0x1> <type 16>, off <type -4>) (n <type -11>, err <type -19>)
 func (r <esc:0x1> <type 205>) Read (b <esc:0x1> <type 16>) (n <type -11>, err <type -19>)
 func (r <esc:0x1> <type 205>) Size () <type -4>
 func (r <esc:0x1> <type 205>) Reset (b <type 16>)
 func (r <esc:0x1> <type 205>) ReadRune () (ch <type -21>, size <type -11>, err <type -19>)
 func (r <esc:0x1> <type 205>) UnreadByte () <type -19>
 func (r <esc:0x1> <type 205>) Len () <type -11>
type 205 *<type 204>
type 206 struct { .bytes.s <type 16>; .bytes.i <type -4>; .bytes.prevRune <type -11>; }
type 207 ".crypto/tls.alert" <type -5>
 func (e <type 207>) String () <type -16>
 func (e <type 207>) Error () <type -16>
type 208 *<type 209>
type 209 ".crypto/tls.keyUpdateMsg" <type 210>
 func (m <esc:0x22> <type 208>) .crypto/tls.marshal () <type 16>
 func (m <esc:0x1> <type 208>) .crypto/tls.unmarshal (data <type 16>) <type -15>
type 210 struct { .crypto/tls.raw <type 16>; .crypto/tls.updateRequested <type -15>; }
type 211 *<type 212>
type 212 ".crypto/tls.clientHelloMsg" <type 213>
 func (m <esc:0x2a> <type 211>) .crypto/tls.marshal () <type 16>
 func (m <esc:0x2a> <type 211>) .crypto/tls.marshalWithoutBinders () <type 16>
 func (m <esc:0x9> <type 211>) .crypto/tls.updateBinders (pskBinders <type 15>)
 func (m <esc:0x9> <type 211>) .crypto/tls.unmarshal (data <type 16>) <type -15>
type 213 struct { .crypto/tls.raw <type 16>; .crypto/tls.vers <type -6>; .crypto/tls.random <type 16>; .crypto/tls.sessionId <type 16>; .crypto/tls.cipherSuites <type 141>; .crypto/tls.compressionMethods <type 143>; .crypto/tls.nextProtoNeg <type -15>; .crypto/tls.serverName <type -16>; .crypto/tls.ocspStapling <type -15>; .crypto/tls.supportedCurves <type 142>; .crypto/tls.supportedPoints <type 143>; .crypto/tls.ticketSupported <type -15>; .crypto/tls.sessionTicket <type 143>; .crypto/tls.supportedSignatureAlgorithms <type 133>; .crypto/tls.supportedSignatureAlgorithmsCert <type 133>; .crypto/tls.secureRenegotiationSupported <type -15>; .crypto/tls.secureRenegotiation <type 16>; .crypto/tls.alpnProtocols <type 111>; .crypto/tls.scts <type -15>; .crypto/tls.supportedVersions <type 141>; .crypto/tls.cookie <type 16>; .crypto/tls.keyShares <type 214>; .crypto/tls.earlyData <type -15>; .crypto/tls.pskModes <type 143>; .crypto/tls.pskIdentities <type 217>; .crypto/tls.pskBinders <type 15>; }
type 214 [] <type 215>
type 215 ".crypto/tls.keyShare" <type 216>
type 216 struct { .crypto/tls.group <type 10>; .crypto/tls.data <type 16>; }
type 217 [] <type 218>
type 218 ".crypto/tls.pskIdentity" <type 219>
type 219 struct { .crypto/tls.label <type 16>; .crypto/tls.obfuscatedTicketAge <type -7>; }
type 220 ".crypto/tls.ecdheParameters" <type 221>
type 221 interface { CurveID () <type 10>; PublicKey () <type 16>; SharedKey (peerPublicKey <type 16>) <type 16>; }
type 222 *<type 223>
type 223 ".crypto/tls.serverHelloMsg" <type 224>
 func (m <esc:0x2a> <type 222>) .crypto/tls.marshal () <type 16>
 func (m <esc:0x9> <type 222>) .crypto/tls.unmarshal (data <type 16>) <type -15>
type 224 struct { .crypto/tls.raw <type 16>; .crypto/tls.vers <type -6>; .crypto/tls.random <type 16>; .crypto/tls.sessionId <type 16>; .crypto/tls.cipherSuite <type -6>; .crypto/tls.compressionMethod <type -5>; .crypto/tls.nextProtoNeg <type -15>; .crypto/tls.nextProtos <type 111>; .crypto/tls.ocspStapling <type -15>; .crypto/tls.ticketSupported <type -15>; .crypto/tls.secureRenegotiationSupported <type -15>; .crypto/tls.secureRenegotiation <type 16>; .crypto/tls.alpnProtocol <type -16>; .crypto/tls.scts <type 15>; .crypto/tls.supportedVersion <type -6>; .crypto/tls.serverShare <type 215>; .crypto/tls.selectedIdentityPresent <type -15>; .crypto/tls.selectedIdentity <type -6>; .crypto/tls.cookie <type 16>; .crypto/tls.selectedGroup <type 10>; }
type 225 *<type 226>
type 226 ".crypto/tls.newSessionTicketMsgTLS13" <type 227>
 func (m <esc:0x22> <type 225>) .crypto/tls.marshal () <type 16>
 func (m <esc:0x1> <type 225>) .crypto/tls.unmarshal (data <type 16>) <type -15>
type 227 struct { .crypto/tls.raw <type 16>; .crypto/tls.lifetime <type -7>; .crypto/tls.ageAdd <type -7>; .crypto/tls.nonce <type 16>; .crypto/tls.label <type 16>; .crypto/tls.maxEarlyData <type -7>; }
type 228 struct { Version <type -6>; HandshakeComplete <type -15>; DidResume <type -15>; CipherSuite <type -6>; NegotiatedProtocol <type -16>; NegotiatedProtocolIsMutual <type -15>; ServerName <type -16>; PeerCertificates <type 98>; VerifiedChains <type 101>; SignedCertificateTimestamps <type 15>; OCSPResponse <type 16>; .crypto/tls.ekm <type 179>; TLSUnique <type 16>; }
type 229 *<type 9>
type 230 *<type 231>
type 231 "net.Dialer" <type 357>
 func (d <esc:0x9> <type 230>) DialContext (ctx <type 232>, network <type -16>, address <type -16>) (? <type 134>, ? <type -19>)
 func (d <esc:0x9> <type 230>) Dial (network <type -16>, address <type -16>) (? <type 134>, ? <type -19>)
 func (d <esc:0x1> <type 230>) .net.fallbackDelay () <type 54>
 func (d <esc:0x22> <type 230>) .net.resolver () <type 236>
 func (d <esc:0x22> <type 230>) .net.deadline (ctx <type 232>, now <esc:0x12> <type 53>) (earliest <type 53>)
 func (d <esc:0x1> <type 230>) .net.dualStack () <type -15>
type 232 "context.Context" <type 233>
type 233 interface { Deadline () (deadline <type 53>, ok <type -15>); Done () <type 234>; Err () <type -19>; Value (key <type 18>) <type 18>; }
type 234 chan <- <type 235>
type 235 struct { }
type 236 *<type 237>
type 237 "net.Resolver" <type 355>
 func (r <esc:0x9> <type 236>) .net.lookupAddr (ctx <type 232>, addr <type -16>) (? <type 111>, ? <type -19>)
 func (r <esc:0x9> <type 236>) .net.lookupNS (ctx <type 232>, name <type -16>) (? <type 238>, ? <type -19>)
 func (r <esc:0x9> <type 236>) .net.lookupMX (ctx <type 232>, name <type -16>) (? <type 242>, ? <type -19>)
 func (r <esc:0x9> <type 236>) .net.goLookupPTR (ctx <type 232>, addr <type -16>) (? <type 111>, ? <type -19>)
 func (r <esc:0x9> <type 236>) .net.lookupTXT (ctx <type 232>, name <type -16>) (? <type 111>, ? <type -19>)
 func (r <type 236>) .net.goLookupCNAME (ctx <type 232>, host <type -16>) (? <type -16>, ? <type -19>)
 func (r <esc:0x9> <type 236>) LookupNS (ctx <type 232>, name <type -16>) (? <type 238>, ? <type -19>)
 func (r <esc:0x1> <type 236>) .net.lookupPort (ctx <type 232>, network <type -16>, service <type -16>) (? <type -11>, ? <type -19>)
 func (r <esc:0x1> <type 236>) .net.strictErrors () <type -15>
 func (r <type 236>) .net.goLookupHost (ctx <type 232>, name <type -16>) (addrs <type 111>, err <type -19>)
 func (r <type 236>) .net.goLookupIP (ctx <type 232>, host <type -16>) (addrs <type 246>, err <type -19>)
 func (r <esc:0x1> <type 236>) LookupPort (ctx <type 232>, network <type -16>, service <type -16>) (port <type -11>, err <type -19>)
 func (r <esc:0x9> <type 236>) .net.lookup (ctx <type 232>, name <type -16>, qtype <type 263>) (? <type 264>, ? <type -16>, ? <type -19>)
 func (r <esc:0x9> <type 236>) .net.tryOneName (ctx <type 232>, cfg <type 323>, name <type -16>, qtype <type 263>) (? <type 264>, ? <type -16>, ? <type -19>)
 func (r <type 236>) .net.goLookupHostOrder (ctx <type 232>, name <type -16>, order <type 326>) (addrs <type 111>, err <type -19>)
 func (r <type 236>) .net.internetAddrList (ctx <type 232>, net <type -16>, addr <type -16>) (? <type 327>, ? <type -19>)
 func (r <type 236>) .net.resolveAddrList (ctx <type 232>, op <esc:0x1> <type -16>, network <type -16>, addr <type -16>, hint <type 136>) (? <type 327>, ? <type -19>)
 func (r <esc:0x1b2> <type 236>) .net.dial (ctx <type 232>, network <type -16>, server <type -16>) (? <type 134>, ? <type -19>)
 func (r <type 236>) .net.lookupCNAME (ctx <type 232>, name <type -16>) (? <type -16>, ? <type -19>)
 func (r <esc:0x1> <type 236>) .net.preferGo () <type -15>
 func (r <esc:0x12> <type 236>) .net.getLookupGroup () <type 330>
 func (r <type 236>) LookupHost (ctx <type 232>, host <type -16>) (addrs <type 111>, err <type -19>)
 func (r <type 236>) LookupIPAddr (ctx <type 232>, host <type -16>) (? <type 246>, ? <type -19>)
 func (r <type 236>) .net.lookupIPAddr (ctx <type 232>, network <type -16>, host <type -16>) (? <type 246>, ? <type -19>)
 func (r <type 236>) .net.lookupHost (ctx <type 232>, host <type -16>) (addrs <type 111>, err <type -19>)
 func (r <esc:0x9> <type 236>) .net.lookupSRV (ctx <type 232>, service <esc:0x1> <type -16>, proto <esc:0x1> <type -16>, name <type -16>) (? <type -16>, ? <type 351>, ? <type -19>)
 func (r <type 236>) .net.goLookupIPCNAMEOrder (ctx <type 232>, name <type -16>, order <type 326>) (addrs <type 246>, cname <type 270>, err <type -19>)
 func (r <type 236>) LookupCNAME (ctx <type 232>, host <type -16>) (cname <type -16>, err <type -19>)
 func (r <esc:0x9> <type 236>) LookupSRV (ctx <type 232>, service <esc:0x1> <type -16>, proto <esc:0x1> <type -16>, name <type -16>) (cname <type -16>, addrs <type 351>, err <type -19>)
 func (r <esc:0x9> <type 236>) LookupMX (ctx <type 232>, name <type -16>) (? <type 242>, ? <type -19>)
 func (r <esc:0xc0a> <type 236>) .net.exchange (ctx <type 232>, server <type -16>, q <type 279>, timeout <type 54>) (? <type 264>, ? <type 314>, ? <type -19>)
 func (r <esc:0x9> <type 236>) LookupTXT (ctx <type 232>, name <type -16>) (? <type 111>, ? <type -19>)
 func (r <esc:0x9> <type 236>) LookupAddr (ctx <type 232>, addr <type -16>) (names <type 111>, err <type -19>)
 func (r <type 236>) .net.lookupIP (ctx <type 232>, network <type -16>, host <type -16>) (addrs <type 246>, err <type -19>)
type 238 [] <type 239>
type 239 *<type 240>
type 240 "net.NS" <type 241>
type 241 struct { Host <type -16>; }
type 242 [] <type 243>
type 243 *<type 244>
type 244 "net.MX" <type 245>
type 245 struct { Host <type -16>; Pref <type -6>; }
type 246 [] <type 247>
type 247 "net.IPAddr" <type 262>
 func (a <esc:0xa> <type 248>) .net.toLocal (net <esc:0x1> <type -16>) <type 249>
 func (a <esc:0x1> <type 248>) .net.sockaddr (family <type -11>) (? <type 251>, ? <type -19>)
 func (a <esc:0x1> <type 248>) .net.family () <type -11>
 func (a <esc:0x12> <type 248>) .net.opAddr () <type 136>
 func (a <esc:0x1> <type 248>) .net.isWildcard () <type -15>
 func (a <esc:0x1> <type 248>) String () <type -16>
 func (a <esc:0x1> <type 248>) Network () ($ret189 <type -16>)
type 248 *<type 247>
type 249 ".net.sockaddr" <type 250>
type 250 interface { ? <type 136>; .net.family () <type -11>; .net.isWildcard () <type -15>; .net.sockaddr (family <type -11>) (? <type 251>, ? <type -19>); .net.toLocal (net <type -16>) <type 249>; }
type 251 "syscall.Sockaddr" <type 252>
type 252 interface { .syscall.sockaddr () (ptr <type 253>, len <type 260>, err <type -19>); }
type 253 *<type 254>
type 254 "syscall.RawSockaddrAny" <type 255>
type 255 struct { Addr <type 256>; Pad <type 259>; }
type 256 "syscall.RawSockaddr" <type 257>
type 257 struct { Family <type -6>; Data <type 258>; }
type 258 [14 ] <type -1>
type 259 [96 ] <type -1>
type 260 "syscall.Socklen_t" <type 261>
type 261 ".syscall._socklen_t" <type -7>
type 262 struct { IP <type 116>; Zone <type -16>; }
type 263 "internal/x/net/dns/dnsmessage.Type" <type -6>
type 264 "internal/x/net/dns/dnsmessage.Parser" <type 319>
 func (p <esc:0x1> <type 265>) SOAResource () (? <type 266>, ? <type -19>)
 func (p <esc:0x1> <type 265>) SkipAdditional () <type -19>
 func (p <esc:0x1> <type 265>) .internal/x/net/dns/dnsmessage.resourceHeader (sec <type 274>) (? <type 275>, ? <type -19>)
 func (p <esc:0x1> <type 265>) Question () (? <type 279>, ? <type -19>)
 func (p <esc:0x1> <type 265>) CNAMEResource () (? <type 282>, ? <type -19>)
 func (p <esc:0x1> <type 265>) SkipAllQuestions () <type -19>
 func (p <esc:0x1> <type 265>) AAAAResource () (? <type 285>, ? <type -19>)
 func (p <esc:0x1> <type 265>) NSResource () (? <type 288>, ? <type -19>)
 func (p <esc:0x1> <type 265>) AdditionalHeader () (? <type 275>, ? <type -19>)
 func (p <esc:0x1> <type 265>) PTRResource () (? <type 291>, ? <type -19>)
 func (p <esc:0x1> <type 265>) Answer () (? <type 294>, ? <type -19>)
 func (p <esc:0x1> <type 265>) AllAnswers () (? <type 299>, ? <type -19>)
 func (p <esc:0x1> <type 265>) TXTResource () (? <type 300>, ? <type -19>)
 func (p <esc:0x1> <type 265>) AllQuestions () (? <type 303>, ? <type -19>)
 func (p <esc:0x1> <type 265>) .internal/x/net/dns/dnsmessage.skipResource (sec <type 274>) <type -19>
 func (p <esc:0x1> <type 265>) Additional () (? <type 294>, ? <type -19>)
 func (p <esc:0x1> <type 265>) AResource () (? <type 304>, ? <type -19>)
 func (p <esc:0x1> <type 265>) SkipAnswer () <type -19>
 func (p <esc:0x1> <type 265>) .internal/x/net/dns/dnsmessage.resource (sec <type 274>) (? <type 294>, ? <type -19>)
 func (p <esc:0x1> <type 265>) AllAdditionals () (? <type 299>, ? <type -19>)
 func (p <esc:0x1> <type 265>) SRVResource () (? <type 308>, ? <type -19>)
 func (p <esc:0x1> <type 265>) .internal/x/net/dns/dnsmessage.checkAdvance (sec <type 274>) <type -19>
 func (p <esc:0x1> <type 265>) SkipAuthority () <type -19>
 func (p <esc:0x1> <type 265>) MXResource () (? <type 311>, ? <type -19>)
 func (p <esc:0x1> <type 265>) SkipAllAnswers () <type -19>
 func (p <esc:0x1> <type 265>) Authority () (? <type 294>, ? <type -19>)
 func (p <esc:0x1> <type 265>) SkipAllAdditionals () <type -19>
 func (p <esc:0x1> <type 265>) AnswerHeader () (? <type 275>, ? <type -19>)
 func (p <esc:0x1> <type 265>) SkipAllAuthorities () <type -19>
 func (p <esc:0x1> <type 265>) AllAuthorities () (? <type 299>, ? <type -19>)
 func (p <esc:0x1> <type 265>) AuthorityHeader () (? <type 275>, ? <type -19>)
 func (p <esc:0x1> <type 265>) SkipQuestion () <type -19>
 func (p <esc:0x1> <type 265>) Start (msg <type 16>) (? <type 314>, ? <type -19>)
type 265 *<type 264>
type 266 "internal/x/net/dns/dnsmessage.SOAResource" <type 269>
 func (r <esc:0x1> <type 267>) .internal/x/net/dns/dnsmessage.realType () <type 263>
 func (r <esc:0x1> <type 267>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 16>, compression <esc:0x1> <type 268>, compressionOff <type -11>) (? <type 16>, ? <type -19>)
type 267 *<type 266>
type 268 map [<type -16>] <type -11>
type 269 struct { NS <type 270>; MBox <type 270>; Serial <type -7>; Refresh <type -7>; Retry <type -7>; Expire <type -7>; MinTTL <type -7>; }
type 270 "internal/x/net/dns/dnsmessage.Name" <type 272>
 func (n <type 270>) String () <type -16>
 func (n <esc:0x1> <type 271>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 16>, compression <esc:0x1> <type 268>, compressionOff <type -11>) (? <type 16>, ? <type -19>)
 func (n <esc:0x1> <type 271>) .internal/x/net/dns/dnsmessage.unpackCompressed (msg <esc:0x1> <type 16>, off <type -11>, allowCompression <type -15>) (? <type -11>, ? <type -19>)
 func (n <esc:0x1> <type 271>) .internal/x/net/dns/dnsmessage.unpack (msg <esc:0x1> <type 16>, off <type -11>) (? <type -11>, ? <type -19>)
type 271 *<type 270>
type 272 struct { Data <type 273>; Length <type -5>; }
type 273 [255 ] <type -20>
type 274 ".internal/x/net/dns/dnsmessage.section" <type -5>
type 275 "internal/x/net/dns/dnsmessage.ResourceHeader" <type 277>
 func (h <esc:0x1> <type 276>) .internal/x/net/dns/dnsmessage.pack (oldMsg <esc:0x92> <type 16>, compression <esc:0x1> <type 268>, compressionOff <type -11>) (msg <type 16>, length <type 16>, err <type -19>)
 func (h <esc:0x1> <type 276>) .internal/x/net/dns/dnsmessage.unpack (msg <esc:0x1> <type 16>, off <type -11>) (? <type -11>, ? <type -19>)
 func (h <esc:0x1> <type 276>) .internal/x/net/dns/dnsmessage.fixLen (msg <esc:0x1> <type 16>, length <esc:0x1> <type 16>, preLen <type -11>) <type -19>
type 276 *<type 275>
type 277 struct { Name <type 270>; Type <type 263>; Class <type 278>; TTL <type -7>; Length <type -6>; }
type 278 "internal/x/net/dns/dnsmessage.Class" <type -6>
type 279 "internal/x/net/dns/dnsmessage.Question" <type 281>
 func (q <esc:0x1> <type 280>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 16>, compression <esc:0x1> <type 268>, compressionOff <type -11>) (? <type 16>, ? <type -19>)
type 280 *<type 279>
type 281 struct { Name <type 270>; Type <type 263>; Class <type 278>; }
type 282 "internal/x/net/dns/dnsmessage.CNAMEResource" <type 284>
 func (r <esc:0x1> <type 283>) .internal/x/net/dns/dnsmessage.realType () <type 263>
 func (r <esc:0x1> <type 283>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 16>, compression <esc:0x1> <type 268>, compressionOff <type -11>) (? <type 16>, ? <type -19>)
type 283 *<type 282>
type 284 struct { CNAME <type 270>; }
type 285 "internal/x/net/dns/dnsmessage.AAAAResource" <type 287>
 func (r <esc:0x1> <type 286>) .internal/x/net/dns/dnsmessage.realType () <type 263>
 func (r <esc:0x1> <type 286>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 16>, compression <esc:0x1> <type 268>, compressionOff <type -11>) (? <type 16>, ? <type -19>)
type 286 *<type 285>
type 287 struct { AAAA <type 176>; }
type 288 "internal/x/net/dns/dnsmessage.NSResource" <type 290>
 func (r <esc:0x1> <type 289>) .internal/x/net/dns/dnsmessage.realType () <type 263>
 func (r <esc:0x1> <type 289>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 16>, compression <esc:0x1> <type 268>, compressionOff <type -11>) (? <type 16>, ? <type -19>)
type 289 *<type 288>
type 290 struct { NS <type 270>; }
type 291 "internal/x/net/dns/dnsmessage.PTRResource" <type 293>
 func (r <esc:0x1> <type 292>) .internal/x/net/dns/dnsmessage.realType () <type 263>
 func (r <esc:0x1> <type 292>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 16>, compression <esc:0x1> <type 268>, compressionOff <type -11>) (? <type 16>, ? <type -19>)
type 292 *<type 291>
type 293 struct { PTR <type 270>; }
type 294 "internal/x/net/dns/dnsmessage.Resource" <type 296>
 func (r <esc:0x9> <type 295>) .internal/x/net/dns/dnsmessage.pack (msg <type 16>, compression <type 268>, compressionOff <type -11>) (? <type 16>, ? <type -19>)
type 295 *<type 294>
type 296 struct { Header <type 275>; Body <type 297>; }
type 297 "internal/x/net/dns/dnsmessage.ResourceBody" <type 298>
type 298 interface { .internal/x/net/dns/dnsmessage.pack (msg <type 16>, compression <type 268>, compressionOff <type -11>) (? <type 16>, ? <type -19>); .internal/x/net/dns/dnsmessage.realType () <type 263>; }
type 299 [] <type 294>
type 300 "internal/x/net/dns/dnsmessage.TXTResource" <type 302>
 func (r <esc:0x1> <type 301>) .internal/x/net/dns/dnsmessage.realType () <type 263>
 func (r <esc:0x1> <type 301>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 16>, compression <esc:0x1> <type 268>, compressionOff <type -11>) (? <type 16>, ? <type -19>)
type 301 *<type 300>
type 302 struct { TXT <type 111>; }
type 303 [] <type 279>
type 304 "internal/x/net/dns/dnsmessage.AResource" <type 306>
 func (r <esc:0x1> <type 305>) .internal/x/net/dns/dnsmessage.realType () <type 263>
 func (r <esc:0x1> <type 305>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 16>, compression <esc:0x1> <type 268>, compressionOff <type -11>) (? <type 16>, ? <type -19>)
type 305 *<type 304>
type 306 struct { A <type 307>; }
type 307 [4 ] <type -20>
type 308 "internal/x/net/dns/dnsmessage.SRVResource" <type 310>
 func (r <esc:0x1> <type 309>) .internal/x/net/dns/dnsmessage.realType () <type 263>
 func (r <esc:0x1> <type 309>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 16>, compression <esc:0x1> <type 268>, compressionOff <type -11>) (? <type 16>, ? <type -19>)
type 309 *<type 308>
type 310 struct { Priority <type -6>; Weight <type -6>; Port <type -6>; Target <type 270>; }
type 311 "internal/x/net/dns/dnsmessage.MXResource" <type 313>
 func (r <esc:0x1> <type 312>) .internal/x/net/dns/dnsmessage.realType () <type 263>
 func (r <esc:0x1> <type 312>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 16>, compression <esc:0x1> <type 268>, compressionOff <type -11>) (? <type 16>, ? <type -19>)
type 312 *<type 311>
type 313 struct { Pref <type -6>; MX <type 270>; }
type 314 "internal/x/net/dns/dnsmessage.Header" <type 316>
 func (m <esc:0x1> <type 315>) .internal/x/net/dns/dnsmessage.pack () (id <type -6>, bits <type -6>)
type 315 *<type 314>
type 316 struct { ID <type -6>; Response <type -15>; OpCode <type 317>; Authoritative <type -15>; Truncated <type -15>; RecursionDesired <type -15>; RecursionAvailable <type -15>; RCode <type 318>; }
type 317 "internal/x/net/dns/dnsmessage.OpCode" <type -6>
type 318 "internal/x/net/dns/dnsmessage.RCode" <type -6>
type 319 struct { .internal/x/net/dns/dnsmessage.msg <type 16>; .internal/x/net/dns/dnsmessage.header <type 320>; .internal/x/net/dns/dnsmessage.section <type 274>; .internal/x/net/dns/dnsmessage.off <type -11>; .internal/x/net/dns/dnsmessage.index <type -11>; .internal/x/net/dns/dnsmessage.resHeaderValid <type -15>; .internal/x/net/dns/dnsmessage.resHeader <type 275>; }
type 320 ".internal/x/net/dns/dnsmessage.header" <type 322>
 func (h <esc:0x1> <type 321>) .internal/x/net/dns/dnsmessage.count (sec <type 274>) <type -6>
 func (h <esc:0x1> <type 321>) .internal/x/net/dns/dnsmessage.unpack (msg <esc:0x1> <type 16>, off <type -11>) (? <type -11>, ? <type -19>)
 func (h <esc:0x1> <type 321>) .internal/x/net/dns/dnsmessage.pack (msg <esc:0x12> <type 16>) <type 16>
 func (h <esc:0x1> <type 321>) .internal/x/net/dns/dnsmessage.header () <type 314>
type 321 *<type 320>
type 322 struct { .internal/x/net/dns/dnsmessage.id <type -6>; .internal/x/net/dns/dnsmessage.bits <type -6>; .internal/x/net/dns/dnsmessage.questions <type -6>; .internal/x/net/dns/dnsmessage.answers <type -6>; .internal/x/net/dns/dnsmessage.authorities <type -6>; .internal/x/net/dns/dnsmessage.additionals <type -6>; }
type 323 *<type 324>
type 324 ".net.dnsConfig" <type 325>
 func (c <type 323>) .net.serverOffset () <type -7>
 func (conf <esc:0x1> <type 323>) .net.nameList (name <type -16>) <type 111>
type 325 struct { .net.servers <type 111>; .net.search <type 111>; .net.ndots <type -11>; .net.timeout <type 54>; .net.attempts <type -11>; .net.rotate <type -15>; .net.unknownOpt <type -15>; .net.lookup <type 111>; .net.err <type -19>; .net.mtime <type 53>; .net.soffset <type -7>; }
type 326 ".net.hostLookupOrder" <type -11>
 func (o <type 326>) String () <type -16>
type 327 ".net.addrList" <type 329>
 func (addrs <esc:0x9> <type 327>) .net.partition (strategy <esc:0x1> <type 328>) (primaries <type 327>, fallbacks <type 327>)
 func (addrs <esc:0x2a> <type 327>) .net.first (strategy <esc:0x1> <type 328>) <type 136>
 func (addrs <esc:0x2a> <type 327>) .net.forResolve (network <esc:0x1> <type -16>, addr <esc:0x1> <type -16>) <type 136>
type 328 (? <type 136>) <type -15>
type 329 [] <type 136>
type 330 *<type 331>
type 331 "internal/singleflight.Group" <type 349>
 func (g <type 330>) Do (key <type -16>, fn <esc:0x9> <type 332>) (v <type 18>, err <type -19>, shared <type -15>)
 func (g <type 330>) DoChan (key <type -16>, fn <type 332>) (? <type 333>, ? <type -15>)
 func (g <type 330>) .internal/singleflight.doCall (c <type 336>, key <esc:0x1> <type -16>, fn <esc:0x9> <type 332>)
 func (g <type 330>) ForgetUnshared (key <esc:0x1> <type -16>) <type -15>
type 332 () (? <type 18>, ? <type -19>)
type 333 chan <- <type 334>
type 334 "internal/singleflight.Result" <type 335>
type 335 struct { Val <type 18>; Err <type -19>; Shared <type -15>; }
type 336 *<type 337>
type 337 ".internal/singleflight.call" <type 338>
type 338 struct { .internal/singleflight.wg <type 339>; .internal/singleflight.val <type 18>; .internal/singleflight.err <type -19>; .internal/singleflight.dups <type -11>; .internal/singleflight.chans <type 347>; }
type 339 "sync.WaitGroup" <type 343>
 func (wg <esc:0x92> <type 340>) .sync.state () (statep <type 341>, semap <type 342>)
 func (wg <type 340>) Add (delta <type -11>)
 func (wg <type 340>) Done ()
 func (wg <type 340>) Wait ()
type 340 *<type 339>
type 341 *<type -8>
type 342 *<type -7>
type 343 struct { .sync.noCopy <type 344>; .sync.state1 <type 346>; }
type 344 ".sync.noCopy" <type 235>
 func (? <esc:0x1> <type 345>) Lock ()
 func (? <esc:0x1> <type 345>) Unlock ()
type 345 *<type 344>
type 346 [3 ] <type -7>
type 347 [] <type 348>
type 348 chan -< <type 334>
type 349 struct { .internal/singleflight.mu <type 165>; .internal/singleflight.m <type 350>; }
type 350 map [<type -16>] <type 336>
type 351 [] <type 352>
type 352 *<type 353>
type 353 "net.SRV" <type 354>
type 354 struct { Target <type -16>; Port <type -6>; Priority <type -6>; Weight <type -6>; }
type 355 struct { PreferGo <type -15>; StrictErrors <type -15>; Dial <type 356>; .net.lookupGroup <type 331>; }
type 356 (ctx <type 232>, network <type -16>, address <type -16>) (? <type 134>, ? <type -19>)
type 357 struct { Timeout <type 54>; Deadline <type 53>; LocalAddr <type 136>; DualStack <type -15>; FallbackDelay <type 54>; KeepAlive <type 54>; Resolver <type 236>; Cancel <type 234>; Control <type 358>; }
type 358 (network <type -16>, address <type -16>, c <type 359>) <type -19>
type 359 "syscall.RawConn" <type 360>
type 360 interface { Control (f <type 361>) <type -19>; Read (f <type 362>) <type -19>; Write (f <type 362>) <type -19>; }
type 361 (fd <type -13>)
type 362 (fd <type -13>) (done <type -15>)
type 363 "net.Listener" <type 364>
type 364 interface { Accept () (? <type 134>, ? <type -19>); Addr () <type 136>; Close () <type -19>; }
type 365 struct { Msg <type -16>; RecordHeader <type 366>; Conn <type 134>; }
type 366 [5 ] <type -20>
func Client (conn <type 134>, config <type 138>) <type 139>
const CurveP256 <type 10> = 23 
const CurveP384 <type 10> = 24 
const CurveP521 <type 10> = 25 
func Dial (network <type -16>, addr <type -16>, config <type 138>) (? <type 139>, ? <type -19>)
func DialWithDialer (dialer <esc:0x9> <type 230>, network <type -16>, addr <type -16>, config <type 138>) (? <type 139>, ? <type -19>)
const ECDSAWithP256AndSHA256 <type 13> = 1027 
const ECDSAWithP384AndSHA384 <type 13> = 1283 
const ECDSAWithP521AndSHA512 <type 13> = 1539 
const ECDSAWithSHA1 <type 13> = 515 
func Listen (network <type -16>, laddr <type -16>, config <type 138>) (? <type 363>, ? <type -19>)
func LoadX509KeyPair (certFile <type -16>, keyFile <type -16>) (? <type 1>, ? <type -19>)
func NewLRUClientSessionCache (capacity <type -11>) <type 5>
func NewListener (inner <type 363>, config <type 138>) <type 363>
const NoClientCert <type 3> = 0 
const PKCS1WithSHA1 <type 13> = 513 
const PKCS1WithSHA256 <type 13> = 1025 
const PKCS1WithSHA384 <type 13> = 1281 
const PKCS1WithSHA512 <type 13> = 1537 
const PSSWithSHA256 <type 13> = 2052 
const PSSWithSHA384 <type 13> = 2053 
const PSSWithSHA512 <type 13> = 2054 
const RenegotiateFreelyAsClient <type 12> = 2 
const RenegotiateNever <type 12> = 0 
const RenegotiateOnceAsClient <type 12> = 1 
const RequestClientCert <type 3> = 1 
const RequireAndVerifyClientCert <type 3> = 4 
const RequireAnyClientCert <type 3> = 2 
func Server (conn <type 134>, config <type 138>) <type 139>
const TLS_AES_128_GCM_SHA256 <type -6> = 4865 
const TLS_AES_256_GCM_SHA384 <type -6> = 4866 
const TLS_CHACHA20_POLY1305_SHA256 <type -6> = 4867 
const TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA <type -6> = 49161 
const TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 <type -6> = 49187 
const TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 <type -6> = 49195 
const TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA <type -6> = 49162 
const TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 <type -6> = 49196 
const TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 <type -6> = 52393 
const TLS_ECDHE_ECDSA_WITH_RC4_128_SHA <type -6> = 49159 
const TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA <type -6> = 49170 
const TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA <type -6> = 49171 
const TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 <type -6> = 49191 
const TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 <type -6> = 49199 
const TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA <type -6> = 49172 
const TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 <type -6> = 49200 
const TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305 <type -6> = 52392 
const TLS_ECDHE_RSA_WITH_RC4_128_SHA <type -6> = 49169 
const TLS_FALLBACK_SCSV <type -6> = 22016 
const TLS_RSA_WITH_3DES_EDE_CBC_SHA <type -6> = 10 
const TLS_RSA_WITH_AES_128_CBC_SHA <type -6> = 47 
const TLS_RSA_WITH_AES_128_CBC_SHA256 <type -6> = 60 
const TLS_RSA_WITH_AES_128_GCM_SHA256 <type -6> = 156 
const TLS_RSA_WITH_AES_256_CBC_SHA <type -6> = 53 
const TLS_RSA_WITH_AES_256_GCM_SHA384 <type -6> = 157 
const TLS_RSA_WITH_RC4_128_SHA <type -6> = 5 
const VerifyClientCertIfGiven <type 3> = 3 
const VersionSSL30 = 768 
const VersionTLS10 = 769 
const VersionTLS11 = 770 
const VersionTLS12 = 771 
const VersionTLS13 = 772 
const X25519 <type 10> = 29 
func X509KeyPair (certPEMBlock <type 16>, keyPEMBlock <type 16>) (? <type 1>, ? <type -19>)
checksum 6FCE8DCD1964329D3977CBAC806A8BF9319B4A99
v3;
package x509
pkgpath crypto/x509
import bytes bytes "bytes"
import crypto crypto "crypto"
import aes crypto/aes "crypto/aes"
import cipher crypto/cipher "crypto/cipher"
import des crypto/des "crypto/des"
import dsa crypto/dsa "crypto/dsa"
import ecdsa crypto/ecdsa "crypto/ecdsa"
import elliptic crypto/elliptic "crypto/elliptic"
import md5 crypto/md5 "crypto/md5"
import rsa crypto/rsa "crypto/rsa"
import sha1 crypto/sha1 "crypto/sha1"
import sha256 crypto/sha256 "crypto/sha256"
import sha512 crypto/sha512 "crypto/sha512"
import pkix crypto/x509/pkix "crypto/x509/pkix"
import asn1 encoding/asn1 "encoding/asn1"
import hex encoding/hex "encoding/hex"
import pem encoding/pem "encoding/pem"
import errors errors "errors"
import fmt fmt "fmt"
import cryptobyte internal/x/crypto/cryptobyte "internal/x/crypto/cryptobyte"
import asn1 internal/x/crypto/cryptobyte/asn1 "internal/x/crypto/cryptobyte/asn1"
import io io "io"
import ioutil io/ioutil "io/ioutil"
import big math/big "math/big"
import net net "net"
import url net/url "net/url"
import os os "os"
import reflect reflect "reflect"
import runtime runtime "runtime"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
import time time "time"
import utf8 unicode/utf8 "unicode/utf8"
indirectimport hash hash
indirectimport rand math/rand
init x509 crypto..z2fx509..import bufio bufio..import bytes bytes..import context context..import crypto crypto..import cipher crypto..z2fcipher..import des crypto..z2fdes..import dsa crypto..z2fdsa..import ecdsa crypto..z2fecdsa..import elliptic crypto..z2felliptic..import randutil crypto..z2finternal..z2frandutil..import md5 crypto..z2fmd5..import rand crypto..z2frand..import rsa crypto..z2frsa..import sha1 crypto..z2fsha1..import sha256 crypto..z2fsha256..import sha512 crypto..z2fsha512..import pkix crypto..z2fx509..z2fpkix..import asn1 encoding..z2fasn1..import base64 encoding..z2fbase64..import binary encoding..z2fbinary..import hex encoding..z2fhex..import pem encoding..z2fpem..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import cryptobyte internal..z2fx..z2fcrypto..z2fcryptobyte..import dnsmessage internal..z2fx..z2fnet..z2fdns..z2fdnsmessage..import io io..import ioutil io..z2fioutil..import big math..z2fbig..import rand math..z2frand..import net net..import os os..import filepath path..z2ffilepath..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 1 2 1 24 1 29 1 37 1 38 1 40 1 43 2 24 2 29 2 37 2 38 2 40 2 43 3 23 3 24 3 25 3 26 3 29 3 34 3 36 3 37 3 38 3 39 3 40 3 41 3 42 3 43 4 24 4 29 4 37 4 38 4 39 4 40 5 20 5 24 5 29 5 36 5 37 5 38 5 39 5 40 5 43 6 5 6 20 6 24 6 29 6 36 6 37 6 38 6 39 6 40 6 43 7 2 7 10 7 20 7 23 7 24 7 25 7 26 7 29 7 31 7 32 7 34 7 36 7 37 7 38 7 39 7 40 7 41 7 42 7 43 8 2 8 4 8 5 8 9 8 10 8 16 8 18 8 20 8 23 8 24 8 25 8 26 8 29 8 31 8 32 8 34 8 36 8 37 8 38 8 39 8 40 8 41 8 42 8 43 9 2 9 20 9 23 9 24 9 25 9 26 9 29 9 31 9 32 9 34 9 36 9 37 9 38 9 39 9 40 9 41 9 42 9 43 10 24 10 29 10 37 10 38 10 40 11 4 11 20 11 24 11 29 11 36 11 37 11 38 11 39 11 40 11 43 12 1 12 2 12 5 12 20 12 23 12 24 12 25 12 26 12 29 12 31 12 32 12 34 12 36 12 37 12 38 12 39 12 40 12 41 12 42 12 43 13 1 13 2 13 4 13 5 13 10 13 12 13 20 13 23 13 24 13 25 13 26 13 29 13 31 13 32 13 34 13 36 13 37 13 38 13 39 13 40 13 41 13 42 13 43 14 4 14 24 14 29 14 37 14 38 14 39 14 40 15 4 15 24 15 29 15 37 15 38 15 39 15 40 16 4 16 24 16 29 16 37 16 38 16 39 16 40 17 2 17 18 17 20 17 21 17 23 17 24 17 25 17 26 17 29 17 31 17 32 17 34 17 36 17 37 17 38 17 39 17 40 17 41 17 42 17 43 18 2 18 20 18 23 18 24 18 25 18 26 18 29 18 31 18 32 18 34 18 36 18 37 18 38 18 39 18 40 18 41 18 42 18 43 19 20 19 24 19 29 19 36 19 37 19 38 19 39 19 40 19 43 20 24 20 29 20 36 20 37 20 38 20 39 20 40 20 43 21 23 21 24 21 25 21 26 21 29 21 34 21 36 21 37 21 38 21 39 21 40 21 41 21 42 21 43 22 2 22 19 22 20 22 24 22 29 22 36 22 37 22 38 22 39 22 40 22 43 23 24 23 25 23 26 23 29 23 34 23 36 23 37 23 38 23 39 23 40 23 41 23 42 23 43 25 24 25 29 25 37 25 38 25 40 25 41 25 42 27 2 27 18 27 20 27 23 27 24 27 25 27 26 27 29 27 31 27 32 27 34 27 36 27 37 27 38 27 39 27 40 27 41 27 42 27 43 29 24 29 37 29 38 29 40 30 2 30 24 30 25 30 26 30 29 30 34 30 35 30 36 30 37 30 38 30 39 30 40 30 41 30 42 30 43 31 2 31 20 31 23 31 24 31 25 31 26 31 29 31 32 31 34 31 36 31 37 31 38 31 39 31 40 31 41 31 42 31 43 32 24 32 37 32 38 32 40 33 3 33 23 33 24 33 25 33 26 33 28 33 29 33 32 33 34 33 36 33 37 33 38 33 39 33 40 33 41 33 42 33 43 34 24 34 25 34 26 34 29 34 37 34 38 34 40 34 41 34 42 35 24 35 25 35 26 35 29 35 34 35 36 35 37 35 38 35 39 35 40 35 41 35 42 35 43 36 24 36 37 36 38 36 39 36 40 36 43 37 24 37 38 39 24 39 37 39 38 40 24 40 37 40 38 41 24 41 37 41 38 41 40 42 24 42 37 42 38 42 40 42 41
types 173 18 473 1753 93 99 394 32 73 81 34 30 31 84 143 79 342 83 35 119 35 22 21 18 18 22 21 1169 22 19 5185 21 35 35 61 34 64 30 195 19 1021 37 131 37 65 39 56 34 295 34 70 4127 21 38 102 351 100 21 66 21 59 52 179 22 19 19 266 3310 75 19 73 19 525 165 21 31 91 21 36 112 19 356 83 21 47 91 21 20 21 1057 19 155 21 19 800 357 35 192 19 215 112 23 21 223 50 20 22 21 89 36 21 141 102 58 299 46 59 84 45 115 23 58 112 162 59 32 74 72 426 23 64 69 22 19 20 21 41 74 37 60 21 232 40 47 210 32 121 32 75 38 47 45 60 44 385 21 1345 124 21 482 42 90 95 21 47 22 51 86 23 42 65 36 102 164
type 1 "CertPool" <type 18>
 func (s <esc:0x9> <type 23>) .crypto/x509.copy () <type 23>
 func (s <esc:0x1> <type 23>) .crypto/x509.findPotentialParents (cert <esc:0x1> <type 22>) <type 20>
 func (s <esc:0x1> <type 23>) .crypto/x509.contains (cert <esc:0x1> <type 22>) <type -15>
 func (s <esc:0x9> <type 23>) AddCert (cert <type 22>)
 func (s <esc:0x9> <type 23>) AppendCertsFromPEM (pemCerts <type 24>) (ok <type -15>)
 func (s <esc:0x9> <type 23>) Subjects () <type 25>
type 2 "Certificate" <type 26>
 func (c <esc:0x1> <type 22>) .crypto/x509.systemVerify (opts <esc:0x1> <type 104>) (chains <type 105>, err <type -19>)
 func (c <esc:0x12> <type 22>) .crypto/x509.checkNameConstraints (count <esc:0x1> <type 106>, maxConstraintComparisons <type -11>, nameType <type -16>, name <type -16>, parsedName <type 27>, match <esc:0x9> <type 107>, permitted <type 27>, excluded <type 27>) <type -19>
 func (c <type 22>) .crypto/x509.isValid (certType <type -11>, currentChain <esc:0x9> <type 21>, opts <esc:0x1> <type 104>) <type -19>
 func (c <type 22>) Verify (opts <type 17>) (chains <type 105>, err <type -19>)
 func (c <type 22>) .crypto/x509.buildChains (cache <esc:0x1> <type 108>, currentChain <esc:0x9> <type 21>, sigChecks <esc:0x1> <type 106>, opts <esc:0x9> <type 104>) (chains <type 105>, err <type -19>)
 func (c <esc:0x9> <type 22>) .crypto/x509.commonNameAsHostname () <type -15>
 func (c <esc:0x1a> <type 22>) VerifyHostname (h <type -16>) <type -19>
 func (c <esc:0x1> <type 22>) Equal (other <esc:0x1> <type 22>) <type -15>
 func (c <esc:0x1> <type 22>) .crypto/x509.hasSANExtension () <type -15>
 func (c <esc:0x9> <type 22>) CheckSignatureFrom (parent <esc:0x9> <type 22>) <type -19>
 func (c <esc:0x9> <type 22>) CheckSignature (algo <type 13>, signed <type 24>, signature <type 24>) <type -19>
 func (c <esc:0x1> <type 22>) .crypto/x509.hasNameConstraints () <type -15>
 func (c <esc:0x32> <type 22>) .crypto/x509.getSANExtension () <type 24>
 func (c <esc:0x9> <type 22>) CheckCRLSignature (crl <esc:0x9> <type 109>) <type -19>
 func (c <esc:0x9> <type 22>) CreateCRL (rand <type 124>, priv <type 27>, revokedCerts <esc:0x9> <type 119>, now <type 66>, expiry <type 66>) (crlBytes <type 24>, err <type -19>)
type 3 "CertificateInvalidError" <type 126>
 func (e <esc:0x1> <type 3>) Error () <type -16>
type 4 "CertificateRequest" <type 127>
 func (c <esc:0x9> <type 132>) CheckSignature () <type -19>
type 5 "ConstraintViolationError" <type 133>
 func (? <esc:0x1> <type 5>) Error () ($ret74 <type -16>) <inl:281>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/crypto/x509/x509.go:747
  { //748
   $ret74 = "x509: invalid signature: parent certificate cannot sign this kind of certificate" //748
   return //748
  } //0
type 6 "ExtKeyUsage" <type -11>
type 7 "HostnameError" <type 138>
 func (h <type 7>) Error () <type -16>
type 8 "InsecureAlgorithmError" <type 13>
 func (e <type 8>) Error () <type -16>
type 9 "InvalidReason" <type -11>
type 10 "KeyUsage" <type -11>
type 11 "PEMCipher" <type -11>
type 12 "PublicKeyAlgorithm" <type -11>
 func (algo <type 12>) String () <type -16>
type 13 "SignatureAlgorithm" <type -11>
 func (algo <type 13>) .crypto/x509.isRSAPSS () <type -15>
 func (algo <type 13>) String () <type -16>
type 14 "SystemRootsError" <type 170>
 func (se <type 14>) Error () <type -16>
type 15 "UnhandledCriticalExtension" <type 133>
 func (h <type 15>) Error () ($ret83 <type -16>) <inl:235>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/crypto/x509/x509.go:943
  { //944
   $ret83 = "x509: unhandled critical extension" //944
   return //944
  } //0
type 16 "UnknownAuthorityError" <type 171>
 func (e <type 16>) Error () <type -16>
type 17 "VerifyOptions" <type 172>
type 18 struct { .crypto/x509.bySubjectKeyId <type 19>; .crypto/x509.byName <type 19>; .crypto/x509.certs <type 21>; }
type 19 map [<type -16>] <type 20>
type 20 [] <type -11>
type 21 [] <type 22>
type 22 *<type 2>
type 23 *<type 1>
type 24 [] <type -20>
type 25 [] <type 24>
type 26 struct { Raw <type 24>; RawTBSCertificate <type 24>; RawSubjectPublicKeyInfo <type 24>; RawSubject <type 24>; RawIssuer <type 24>; Signature <type 24>; SignatureAlgorithm <type 13>; PublicKeyAlgorithm <type 12>; PublicKey <type 27>; Version <type -11>; SerialNumber <type 28>; Issuer <type 54>; Subject <type 54>; NotBefore <type 66>; NotAfter <type 66>; KeyUsage <type 10>; Extensions <type 82>; ExtraExtensions <type 82>; UnhandledCriticalExtensions <type 85>; ExtKeyUsage <type 86>; UnknownExtKeyUsage <type 85>; BasicConstraintsValid <type -15>; IsCA <type -15>; MaxPathLen <type -11>; MaxPathLenZero <type -15>; SubjectKeyId <type 24>; AuthorityKeyId <type 24>; OCSPServer <type 62>; IssuingCertificateURL <type 62>; DNSNames <type 62>; EmailAddresses <type 62>; IPAddresses <type 87>; URIs <type 91>; PermittedDNSDomainsCritical <type -15>; PermittedDNSDomains <type 62>; ExcludedDNSDomains <type 62>; PermittedIPRanges <type 100>; ExcludedIPRanges <type 100>; PermittedEmailAddresses <type 62>; ExcludedEmailAddresses <type 62>; PermittedURIDomains <type 62>; ExcludedURIDomains <type 62>; CRLDistributionPoints <type 62>; PolicyIdentifiers <type 85>; }
type 27 interface { }
type 28 *<type 29>
type 29 "math/big.Int" <type 49>
 func (z <esc:0x9> <type 28>) UnmarshalText (text <type 24>) <type -19>
 func (z <esc:0x1a> <type 28>) Neg (x <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) Abs (x <esc:0x1> <type 28>) <type 28>
 func (x <esc:0x1> <type 28>) MarshalText () (text <type 24>, err <type -19>)
 func (x <esc:0x9> <type 28>) ProbablyPrime (n <type -11>) <type -15>
 func (z <esc:0x12> <type 28>) SetBits (abs <type 30>) <type 28>
 func (z <esc:0x1a> <type 28>) Mul (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) SetString (s <type -16>, base <type -11>) (? <type 28>, ? <type -15>)
 func (z <esc:0x1a> <type 28>) .math/big.scan (r <type 32>, base <type -11>) (? <type 28>, ? <type -11>, ? <type -19>)
 func (x <esc:0x1> <type 28>) Cmp (y <esc:0x1> <type 28>) (r <type -11>)
 func (x <esc:0x1> <type 28>) IsInt64 () <type -15>
 func (z <esc:0x1a> <type 28>) Quo (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>) <type 28>
 func (x <esc:0x1> <type 28>) Format (s <type 36>, ch <type -21>)
 func (z <esc:0x1a> <type 28>) .math/big.modSqrt3Mod4Prime (x <esc:0x9> <type 28>, p <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) Add (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>) <type 28>
 func (x <esc:0x22> <type 28>) Bits () <type 30>
 func (z <esc:0x1a> <type 28>) ModInverse (g <esc:0x1> <type 28>, n <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) Set (x <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) SetUint64 (x <type -8>) <type 28>
 func (z <esc:0x1a> <type 28>) Exp (x <esc:0x9> <type 28>, y <esc:0x1> <type 28>, m <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) SetInt64 (x <type -4>) <type 28>
 func (z <esc:0x1a> <type 28>) ModSqrt (x <esc:0x9> <type 28>, p <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) Rsh (x <esc:0x1> <type 28>, n <type -12>) <type 28>
 func (z <esc:0x1a> <type 28>) .math/big.modSqrtTonelliShanks (x <esc:0x9> <type 28>, p <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) SetBytes (buf <esc:0x1> <type 24>) <type 28>
 func (z <esc:0x1a> <type 28>) MulRange (a <type -4>, b <type -4>) <type 28>
 func (x <esc:0x1> <type 28>) Sign () <type -11>
 func (x <esc:0x1> <type 28>) Int64 () <type -4>
 func (x <esc:0x1> <type 28>) MarshalJSON () (? <type 24>, ? <type -19>)
 func (z <esc:0x1a> <type 28>) Mod (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) .math/big.setFromScanner (r <type 32>, base <type -11>) (? <type 28>, ? <type -15>)
 func (z <esc:0x1a> <type 28>) And (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) Sub (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>) <type 28>
 func (x <esc:0x1> <type 28>) CmpAbs (y <esc:0x1> <type 28>) <type -11>
 func (z <esc:0x1a> <type 28>) Div (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) Rem (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>) <type 28>
 func (x <esc:0x1> <type 28>) IsUint64 () <type -15>
 func (z <esc:0x1a> <type 28>) DivMod (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>, m <esc:0x8a> <type 28>) (? <type 28>, ? <type 28>)
 func (z <esc:0x1a> <type 28>) Binomial (n <type -4>, k <type -4>) <type 28>
 func (x <esc:0x1> <type 28>) Uint64 () <type -8>
 func (x <esc:0x1> <type 28>) BitLen () <type -11>
 func (z <esc:0x1a> <type 28>) GCD (x <esc:0x9> <type 28>, y <esc:0x9> <type 28>, a <esc:0x1> <type 28>, b <esc:0x1> <type 28>) <type 28>
 func (x <esc:0x1> <type 28>) Bit (i <type -11>) <type -12>
 func (z <esc:0x1a> <type 28>) Or (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x12> <type 28>) .math/big.lehmerGCD (x <esc:0x1> <type 28>, y <esc:0x9> <type 28>, a <esc:0x1> <type 28>, b <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) Rand (rnd <esc:0x9> <type 38>, n <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) Xor (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) Sqrt (x <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) .math/big.modSqrt5Mod8Prime (x <esc:0x1> <type 28>, p <esc:0x1> <type 28>) <type 28>
 func (z <esc:0x1a> <type 28>) Lsh (x <esc:0x1> <type 28>, n <type -12>) <type 28>
 func (z <esc:0x1a> <type 28>) SetBit (x <esc:0x1> <type 28>, i <type -11>, b <type -12>) <type 28>
 func (z <esc:0x1a> <type 28>) AndNot (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>) <type 28>
 func (x <esc:0x1> <type 28>) Bytes () <type 24>
 func (z <esc:0x1a> <type 28>) Not (x <esc:0x1> <type 28>) <type 28>
 func (x <esc:0x1> <type 28>) GobEncode () (? <type 24>, ? <type -19>)
 func (x <esc:0x1> <type 28>) Append (buf <esc:0x12> <type 24>, base <type -11>) <type 24>
 func (x <esc:0x1> <type 28>) String () <type -16>
 func (x <esc:0x1> <type 28>) Text (base <type -11>) <type -16>
 func (z <esc:0x9> <type 28>) Scan (s <type 46>, ch <type -21>) <type -19>
 func (z <esc:0x9> <type 28>) GobDecode (buf <esc:0x1> <type 24>) <type -19>
 func (z <esc:0x1a> <type 28>) QuoRem (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>, r <esc:0x8a> <type 28>) (? <type 28>, ? <type 28>)
 func (z <esc:0x9> <type 28>) UnmarshalJSON (text <type 24>) <type -19>
type 30 [] <type 31>
type 31 "math/big.Word" <type -12>
type 32 "io.ByteScanner" <type 33>
type 33 interface { ? <type 34>; UnreadByte () <type -19>; }
type 34 "io.ByteReader" <type 35>
type 35 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 36 "fmt.State" <type 37>
type 37 interface { Flag (c <type -11>) <type -15>; Precision () (prec <type -11>, ok <type -15>); Width () (wid <type -11>, ok <type -15>); Write (b <type 24>) (n <type -11>, err <type -19>); }
type 38 *<type 39>
type 39 "math/rand.Rand" <type 41>
 func (r <esc:0x9> <type 38>) Int () <type -11>
 func (r <esc:0x9> <type 38>) Int63n (n <type -4>) <type -4>
 func (r <esc:0x9> <type 38>) Float64 () <type -10>
 func (r <esc:0x9> <type 38>) Int63 () <type -4>
 func (r <esc:0x9> <type 38>) Intn (n <type -11>) <type -11>
 func (r <esc:0x9> <type 38>) Int31n (n <type -3>) <type -3>
 func (r <type 38>) Read (p <esc:0x1> <type 24>) (n <type -11>, err <type -19>)
 func (r <esc:0x9> <type 38>) Int31 () <type -3>
 func (r <esc:0x9> <type 38>) Shuffle (n <type -11>, swap <esc:0x1> <type 40>)
 func (r <esc:0x9> <type 38>) Uint32 () <type -7>
 func (r <esc:0x9> <type 38>) Float32 () <type -9>
 func (r <esc:0x9> <type 38>) Uint64 () <type -8>
 func (r <esc:0x9> <type 38>) Perm (n <type -11>) <type 20>
 func (r <esc:0x9> <type 38>) .math/rand.int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 38>) ExpFloat64 () <type -10>
 func (r <esc:0x9> <type 38>) NormFloat64 () <type -10>
 func (r <esc:0x9> <type 38>) Seed (seed <type -4>)
type 40 (i <type -11>, j <type -11>)
type 41 struct { .math/rand.src <type 42>; .math/rand.s64 <type 44>; .math/rand.readVal <type -4>; .math/rand.readPos <type -1>; }
type 42 "math/rand.Source" <type 43>
type 43 interface { Int63 () <type -4>; Seed (seed <type -4>); }
type 44 "math/rand.Source64" <type 45>
type 45 interface { ? <type 42>; Uint64 () <type -8>; }
type 46 "fmt.ScanState" <type 47>
type 47 interface { Read (buf <type 24>) (n <type -11>, err <type -19>); ReadRune () (r <type -21>, size <type -11>, err <type -19>); SkipSpace (); Token (skipSpace <type -15>, f <type 48>) (token <type 24>, err <type -19>); UnreadRune () <type -19>; Width () (wid <type -11>, ok <type -15>); }
type 48 (? <type -21>) <type -15>
type 49 struct { .math/big.neg <type -15>; .math/big.abs <type 50>; }
type 50 ".math/big.nat" <type 30>
 func (x <esc:0x1> <type 50>) .math/big.modW (d <type 31>) (r <type 31>)
 func (z <esc:0x12> <type 50>) .math/big.xor (x <esc:0x1> <type 50>, y <esc:0x1> <type 50>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.or (x <esc:0x1> <type 50>, y <esc:0x1> <type 50>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.andNot (x <esc:0x1> <type 50>, y <esc:0x1> <type 50>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.mulAddWW (x <esc:0x1> <type 50>, y <type 31>, r <type 31>) <type 50>
 func (z <type 50>) .math/big.mul (x <esc:0x1> <type 50>, y <esc:0x1> <type 50>) <type 50>
 func (x <esc:0x1> <type 50>) .math/big.sticky (i <type -12>) <type -12>
 func (x <esc:0x1> <type 50>) .math/big.bit (i <type -12>) <type -12>
 func (x <esc:0x1> <type 50>) .math/big.trailingZeroBits () <type -12>
 func (z <type 50>) .math/big.sqr (x <esc:0x1> <type 50>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.shl (x <esc:0x1> <type 50>, s <type -12>) <type 50>
 func (x <esc:0x1> <type 50>) .math/big.cmp (y <esc:0x1> <type 50>) (r <type -11>)
 func (z <esc:0x12> <type 50>) .math/big.sub (x <esc:0x1> <type 50>, y <esc:0x1> <type 50>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.shr (x <esc:0x1> <type 50>, s <type -12>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.montgomery (x <esc:0x1> <type 50>, y <esc:0x1> <type 50>, m <esc:0x1> <type 50>, k <type 31>, n <type -11>) <type 50>
 func (z <type 50>) .math/big.expWW (x <type 31>, y <type 31>) <type 50>
 func (z <type 50>) .math/big.expNNWindowed (x <type 50>, y <esc:0x1> <type 50>, m <esc:0x1> <type 50>) <type 50>
 func (q <esc:0x1> <type 50>) .math/big.convertWords (s <esc:0x1> <type 24>, b <type 31>, ndigits <type -11>, bb <type 31>, table <esc:0x1> <type 51>)
 func (z <type 50>) .math/big.add (x <esc:0x1> <type 50>, y <esc:0x1> <type 50>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.expNNMontgomery (x <esc:0x1> <type 50>, y <esc:0x1> <type 50>, m <esc:0x1> <type 50>) <type 50>
 func (z <esc:0x1> <type 50>) .math/big.bytes (buf <esc:0x1> <type 24>) (i <type -11>)
 func (z <type 50>) .math/big.sqrt (x <esc:0x1> <type 50>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.norm () <type 50>
 func (z <type 50>) .math/big.expNN (x <type 50>, y <esc:0x1> <type 50>, m <esc:0x1> <type 50>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.scan (r <type 32>, base <type -11>, fracOk <type -15>) (res <type 50>, b <type -11>, count <type -11>, err <type -19>)
 func (n <esc:0x1> <type 50>) .math/big.probablyPrimeMillerRabin (reps <type -11>, force2 <type -15>) <type -15>
 func (z <esc:0x12> <type 50>) .math/big.setBytes (buf <esc:0x1> <type 24>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.random (rand <esc:0x9> <type 38>, limit <esc:0x1> <type 50>, n <type -11>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.set (x <esc:0x1> <type 50>) <type 50>
 func (x <esc:0x1> <type 50>) .math/big.utoa (base <type -11>) <type 24>
 func (z <esc:0x12> <type 50>) .math/big.setBit (x <esc:0x1> <type 50>, i <type -12>, b <type -12>) <type 50>
 func (z <type 50>) .math/big.mulRange (a <type -8>, b <type -8>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.make (n <type -11>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.divLarge (u <esc:0x82> <type 50>, uIn <esc:0x1> <type 50>, vIn <esc:0x1> <type 50>) (q <type 50>, r <type 50>)
 func (x <esc:0x1> <type 50>) .math/big.bitLen () <type -11>
 func (n <type 50>) .math/big.probablyPrimeLucas () <type -15>
 func (z <esc:0x12> <type 50>) .math/big.setWord (x <type 31>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.divW (x <esc:0x1> <type 50>, y <type 31>) (q <type 50>, r <type 31>)
 func (x <esc:0x1> <type 50>) .math/big.itoa (neg <type -15>, base <type -11>) <type 24>
 func (z <esc:0x1> <type 50>) .math/big.clear ()
 func (z <esc:0x12> <type 50>) .math/big.div (z2 <esc:0x82> <type 50>, u <esc:0x1> <type 50>, v <esc:0x1> <type 50>) (q <type 50>, r <type 50>)
 func (z <esc:0x12> <type 50>) .math/big.setUint64 (x <type -8>) <type 50>
 func (z <esc:0x12> <type 50>) .math/big.and (x <esc:0x1> <type 50>, y <esc:0x1> <type 50>) <type 50>
type 51 [] <type 52>
type 52 ".math/big.divisor" <type 53>
type 53 struct { .math/big.bbb <type 50>; .math/big.nbits <type -11>; .math/big.ndigits <type -11>; }
type 54 "crypto/x509/pkix.Name" <type 65>
 func (n <type 54>) String () <type -16>
 func (n <type 54>) ToRDNSequence () (ret <type 55>)
 func (n <esc:0x1> <type 54>) .crypto/x509/pkix.appendRDNs (in <esc:0x1a> <type 55>, values <esc:0x9> <type 62>, oid <type 61>) <type 55>
 func (n <esc:0x9> <type 63>) FillFromRDNSequence (rdns <esc:0x9> <type 64>)
type 55 "crypto/x509/pkix.RDNSequence" <type 56>
 func (r <esc:0x9> <type 55>) String () <type -16>
type 56 [] <type 57>
type 57 "crypto/x509/pkix.RelativeDistinguishedNameSET" <type 58>
type 58 [] <type 59>
type 59 "crypto/x509/pkix.AttributeTypeAndValue" <type 60>
type 60 struct { Type <type 61>; Value <type 27>; }
type 61 "encoding/asn1.ObjectIdentifier" <type 20>
 func (oi <esc:0x1> <type 61>) String () <type -16>
 func (oi <esc:0x1> <type 61>) Equal (other <esc:0x1> <type 61>) <type -15>
type 62 [] <type -16>
type 63 *<type 54>
type 64 *<type 55>
type 65 struct { Country <type 62>; Organization <type 62>; OrganizationalUnit <type 62>; Locality <type 62>; Province <type 62>; StreetAddress <type 62>; PostalCode <type 62>; SerialNumber <type -16>; CommonName <type -16>; Names <type 58>; ExtraNames <type 58>; }
type 66 "time.Time" <type 81>
 func (t <esc:0x1> <type 66>) YearDay () <type -11>
 func (t <esc:0x1> <type 66>) Unix () <type -4>
 func (t <esc:0x1> <type 66>) Weekday () <type 67>
 func (t <esc:0x1> <type 66>) Second () <type -11>
 func (t <esc:0x1> <type 66>) Year () <type -11>
 func (t <esc:0x1> <type 68>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 68>) UnmarshalJSON (data <esc:0x1> <type 24>) <type -19>
 func (t <esc:0x1> <type 66>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 66>) Month () <type 69>
 func (t <esc:0x12> <type 66>) Location () <type 70>
 func (t <esc:0x1> <type 66>) GobEncode () (? <type 24>, ? <type -19>)
 func (t <esc:0x1> <type 66>) Date () (year <type -11>, month <type 69>, day <type -11>)
 func (t <esc:0x1> <type 66>) Hour () <type -11>
 func (t <esc:0x1> <type 66>) .time.abs () <type -8>
 func (t <esc:0x1> <type 66>) IsZero () <type -15>
 func (t <esc:0x1> <type 66>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 66>) UTC () <type 66>
 func (t <esc:0x12> <type 66>) In (loc <type 70>) <type 66>
 func (t <esc:0x32> <type 66>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 66>) Sub (u <esc:0x1> <type 66>) <type 80>
 func (t <esc:0x1> <type 66>) Equal (u <esc:0x1> <type 66>) <type -15>
 func (t <esc:0x1> <type 68>) .time.mono () <type -4>
 func (t <esc:0x1> <type 66>) MarshalText () (? <type 24>, ? <type -19>)
 func (t <esc:0x1> <type 68>) .time.stripMono ()
 func (t <esc:0x1> <type 66>) MarshalJSON () (? <type 24>, ? <type -19>)
 func (t <esc:0x1> <type 66>) .time.date (full <type -15>) (year <type -11>, month <type 69>, day <type -11>, yday <type -11>)
 func (t <type 66>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 66>
 func (t <esc:0x1> <type 68>) .time.sec () <type -4>
 func (t <esc:0x12> <type 66>) Local () <type 66>
 func (t <esc:0x1> <type 68>) UnmarshalBinary (data <esc:0x1> <type 24>) <type -19>
 func (t <esc:0x1> <type 68>) UnmarshalText (data <esc:0x1> <type 24>) <type -19>
 func (t <esc:0x12> <type 66>) Truncate (d <type 80>) <type 66>
 func (t <esc:0x1> <type 68>) .time.setLoc (loc <type 70>)
 func (t <esc:0x32> <type 66>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 66>) Before (u <esc:0x1> <type 66>) <type -15>
 func (t <esc:0x1> <type 68>) .time.nsec () <type -3>
 func (t <esc:0x12> <type 66>) Round (d <type 80>) <type 66>
 func (t <esc:0x1> <type 68>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 66>) Day () <type -11>
 func (t <esc:0x1> <type 68>) GobDecode (data <esc:0x1> <type 24>) <type -19>
 func (t <esc:0x1> <type 66>) UnixNano () <type -4>
 func (t <esc:0x1> <type 66>) After (u <esc:0x1> <type 66>) <type -15>
 func (t <esc:0x1> <type 66>) MarshalBinary () (? <type 24>, ? <type -19>)
 func (t <esc:0x1> <type 66>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 68>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 66>) Minute () <type -11>
 func (t <esc:0x1> <type 66>) AppendFormat (b <esc:0x12> <type 24>, layout <esc:0x1> <type -16>) <type 24>
 func (t <esc:0x12> <type 66>) Add (d <type 80>) <type 66>
 func (t <esc:0x1> <type 66>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 66>) String () <type -16>
type 67 "time.Weekday" <type -11>
 func (d <type 67>) String () <type -16>
type 68 *<type 66>
type 69 "time.Month" <type -11>
 func (m <type 69>) String () <type -16>
type 70 *<type 71>
type 71 "time.Location" <type 72>
 func (l <esc:0x12> <type 70>) .time.get () <type 70>
 func (l <esc:0x22> <type 70>) String () <type -16>
 func (l <esc:0x32> <type 70>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 70>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 70>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 70>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 72 struct { .time.name <type -16>; .time.zone <type 73>; .time.tx <type 76>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 79>; }
type 73 [] <type 74>
type 74 ".time.zone" <type 75>
type 75 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 76 [] <type 77>
type 77 ".time.zoneTrans" <type 78>
type 78 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 79 *<type 74>
type 80 "time.Duration" <type -4>
 func (d <type 80>) String () <type -16>
 func (d <type 80>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 80>) Seconds () <type -10>
 func (d <type 80>) Minutes () <type -10>
 func (d <type 80>) Hours () <type -10>
 func (d <type 80>) Truncate (m <type 80>) <type 80>
 func (d <type 80>) Round (m <type 80>) <type 80>
type 81 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 70>; }
type 82 [] <type 83>
type 83 "crypto/x509/pkix.Extension" <type 84>
type 84 struct { Id <type 61>; Critical <type -15> "asn1:\"optional\""; Value <type 24>; }
type 85 [] <type 61>
type 86 [] <type 6>
type 87 [] <type 88>
type 88 "net.IP" <type 24>
 func (ip <esc:0x1> <type 88>) .net.matchAddrFamily (x <esc:0x1> <type 88>) <type -15>
 func (ip <esc:0x1> <type 89>) UnmarshalText (text <esc:0x1> <type 24>) <type -19>
 func (ip <esc:0x12> <type 88>) To4 () <type 88>
 func (ip <esc:0x1> <type 88>) IsMulticast () <type -15>
 func (ip <esc:0x1> <type 88>) IsUnspecified () <type -15>
 func (ip <esc:0x1> <type 88>) IsInterfaceLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 88>) IsLinkLocalMulticast () <type -15>
 func (ip <esc:0x1> <type 88>) IsLinkLocalUnicast () <type -15>
 func (ip <esc:0x1> <type 88>) IsGlobalUnicast () <type -15>
 func (ip <esc:0x1> <type 88>) IsLoopback () <type -15>
 func (ip <esc:0x12> <type 88>) To16 () <type 88>
 func (ip <esc:0x1> <type 88>) Equal (x <esc:0x1> <type 88>) <type -15>
 func (ip <esc:0x1> <type 88>) Mask (mask <esc:0x1> <type 90>) <type 88>
 func (ip <esc:0x1> <type 88>) DefaultMask () <type 90>
 func (ip <esc:0x1> <type 88>) String () <type -16>
 func (ip <esc:0x1> <type 88>) MarshalText () (? <type 24>, ? <type -19>)
type 89 *<type 88>
type 90 "net.IPMask" <type 24>
 func (m <esc:0x1> <type 90>) String () <type -16>
 func (m <esc:0x1> <type 90>) Size () (ones <type -11>, bits <type -11>)
type 91 [] <type 92>
type 92 *<type 93>
type 93 "net/url.URL" <type 96>
 func (u <esc:0x1> <type 92>) UnmarshalBinary (text <esc:0x1> <type 24>) <type -19>
 func (u <esc:0x1> <type 92>) MarshalBinary () (text <type 24>, err <type -19>)
 func (u <esc:0x9> <type 92>) Query () <type 94>
 func (u <esc:0xa> <type 92>) ResolveReference (ref <esc:0xa> <type 92>) <type 92>
 func (u <esc:0x22> <type 92>) RequestURI () <type -16>
 func (u <esc:0x9> <type 92>) Parse (ref <type -16>) (? <type 92>, ? <type -19>)
 func (u <esc:0x1> <type 92>) IsAbs () <type -15>
 func (u <esc:0x1> <type 92>) String () <type -16>
 func (u <esc:0x22> <type 92>) Hostname () <type -16>
 func (u <esc:0x22> <type 92>) EscapedPath () <type -16>
 func (u <esc:0x22> <type 92>) Port () <type -16>
 func (u <esc:0x1> <type 92>) .net/url.setPath (p <type -16>) <type -19>
type 94 "net/url.Values" <type 95>
 func (v <esc:0x1> <type 94>) Encode () <type -16>
 func (v <esc:0x1> <type 94>) Del (key <esc:0x1> <type -16>)
 func (v <esc:0x9> <type 94>) Add (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 94>) Set (key <type -16>, value <type -16>)
 func (v <esc:0x1> <type 94>) Get (key <esc:0x1> <type -16>) <type -16>
type 95 map [<type -16>] <type 62>
type 96 struct { Scheme <type -16>; Opaque <type -16>; User <type 97>; Host <type -16>; Path <type -16>; RawPath <type -16>; ForceQuery <type -15>; RawQuery <type -16>; Fragment <type -16>; }
type 97 *<type 98>
type 98 "net/url.Userinfo" <type 99>
 func (u <esc:0x22> <type 97>) Password () (? <type -16>, ? <type -15>)
 func (u <esc:0x22> <type 97>) String () <type -16>
 func (u <esc:0x22> <type 97>) Username () <type -16>
type 99 struct { .net/url.username <type -16>; .net/url.password <type -16>; .net/url.passwordSet <type -15>; }
type 100 [] <type 101>
type 101 *<type 102>
type 102 "net.IPNet" <type 103>
 func (n <esc:0x1> <type 101>) String () <type -16>
 func (n <esc:0x1> <type 101>) Network () ($ret178 <type -16>)
 func (n <esc:0x1> <type 101>) Contains (ip <esc:0x1> <type 88>) <type -15>
type 103 struct { IP <type 88>; Mask <type 90>; }
type 104 *<type 17>
type 105 [] <type 21>
type 106 *<type -11>
type 107 (parsedName <type 27>, constraint <type 27>) (match <type -15>, err <type -19>)
type 108 map [<type 22>] <type 105>
type 109 *<type 110>
type 110 "crypto/x509/pkix.CertificateList" <type 111>
 func (certList <esc:0x1> <type 109>) HasExpired (now <esc:0x1> <type 66>) <type -15>
type 111 struct { TBSCertList <type 112>; SignatureAlgorithm <type 115>; SignatureValue <type 122>; }
type 112 "crypto/x509/pkix.TBSCertificateList" <type 113>
type 113 struct { Raw <type 114>; Version <type -11> "asn1:\"optional,default:0\""; Signature <type 115>; Issuer <type 55>; ThisUpdate <type 66>; NextUpdate <type 66> "asn1:\"optional\""; RevokedCertificates <type 119> "asn1:\"optional\""; Extensions <type 82> "asn1:\"tag:0,optional,explicit\""; }
type 114 "encoding/asn1.RawContent" <type 24>
type 115 "crypto/x509/pkix.AlgorithmIdentifier" <type 116>
type 116 struct { Algorithm <type 61>; Parameters <type 117> "asn1:\"optional\""; }
type 117 "encoding/asn1.RawValue" <type 118>
type 118 struct { Class <type -11>; Tag <type -11>; IsCompound <type -15>; Bytes <type 24>; FullBytes <type 24>; }
type 119 [] <type 120>
type 120 "crypto/x509/pkix.RevokedCertificate" <type 121>
type 121 struct { SerialNumber <type 28>; RevocationTime <type 66>; Extensions <type 82> "asn1:\"optional\""; }
type 122 "encoding/asn1.BitString" <type 123>
 func (b <esc:0x12> <type 122>) RightAlign () <type 24>
 func (b <esc:0x1> <type 122>) At (i <type -11>) <type -11>
type 123 struct { Bytes <type 24>; BitLength <type -11>; }
type 124 "io.Reader" <type 125>
type 125 interface { Read (p <type 24>) (n <type -11>, err <type -19>); }
type 126 struct { Cert <type 22>; Reason <type 9>; Detail <type -16>; }
type 127 struct { Raw <type 24>; RawTBSCertificateRequest <type 24>; RawSubjectPublicKeyInfo <type 24>; RawSubject <type 24>; Version <type -11>; Signature <type 24>; SignatureAlgorithm <type 13>; PublicKeyAlgorithm <type 12>; PublicKey <type 27>; Subject <type 54>; Attributes <type 128>; Extensions <type 82>; ExtraExtensions <type 82>; DNSNames <type 62>; EmailAddresses <type 62>; IPAddresses <type 87>; URIs <type 91>; }
type 128 [] <type 129>
type 129 "crypto/x509/pkix.AttributeTypeAndValueSET" <type 130>
type 130 struct { Type <type 61>; Value <type 131> "asn1:\"set\""; }
type 131 [] <type 58>
type 132 *<type 4>
type 133 struct { }
type 134 *<type 135>
type 135 "encoding/pem.Block" <type 136>
type 136 struct { Type <type -16>; Headers <type 137>; Bytes <type 24>; }
type 137 map [<type -16>] <type -16>
type 138 struct { Certificate <type 22>; Host <type -16>; }
type 139 *<type 140>
type 140 "crypto/ecdsa.PrivateKey" <type 149>
 func (priv <esc:0x9> <type 139>) Sign (rand <type 124>, digest <type 24>, opts <esc:0x1> <type 141>) (? <type 24>, ? <type -19>)
 func (priv <esc:0x12> <type 139>) Public () <type 148>
type 141 "crypto.SignerOpts" <type 142>
type 142 interface { HashFunc () <type 143>; }
type 143 "crypto.Hash" <type -12>
 func (h <type 143>) HashFunc () ($ret0 <type 143>)
 func (h <type 143>) Size () <type -11>
 func (h <type 143>) New () <type 144>
 func (h <type 143>) Available () <type -15>
type 144 "hash.Hash" <type 145>
type 145 interface { ? <type 146>; BlockSize () <type -11>; Reset (); Size () <type -11>; Sum (b <type 24>) <type 24>; }
type 146 "io.Writer" <type 147>
type 147 interface { Write (p <type 24>) (n <type -11>, err <type -19>); }
type 148 "crypto.PublicKey" <type 27>
type 149 struct { ? <type 150>; D <type 28>; }
type 150 "crypto/ecdsa.PublicKey" <type 151>
type 151 struct { ? <type 152>; X <type 28>; Y <type 28>; }
type 152 "crypto/elliptic.Curve" <type 153>
type 153 interface { Add (x1 <type 28>, y1 <type 28>, x2 <type 28>, y2 <type 28>) (x <type 28>, y <type 28>); Double (x1 <type 28>, y1 <type 28>) (x <type 28>, y <type 28>); IsOnCurve (x <type 28>, y <type 28>) <type -15>; Params () <type 154>; ScalarBaseMult (k <type 24>) (x <type 28>, y <type 28>); ScalarMult (x1 <type 28>, y1 <type 28>, k <type 24>) (x <type 28>, y <type 28>); }
type 154 *<type 155>
type 155 "crypto/elliptic.CurveParams" <type 156>
 func (curve <esc:0x12> <type 154>) Params () ($ret0 <type 154>)
 func (curve <esc:0x1> <type 154>) IsOnCurve (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>) <type -15>
 func (curve <esc:0x1> <type 154>) .crypto/elliptic.affineFromJacobian (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>, z <esc:0x1> <type 28>) (xOut <type 28>, yOut <type 28>)
 func (curve <esc:0x1> <type 154>) Double (x1 <esc:0x1> <type 28>, y1 <esc:0x1> <type 28>) (? <type 28>, ? <type 28>)
 func (curve <esc:0x1> <type 154>) ScalarMult (Bx <esc:0x1> <type 28>, By <esc:0x1> <type 28>, k <esc:0x1> <type 24>) (? <type 28>, ? <type 28>)
 func (curve <esc:0x1> <type 154>) Add (x1 <esc:0x1> <type 28>, y1 <esc:0x1> <type 28>, x2 <esc:0x1> <type 28>, y2 <esc:0x1> <type 28>) (? <type 28>, ? <type 28>)
 func (curve <esc:0x1> <type 154>) .crypto/elliptic.addJacobian (x1 <esc:0x1> <type 28>, y1 <esc:0x1> <type 28>, z1 <esc:0x1> <type 28>, x2 <esc:0x1> <type 28>, y2 <esc:0x1> <type 28>, z2 <esc:0x1> <type 28>) (? <type 28>, ? <type 28>, ? <type 28>)
 func (curve <esc:0x1> <type 154>) .crypto/elliptic.doubleJacobian (x <esc:0x1> <type 28>, y <esc:0x1> <type 28>, z <esc:0x1> <type 28>) (? <type 28>, ? <type 28>, ? <type 28>)
 func (curve <esc:0x1> <type 154>) ScalarBaseMult (k <esc:0x1> <type 24>) (? <type 28>, ? <type 28>)
type 156 struct { P <type 28>; N <type 28>; B <type 28>; Gx <type 28>; Gy <type 28>; BitSize <type -11>; Name <type -16>; }
type 157 *<type 158>
type 158 "crypto/rsa.PrivateKey" <type 160>
 func (priv <esc:0x9> <type 157>) Precompute ()
 func (priv <esc:0x1> <type 157>) Validate () <type -19>
 func (priv <esc:0x1> <type 157>) Decrypt (rand <type 124>, ciphertext <esc:0x1> <type 24>, opts <esc:0x9> <type 159>) (plaintext <type 24>, err <type -19>)
 func (priv <esc:0x1> <type 157>) Sign (rand <type 124>, digest <type 24>, opts <type 141>) (? <type 24>, ? <type -19>)
 func (priv <esc:0x12> <type 157>) Public () <type 148>
type 159 "crypto.DecrypterOpts" <type 27>
type 160 struct { ? <type 161>; D <type 28>; Primes <type 164>; Precomputed <type 165>; }
type 161 "crypto/rsa.PublicKey" <type 163>
 func (pub <esc:0x1> <type 162>) Size () <type -11>
type 162 *<type 161>
type 163 struct { N <type 28>; E <type -11>; }
type 164 [] <type 28>
type 165 "crypto/rsa.PrecomputedValues" <type 166>
type 166 struct { Dp <type 28>; Dq <type 28>; Qinv <type 28>; CRTValues <type 167>; }
type 167 [] <type 168>
type 168 "crypto/rsa.CRTValue" <type 169>
type 169 struct { Exp <type 28>; Coeff <type 28>; R <type 28>; }
type 170 struct { Err <type -19>; }
type 171 struct { Cert <type 22>; .crypto/x509.hintErr <type -19>; .crypto/x509.hintCert <type 22>; }
type 172 struct { DNSName <type -16>; Intermediates <type 23>; Roots <type 23>; CurrentTime <type 66>; KeyUsages <type 86>; MaxConstraintComparisions <type -11>; }
const CANotAuthorizedForExtKeyUsage <type 9> = 9 
const CANotAuthorizedForThisName <type 9> = 2 
func CreateCertificate (rand <type 124>, template <esc:0x9> <type 22>, parent <esc:0x9> <type 22>, pub <esc:0x9> <type 27>, priv <type 27>) (cert <type 24>, err <type -19>)
func CreateCertificateRequest (rand <type 124>, template <esc:0x9> <type 132>, priv <type 27>) (csr <type 24>, err <type -19>)
const DSA <type 12> = 2 
const DSAWithSHA1 <type 13> = 7 
const DSAWithSHA256 <type 13> = 8 
func DecryptPEMBlock (b <esc:0x9> <type 134>, password <type 24>) (? <type 24>, ? <type -19>)
const ECDSA <type 12> = 3 
const ECDSAWithSHA1 <type 13> = 9 
const ECDSAWithSHA256 <type 13> = 10 
const ECDSAWithSHA384 <type 13> = 11 
const ECDSAWithSHA512 <type 13> = 12 
func EncryptPEMBlock (rand <type 124>, blockType <type -16>, data <esc:0x1> <type 24>, password <type 24>, alg <type 11>) (? <type 134>, ? <type -19>)
var ErrUnsupportedAlgorithm <type -19>
const Expired <type 9> = 1 
const ExtKeyUsageAny <type 6> = 0 
const ExtKeyUsageClientAuth <type 6> = 2 
const ExtKeyUsageCodeSigning <type 6> = 3 
const ExtKeyUsageEmailProtection <type 6> = 4 
const ExtKeyUsageIPSECEndSystem <type 6> = 5 
const ExtKeyUsageIPSECTunnel <type 6> = 6 
const ExtKeyUsageIPSECUser <type 6> = 7 
const ExtKeyUsageMicrosoftCommercialCodeSigning <type 6> = 12 
const ExtKeyUsageMicrosoftKernelCodeSigning <type 6> = 13 
const ExtKeyUsageMicrosoftServerGatedCrypto <type 6> = 10 
const ExtKeyUsageNetscapeServerGatedCrypto <type 6> = 11 
const ExtKeyUsageOCSPSigning <type 6> = 9 
const ExtKeyUsageServerAuth <type 6> = 1 
const ExtKeyUsageTimeStamping <type 6> = 8 
const IncompatibleUsage <type 9> = 4 
var IncorrectPasswordError <type -19>
func IsEncryptedPEMBlock (b <esc:0x1> <type 134>) <type -15>
const KeyUsageCRLSign <type 10> = 64 
const KeyUsageCertSign <type 10> = 32 
const KeyUsageContentCommitment <type 10> = 2 
const KeyUsageDataEncipherment <type 10> = 8 
const KeyUsageDecipherOnly <type 10> = 256 
const KeyUsageDigitalSignature <type 10> = 1 
const KeyUsageEncipherOnly <type 10> = 128 
const KeyUsageKeyAgreement <type 10> = 16 
const KeyUsageKeyEncipherment <type 10> = 4 
const MD2WithRSA <type 13> = 1 
const MD5WithRSA <type 13> = 2 
func MarshalECPrivateKey (key <esc:0x9> <type 139>) (? <type 24>, ? <type -19>)
func MarshalPKCS1PrivateKey (key <esc:0x9> <type 157>) <type 24>
func MarshalPKCS1PublicKey (key <esc:0x9> <type 162>) <type 24>
func MarshalPKCS8PrivateKey (key <type 27>) (? <type 24>, ? <type -19>)
func MarshalPKIXPublicKey (pub <esc:0x9> <type 27>) (? <type 24>, ? <type -19>)
const NameConstraintsWithoutSANs <type 9> = 6 
const NameMismatch <type 9> = 5 
func NewCertPool () <type 23>
const NotAuthorizedToSign <type 9> = 0 
const PEMCipher3DES <type 11> = 2 
const PEMCipherAES128 <type 11> = 3 
const PEMCipherAES192 <type 11> = 4 
const PEMCipherAES256 <type 11> = 5 
const PEMCipherDES <type 11> = 1 
func ParseCRL (crlBytes <type 24>) (? <type 109>, ? <type -19>)
func ParseCertificate (asn1Data <type 24>) (? <type 22>, ? <type -19>)
func ParseCertificateRequest (asn1Data <type 24>) (? <type 132>, ? <type -19>)
func ParseCertificates (asn1Data <type 24>) (? <type 21>, ? <type -19>)
func ParseDERCRL (derBytes <type 24>) (? <type 109>, ? <type -19>)
func ParseECPrivateKey (der <type 24>) (? <type 139>, ? <type -19>)
func ParsePKCS1PrivateKey (der <type 24>) (? <type 157>, ? <type -19>)
func ParsePKCS1PublicKey (der <type 24>) (? <type 162>, ? <type -19>)
func ParsePKCS8PrivateKey (der <type 24>) (key <type 27>, err <type -19>)
func ParsePKIXPublicKey (derBytes <type 24>) (pub <type 27>, err <type -19>)
const RSA <type 12> = 1 
const SHA1WithRSA <type 13> = 3 
const SHA256WithRSA <type 13> = 4 
const SHA256WithRSAPSS <type 13> = 13 
const SHA384WithRSA <type 13> = 5 
const SHA384WithRSAPSS <type 13> = 14 
const SHA512WithRSA <type 13> = 6 
const SHA512WithRSAPSS <type 13> = 15 
func SystemCertPool () (? <type 23>, ? <type -19>)
const TooManyConstraints <type 9> = 8 
const TooManyIntermediates <type 9> = 3 
const UnconstrainedName <type 9> = 7 
const UnknownPublicKeyAlgorithm <type 12> = 0 
const UnknownSignatureAlgorithm <type 13> = 0 
checksum 0906EAE0FD0EFAFE0CE75383C329E65FDB8D0F8B
v3;
package pkix
pkgpath crypto/x509/pkix
import asn1 encoding/asn1 "encoding/asn1"
import hex encoding/hex "encoding/hex"
import fmt fmt "fmt"
import big math/big "math/big"
import time time "time"
indirectimport io io
indirectimport rand math/rand
init pkix crypto..z2fx509..z2fpkix..import bytes bytes..import asn1 encoding..z2fasn1..import binary encoding..z2fbinary..import hex encoding..z2fhex..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import big math..z2fbig..import rand math..z2frand..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 1 6 1 9 1 14 1 15 1 17 1 20 2 1 2 3 2 5 2 6 2 7 2 8 2 9 2 10 2 11 2 12 2 13 2 14 2 15 2 16 2 17 2 18 2 19 2 20 3 6 3 9 3 13 3 14 3 15 3 16 3 17 3 20 4 5 4 6 4 7 4 8 4 9 4 12 4 13 4 14 4 15 4 16 4 17 4 18 4 19 4 20 5 6 5 7 5 8 5 9 5 12 5 13 5 14 5 15 5 16 5 17 5 18 5 19 5 20 7 6 7 9 7 14 7 15 7 17 7 18 7 19 9 6 9 14 9 15 9 17 10 1 10 3 10 5 10 6 10 7 10 8 10 9 10 11 10 12 10 13 10 14 10 15 10 16 10 17 10 18 10 19 10 20 11 6 11 14 11 15 11 17 12 6 12 7 12 8 12 9 12 14 12 15 12 17 12 18 12 19 13 6 13 14 13 15 13 16 13 17 13 20 14 6 14 15 16 6 16 14 16 15 17 6 17 14 17 15 18 6 18 14 18 15 18 17 19 6 19 14 19 15 19 17 19 18
types 79 11 39 41 44 120 29 327 81 48 38 39 82 179 22 43 114 22 52 22 67 21 20 97 158 58 18 3310 356 19 73 19 525 165 21 31 91 21 36 112 19 75 83 91 266 22 18 18 20 111 19 5185 21 35 30 195 35 61 34 64 19 1021 37 131 37 65 39 56 34 295 34 70 4127 21 38 102 20 293 45 20
type 1 "AlgorithmIdentifier" <type 11>
type 2 "AttributeTypeAndValue" <type 17>
type 3 "AttributeTypeAndValueSET" <type 19>
type 4 "CertificateList" <type 22>
 func (certList <esc:0x1> <type 25>) HasExpired (now <esc:0x1> <type 26>) <type -15>
type 5 "Extension" <type 42>
type 6 "Name" <type 43>
 func (n <esc:0x9> <type 45>) FillFromRDNSequence (rdns <esc:0x9> <type 46>)
 func (n <esc:0x1> <type 6>) .crypto/x509/pkix.appendRDNs (in <esc:0x1a> <type 7>, values <esc:0x9> <type 44>, oid <type 12>) <type 7>
 func (n <type 6>) ToRDNSequence () (ret <type 7>)
 func (n <type 6>) String () <type -16>
type 7 "RDNSequence" <type 47>
 func (r <esc:0x9> <type 7>) String () <type -16>
type 8 "RelativeDistinguishedNameSET" <type 21>
type 9 "RevokedCertificate" <type 48>
type 10 "TBSCertificateList" <type 76>
type 11 struct { Algorithm <type 12>; Parameters <type 14> "asn1:\"optional\""; }
type 12 "encoding/asn1.ObjectIdentifier" <type 13>
 func (oi <esc:0x1> <type 12>) String () <type -16>
 func (oi <esc:0x1> <type 12>) Equal (other <esc:0x1> <type 12>) <type -15>
type 13 [] <type -11>
type 14 "encoding/asn1.RawValue" <type 15>
type 15 struct { Class <type -11>; Tag <type -11>; IsCompound <type -15>; Bytes <type 16>; FullBytes <type 16>; }
type 16 [] <type -20>
type 17 struct { Type <type 12>; Value <type 18>; }
type 18 interface { }
type 19 struct { Type <type 12>; Value <type 20> "asn1:\"set\""; }
type 20 [] <type 21>
type 21 [] <type 2>
type 22 struct { TBSCertList <type 10>; SignatureAlgorithm <type 1>; SignatureValue <type 23>; }
type 23 "encoding/asn1.BitString" <type 24>
 func (b <esc:0x12> <type 23>) RightAlign () <type 16>
 func (b <esc:0x1> <type 23>) At (i <type -11>) <type -11>
type 24 struct { Bytes <type 16>; BitLength <type -11>; }
type 25 *<type 4>
type 26 "time.Time" <type 41>
 func (t <esc:0x12> <type 26>) Round (d <type 27>) <type 26>
 func (t <esc:0x12> <type 26>) Truncate (d <type 27>) <type 26>
 func (t <esc:0x1> <type 28>) UnmarshalText (data <esc:0x1> <type 16>) <type -19>
 func (t <esc:0x1> <type 28>) UnmarshalBinary (data <esc:0x1> <type 16>) <type -19>
 func (t <esc:0x12> <type 26>) Local () <type 26>
 func (t <esc:0x1> <type 26>) MarshalJSON () (? <type 16>, ? <type -19>)
 func (t <esc:0x1> <type 26>) .time.date (full <type -15>) (year <type -11>, month <type 29>, day <type -11>, yday <type -11>)
 func (t <type 26>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 26>
 func (t <esc:0x1> <type 28>) .time.mono () <type -4>
 func (t <esc:0x1> <type 26>) MarshalText () (? <type 16>, ? <type -19>)
 func (t <esc:0x1> <type 28>) .time.stripMono ()
 func (t <esc:0x32> <type 26>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 28>) .time.setLoc (loc <type 30>)
 func (t <esc:0x1> <type 28>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 28>) GobDecode (data <esc:0x1> <type 16>) <type -19>
 func (t <esc:0x1> <type 26>) UnixNano () <type -4>
 func (t <esc:0x1> <type 26>) After (u <esc:0x1> <type 26>) <type -15>
 func (t <esc:0x1> <type 26>) MarshalBinary () (? <type 16>, ? <type -19>)
 func (t <esc:0x1> <type 26>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 28>) .time.sec () <type -4>
 func (t <esc:0x1> <type 26>) Before (u <esc:0x1> <type 26>) <type -15>
 func (t <esc:0x1> <type 28>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 28>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 26>) Minute () <type -11>
 func (t <esc:0x1> <type 26>) AppendFormat (b <esc:0x12> <type 16>, layout <esc:0x1> <type -16>) <type 16>
 func (t <esc:0x1> <type 26>) Day () <type -11>
 func (t <esc:0x12> <type 26>) Add (d <type 27>) <type 26>
 func (t <esc:0x1> <type 26>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 26>) String () <type -16>
 func (t <esc:0x1> <type 26>) Equal (u <esc:0x1> <type 26>) <type -15>
 func (t <esc:0x1> <type 26>) Sub (u <esc:0x1> <type 26>) <type 27>
 func (t <esc:0x32> <type 26>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x12> <type 26>) In (loc <type 30>) <type 26>
 func (t <esc:0x12> <type 26>) UTC () <type 26>
 func (t <esc:0x1> <type 26>) Nanosecond () <type -11>
 func (t <esc:0x1> <type 26>) IsZero () <type -15>
 func (t <esc:0x1> <type 26>) .time.abs () <type -8>
 func (t <esc:0x1> <type 26>) Hour () <type -11>
 func (t <esc:0x1> <type 26>) Date () (year <type -11>, month <type 29>, day <type -11>)
 func (t <esc:0x1> <type 26>) GobEncode () (? <type 16>, ? <type -19>)
 func (t <esc:0x12> <type 26>) Location () <type 30>
 func (t <esc:0x1> <type 26>) Month () <type 29>
 func (t <esc:0x1> <type 26>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 28>) UnmarshalJSON (data <esc:0x1> <type 16>) <type -19>
 func (t <esc:0x1> <type 28>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 26>) Year () <type -11>
 func (t <esc:0x1> <type 26>) Second () <type -11>
 func (t <esc:0x1> <type 26>) Weekday () <type 40>
 func (t <esc:0x1> <type 26>) Unix () <type -4>
 func (t <esc:0x1> <type 26>) YearDay () <type -11>
type 27 "time.Duration" <type -4>
 func (d <type 27>) Round (m <type 27>) <type 27>
 func (d <type 27>) Truncate (m <type 27>) <type 27>
 func (d <type 27>) Hours () <type -10>
 func (d <type 27>) Minutes () <type -10>
 func (d <type 27>) Seconds () <type -10>
 func (d <type 27>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 27>) String () <type -16>
type 28 *<type 26>
type 29 "time.Month" <type -11>
 func (m <type 29>) String () <type -16>
type 30 *<type 31>
type 31 "time.Location" <type 32>
 func (l <esc:0x1> <type 30>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 30>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 30>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 30>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 30>) String () <type -16>
 func (l <esc:0x12> <type 30>) .time.get () <type 30>
type 32 struct { .time.name <type -16>; .time.zone <type 33>; .time.tx <type 36>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 39>; }
type 33 [] <type 34>
type 34 ".time.zone" <type 35>
type 35 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 36 [] <type 37>
type 37 ".time.zoneTrans" <type 38>
type 38 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 39 *<type 34>
type 40 "time.Weekday" <type -11>
 func (d <type 40>) String () <type -16>
type 41 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 30>; }
type 42 struct { Id <type 12>; Critical <type -15> "asn1:\"optional\""; Value <type 16>; }
type 43 struct { Country <type 44>; Organization <type 44>; OrganizationalUnit <type 44>; Locality <type 44>; Province <type 44>; StreetAddress <type 44>; PostalCode <type 44>; SerialNumber <type -16>; CommonName <type -16>; Names <type 21>; ExtraNames <type 21>; }
type 44 [] <type -16>
type 45 *<type 6>
type 46 *<type 7>
type 47 [] <type 8>
type 48 struct { SerialNumber <type 49>; RevocationTime <type 26>; Extensions <type 75> "asn1:\"optional\""; }
type 49 *<type 50>
type 50 "math/big.Int" <type 70>
 func (x <esc:0x9> <type 49>) ProbablyPrime (n <type -11>) <type -15>
 func (x <esc:0x1> <type 49>) MarshalJSON () (? <type 16>, ? <type -19>)
 func (z <esc:0x1a> <type 49>) Exp (x <esc:0x9> <type 49>, y <esc:0x1> <type 49>, m <esc:0x1> <type 49>) <type 49>
 func (x <esc:0x1> <type 49>) Cmp (y <esc:0x1> <type 49>) (r <type -11>)
 func (z <esc:0x1a> <type 49>) Quo (x <esc:0x1> <type 49>, y <esc:0x1> <type 49>) <type 49>
 func (x <esc:0x1> <type 49>) IsInt64 () <type -15>
 func (z <esc:0x1a> <type 49>) ModSqrt (x <esc:0x9> <type 49>, p <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) Rsh (x <esc:0x1> <type 49>, n <type -12>) <type 49>
 func (x <esc:0x1> <type 49>) Int64 () <type -4>
 func (z <esc:0x1a> <type 49>) SetBytes (buf <esc:0x1> <type 16>) <type 49>
 func (z <esc:0x1a> <type 49>) .math/big.modSqrtTonelliShanks (x <esc:0x9> <type 49>, p <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) Mod (x <esc:0x1> <type 49>, y <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) SetInt64 (x <type -4>) <type 49>
 func (z <esc:0x1a> <type 49>) SetUint64 (x <type -8>) <type 49>
 func (z <esc:0x1a> <type 49>) Set (x <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) ModInverse (g <esc:0x1> <type 49>, n <esc:0x1> <type 49>) <type 49>
 func (x <esc:0x22> <type 49>) Bits () <type 51>
 func (z <esc:0x1a> <type 49>) Add (x <esc:0x1> <type 49>, y <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) .math/big.modSqrt3Mod4Prime (x <esc:0x9> <type 49>, p <esc:0x1> <type 49>) <type 49>
 func (x <esc:0x1> <type 49>) Format (s <type 53>, ch <type -21>)
 func (z <esc:0x1a> <type 49>) .math/big.scan (r <type 55>, base <type -11>) (? <type 49>, ? <type -11>, ? <type -19>)
 func (z <esc:0x1a> <type 49>) SetString (s <type -16>, base <type -11>) (? <type 49>, ? <type -15>)
 func (z <esc:0x1a> <type 49>) Mul (x <esc:0x1> <type 49>, y <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x12> <type 49>) SetBits (abs <type 51>) <type 49>
 func (x <esc:0x1> <type 49>) Sign () <type -11>
 func (z <esc:0x1a> <type 49>) MulRange (a <type -4>, b <type -4>) <type 49>
 func (x <esc:0x1> <type 49>) MarshalText () (text <type 16>, err <type -19>)
 func (z <esc:0x1a> <type 49>) Abs (x <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) Neg (x <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) .math/big.setFromScanner (r <type 55>, base <type -11>) (? <type 49>, ? <type -15>)
 func (z <esc:0x1a> <type 49>) And (x <esc:0x1> <type 49>, y <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) Sub (x <esc:0x1> <type 49>, y <esc:0x1> <type 49>) <type 49>
 func (x <esc:0x1> <type 49>) CmpAbs (y <esc:0x1> <type 49>) <type -11>
 func (z <esc:0x1a> <type 49>) Div (x <esc:0x1> <type 49>, y <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) Rem (x <esc:0x1> <type 49>, y <esc:0x1> <type 49>) <type 49>
 func (x <esc:0x1> <type 49>) IsUint64 () <type -15>
 func (z <esc:0x1a> <type 49>) DivMod (x <esc:0x1> <type 49>, y <esc:0x1> <type 49>, m <esc:0x8a> <type 49>) (? <type 49>, ? <type 49>)
 func (z <esc:0x1a> <type 49>) Binomial (n <type -4>, k <type -4>) <type 49>
 func (x <esc:0x1> <type 49>) Uint64 () <type -8>
 func (x <esc:0x1> <type 49>) BitLen () <type -11>
 func (z <esc:0x1a> <type 49>) GCD (x <esc:0x9> <type 49>, y <esc:0x9> <type 49>, a <esc:0x1> <type 49>, b <esc:0x1> <type 49>) <type 49>
 func (x <esc:0x1> <type 49>) Bit (i <type -11>) <type -12>
 func (z <esc:0x1a> <type 49>) Or (x <esc:0x1> <type 49>, y <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x12> <type 49>) .math/big.lehmerGCD (x <esc:0x1> <type 49>, y <esc:0x9> <type 49>, a <esc:0x1> <type 49>, b <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) Rand (rnd <esc:0x9> <type 59>, n <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) Xor (x <esc:0x1> <type 49>, y <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) Sqrt (x <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) .math/big.modSqrt5Mod8Prime (x <esc:0x1> <type 49>, p <esc:0x1> <type 49>) <type 49>
 func (z <esc:0x1a> <type 49>) Lsh (x <esc:0x1> <type 49>, n <type -12>) <type 49>
 func (z <esc:0x1a> <type 49>) SetBit (x <esc:0x1> <type 49>, i <type -11>, b <type -12>) <type 49>
 func (z <esc:0x1a> <type 49>) AndNot (x <esc:0x1> <type 49>, y <esc:0x1> <type 49>) <type 49>
 func (x <esc:0x1> <type 49>) Bytes () <type 16>
 func (z <esc:0x1a> <type 49>) Not (x <esc:0x1> <type 49>) <type 49>
 func (x <esc:0x1> <type 49>) GobEncode () (? <type 16>, ? <type -19>)
 func (x <esc:0x1> <type 49>) Append (buf <esc:0x12> <type 16>, base <type -11>) <type 16>
 func (x <esc:0x1> <type 49>) String () <type -16>
 func (x <esc:0x1> <type 49>) Text (base <type -11>) <type -16>
 func (z <esc:0x9> <type 49>) Scan (s <type 67>, ch <type -21>) <type -19>
 func (z <esc:0x9> <type 49>) UnmarshalJSON (text <type 16>) <type -19>
 func (z <esc:0x1a> <type 49>) QuoRem (x <esc:0x1> <type 49>, y <esc:0x1> <type 49>, r <esc:0x8a> <type 49>) (? <type 49>, ? <type 49>)
 func (z <esc:0x9> <type 49>) GobDecode (buf <esc:0x1> <type 16>) <type -19>
 func (z <esc:0x9> <type 49>) UnmarshalText (text <type 16>) <type -19>
type 51 [] <type 52>
type 52 "math/big.Word" <type -12>
type 53 "fmt.State" <type 54>
type 54 interface { Flag (c <type -11>) <type -15>; Precision () (prec <type -11>, ok <type -15>); Width () (wid <type -11>, ok <type -15>); Write (b <type 16>) (n <type -11>, err <type -19>); }
type 55 "io.ByteScanner" <type 56>
type 56 interface { ? <type 57>; UnreadByte () <type -19>; }
type 57 "io.ByteReader" <type 58>
type 58 interface { ReadByte () (? <type -20>, ? <type -19>); }
type 59 *<type 60>
type 60 "math/rand.Rand" <type 62>
 func (r <esc:0x9> <type 59>) Intn (n <type -11>) <type -11>
 func (r <esc:0x9> <type 59>) Int31n (n <type -3>) <type -3>
 func (r <type 59>) Read (p <esc:0x1> <type 16>) (n <type -11>, err <type -19>)
 func (r <esc:0x9> <type 59>) Int31 () <type -3>
 func (r <esc:0x9> <type 59>) Shuffle (n <type -11>, swap <esc:0x1> <type 61>)
 func (r <esc:0x9> <type 59>) Uint32 () <type -7>
 func (r <esc:0x9> <type 59>) Float32 () <type -9>
 func (r <esc:0x9> <type 59>) .math/rand.int31n (n <type -3>) <type -3>
 func (r <esc:0x9> <type 59>) Uint64 () <type -8>
 func (r <esc:0x9> <type 59>) Perm (n <type -11>) <type 13>
 func (r <esc:0x9> <type 59>) ExpFloat64 () <type -10>
 func (r <esc:0x9> <type 59>) NormFloat64 () <type -10>
 func (r <esc:0x9> <type 59>) Seed (seed <type -4>)
 func (r <esc:0x9> <type 59>) Int63 () <type -4>
 func (r <esc:0x9> <type 59>) Float64 () <type -10>
 func (r <esc:0x9> <type 59>) Int63n (n <type -4>) <type -4>
 func (r <esc:0x9> <type 59>) Int () <type -11>
type 61 (i <type -11>, j <type -11>)
type 62 struct { .math/rand.src <type 63>; .math/rand.s64 <type 65>; .math/rand.readVal <type -4>; .math/rand.readPos <type -1>; }
type 63 "math/rand.Source" <type 64>
type 64 interface { Int63 () <type -4>; Seed (seed <type -4>); }
type 65 "math/rand.Source64" <type 66>
type 66 interface { ? <type 63>; Uint64 () <type -8>; }
type 67 "fmt.ScanState" <type 68>
type 68 interface { Read (buf <type 16>) (n <type -11>, err <type -19>); ReadRune () (r <type -21>, size <type -11>, err <type -19>); SkipSpace (); Token (skipSpace <type -15>, f <type 69>) (token <type 16>, err <type -19>); UnreadRune () <type -19>; Width () (wid <type -11>, ok <type -15>); }
type 69 (? <type -21>) <type -15>
type 70 struct { .math/big.neg <type -15>; .math/big.abs <type 71>; }
type 71 ".math/big.nat" <type 51>
 func (n <esc:0x1> <type 71>) .math/big.probablyPrimeMillerRabin (reps <type -11>, force2 <type -15>) <type -15>
 func (z <esc:0x12> <type 71>) .math/big.scan (r <type 55>, base <type -11>, fracOk <type -15>) (res <type 71>, b <type -11>, count <type -11>, err <type -19>)
 func (z <type 71>) .math/big.sqrt (x <esc:0x1> <type 71>) <type 71>
 func (z <esc:0x1> <type 71>) .math/big.bytes (buf <esc:0x1> <type 16>) (i <type -11>)
 func (z <esc:0x12> <type 71>) .math/big.expNNMontgomery (x <esc:0x1> <type 71>, y <esc:0x1> <type 71>, m <esc:0x1> <type 71>) <type 71>
 func (z <type 71>) .math/big.expNNWindowed (x <type 71>, y <esc:0x1> <type 71>, m <esc:0x1> <type 71>) <type 71>
 func (z <type 71>) .math/big.expNN (x <type 71>, y <esc:0x1> <type 71>, m <esc:0x1> <type 71>) <type 71>
 func (z <type 71>) .math/big.expWW (x <type 52>, y <type 52>) <type 71>
 func (z <esc:0x12> <type 71>) .math/big.montgomery (x <esc:0x1> <type 71>, y <esc:0x1> <type 71>, m <esc:0x1> <type 71>, k <type 52>, n <type -11>) <type 71>
 func (z <esc:0x12> <type 71>) .math/big.shr (x <esc:0x1> <type 71>, s <type -12>) <type 71>
 func (z <esc:0x12> <type 71>) .math/big.norm () <type 71>
 func (q <esc:0x1> <type 71>) .math/big.convertWords (s <esc:0x1> <type 16>, b <type 52>, ndigits <type -11>, bb <type 52>, table <esc:0x1> <type 72>)
 func (z <type 71>) .math/big.add (x <esc:0x1> <type 71>, y <esc:0x1> <type 71>) <type 71>
 func (z <esc:0x12> <type 71>) .math/big.setBytes (buf <esc:0x1> <type 16>) <type 71>
 func (z <esc:0x12> <type 71>) .math/big.random (rand <esc:0x9> <type 59>, limit <esc:0x1> <type 71>, n <type -11>) <type 71>
 func (z <esc:0x12> <type 71>) .math/big.set (x <esc:0x1> <type 71>) <type 71>
 func (x <esc:0x1> <type 71>) .math/big.utoa (base <type -11>) <type 16>
 func (z <esc:0x12> <type 71>) .math/big.setBit (x <esc:0x1> <type 71>, i <type -12>, b <type -12>) <type 71>
 func (z <type 71>) .math/big.mulRange (a <type -8>, b <type -8>) <type 71>
 func (z <esc:0x12> <type 71>) .math/big.make (n <type -11>) <type 71>
 func (n <type 71>) .math/big.probablyPrimeLucas () <type -15>
 func (z <esc:0x12> <type 71>) .math/big.setWord (x <type 52>) <type 71>
 func (z <esc:0x12> <type 71>) .math/big.divW (x <esc:0x1> <type 71>, y <type 52>) (q <type 71>, r <type 52>)
 func (x <esc:0x1> <type 71>) .math/big.itoa (neg <type -15>, base <type -11>) <type 16>
 func (z <esc:0x1> <type 71>) .math/big.clear ()
 func (z <esc:0x12> <type 71>) .math/big.div (z2 <esc:0x82> <type 71>, u <esc:0x1> <type 71>, v <esc:0x1> <type 71>) (q <type 71>, r <type 71>)
 func (z <esc:0x12> <type 71>) .math/big.setUint64 (x <type -8>) <type 71>
 func (z <esc:0x12> <type 71>) .math/big.and (x <esc:0x1> <type 71>, y <esc:0x1> <type 71>) <type 71>
 func (x <esc:0x1> <type 71>) .math/big.bitLen () <type -11>
 func (z <esc:0x12> <type 71>) .math/big.divLarge (u <esc:0x82> <type 71>, uIn <esc:0x1> <type 71>, vIn <esc:0x1> <type 71>) (q <type 71>, r <type 71>)
 func (z <esc:0x12> <type 71>) .math/big.sub (x <esc:0x1> <type 71>, y <esc:0x1> <type 71>) <type 71>
 func (x <esc:0x1> <type 71>) .math/big.cmp (y <esc:0x1> <type 71>) (r <type -11>)
 func (z <esc:0x12> <type 71>) .math/big.shl (x <esc:0x1> <type 71>, s <type -12>) <type 71>
 func (z <type 71>) .math/big.sqr (x <esc:0x1> <type 71>) <type 71>
 func (x <esc:0x1> <type 71>) .math/big.trailingZeroBits () <type -12>
 func (x <esc:0x1> <type 71>) .math/big.bit (i <type -12>) <type -12>
 func (x <esc:0x1> <type 71>) .math/big.sticky (i <type -12>) <type -12>
 func (z <type 71>) .math/big.mul (x <esc:0x1> <type 71>, y <esc:0x1> <type 71>) <type 71>
 func (z <esc:0x12> <type 71>) .math/big.mulAddWW (x <esc:0x1> <type 71>, y <type 52>, r <type 52>) <type 71>
 func (z <esc:0x12> <type 71>) .math/big.andNot (x <esc:0x1> <type 71>, y <esc:0x1> <type 71>) <type 71>
 func (z <esc:0x12> <type 71>) .math/big.or (x <esc:0x1> <type 71>, y <esc:0x1> <type 71>) <type 71>
 func (z <esc:0x12> <type 71>) .math/big.xor (x <esc:0x1> <type 71>, y <esc:0x1> <type 71>) <type 71>
 func (x <esc:0x1> <type 71>) .math/big.modW (d <type 52>) (r <type 52>)
type 72 [] <type 73>
type 73 ".math/big.divisor" <type 74>
type 74 struct { .math/big.bbb <type 71>; .math/big.nbits <type -11>; .math/big.ndigits <type -11>; }
type 75 [] <type 5>
type 76 struct { Raw <type 77>; Version <type -11> "asn1:\"optional,default:0\""; Signature <type 1>; Issuer <type 7>; ThisUpdate <type 26>; NextUpdate <type 26> "asn1:\"optional\""; RevokedCertificates <type 78> "asn1:\"optional\""; Extensions <type 75> "asn1:\"tag:0,optional,explicit\""; }
type 77 "encoding/asn1.RawContent" <type 16>
type 78 [] <type 9>
checksum ADABC00CF8DE097A8A68685E77427B07DB7CB091
v3;
package sql
pkgpath database/sql
import context context "context"
import driver database/sql/driver "database/sql/driver"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import reflect reflect "reflect"
import runtime runtime "runtime"
import sort sort "sort"
import strconv strconv "strconv"
import sync sync "sync"
import atomic sync/atomic "sync/atomic"
import time time "time"
import unicode unicode "unicode"
import utf8 unicode/utf8 "unicode/utf8"
indirectimport unsafe unsafe
init sql database..z2fsql..import context context..import driver database..z2fsql..z2fdriver..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1 13 1 14 1 15 1 16 2 1 2 3 2 4 2 5 2 6 2 7 2 8 2 9 2 10 2 11 2 12 2 13 2 14 2 15 2 16 3 4 3 5 3 6 3 7 3 8 3 9 3 10 3 11 3 12 3 13 3 14 3 15 3 16 5 4 5 7 5 10 5 11 5 13 5 14 5 15 7 4 7 10 7 11 7 13 8 4 8 5 8 6 8 7 8 10 8 11 8 13 8 14 8 15 9 4 9 10 9 11 9 12 9 13 9 16 10 4 10 11 12 4 12 10 12 11 13 4 13 10 13 11 14 4 14 10 14 11 14 13 15 4 15 10 15 11 15 13 15 14
types 167 20 453 1032 4185 28 75 29 140 143 141 157 25 29 27 103 830 29 1009 1637 31 374 33 972 78 40 145 215 22 34 75 35 106 3920 21 19 2084 21 36 145 20 35 13 355 47 46 20 19 274 100 24 22 22 22 19 184 64 80 280 18 138 18 444 19 32 42 19 92 149 89 19 64 19 643 19 97 128 45 170 21 46 47 112 45 99 22 356 36 143 3315 19 19 525 165 21 31 91 21 36 112 19 75 77 84 28 20 52 137 48 24 23 366 47 139 45 69 36 23 12 19 22 20 20 20 20 20 760 52 97 49 76 22 36 25 48 80 25 24 37 48 63 43 36 36 53 213 103 55 19 58 19 55 19 57 20 100 81 319 22 56 375 23 45 76 301 61 23 61
type 1 "ColumnType" <type 20>
 func (ci <esc:0x22> <type 58>) Name () <type -16>
 func (ci <esc:0x1> <type 58>) Length () (length <type -4>, ok <type -15>)
 func (ci <esc:0x1> <type 58>) DecimalSize () (precision <type -4>, scale <type -4>, ok <type -15>)
 func (ci <esc:0x22> <type 58>) ScanType () <type 21>
 func (ci <esc:0x1> <type 58>) Nullable () (nullable <type -15>, ok <type -15>)
 func (ci <esc:0x22> <type 58>) DatabaseTypeName () <type -16>
type 2 "Conn" <type 59>
 func (c <type 118>) .database/sql.grabConn (? <esc:0x1> <type 86>) (? <type 71>, ? <type 107>, ? <type -19>)
 func (c <type 118>) PingContext (ctx <type 86>) <type -19>
 func (c <type 118>) ExecContext (ctx <type 86>, query <type -16>, args <esc:0x9> ...<type 50>) (? <type 13>, ? <type -19>)
 func (c <type 118>) QueryContext (ctx <type 86>, query <type -16>, args <esc:0x9> ...<type 50>) (? <type 120>, ? <type -19>)
 func (c <type 118>) QueryRowContext (ctx <type 86>, query <type -16>, args <esc:0x9> ...<type 50>) <type 121>
 func (c <type 118>) PrepareContext (ctx <type 86>, query <type -16>) (? <type 122>, ? <type -19>)
 func (c <type 118>) BeginTx (ctx <type 86>, opts <esc:0x1> <type 123>) (? <type 124>, ? <type -19>)
 func (c <type 118>) .database/sql.closemuRUnlockCondReleaseConn (err <esc:0x1> <type -19>)
 func (c <esc:0x1> <type 118>) .database/sql.txCtx () <type 86>
 func (c <type 118>) .database/sql.close (err <esc:0x12> <type -19>) <type -19>
 func (c <type 118>) Close () <type -19>
type 3 "DB" <type 125>
 func (db <type 60>) .database/sql.addDep (x <type 138>, dep <type 50>)
 func (db <esc:0x1> <type 60>) .database/sql.addDepLocked (x <type 138>, dep <type 50>)
 func (db <type 60>) .database/sql.removeDep (x <type 138>, dep <type 50>) <type -19>
 func (db <esc:0x1> <type 60>) .database/sql.removeDepLocked (x <type 138>, dep <type 50>) <type 109>
 func (db <esc:0x1> <type 60>) .database/sql.pingDC (ctx <type 86>, dc <type 71>, release <esc:0x1> <type 108>) <type -19>
 func (db <type 60>) PingContext (ctx <type 86>) <type -19>
 func (db <type 60>) Ping () <type -19>
 func (db <type 60>) Close () <type -19>
 func (db <esc:0x1> <type 60>) .database/sql.maxIdleConnsLocked () <type -11>
 func (db <type 60>) SetMaxIdleConns (n <type -11>)
 func (db <type 60>) SetMaxOpenConns (n <type -11>)
 func (db <type 60>) SetConnMaxLifetime (d <type 85>)
 func (db <type 60>) .database/sql.startCleanerLocked ()
 func (db <type 60>) .database/sql.connectionCleaner (d <type 85>)
 func (db <type 60>) Stats () <type 4>
 func (db <esc:0x1> <type 60>) .database/sql.maybeOpenNewConnections ()
 func (db <type 60>) .database/sql.connectionOpener (ctx <type 86>)
 func (db <esc:0x1> <type 60>) .database/sql.connectionResetter (ctx <type 86>)
 func (db <type 60>) .database/sql.openNewConnection (ctx <type 86>)
 func (db <esc:0x1> <type 60>) .database/sql.nextRequestKeyLocked () <type -8>
 func (db <type 60>) .database/sql.conn (ctx <type 86>, strategy <type 143>) (? <type 71>, ? <type -19>)
 func (db <type 60>) .database/sql.noteUnusedDriverStatement (c <type 71>, ds <type 73>)
 func (db <type 60>) .database/sql.putConn (dc <type 71>, err <esc:0x1> <type -19>, resetSession <type -15>)
 func (db <type 60>) .database/sql.putConnDBLocked (dc <type 71>, err <type -19>) <type -15>
 func (db <type 60>) PrepareContext (ctx <type 86>, query <type -16>) (? <type 122>, ? <type -19>)
 func (db <type 60>) Prepare (query <type -16>) (? <type 122>, ? <type -19>)
 func (db <type 60>) .database/sql.prepare (ctx <type 86>, query <type -16>, strategy <type 143>) (? <type 122>, ? <type -19>)
 func (db <type 60>) .database/sql.prepareDC (ctx <type 86>, dc <type 71>, release <esc:0x1> <type 108>, cg <type 105>, query <type -16>) (? <type 122>, ? <type -19>)
 func (db <type 60>) ExecContext (ctx <type 86>, query <type -16>, args <esc:0x9> ...<type 50>) (? <type 13>, ? <type -19>)
 func (db <type 60>) Exec (query <type -16>, args <esc:0x9> ...<type 50>) (? <type 13>, ? <type -19>)
 func (db <type 60>) .database/sql.exec (ctx <type 86>, query <type -16>, args <esc:0x9> <type 119>, strategy <type 143>) (? <type 13>, ? <type -19>)
 func (db <esc:0x1> <type 60>) .database/sql.execDC (ctx <type 86>, dc <type 71>, release <esc:0x1> <type 108>, query <type -16>, args <esc:0x9> <type 119>) (res <type 13>, err <type -19>)
 func (db <type 60>) QueryContext (ctx <type 86>, query <type -16>, args <esc:0x9> ...<type 50>) (? <type 120>, ? <type -19>)
 func (db <type 60>) Query (query <type -16>, args <esc:0x9> ...<type 50>) (? <type 120>, ? <type -19>)
 func (db <type 60>) .database/sql.query (ctx <type 86>, query <type -16>, args <esc:0x9> <type 119>, strategy <type 143>) (? <type 120>, ? <type -19>)
 func (db <esc:0x1> <type 60>) .database/sql.queryDC (ctx <type 86>, txctx <type 86>, dc <type 71>, releaseConn <type 108>, query <type -16>, args <esc:0x9> <type 119>) (? <type 120>, ? <type -19>)
 func (db <type 60>) QueryRowContext (ctx <type 86>, query <type -16>, args <esc:0x9> ...<type 50>) <type 121>
 func (db <type 60>) QueryRow (query <type -16>, args <esc:0x9> ...<type 50>) <type 121>
 func (db <type 60>) BeginTx (ctx <type 86>, opts <esc:0x1> <type 123>) (? <type 124>, ? <type -19>)
 func (db <type 60>) Begin () (? <type 124>, ? <type -19>)
 func (db <type 60>) .database/sql.begin (ctx <type 86>, opts <esc:0x1> <type 123>, strategy <type 143>) (tx <type 124>, err <type -19>)
 func (db <type 60>) .database/sql.beginDC (ctx <type 86>, dc <type 71>, release <type 108>, opts <esc:0x1> <type 123>) (tx <type 124>, err <type -19>)
 func (db <esc:0x9> <type 60>) Driver () <type 128>
 func (db <type 60>) Conn (ctx <type 86>) (? <type 118>, ? <type -19>)
type 4 "DBStats" <type 144>
type 5 "IsolationLevel" <type -11>
 func (i <type 5>) String () <type -16>
type 6 "NamedArg" <type 145>
type 7 "NullBool" <type 146>
 func (n <type 147>) Scan (value <type 50>) <type -19>
 func (n <type 7>) Value () (? <type 79>, ? <type -19>)
type 8 "NullFloat64" <type 148>
 func (n <type 149>) Scan (value <type 50>) <type -19>
 func (n <type 8>) Value () (? <type 79>, ? <type -19>)
type 9 "NullInt64" <type 150>
 func (n <type 151>) Scan (value <type 50>) <type -19>
 func (n <type 9>) Value () (? <type 79>, ? <type -19>)
type 10 "NullString" <type 152>
 func (ns <type 153>) Scan (value <type 50>) <type -19>
 func (ns <esc:0x12> <type 10>) Value () (? <type 79>, ? <type -19>)
type 11 "Out" <type 154>
type 12 "RawBytes" <type 52>
type 13 "Result" <type 81>
type 14 "Row" <type 155>
 func (r <esc:0x2a> <type 121>) Scan (dest <esc:0x9> ...<type 50>) <type -19>
type 15 "Rows" <type 156>
 func (rs <esc:0x22> <type 120>) .database/sql.lasterrOrErrLocked (err <esc:0x12> <type -19>) <type -19>
 func (rs <type 120>) .database/sql.initContextClose (ctx <type 86>, txctx <type 86>)
 func (rs <type 120>) .database/sql.awaitDone (ctx <type 86>, txctx <type 86>)
 func (rs <type 120>) Next () <type -15>
 func (rs <esc:0x9> <type 120>) .database/sql.nextLocked () (doClose <type -15>, ok <type -15>)
 func (rs <type 120>) NextResultSet () <type -15>
 func (rs <type 120>) Err () <type -19>
 func (rs <type 120>) Columns () (? <type 84>, ? <type -19>)
 func (rs <type 120>) ColumnTypes () (? <type 157>, ? <type -19>)
 func (rs <type 120>) Scan (dest <esc:0x9> ...<type 50>) <type -19>
 func (rs <type 120>) Close () <type -19>
 func (rs <type 120>) .database/sql.close (err <type -19>) <type -19>
type 16 "Scanner" <type 158>
type 17 "Stmt" <type 159>
 func (s <type 122>) ExecContext (ctx <type 86>, args <esc:0x9> ...<type 50>) (? <type 13>, ? <type -19>)
 func (s <type 122>) Exec (args <esc:0x9> ...<type 50>) (? <type 13>, ? <type -19>)
 func (s <esc:0x9> <type 122>) .database/sql.removeClosedStmtLocked ()
 func (s <type 122>) .database/sql.connStmt (ctx <type 86>, strategy <type 143>) (dc <type 71>, releaseConn <type 108>, ds <type 73>, err <type -19>)
 func (s <type 122>) .database/sql.prepareOnConnLocked (ctx <type 86>, dc <type 71>) (? <type 73>, ? <type -19>)
 func (s <type 122>) QueryContext (ctx <type 86>, args <esc:0x9> ...<type 50>) (? <type 120>, ? <type -19>)
 func (s <type 122>) Query (args <esc:0x9> ...<type 50>) (? <type 120>, ? <type -19>)
 func (s <type 122>) QueryRowContext (ctx <type 86>, args <esc:0x9> ...<type 50>) <type 121>
 func (s <type 122>) QueryRow (args <esc:0x9> ...<type 50>) <type 121>
 func (s <type 122>) Close () <type -19>
 func (s <type 122>) .database/sql.finalClose () <type -19>
type 18 "Tx" <type 163>
 func (tx <type 124>) .database/sql.awaitDone ()
 func (tx <type 124>) .database/sql.isDone () <type -15>
 func (tx <type 124>) .database/sql.close (err <type -19>)
 func (tx <type 124>) .database/sql.grabConn (ctx <type 86>) (? <type 71>, ? <type 107>, ? <type -19>)
 func (tx <esc:0x22> <type 124>) .database/sql.txCtx () <type 86>
 func (tx <type 124>) .database/sql.closemuRUnlockRelease (? <esc:0x1> <type -19>)
 func (tx <type 124>) .database/sql.closePrepared ()
 func (tx <type 124>) Commit () <type -19>
 func (tx <type 124>) .database/sql.rollback (discardConn <type -15>) <type -19>
 func (tx <type 124>) Rollback () <type -19>
 func (tx <type 124>) PrepareContext (ctx <type 86>, query <type -16>) (? <type 122>, ? <type -19>)
 func (tx <type 124>) Prepare (query <type -16>) (? <type 122>, ? <type -19>)
 func (tx <type 124>) StmtContext (ctx <type 86>, stmt <type 122>) <type 122>
 func (tx <type 124>) Stmt (stmt <type 122>) <type 122>
 func (tx <type 124>) ExecContext (ctx <type 86>, query <type -16>, args <esc:0x9> ...<type 50>) (? <type 13>, ? <type -19>)
 func (tx <type 124>) Exec (query <type -16>, args <esc:0x9> ...<type 50>) (? <type 13>, ? <type -19>)
 func (tx <type 124>) QueryContext (ctx <type 86>, query <type -16>, args <esc:0x9> ...<type 50>) (? <type 120>, ? <type -19>)
 func (tx <type 124>) Query (query <type -16>, args <esc:0x9> ...<type 50>) (? <type 120>, ? <type -19>)
 func (tx <type 124>) QueryRowContext (ctx <type 86>, query <type -16>, args <esc:0x9> ...<type 50>) <type 121>
 func (tx <type 124>) QueryRow (query <type -16>, args <esc:0x9> ...<type 50>) <type 121>
type 19 "TxOptions" <type 166>
type 20 struct { .database/sql.name <type -16>; .database/sql.hasNullable <type -15>; .database/sql.hasLength <type -15>; .database/sql.hasPrecisionScale <type -15>; .database/sql.nullable <type -15>; .database/sql.length <type -4>; .database/sql.databaseType <type -16>; .database/sql.precision <type -4>; .database/sql.scale <type -4>; .database/sql.scanType <type 21>; }
type 21 "reflect.Type" <type 22>
type 22 interface { Align () <type -11>; AssignableTo (u <type 21>) <type -15>; Bits () <type -11>; ChanDir () <type 23>; Comparable () <type -15>; ConvertibleTo (u <type 21>) <type -15>; Elem () <type 21>; Field (i <type -11>) <type 24>; FieldAlign () <type -11>; FieldByIndex (index <type 27>) <type 24>; FieldByName (name <type -16>) (? <type 24>, ? <type -15>); FieldByNameFunc (match <type 28>) (? <type 24>, ? <type -15>); Implements (u <type 21>) <type -15>; In (i <type -11>) <type 21>; IsVariadic () <type -15>; Key () <type 21>; Kind () <type 29>; Len () <type -11>; Method (? <type -11>) <type 30>; MethodByName (? <type -16>) (? <type 30>, ? <type -15>); Name () <type -16>; NumField () <type -11>; NumIn () <type -11>; NumMethod () <type -11>; NumOut () <type -11>; Out (i <type -11>) <type 21>; PkgPath () <type -16>; Size () <type -13>; String () <type -16>; .reflect.common () <type 34>; .reflect.rawString () <type -16>; .reflect.uncommon () <type 46>; }
type 23 "reflect.ChanDir" <type -11>
 func (d <type 23>) String () <type -16>
type 24 "reflect.StructField" <type 25>
type 25 struct { Name <type -16>; PkgPath <type -16>; Type <type 21>; Tag <type 26>; Offset <type -13>; Index <type 27>; Anonymous <type -15>; }
type 26 "reflect.StructTag" <type -16>
 func (tag <esc:0x12> <type 26>) Get (key <esc:0x1> <type -16>) <type -16>
 func (tag <esc:0x12> <type 26>) Lookup (key <esc:0x1> <type -16>) (value <type -16>, ok <type -15>)
type 27 [] <type -11>
type 28 (? <type -16>) <type -15>
type 29 "reflect.Kind" <type -12>
 func (k <type 29>) String () <type -16>
type 30 "reflect.Method" <type 31>
type 31 struct { Name <type -16>; PkgPath <type -16>; Type <type 21>; Func <type 32>; Index <type -11>; }
type 32 "reflect.Value" <type 56>
 func (v <esc:0x1> <type 32>) SetUint (x <type -8>)
 func (v <type 32>) Slice3 (i <type -11>, j <type -11>, k <type -11>) <type 32>
 func (v <esc:0x1> <type 32>) SetBool (x <type -15>)
 func (v <esc:0x1> <type 32>) SetComplex (x <type -18>)
 func (v <esc:0x9> <type 32>) Send (x <type 32>)
 func (v <type 32>) .reflect.call (op <esc:0x1> <type -16>, in <esc:0x9> <type 33>) <type 33>
 func (v <type 32>) FieldByNameFunc (match <esc:0x1> <type 28>) <type 32>
 func (v <type 32>) Recv () (x <type 32>, ok <type -15>)
 func (v <esc:0x1> <type 32>) OverflowComplex (x <type -18>) <type -15>
 func (v <esc:0x1a> <type 32>) Elem () <type 32>
 func (v <type 32>) Convert (t <type 21>) <type 32>
 func (v <esc:0x12> <type 32>) Field (i <type -11>) <type 32>
 func (v <type 32>) FieldByName (name <esc:0x1> <type -16>) <type 32>
 func (v <type 32>) Set (x <type 32>)
 func (v <esc:0x1> <type 32>) IsValid () <type -15>
 func (v <type 32>) String () <type -16>
 func (v <esc:0x12> <type 32>) UnsafeAddr () <type -13>
 func (v <esc:0x1> <type 32>) Float () <type -10>
 func (v <esc:0x1> <type 32>) Kind () <type 29>
 func (v <esc:0x1> <type 32>) SetString (x <type -16>)
 func (v <esc:0x9> <type 32>) NumMethod () <type -11>
 func (v <type 32>) Type () <type 21>
 func (v <esc:0x9> <type 32>) SetMapIndex (key <type 32>, val <type 32>)
 func (v <esc:0x1> <type 32>) SetCap (n <type -11>)
 func (v <esc:0x1> <type 32>) Uint () <type -8>
 func (v <esc:0x1> <type 32>) CanAddr () <type -15>
 func (v <esc:0x1> <type 32>) SetFloat (x <type -10>)
 func (v <esc:0x12> <type 32>) Index (i <type -11>) <type 32>
 func (v <type 32>) .reflect.assignTo (context <esc:0x1> <type -16>, dst <type 34>, target <type 40>) <type 32>
 func (v <esc:0x1> <type 32>) SetInt (x <type -4>)
 func (v <esc:0x1> <type 32>) InterfaceData () <type 49>
 func (v <esc:0x9> <type 32>) TrySend (x <type 32>) <type -15>
 func (v <esc:0x1> <type 32>) IsNil () <type -15>
 func (v <esc:0x1> <type 32>) SetPointer (x <type 40>)
 func (v <type 32>) Len () <type -11>
 func (v <esc:0x1> <type 32>) Int () <type -4>
 func (v <esc:0x1> <type 32>) SetLen (n <type -11>)
 func (v <esc:0x12> <type 32>) .reflect.pointer () <type 40>
 func (v <type 32>) Interface () (i <type 50>)
 func (v <esc:0x9> <type 32>) MapKeys () <type 33>
 func (v <esc:0x9> <type 32>) .reflect.send (x <type 32>, nb <type -15>) (selected <type -15>)
 func (v <type 32>) Addr () <type 32>
 func (v <type 32>) TryRecv () (x <type 32>, ok <type -15>)
 func (v <esc:0x1> <type 32>) Bool () <type -15>
 func (v <esc:0x1a> <type 32>) Method (i <type -11>) <type 32>
 func (v <type 32>) Call (in <esc:0x9> <type 33>) <type 33>
 func (v <type 32>) Close ()
 func (v <esc:0x2a> <type 32>) .reflect.runes () <type 51>
 func (v <esc:0x9> <type 32>) SetBytes (x <type 52>)
 func (v <esc:0x1> <type 32>) CanSet () <type -15>
 func (v <esc:0x1> <type 32>) CanInterface () <type -15>
 func (v <esc:0x9> <type 32>) MapIndex (key <type 32>) <type 32>
 func (v <esc:0x2a> <type 32>) Bytes () <type 52>
 func (v <type 32>) Slice (i <type -11>, j <type -11>) <type 32>
 func (v <type 32>) Cap () <type -11>
 func (v <esc:0x1a> <type 32>) FieldByIndex (index <esc:0x1> <type 27>) <type 32>
 func (v <type 32>) CallSlice (in <esc:0x9> <type 33>) <type 33>
 func (v <esc:0x1> <type 32>) Complex () <type -18>
 func (v <type 32>) MapRange () <type 53>
 func (v <esc:0x1a> <type 32>) MethodByName (name <esc:0x1> <type -16>) <type 32>
 func (v <esc:0x1> <type 32>) NumField () <type -11>
 func (v <esc:0x1> <type 32>) OverflowInt (x <type -4>) <type -15>
 func (v <esc:0x12> <type 32>) Pointer () <type -13>
 func (v <esc:0x1> <type 32>) OverflowFloat (x <type -10>) <type -15>
 func (v <esc:0x9> <type 32>) .reflect.setRunes (x <type 51>)
 func (v <esc:0x1> <type 32>) OverflowUint (x <type -8>) <type -15>
 func (v <type 32>) .reflect.recv (nb <type -15>) (val <type 32>, ok <type -15>)
type 33 [] <type 32>
type 34 *<type 35>
type 35 ".reflect.rtype" <type 42>
 func (t <esc:0x1> <type 34>) NumOut () <type -11>
 func (t <esc:0x9> <type 34>) Implements (u <type 21>) <type -15>
 func (t <esc:0x9> <type 34>) Key () <type 21>
 func (t <esc:0x4a> <type 34>) Field (i <type -11>) <type 24>
 func (t <type 34>) FieldByNameFunc (match <esc:0x1> <type 28>) (? <type 24>, ? <type -15>)
 func (t <esc:0x1> <type 34>) Align () <type -11>
 func (t <esc:0x1> <type 34>) Kind () <type 29>
 func (t <esc:0x9> <type 34>) Elem () <type 21>
 func (t <type 34>) FieldByIndex (index <esc:0x1> <type 27>) <type 24>
 func (t <esc:0x32> <type 34>) .reflect.rawString () <type -16>
 func (t <type 34>) FieldByName (name <esc:0x1> <type -16>) (? <type 24>, ? <type -15>)
 func (t <esc:0x9> <type 34>) NumMethod () <type -11>
 func (t <esc:0x4a> <type 34>) Method (i <type -11>) (m <type 30>)
 func (t <esc:0x9> <type 34>) Out (i <type -11>) <type 21>
 func (t <esc:0x1> <type 34>) .reflect.pointers () <type -15>
 func (t <esc:0x9> <type 34>) ConvertibleTo (u <esc:0x9> <type 21>) <type -15>
 func (t <esc:0x4a> <type 34>) MethodByName (name <esc:0x1> <type -16>) (m <type 30>, ok <type -15>)
 func (t <esc:0x9> <type 34>) AssignableTo (u <esc:0x9> <type 21>) <type -15>
 func (t <esc:0x1> <type 34>) Comparable () <type -15>
 func (t <esc:0x1> <type 34>) FieldAlign () <type -11>
 func (t <esc:0x1> <type 34>) Size () <type -13>
 func (t <esc:0x42> <type 34>) Name () <type -16>
 func (t <esc:0x1> <type 34>) Bits () <type -11>
 func (t <esc:0x9> <type 34>) .reflect.exportedMethods () <type 36>
 func (t <esc:0x1> <type 34>) String () <type -16>
 func (t <esc:0x12> <type 34>) .reflect.common () ($ret23 <type 34>)
 func (t <esc:0x9> <type 34>) In (i <type -11>) <type 21>
 func (t <esc:0x1> <type 34>) Len () <type -11>
 func (t <esc:0x1> <type 34>) NumField () <type -11>
 func (t <esc:0x42> <type 34>) PkgPath () <type -16>
 func (t <esc:0x1> <type 34>) ChanDir () <type 23>
 func (t <type 34>) .reflect.ptrTo () <type 34>
 func (t <esc:0x1> <type 34>) NumIn () <type -11>
 func (t <esc:0x1> <type 34>) IsVariadic () <type -15>
type 36 [] <type 37>
type 37 ".reflect.method" <type 38>
type 38 struct { .reflect.name <type 39>; .reflect.pkgPath <type 39>; .reflect.mtyp <type 34>; .reflect.typ <type 34>; .reflect.tfn <type 40>; }
type 39 *<type -16>
type 40 "unsafe.Pointer" <type 41>
type 41 *any
type 42 struct { .reflect.size <type -13>; .reflect.ptrdata <type -13>; .reflect.hash <type -7>; .reflect.kind <type -5>; .reflect.align <type -1>; .reflect.fieldAlign <type -5>; .reflect._ <type -5>; .reflect.hashfn <type 43>; .reflect.equalfn <type 44>; .reflect.gcdata <type 45>; .reflect.string <type 39>; ? <type 46>; .reflect.ptrToThis <type 34>; }
type 43 (? <type 40>, ? <type -13>) <type -13>
type 44 (? <type 40>, ? <type 40>) <type -15>
type 45 *<type -20>
type 46 *<type 47>
type 47 ".reflect.uncommonType" <type 48>
 func (t <esc:0x12> <type 46>) .reflect.uncommon () ($ret11 <type 46>)
 func (t <type 46>) .reflect.exportedMethods () <type 36>
 func (t <esc:0x32> <type 46>) PkgPath () <type -16>
 func (t <esc:0x32> <type 46>) Name () <type -16>
type 48 struct { .reflect.name <type 39>; .reflect.pkgPath <type 39>; .reflect.methods <type 36>; }
type 49 [2 ] <type -13>
type 50 interface { }
type 51 [] <type -21>
type 52 [] <type -20>
type 53 *<type 54>
type 54 "reflect.MapIter" <type 55>
 func (it <esc:0x9> <type 53>) Key () <type 32>
 func (it <esc:0x1> <type 53>) Next () <type -15>
 func (it <esc:0x9> <type 53>) Value () <type 32>
type 55 struct { .reflect.m <type 32>; .reflect.it <type 40>; }
type 56 struct { .reflect.typ <type 34>; .reflect.ptr <type 40>; ? <type 57>; }
type 57 ".reflect.flag" <type -13>
 func (f <type 57>) .reflect.kind () <type 29>
 func (f <type 57>) .reflect.ro () <type 57>
 func (f <type 57>) .reflect.mustBe (expected <type 29>)
 func (f <type 57>) .reflect.mustBeExported ()
 func (f <type 57>) .reflect.mustBeAssignable ()
type 58 *<type 1>
type 59 struct { .database/sql.db <type 60>; .database/sql.closemu <type 61>; .database/sql.dc <type 71>; .database/sql.done <type -3>; }
type 60 *<type 3>
type 61 "sync.RWMutex" <type 67>
 func (rw <esc:0x12> <type 62>) RLocker () ($ret8 <type 63>) <inl:218>
  //  /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/sync/rwmutex.go:139
  { //140
   $ret8 = $convert(<type 65>, rw) //140
   return //140
  } //0
 func (rw <type 62>) Unlock ()
 func (rw <type 62>) Lock ()
 func (rw <type 62>) RUnlock ()
 func (rw <type 62>) RLock ()
type 62 *<type 61>
type 63 "sync.Locker" <type 64>
type 64 interface { Lock (); Unlock (); }
type 65 *<type 66>
type 66 ".sync.rlocker" <type 61>
 func (r <type 65>) Unlock ()
 func (r <type 65>) Lock ()
type 67 struct { .sync.w <type 68>; .sync.writerSem <type -7>; .sync.readerSem <type -7>; .sync.readerCount <type -3>; .sync.readerWait <type -3>; }
type 68 "sync.Mutex" <type 70>
 func (m <type 69>) Lock ()
 func (m <type 69>) Unlock ()
type 69 *<type 68>
type 70 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 71 *<type 72>
type 72 ".database/sql.driverConn" <type 110>
 func (dc <type 71>) .database/sql.releaseConn (err <esc:0x1> <type -19>)
 func (dc <type 71>) .database/sql.removeOpenStmt (ds <esc:0x1> <type 73>)
 func (dc <esc:0x1> <type 71>) .database/sql.expired (timeout <type 85>) <type -15>
 func (dc <type 71>) .database/sql.prepareLocked (ctx <type 86>, cg <esc:0x1> <type 105>, query <type -16>) (? <type 73>, ? <type -19>)
 func (dc <type 71>) .database/sql.resetSession (ctx <type 86>)
 func (dc <type 71>) .database/sql.closeDBLocked () <type 109>
 func (dc <type 71>) Close () <type -19>
 func (dc <type 71>) .database/sql.finalClose () <type -19>
type 73 *<type 74>
type 74 ".database/sql.driverStmt" <type 75>
 func (ds <esc:0x2a> <type 73>) Close () <type -19>
type 75 struct { ? <type 63>; .database/sql.si <type 76>; .database/sql.closed <type -15>; .database/sql.closeErr <type -19>; }
type 76 "database/sql/driver.Stmt" <type 77>
type 77 interface { Close () <type -19>; Exec (args <type 78>) (? <type 80>, ? <type -19>); NumInput () <type -11>; Query (args <type 78>) (? <type 82>, ? <type -19>); }
type 78 [] <type 79>
type 79 "database/sql/driver.Value" <type 50>
type 80 "database/sql/driver.Result" <type 81>
type 81 interface { LastInsertId () (? <type -4>, ? <type -19>); RowsAffected () (? <type -4>, ? <type -19>); }
type 82 "database/sql/driver.Rows" <type 83>
type 83 interface { Close () <type -19>; Columns () <type 84>; Next (dest <type 78>) <type -19>; }
type 84 [] <type -16>
type 85 "time.Duration" <type -4>
 func (d <type 85>) Round (m <type 85>) <type 85>
 func (d <type 85>) Truncate (m <type 85>) <type 85>
 func (d <type 85>) Hours () <type -10>
 func (d <type 85>) Minutes () <type -10>
 func (d <type 85>) Seconds () <type -10>
 func (d <type 85>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 85>) String () <type -16>
type 86 "context.Context" <type 87>
type 87 interface { Deadline () (deadline <type 88>, ok <type -15>); Done () <type 103>; Err () <type -19>; Value (key <type 50>) <type 50>; }
type 88 "time.Time" <type 102>
 func (t <esc:0x1> <type 88>) String () <type -16>
 func (t <esc:0x1> <type 88>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x12> <type 88>) Add (d <type 85>) <type 88>
 func (t <esc:0x1> <type 88>) AppendFormat (b <esc:0x12> <type 52>, layout <esc:0x1> <type -16>) <type 52>
 func (t <esc:0x1> <type 88>) Minute () <type -11>
 func (t <esc:0x1> <type 89>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 88>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 88>) MarshalBinary () (? <type 52>, ? <type -19>)
 func (t <esc:0x1> <type 88>) After (u <esc:0x1> <type 88>) <type -15>
 func (t <esc:0x1> <type 88>) UnixNano () <type -4>
 func (t <esc:0x1> <type 89>) GobDecode (data <esc:0x1> <type 52>) <type -19>
 func (t <esc:0x1> <type 88>) Day () <type -11>
 func (t <esc:0x1> <type 89>) .time.unixSec () <type -4>
 func (t <esc:0x12> <type 88>) Round (d <type 85>) <type 88>
 func (t <esc:0x1> <type 89>) .time.nsec () <type -3>
 func (t <esc:0x1> <type 88>) Before (u <esc:0x1> <type 88>) <type -15>
 func (t <esc:0x32> <type 88>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 89>) .time.setLoc (loc <type 90>)
 func (t <esc:0x12> <type 88>) Truncate (d <type 85>) <type 88>
 func (t <esc:0x1> <type 89>) UnmarshalText (data <esc:0x1> <type 52>) <type -19>
 func (t <esc:0x1> <type 89>) UnmarshalBinary (data <esc:0x1> <type 52>) <type -19>
 func (t <esc:0x1> <type 88>) Hour () <type -11>
 func (t <esc:0x1> <type 88>) .time.abs () <type -8>
 func (t <esc:0x1> <type 88>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x12> <type 88>) Location () <type 90>
 func (t <esc:0x1> <type 88>) Month () <type 100>
 func (t <esc:0x1> <type 88>) GobEncode () (? <type 52>, ? <type -19>)
 func (t <esc:0x1> <type 88>) Second () <type -11>
 func (t <esc:0x1> <type 89>) UnmarshalJSON (data <esc:0x1> <type 52>) <type -19>
 func (t <esc:0x1> <type 89>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 88>) Year () <type -11>
 func (t <esc:0x1> <type 88>) Date () (year <type -11>, month <type 100>, day <type -11>)
 func (t <esc:0x1> <type 88>) Weekday () <type 101>
 func (t <esc:0x1> <type 88>) Unix () <type -4>
 func (t <esc:0x1> <type 88>) YearDay () <type -11>
 func (t <esc:0x12> <type 88>) Local () <type 88>
 func (t <esc:0x1> <type 88>) IsZero () <type -15>
 func (t <esc:0x1> <type 88>) Equal (u <esc:0x1> <type 88>) <type -15>
 func (t <esc:0x12> <type 88>) In (loc <type 90>) <type 88>
 func (t <esc:0x1> <type 88>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 88>) UTC () <type 88>
 func (t <esc:0x32> <type 88>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 88>) Sub (u <esc:0x1> <type 88>) <type 85>
 func (t <esc:0x1> <type 89>) .time.mono () <type -4>
 func (t <esc:0x1> <type 88>) MarshalText () (? <type 52>, ? <type -19>)
 func (t <esc:0x1> <type 89>) .time.stripMono ()
 func (t <esc:0x1> <type 88>) MarshalJSON () (? <type 52>, ? <type -19>)
 func (t <esc:0x1> <type 88>) .time.date (full <type -15>) (year <type -11>, month <type 100>, day <type -11>, yday <type -11>)
 func (t <type 88>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 88>
 func (t <esc:0x1> <type 89>) .time.sec () <type -4>
type 89 *<type 88>
type 90 *<type 91>
type 91 "time.Location" <type 92>
 func (l <esc:0x1> <type 90>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
 func (l <esc:0x1> <type 90>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 90>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x32> <type 90>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x22> <type 90>) String () <type -16>
 func (l <esc:0x12> <type 90>) .time.get () <type 90>
type 92 struct { .time.name <type -16>; .time.zone <type 93>; .time.tx <type 96>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 99>; }
type 93 [] <type 94>
type 94 ".time.zone" <type 95>
type 95 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 96 [] <type 97>
type 97 ".time.zoneTrans" <type 98>
type 98 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 99 *<type 94>
type 100 "time.Month" <type -11>
 func (m <type 100>) String () <type -16>
type 101 "time.Weekday" <type -11>
 func (d <type 101>) String () <type -16>
type 102 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 90>; }
type 103 chan <- <type 104>
type 104 struct { }
type 105 ".database/sql.stmtConnGrabber" <type 106>
type 106 interface { .database/sql.grabConn (? <type 86>) (? <type 71>, ? <type 107>, ? <type -19>); .database/sql.txCtx () <type 86>; }
type 107 ".database/sql.releaseConn" <type 108>
type 108 (? <type -19>)
type 109 () <type -19>
type 110 struct { .database/sql.db <type 60>; .database/sql.createdAt <type 88>; ? <type 68>; .database/sql.ci <type 111>; .database/sql.closed <type -15>; .database/sql.finalClosed <type -15>; .database/sql.openStmt <type 115>; .database/sql.lastErr <type -19>; .database/sql.inUse <type -15>; .database/sql.onPut <type 116>; .database/sql.dbmuClosed <type -15>; }
type 111 "database/sql/driver.Conn" <type 112>
type 112 interface { Begin () (? <type 113>, ? <type -19>); Close () <type -19>; Prepare (query <type -16>) (? <type 76>, ? <type -19>); }
type 113 "database/sql/driver.Tx" <type 114>
type 114 interface { Commit () <type -19>; Rollback () <type -19>; }
type 115 map [<type 73>] <type -15>
type 116 [] <type 117>
type 117 ()
type 118 *<type 2>
type 119 [] <type 50>
type 120 *<type 15>
type 121 *<type 14>
type 122 *<type 17>
type 123 *<type 19>
type 124 *<type 18>
type 125 struct { .database/sql.waitDuration <type -4>; .database/sql.connector <type 126>; .database/sql.numClosed <type -8>; .database/sql.mu <type 68>; .database/sql.freeConn <type 130>; .database/sql.connRequests <type 131>; .database/sql.nextRequest <type -8>; .database/sql.numOpen <type -11>; .database/sql.openerCh <type 135>; .database/sql.resetterCh <type 136>; .database/sql.closed <type -15>; .database/sql.dep <type 137>; .database/sql.lastPut <type 142>; .database/sql.maxIdle <type -11>; .database/sql.maxOpen <type -11>; .database/sql.maxLifetime <type 85>; .database/sql.cleanerCh <type 135>; .database/sql.waitCount <type -4>; .database/sql.maxIdleClosed <type -4>; .database/sql.maxLifetimeClosed <type -4>; .database/sql.stop <type 117>; }
type 126 "database/sql/driver.Connector" <type 127>
type 127 interface { Connect (? <type 86>) (? <type 111>, ? <type -19>); Driver () <type 128>; }
type 128 "database/sql/driver.Driver" <type 129>
type 129 interface { Open (name <type -16>) (? <type 111>, ? <type -19>); }
type 130 [] <type 71>
type 131 map [<type -8>] <type 132>
type 132 chan <type 133>
type 133 ".database/sql.connRequest" <type 134>
type 134 struct { .database/sql.conn <type 71>; .database/sql.err <type -19>; }
type 135 chan <type 104>
type 136 chan <type 71>
type 137 map [<type 138>] <type 140>
type 138 ".database/sql.finalCloser" <type 139>
type 139 interface { .database/sql.finalClose () <type -19>; }
type 140 ".database/sql.depSet" <type 141>
type 141 map [<type 50>] <type -15>
type 142 map [<type 71>] <type -16>
type 143 ".database/sql.connReuseStrategy" <type -5>
type 144 struct { MaxOpenConnections <type -11>; OpenConnections <type -11>; InUse <type -11>; Idle <type -11>; WaitCount <type -4>; WaitDuration <type 85>; MaxIdleClosed <type -4>; MaxLifetimeClosed <type -4>; }
type 145 struct { .database/sql._Named_Fields_Required <type 104>; Name <type -16>; Value <type 50>; }
type 146 struct { Bool <type -15>; Valid <type -15>; }
type 147 *<type 7>
type 148 struct { Float64 <type -10>; Valid <type -15>; }
type 149 *<type 8>
type 150 struct { Int64 <type -4>; Valid <type -15>; }
type 151 *<type 9>
type 152 struct { String <type -16>; Valid <type -15>; }
type 153 *<type 10>
type 154 struct { .database/sql._Named_Fields_Required <type 104>; Dest <type 50>; In <type -15>; }
type 155 struct { .database/sql.err <type -19>; .database/sql.rows <type 120>; }
type 156 struct { .database/sql.dc <type 71>; .database/sql.releaseConn <type 108>; .database/sql.rowsi <type 82>; .database/sql.cancel <type 117>; .database/sql.closeStmt <type 73>; .database/sql.closemu <type 61>; .database/sql.closed <type -15>; .database/sql.lasterr <type -19>; .database/sql.lastcols <type 78>; }
type 157 [] <type 58>
type 158 interface { Scan (src <type 50>) <type -19>; }
type 159 struct { .database/sql.db <type 60>; .database/sql.query <type -16>; .database/sql.stickyErr <type -19>; .database/sql.closemu <type 61>; .database/sql.cg <type 105>; .database/sql.cgds <type 73>; .database/sql.parentStmt <type 122>; .database/sql.mu <type 68>; .database/sql.closed <type -15>; .database/sql.css <type 160>; .database/sql.lastNumClosed <type -8>; }
type 160 [] <type 161>
type 161 ".database/sql.connStmt" <type 162>
type 162 struct { .database/sql.dc <type 71>; .database/sql.ds <type 73>; }
type 163 struct { .database/sql.db <type 60>; .database/sql.closemu <type 61>; .database/sql.dc <type 71>; .database/sql.txi <type 113>; .database/sql.releaseConn <type 108>; .database/sql.done <type -3>; .database/sql.stmts <type 164>; .database/sql.cancel <type 117>; .database/sql.ctx <type 86>; }
type 164 struct { ? <type 68>; .database/sql.v <type 165>; }
type 165 [] <type 122>
type 166 struct { Isolation <type 5>; ReadOnly <type -15>; }
func Drivers () <type 84>
var ErrConnDone <type -19>
var ErrNoRows <type -19>
var ErrTxDone <type -19>
const LevelDefault <type 5> = 0 
const LevelLinearizable <type 5> = 7 
const LevelReadCommitted <type 5> = 2 
const LevelReadUncommitted <type 5> = 1 
const LevelRepeatableRead <type 5> = 4 
const LevelSerializable <type 5> = 6 
const LevelSnapshot <type 5> = 5 
const LevelWriteCommitted <type 5> = 3 
func Named (name <esc:0x12> <type -16>, value <esc:0x12> <type 50>) <type 6>
func Open (driverName <type -16>, dataSourceName <type -16>) (? <type 60>, ? <type -19>)
func OpenDB (c <type 126>) <type 60>
func Register (name <type -16>, driver <type 128>)
checksum 1F07BF2C30687725BA859EF72069DDDBA43A5D22
v3;
package driver
pkgpath database/sql/driver
import context context "context"
import errors errors "errors"
import fmt fmt "fmt"
import reflect reflect "reflect"
import strconv strconv "strconv"
import time time "time"
indirectimport unsafe unsafe
init driver database..z2fsql..z2fdriver..import context context..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10 1 11 1 12 1 13 1 14 1 15 2 3 2 4 2 5 2 6 2 7 2 8 2 9 2 10 2 11 2 12 2 13 2 14 2 15 4 3 4 6 4 9 4 10 4 12 4 13 4 14 6 3 6 9 6 10 6 12 7 3 7 4 7 5 7 6 7 9 7 10 7 12 7 13 7 14 8 3 8 9 8 10 8 11 8 12 8 15 9 3 9 10 11 3 11 9 11 10 12 3 12 9 12 10 13 3 13 9 13 10 13 12 14 3 14 9 14 10 14 12 14 13
types 133 36 35 24 31 38 29 26 33 26 33 36 31 38 103 100 27 28 35 27 25 171 51 41 43 49 43 39 37 26 37 38 24 31 26 36 28 415 22 19 66 137 91 36 142 3310 75 19 22 73 19 525 165 21 31 91 21 36 112 19 356 83 26 100 92 143 73 82 91 21 113 21 136 73 64 19 40 55 92 114 112 196 99 22 93 106 111 134 84 33 974 78 40 145 215 22 34 75 35 106 3936 21 2123 23 38 151 21 37 14 362 49 49 21 21 282 104 25 22 23 21 189 66 84 287 97 64 171 96 97 139 69 62 79 61
type 1 "ColumnConverter" <type 39>
type 2 "Conn" <type 40>
type 3 "ConnBeginTx" <type 41>
type 4 "ConnPrepareContext" <type 62>
type 5 "Connector" <type 63>
type 6 "Driver" <type 65>
type 7 "DriverContext" <type 66>
type 8 "Execer" <type 67>
type 9 "ExecerContext" <type 69>
type 10 "IsolationLevel" <type -11>
type 11 "NamedValue" <type 72>
type 12 "NamedValueChecker" <type 73>
type 13 "NotNull" <type 75>
 func (n <type 13>) ConvertValue (v <type 37>) (? <type 33>, ? <type -19>)
type 14 "Null" <type 75>
 func (n <type 14>) ConvertValue (v <type 37>) (? <type 33>, ? <type -19>)
type 15 "Pinger" <type 76>
type 16 "Queryer" <type 77>
type 17 "QueryerContext" <type 78>
type 18 "Result" <type 79>
type 19 "Rows" <type 81>
type 20 "RowsAffected" <type -4>
 func (? <esc:0x1> <type 20>) LastInsertId () (? <type -4>, ? <type -19>)
 func (v <type 20>) RowsAffected () (? <type -4>, ? <type -19>)
type 21 "RowsColumnTypeDatabaseTypeName" <type 83>
type 22 "RowsColumnTypeLength" <type 84>
type 23 "RowsColumnTypeNullable" <type 85>
type 24 "RowsColumnTypePrecisionScale" <type 86>
type 25 "RowsColumnTypeScanType" <type 87>
type 26 "RowsNextResultSet" <type 123>
type 27 "SessionResetter" <type 124>
type 28 "Stmt" <type 125>
type 29 "StmtExecContext" <type 126>
type 30 "StmtQueryContext" <type 127>
type 31 "Tx" <type 129>
type 32 "TxOptions" <type 130>
type 33 "Value" <type 37>
type 34 "ValueConverter" <type 131>
type 35 "Valuer" <type 132>
type 36 ".database/sql/driver.boolType" <type 38>
 func (? <esc:0x1> <type 36>) String () ($ret8 <type -16>) <inl:209>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/database/sql/driver/types.go:60
  { //60
   $ret8 = "Bool" //60
   return //60
  } //0
 func (? <esc:0x1> <type 36>) ConvertValue (src <type 37>) (? <type 33>, ? <type -19>)
type 37 interface { }
type 38 struct { }
type 39 interface { ColumnConverter (idx <type -11>) <type 34>; }
type 40 interface { Begin () (? <type 31>, ? <type -19>); Close () <type -19>; Prepare (query <type -16>) (? <type 28>, ? <type -19>); }
type 41 interface { BeginTx (ctx <type 42>, opts <type 32>) (? <type 31>, ? <type -19>); }
type 42 "context.Context" <type 43>
type 43 interface { Deadline () (deadline <type 44>, ok <type -15>); Done () <type 61>; Err () <type -19>; Value (key <type 37>) <type 37>; }
type 44 "time.Time" <type 60>
 func (t <esc:0x1> <type 44>) YearDay () <type -11>
 func (t <esc:0x1> <type 44>) Unix () <type -4>
 func (t <esc:0x1> <type 44>) Weekday () <type 45>
 func (t <esc:0x1> <type 44>) Second () <type -11>
 func (t <esc:0x1> <type 44>) Year () <type -11>
 func (t <esc:0x1> <type 46>) .time.addSec (d <type -4>)
 func (t <esc:0x1> <type 46>) UnmarshalJSON (data <esc:0x1> <type 47>) <type -19>
 func (t <esc:0x1> <type 44>) ISOWeek () (year <type -11>, week <type -11>)
 func (t <esc:0x1> <type 44>) Month () <type 48>
 func (t <esc:0x12> <type 44>) Location () <type 49>
 func (t <esc:0x1> <type 44>) GobEncode () (? <type 47>, ? <type -19>)
 func (t <esc:0x1> <type 44>) Date () (year <type -11>, month <type 48>, day <type -11>)
 func (t <esc:0x1> <type 44>) Hour () <type -11>
 func (t <esc:0x1> <type 44>) .time.abs () <type -8>
 func (t <esc:0x1> <type 44>) IsZero () <type -15>
 func (t <esc:0x1> <type 44>) Nanosecond () <type -11>
 func (t <esc:0x12> <type 44>) UTC () <type 44>
 func (t <esc:0x12> <type 44>) In (loc <type 49>) <type 44>
 func (t <esc:0x32> <type 44>) .time.locabs () (name <type -16>, offset <type -11>, abs <type -8>)
 func (t <esc:0x1> <type 44>) Sub (u <esc:0x1> <type 44>) <type 59>
 func (t <esc:0x1> <type 44>) Equal (u <esc:0x1> <type 44>) <type -15>
 func (t <esc:0x1> <type 46>) .time.mono () <type -4>
 func (t <esc:0x1> <type 44>) MarshalText () (? <type 47>, ? <type -19>)
 func (t <esc:0x1> <type 46>) .time.stripMono ()
 func (t <esc:0x1> <type 44>) MarshalJSON () (? <type 47>, ? <type -19>)
 func (t <esc:0x1> <type 44>) .time.date (full <type -15>) (year <type -11>, month <type 48>, day <type -11>, yday <type -11>)
 func (t <type 44>) AddDate (years <type -11>, months <type -11>, days <type -11>) <type 44>
 func (t <esc:0x1> <type 46>) .time.sec () <type -4>
 func (t <esc:0x12> <type 44>) Local () <type 44>
 func (t <esc:0x1> <type 46>) UnmarshalBinary (data <esc:0x1> <type 47>) <type -19>
 func (t <esc:0x1> <type 46>) UnmarshalText (data <esc:0x1> <type 47>) <type -19>
 func (t <esc:0x12> <type 44>) Truncate (d <type 59>) <type 44>
 func (t <esc:0x1> <type 46>) .time.setLoc (loc <type 49>)
 func (t <esc:0x32> <type 44>) Zone () (name <type -16>, offset <type -11>)
 func (t <esc:0x1> <type 44>) Before (u <esc:0x1> <type 44>) <type -15>
 func (t <esc:0x1> <type 46>) .time.nsec () <type -3>
 func (t <esc:0x12> <type 44>) Round (d <type 59>) <type 44>
 func (t <esc:0x1> <type 46>) .time.unixSec () <type -4>
 func (t <esc:0x1> <type 44>) Day () <type -11>
 func (t <esc:0x1> <type 46>) GobDecode (data <esc:0x1> <type 47>) <type -19>
 func (t <esc:0x1> <type 44>) UnixNano () <type -4>
 func (t <esc:0x1> <type 44>) After (u <esc:0x1> <type 44>) <type -15>
 func (t <esc:0x1> <type 44>) MarshalBinary () (? <type 47>, ? <type -19>)
 func (t <esc:0x1> <type 44>) Clock () (hour <type -11>, min <type -11>, sec <type -11>)
 func (t <esc:0x1> <type 46>) .time.setMono (m <type -4>)
 func (t <esc:0x1> <type 44>) Minute () <type -11>
 func (t <esc:0x1> <type 44>) AppendFormat (b <esc:0x12> <type 47>, layout <esc:0x1> <type -16>) <type 47>
 func (t <esc:0x12> <type 44>) Add (d <type 59>) <type 44>
 func (t <esc:0x1> <type 44>) Format (layout <esc:0x1> <type -16>) <type -16>
 func (t <esc:0x1> <type 44>) String () <type -16>
type 45 "time.Weekday" <type -11>
 func (d <type 45>) String () <type -16>
type 46 *<type 44>
type 47 [] <type -20>
type 48 "time.Month" <type -11>
 func (m <type 48>) String () <type -16>
type 49 *<type 50>
type 50 "time.Location" <type 51>
 func (l <esc:0x12> <type 49>) .time.get () <type 49>
 func (l <esc:0x22> <type 49>) String () <type -16>
 func (l <esc:0x32> <type 49>) .time.lookup (sec <type -4>) (name <type -16>, offset <type -11>, start <type -4>, end <type -4>)
 func (l <esc:0x1> <type 49>) .time.lookupFirstZone () <type -11>
 func (l <esc:0x1> <type 49>) .time.firstZoneUsed () <type -15>
 func (l <esc:0x1> <type 49>) .time.lookupName (name <esc:0x1> <type -16>, unix <type -4>) (offset <type -11>, ok <type -15>)
type 51 struct { .time.name <type -16>; .time.zone <type 52>; .time.tx <type 55>; .time.cacheStart <type -4>; .time.cacheEnd <type -4>; .time.cacheZone <type 58>; }
type 52 [] <type 53>
type 53 ".time.zone" <type 54>
type 54 struct { .time.name <type -16>; .time.offset <type -11>; .time.isDST <type -15>; }
type 55 [] <type 56>
type 56 ".time.zoneTrans" <type 57>
type 57 struct { .time.when <type -4>; .time.index <type -5>; .time.isstd <type -15>; .time.isutc <type -15>; }
type 58 *<type 53>
type 59 "time.Duration" <type -4>
 func (d <type 59>) String () <type -16>
 func (d <type 59>) Nanoseconds () ($ret65 <type -4>)
 func (d <type 59>) Seconds () <type -10>
 func (d <type 59>) Minutes () <type -10>
 func (d <type 59>) Hours () <type -10>
 func (d <type 59>) Truncate (m <type 59>) <type 59>
 func (d <type 59>) Round (m <type 59>) <type 59>
type 60 struct { .time.wall <type -8>; .time.ext <type -4>; .time.loc <type 49>; }
type 61 chan <- <type 38>
type 62 interface { PrepareContext (ctx <type 42>, query <type -16>) (? <type 28>, ? <type -19>); }
type 63 interface { Connect (? <type 42>) (? <type 2>, ? <type -19>); Driver () <type 6>; }
type 64 ".database/sql/driver.defaultConverter" <type 38>
 func (? <esc:0x1> <type 64>) ConvertValue (v <type 37>) (? <type 33>, ? <type -19>)
type 65 interface { Open (name <type -16>) (? <type 2>, ? <type -19>); }
type 66 interface { OpenConnector (name <type -16>) (? <type 5>, ? <type -19>); }
type 67 interface { Exec (query <type -16>, args <type 68>) (? <type 18>, ? <type -19>); }
type 68 [] <type 33>
type 69 interface { ExecContext (ctx <type 42>, query <type -16>, args <type 70>) (? <type 18>, ? <type -19>); }
type 70 [] <type 11>
type 71 ".database/sql/driver.int32Type" <type 38>
 func (? <esc:0x1> <type 71>) ConvertValue (v <type 37>) (? <type 33>, ? <type -19>)
type 72 struct { Name <type -16>; Ordinal <type -11>; Value <type 33>; }
type 73 interface { CheckNamedValue (? <type 74>) <type -19>; }
type 74 *<type 11>
type 75 struct { Converter <type 34>; }
type 76 interface { Ping (ctx <type 42>) <type -19>; }
type 77 interface { Query (query <type -16>, args <type 68>) (? <type 19>, ? <type -19>); }
type 78 interface { QueryContext (ctx <type 42>, query <type -16>, args <type 70>) (? <type 19>, ? <type -19>); }
type 79 interface { LastInsertId () (? <type -4>, ? <type -19>); RowsAffected () (? <type -4>, ? <type -19>); }
type 80 ".database/sql/driver.noRows" <type 38>
 func (? <esc:0x1> <type 80>) LastInsertId () (? <type -4>, ? <type -19>)
 func (? <esc:0x1> <type 80>) RowsAffected () (? <type -4>, ? <type -19>)
type 81 interface { Close () <type -19>; Columns () <type 82>; Next (dest <type 68>) <type -19>; }
type 82 [] <type -16>
type 83 interface { ? <type 19>; ColumnTypeDatabaseTypeName (index <type -11>) <type -16>; }
type 84 interface { ? <type 19>; ColumnTypeLength (index <type -11>) (length <type -4>, ok <type -15>); }
type 85 interface { ? <type 19>; ColumnTypeNullable (index <type -11>) (nullable <type -15>, ok <type -15>); }
type 86 interface { ? <type 19>; ColumnTypePrecisionScale (index <type -11>) (precision <type -4>, scale <type -4>, ok <type -15>); }
type 87 interface { ? <type 19>; ColumnTypeScanType (index <type -11>) <type 88>; }
type 88 "reflect.Type" <type 89>
type 89 interface { Align () <type -11>; AssignableTo (u <type 88>) <type -15>; Bits () <type -11>; ChanDir () <type 90>; Comparable () <type -15>; ConvertibleTo (u <type 88>) <type -15>; Elem () <type 88>; Field (i <type -11>) <type 91>; FieldAlign () <type -11>; FieldByIndex (index <type 94>) <type 91>; FieldByName (name <type -16>) (? <type 91>, ? <type -15>); FieldByNameFunc (match <type 95>) (? <type 91>, ? <type -15>); Implements (u <type 88>) <type -15>; In (i <type -11>) <type 88>; IsVariadic () <type -15>; Key () <type 88>; Kind () <type 96>; Len () <type -11>; Method (? <type -11>) <type 97>; MethodByName (? <type -16>) (? <type 97>, ? <type -15>); Name () <type -16>; NumField () <type -11>; NumIn () <type -11>; NumMethod () <type -11>; NumOut () <type -11>; Out (i <type -11>) <type 88>; PkgPath () <type -16>; Size () <type -13>; String () <type -16>; .reflect.common () <type 100>; .reflect.rawString () <type -16>; .reflect.uncommon () <type 112>; }
type 90 "reflect.ChanDir" <type -11>
 func (d <type 90>) String () <type -16>
type 91 "reflect.StructField" <type 92>
type 92 struct { Name <type -16>; PkgPath <type -16>; Type <type 88>; Tag <type 93>; Offset <type -13>; Index <type 94>; Anonymous <type -15>; }
type 93 "reflect.StructTag" <type -16>
 func (tag <esc:0x12> <type 93>) Lookup (key <esc:0x1> <type -16>) (value <type -16>, ok <type -15>)
 func (tag <esc:0x12> <type 93>) Get (key <esc:0x1> <type -16>) <type -16>
type 94 [] <type -11>
type 95 (? <type -16>) <type -15>
type 96 "reflect.Kind" <type -12>
 func (k <type 96>) String () <type -16>
type 97 "reflect.Method" <type 98>
type 98 struct { Name <type -16>; PkgPath <type -16>; Type <type 88>; Func <type 99>; Index <type -11>; }
type 99 "reflect.Value" <type 121>
 func (v <type 99>) Convert (t <type 88>) <type 99>
 func (v <type 99>) .reflect.assignTo (context <esc:0x1> <type -16>, dst <type 100>, target <type 106>) <type 99>
 func (v <esc:0x12> <type 99>) UnsafeAddr () <type -13>
 func (v <esc:0x1> <type 99>) Uint () <type -8>
 func (v <esc:0x9> <type 99>) TrySend (x <type 99>) <type -15>
 func (v <type 99>) String () <type -16>
 func (v <esc:0x1> <type 99>) IsNil () <type -15>
 func (v <esc:0x1> <type 99>) InterfaceData () <type 115>
 func (v <esc:0x1> <type 99>) SetInt (x <type -4>)
 func (v <type 99>) Len () <type -11>
 func (v <esc:0x1> <type 99>) SetPointer (x <type 106>)
 func (v <esc:0x1> <type 99>) Int () <type -4>
 func (v <esc:0x1> <type 99>) SetLen (n <type -11>)
 func (v <esc:0x12> <type 99>) Index (i <type -11>) <type 99>
 func (v <esc:0x1> <type 99>) SetFloat (x <type -10>)
 func (v <esc:0x1> <type 99>) SetCap (n <type -11>)
 func (v <esc:0x9> <type 99>) SetMapIndex (key <type 99>, val <type 99>)
 func (v <esc:0x1a> <type 99>) Elem () <type 99>
 func (v <type 99>) Type () <type 88>
 func (v <esc:0x9> <type 99>) NumMethod () <type -11>
 func (v <esc:0x1> <type 99>) IsValid () <type -15>
 func (v <type 99>) Set (x <type 99>)
 func (v <esc:0x1> <type 99>) CanAddr () <type -15>
 func (v <type 99>) FieldByName (name <esc:0x1> <type -16>) <type 99>
 func (v <esc:0x12> <type 99>) Field (i <type -11>) <type 99>
 func (v <esc:0x1> <type 99>) OverflowComplex (x <type -18>) <type -15>
 func (v <esc:0x1> <type 99>) Float () <type -10>
 func (v <esc:0x1> <type 99>) Kind () <type 96>
 func (v <esc:0x1> <type 99>) SetString (x <type -16>)
 func (v <esc:0x12> <type 99>) .reflect.pointer () <type 106>
 func (v <type 99>) Interface () (i <type 37>)
 func (v <esc:0x9> <type 99>) MapKeys () <type 116>
 func (v <esc:0x9> <type 99>) .reflect.send (x <type 99>, nb <type -15>) (selected <type -15>)
 func (v <type 99>) Addr () <type 99>
 func (v <type 99>) TryRecv () (x <type 99>, ok <type -15>)
 func (v <esc:0x1> <type 99>) Bool () <type -15>
 func (v <esc:0x1a> <type 99>) Method (i <type -11>) <type 99>
 func (v <type 99>) Call (in <esc:0x9> <type 116>) <type 116>
 func (v <type 99>) Close ()
 func (v <esc:0x2a> <type 99>) .reflect.runes () <type 117>
 func (v <esc:0x9> <type 99>) SetBytes (x <type 47>)
 func (v <esc:0x1> <type 99>) CanSet () <type -15>
 func (v <esc:0x1> <type 99>) CanInterface () <type -15>
 func (v <esc:0x9> <type 99>) MapIndex (key <type 99>) <type 99>
 func (v <esc:0x2a> <type 99>) Bytes () <type 47>
 func (v <type 99>) Slice (i <type -11>, j <type -11>) <type 99>
 func (v <type 99>) Cap () <type -11>
 func (v <esc:0x1a> <type 99>) FieldByIndex (index <esc:0x1> <type 94>) <type 99>
 func (v <type 99>) CallSlice (in <esc:0x9> <type 116>) <type 116>
 func (v <esc:0x1> <type 99>) Complex () <type -18>
 func (v <type 99>) MapRange () <type 118>
 func (v <esc:0x1a> <type 99>) MethodByName (name <esc:0x1> <type -16>) <type 99>
 func (v <esc:0x1> <type 99>) NumField () <type -11>
 func (v <esc:0x1> <type 99>) OverflowInt (x <type -4>) <type -15>
 func (v <esc:0x12> <type 99>) Pointer () <type -13>
 func (v <esc:0x1> <type 99>) OverflowFloat (x <type -10>) <type -15>
 func (v <esc:0x9> <type 99>) .reflect.setRunes (x <type 117>)
 func (v <esc:0x1> <type 99>) OverflowUint (x <type -8>) <type -15>
 func (v <type 99>) .reflect.recv (nb <type -15>) (val <type 99>, ok <type -15>)
 func (v <type 99>) Recv () (x <type 99>, ok <type -15>)
 func (v <type 99>) FieldByNameFunc (match <esc:0x1> <type 95>) <type 99>
 func (v <type 99>) .reflect.call (op <esc:0x1> <type -16>, in <esc:0x9> <type 116>) <type 116>
 func (v <esc:0x9> <type 99>) Send (x <type 99>)
 func (v <esc:0x1> <type 99>) SetComplex (x <type -18>)
 func (v <esc:0x1> <type 99>) SetBool (x <type -15>)
 func (v <type 99>) Slice3 (i <type -11>, j <type -11>, k <type -11>) <type 99>
 func (v <esc:0x1> <type 99>) SetUint (x <type -8>)
type 100 *<type 101>
type 101 ".reflect.rtype" <type 108>
 func (t <esc:0x1> <type 100>) Comparable () <type -15>
 func (t <esc:0x9> <type 100>) AssignableTo (u <esc:0x9> <type 88>) <type -15>
 func (t <esc:0x4a> <type 100>) MethodByName (name <esc:0x1> <type -16>) (m <type 97>, ok <type -15>)
 func (t <type 100>) FieldByIndex (index <esc:0x1> <type 94>) <type 91>
 func (t <esc:0x9> <type 100>) ConvertibleTo (u <esc:0x9> <type 88>) <type -15>
 func (t <esc:0x1> <type 100>) .reflect.pointers () <type -15>
 func (t <esc:0x32> <type 100>) .reflect.rawString () <type -16>
 func (t <esc:0x4a> <type 100>) Method (i <type -11>) (m <type 97>)
 func (t <esc:0x9> <type 100>) Out (i <type -11>) <type 88>
 func (t <esc:0x9> <type 100>) NumMethod () <type -11>
 func (t <type 100>) FieldByName (name <esc:0x1> <type -16>) (? <type 91>, ? <type -15>)
 func (t <esc:0x1> <type 100>) Align () <type -11>
 func (t <esc:0x1> <type 100>) Kind () <type 96>
 func (t <esc:0x9> <type 100>) Elem () <type 88>
 func (t <esc:0x1> <type 100>) FieldAlign () <type -11>
 func (t <esc:0x1> <type 100>) Size () <type -13>
 func (t <esc:0x42> <type 100>) Name () <type -16>
 func (t <esc:0x1> <type 100>) Bits () <type -11>
 func (t <esc:0x9> <type 100>) .reflect.exportedMethods () <type 102>
 func (t <esc:0x1> <type 100>) String () <type -16>
 func (t <esc:0x12> <type 100>) .reflect.common () ($ret23 <type 100>)
 func (t <esc:0x9> <type 100>) In (i <type -11>) <type 88>
 func (t <esc:0x1> <type 100>) Len () <type -11>
 func (t <esc:0x1> <type 100>) NumField () <type -11>
 func (t <esc:0x42> <type 100>) PkgPath () <type -16>
 func (t <esc:0x1> <type 100>) ChanDir () <type 90>
 func (t <type 100>) .reflect.ptrTo () <type 100>
 func (t <esc:0x1> <type 100>) NumIn () <type -11>
 func (t <esc:0x1> <type 100>) IsVariadic () <type -15>
 func (t <type 100>) FieldByNameFunc (match <esc:0x1> <type 95>) (? <type 91>, ? <type -15>)
 func (t <esc:0x4a> <type 100>) Field (i <type -11>) <type 91>
 func (t <esc:0x9> <type 100>) Key () <type 88>
 func (t <esc:0x9> <type 100>) Implements (u <type 88>) <type -15>
 func (t <esc:0x1> <type 100>) NumOut () <type -11>
type 102 [] <type 103>
type 103 ".reflect.method" <type 104>
type 104 struct { .reflect.name <type 105>; .reflect.pkgPath <type 105>; .reflect.mtyp <type 100>; .reflect.typ <type 100>; .reflect.tfn <type 106>; }
type 105 *<type -16>
type 106 "unsafe.Pointer" <type 107>
type 107 *any
type 108 struct { .reflect.size <type -13>; .reflect.ptrdata <type -13>; .reflect.hash <type -7>; .reflect.kind <type -5>; .reflect.align <type -1>; .reflect.fieldAlign <type -5>; .reflect._ <type -5>; .reflect.hashfn <type 109>; .reflect.equalfn <type 110>; .reflect.gcdata <type 111>; .reflect.string <type 105>; ? <type 112>; .reflect.ptrToThis <type 100>; }
type 109 (? <type 106>, ? <type -13>) <type -13>
type 110 (? <type 106>, ? <type 106>) <type -15>
type 111 *<type -20>
type 112 *<type 113>
type 113 ".reflect.uncommonType" <type 114>
 func (t <esc:0x32> <type 112>) Name () <type -16>
 func (t <esc:0x32> <type 112>) PkgPath () <type -16>
 func (t <type 112>) .reflect.exportedMethods () <type 102>
 func (t <esc:0x12> <type 112>) .reflect.uncommon () ($ret11 <type 112>)
type 114 struct { .reflect.name <type 105>; .reflect.pkgPath <type 105>; .reflect.methods <type 102>; }
type 115 [2 ] <type -13>
type 116 [] <type 99>
type 117 [] <type -21>
type 118 *<type 119>
type 119 "reflect.MapIter" <type 120>
 func (it <esc:0x9> <type 118>) Value () <type 99>
 func (it <esc:0x1> <type 118>) Next () <type -15>
 func (it <esc:0x9> <type 118>) Key () <type 99>
type 120 struct { .reflect.m <type 99>; .reflect.it <type 106>; }
type 121 struct { .reflect.typ <type 100>; .reflect.ptr <type 106>; ? <type 122>; }
type 122 ".reflect.flag" <type -13>
 func (f <type 122>) .reflect.mustBeAssignable ()
 func (f <type 122>) .reflect.mustBeExported ()
 func (f <type 122>) .reflect.mustBe (expected <type 96>)
 func (f <type 122>) .reflect.ro () <type 122>
 func (f <type 122>) .reflect.kind () <type 96>
type 123 interface { ? <type 19>; HasNextResultSet () <type -15>; NextResultSet () <type -19>; }
type 124 interface { ResetSession (ctx <type 42>) <type -19>; }
type 125 interface { Close () <type -19>; Exec (args <type 68>) (? <type 18>, ? <type -19>); NumInput () <type -11>; Query (args <type 68>) (? <type 19>, ? <type -19>); }
type 126 interface { ExecContext (ctx <type 42>, args <type 70>) (? <type 18>, ? <type -19>); }
type 127 interface { QueryContext (ctx <type 42>, args <type 70>) (? <type 19>, ? <type -19>); }
type 128 ".database/sql/driver.stringType" <type 38>
 func (? <esc:0x1> <type 128>) ConvertValue (v <type 37>) (? <type 33>, ? <type -19>)
type 129 interface { Commit () <type -19>; Rollback () <type -19>; }
type 130 struct { Isolation <type 10>; ReadOnly <type -15>; }
type 131 interface { ConvertValue (v <type 37>) (? <type 33>, ? <type -19>); }
type 132 interface { Value () (? <type 33>, ? <type -19>); }
var Bool <type 36>
var DefaultParameterConverter <type 64>
var ErrBadConn <type -19>
var ErrRemoveArgument <type -19>
var ErrSkip <type -19>
var Int32 <type 71>
func IsScanValue (v <esc:0x1> <type 37>) <type -15>
func IsValue (v <esc:0x1> <type 37>) <type -15>
var ResultNoRows <type 80>
var String <type 128>
checksum 334ADF3781F739C1AF15FCA835F09CEFB49A184B
v3;
package dwarf
pkgpath debug/dwarf
import binary encoding/binary "encoding/binary"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import path path "path"
import sort sort "sort"
import strconv strconv "strconv"
import strings strings "strings"
init dwarf debug..z2fdwarf..import binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import path path..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 1 3 1 6 1 9 1 10 1 11 1 12 1 13 1 16 2 3 2 4 2 5 2 6 2 7 2 9 2 10 2 11 2 12 2 13 2 14 2 15 2 16 4 3 4 6 4 10 4 11 4 13 4 14 4 15 6 3 6 10 6 11 6 13 7 3 7 4 7 5 7 6 7 10 7 11 7 13 7 14 7 15 8 3 8 6 8 10 8 11 8 13 8 16 9 3 9 10 9 11 9 12 9 13 9 16 10 3 10 11 12 3 12 10 12 11 13 3 13 10 13 11 14 3 14 10 14 11 14 13 15 3 15 10 15 11 15 13 15 14
types 119 37 28 128 106 346 28 28 108 344 31 960 82 308 148 80 30 26 30 80 28 30 29 776 35 27 81 131 516 33 136 108 26 133 30 29 36 305 31 89 18 71 18 56 18 424 22 34 45 34 40 111 21 40 104 40 46 254 34 34 19 42 121 252 19 227 21 19 19 19 21 23 19 44 173 19 21 19 70 31 19 90 21 22 19 67 21 19 19 51 65 74 21 19 268 19 72 641 1019 19 227 46 162 23 23 22 20 153 48 20 65 20 205 135 113 23 20 20 85 20
type 1 "AddrType" <type 37>
type 2 "ArrayType" <type 38>
 func (t <esc:0x9> <type 39>) String () <type -16>
 func (t <esc:0x9> <type 39>) Size () <type -4>
type 3 "Attr" <type -7>
 func (i <type 3>) String () <type -16>
 func (a <type 3>) GoString () <type -16>
type 4 "BasicType" <type 40>
 func (b <esc:0x12> <type 41>) Basic () ($ret53 <type 41>) <inl:196>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/debug/dwarf/type.go:42
  { //42
   $ret53 = b //42
   return //42
  } //0
 func (t <esc:0x22> <type 41>) String () <type -16>
type 5 "BoolType" <type 37>
type 6 "CharType" <type 37>
type 7 "Class" <type -11>
 func (i <type 7>) String () <type -16>
 func (i <type 7>) GoString () <type -16>
type 8 "CommonType" <type 42>
 func (c <esc:0x12> <type 43>) Common () ($ret51 <type 43>) <inl:196>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/debug/dwarf/type.go:29
  { //29
   $ret51 = c //29
   return //29
  } //0
 func (c <esc:0x1> <type 43>) Size () <type -4>
type 9 "ComplexType" <type 37>
type 10 "Data" <type 44>
 func (d <type 66>) .debug/dwarf.parseAbbrev (off <type -8>, vers <type -11>) (? <type 47>, ? <type -19>)
 func (d <type 66>) Reader () <type 67>
 func (d <type 66>) Ranges (e <esc:0x1> <type 68>) (? <type 69>, ? <type -19>)
 func (d <type 66>) LineReader (cu <type 68>) (? <type 71>, ? <type -19>)
 func (d <type 66>) AddTypes (name <type -16>, types <type 45>) <type -19>
 func (d <type 66>) Type (off <type 24>) (? <type 31>, ? <type -19>)
 func (d <type 66>) .debug/dwarf.readType (name <type -16>, r <type 72>, off <type 24>, typeCache <type 57>, typedefs <type 74>) (? <type 31>, ? <type -19>)
 func (d <type 66>) .debug/dwarf.parseTypes (name <type -16>, types <type 45>) <type -19>
 func (d <type 66>) .debug/dwarf.sigToType (sig <type -8>) (? <type 31>, ? <type -19>)
 func (d <type 66>) .debug/dwarf.parseUnits () (? <type 65>, ? <type -19>)
 func (d <esc:0x1> <type 66>) .debug/dwarf.offsetToUnit (off <type 24>) <type -11>
type 11 "DecodeError" <type 77>
 func (e <esc:0x1> <type 11>) Error () <type -16>
type 12 "DotDotDotType" <type 78>
 func (t <esc:0x1> <type 79>) String () ($ret65 <type -16>) <inl:204>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/debug/dwarf/type.go:252
  { //252
   $ret65 = "..." //252
   return //252
  } //0
type 13 "Entry" <type 80>
 func (e <esc:0x32> <type 68>) Val (a <type 3>) <type 82>
 func (e <esc:0x22> <type 68>) AttrField (a <type 3>) <type 83>
type 14 "EnumType" <type 84>
 func (t <esc:0x1> <type 87>) String () <type -16>
type 15 "EnumValue" <type 88>
type 16 "Field" <type 89>
type 17 "FloatType" <type 37>
type 18 "FuncType" <type 90>
 func (t <esc:0x9> <type 92>) String () <type -16>
type 19 "IntType" <type 37>
type 20 "LineEntry" <type 93>
type 21 "LineFile" <type 95>
type 22 "LineReader" <type 96>
 func (r <esc:0x2a> <type 71>) .debug/dwarf.readHeader () <type -19>
 func (r <esc:0x10a> <type 71>) .debug/dwarf.readFileEntry () (? <type -15>, ? <type -19>)
 func (r <esc:0x9> <type 71>) .debug/dwarf.updateFile ()
 func (r <esc:0x2a> <type 71>) Next (entry <esc:0x1> <type 105>) <type -19>
 func (r <esc:0x9> <type 71>) .debug/dwarf.step (entry <esc:0x1> <type 105>) <type -15>
 func (r <esc:0x1> <type 71>) .debug/dwarf.advancePC (opAdvance <type -11>)
 func (r <esc:0x22> <type 71>) Tell () <type 23>
 func (r <esc:0x9> <type 71>) Seek (pos <type 23>)
 func (r <esc:0x9> <type 71>) Reset ()
 func (r <esc:0x9> <type 71>) .debug/dwarf.resetState ()
 func (r <esc:0x2a> <type 71>) SeekPC (pc <type -8>, entry <esc:0x1> <type 105>) <type -19>
type 23 "LineReaderPos" <type 106>
type 24 "Offset" <type -7>
type 25 "PtrType" <type 107>
 func (t <esc:0x9> <type 108>) String () <type -16>
type 26 "QualType" <type 109>
 func (t <esc:0x9> <type 110>) String () <type -16>
 func (t <esc:0x9> <type 110>) Size () <type -4>
type 27 "Reader" <type 111>
 func (r <esc:0x1> <type 67>) AddressSize () <type -11>
 func (r <esc:0x9> <type 67>) Seek (off <type 24>)
 func (r <esc:0x9> <type 67>) .debug/dwarf.maybeNextUnit ()
 func (r <esc:0x10a> <type 67>) Next () (? <type 68>, ? <type -19>)
 func (r <esc:0x9> <type 67>) SkipChildren ()
 func (r <esc:0x9> <type 67>) .debug/dwarf.clone () <type 72>
 func (r <esc:0x1> <type 67>) .debug/dwarf.offset () <type 24>
 func (r <esc:0x10a> <type 67>) SeekPC (pc <type -8>) (? <type 68>, ? <type -19>)
type 28 "StructField" <type 112>
type 29 "StructType" <type 113>
 func (t <esc:0x2a> <type 116>) String () <type -16>
 func (t <esc:0x2a> <type 116>) Defn () <type -16>
type 30 "Tag" <type -7>
 func (t <type 30>) GoString () <type -16>
 func (i <type 30>) String () <type -16>
type 31 "Type" <type 117>
type 32 "TypedefType" <type 107>
 func (t <esc:0x22> <type 76>) String () <type -16>
 func (t <esc:0x9> <type 76>) Size () <type -4>
type 33 "UcharType" <type 37>
type 34 "UintType" <type 37>
type 35 "UnspecifiedType" <type 37>
type 36 "VoidType" <type 78>
 func (t <esc:0x1> <type 118>) String () ($ret59 <type -16>) <inl:205>
  // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/debug/dwarf/type.go:133
  { //133
   $ret59 = "void" //133
   return //133
  } //0
type 37 struct { ? <type 4>; }
type 38 struct { ? <type 8>; Type <type 31>; StrideBitSize <type -4>; Count <type -4>; }
type 39 *<type 2>
type 40 struct { ? <type 8>; BitSize <type -4>; BitOffset <type -4>; }
type 41 *<type 4>
type 42 struct { ByteSize <type -4>; Name <type -16>; }
type 43 *<type 8>
type 44 struct { .debug/dwarf.abbrev <type 45>; .debug/dwarf.aranges <type 45>; .debug/dwarf.frame <type 45>; .debug/dwarf.info <type 45>; .debug/dwarf.line <type 45>; .debug/dwarf.pubnames <type 45>; .debug/dwarf.ranges <type 45>; .debug/dwarf.str <type 45>; .debug/dwarf.abbrevCache <type 46>; .debug/dwarf.order <type 55>; .debug/dwarf.typeCache <type 57>; .debug/dwarf.typeSigs <type 58>; .debug/dwarf.unit <type 65>; }
type 45 [] <type -20>
type 46 map [<type -8>] <type 47>
type 47 ".debug/dwarf.abbrevTable" <type 48>
type 48 map [<type -7>] <type 49>
type 49 ".debug/dwarf.abbrev" <type 50>
type 50 struct { .debug/dwarf.tag <type 30>; .debug/dwarf.children <type -15>; .debug/dwarf.field <type 51>; }
type 51 [] <type 52>
type 52 ".debug/dwarf.afield" <type 53>
type 53 struct { .debug/dwarf.attr <type 3>; .debug/dwarf.fmt <type 54>; .debug/dwarf.class <type 7>; }
type 54 ".debug/dwarf.format" <type -7>
type 55 "encoding/binary.ByteOrder" <type 56>
type 56 interface { PutUint16 (? <type 45>, ? <type -6>); PutUint32 (? <type 45>, ? <type -7>); PutUint64 (? <type 45>, ? <type -8>); String () <type -16>; Uint16 (? <type 45>) <type -6>; Uint32 (? <type 45>) <type -7>; Uint64 (? <type 45>) <type -8>; }
type 57 map [<type 24>] <type 31>
type 58 map [<type -8>] <type 59>
type 59 *<type 60>
type 60 ".debug/dwarf.typeUnit" <type 61>
type 61 struct { ? <type 62>; .debug/dwarf.toff <type 24>; .debug/dwarf.name <type -16>; .debug/dwarf.cache <type 31>; }
type 62 ".debug/dwarf.unit" <type 64>
 func (u <esc:0x1> <type 63>) .debug/dwarf.version () <type -11>
 func (u <esc:0x1> <type 63>) .debug/dwarf.dwarf64 () (? <type -15>, ? <type -15>)
 func (u <esc:0x1> <type 63>) .debug/dwarf.addrsize () <type -11>
type 63 *<type 62>
type 64 struct { .debug/dwarf.base <type 24>; .debug/dwarf.off <type 24>; .debug/dwarf.data <type 45>; .debug/dwarf.atable <type 47>; .debug/dwarf.asize <type -11>; .debug/dwarf.vers <type -11>; .debug/dwarf.is64 <type -15>; }
type 65 [] <type 62>
type 66 *<type 10>
type 67 *<type 27>
type 68 *<type 13>
type 69 [] <type 70>
type 70 [2 ] <type -8>
type 71 *<type 22>
type 72 ".debug/dwarf.typeReader" <type 73>
type 73 interface { AddressSize () <type -11>; Next () (? <type 68>, ? <type -19>); Seek (? <type 24>); .debug/dwarf.clone () <type 72>; .debug/dwarf.offset () <type 24>; }
type 74 *<type 75>
type 75 [] <type 76>
type 76 *<type 32>
type 77 struct { Name <type -16>; Offset <type 24>; Err <type -16>; }
type 78 struct { ? <type 8>; }
type 79 *<type 12>
type 80 struct { Offset <type 24>; Tag <type 30>; Children <type -15>; Field <type 81>; }
type 81 [] <type 16>
type 82 interface { }
type 83 *<type 16>
type 84 struct { ? <type 8>; EnumName <type -16>; Val <type 85>; }
type 85 [] <type 86>
type 86 *<type 15>
type 87 *<type 14>
type 88 struct { Name <type -16>; Val <type -4>; }
type 89 struct { Attr <type 3>; Val <type 82>; Class <type 7>; }
type 90 struct { ? <type 8>; ReturnType <type 31>; ParamType <type 91>; }
type 91 [] <type 31>
type 92 *<type 18>
type 93 struct { Address <type -8>; OpIndex <type -11>; File <type 94>; Line <type -11>; Column <type -11>; IsStmt <type -15>; BasicBlock <type -15>; PrologueEnd <type -15>; EpilogueBegin <type -15>; ISA <type -11>; Discriminator <type -11>; EndSequence <type -15>; }
type 94 *<type 21>
type 95 struct { Name <type -16>; Mtime <type -8>; Length <type -11>; }
type 96 struct { .debug/dwarf.buf <type 97>; .debug/dwarf.section <type 45>; .debug/dwarf.version <type -6>; .debug/dwarf.minInstructionLength <type -11>; .debug/dwarf.maxOpsPerInstruction <type -11>; .debug/dwarf.defaultIsStmt <type -15>; .debug/dwarf.lineBase <type -11>; .debug/dwarf.lineRange <type -11>; .debug/dwarf.opcodeBase <type -11>; .debug/dwarf.opcodeLengths <type 102>; .debug/dwarf.directories <type 103>; .debug/dwarf.fileEntries <type 104>; .debug/dwarf.programOffset <type 24>; .debug/dwarf.endOffset <type 24>; .debug/dwarf.initialFileEntries <type -11>; .debug/dwarf.state <type 20>; .debug/dwarf.fileIndex <type -11>; }
type 97 ".debug/dwarf.buf" <type 99>
 func (b <esc:0x9> <type 98>) .debug/dwarf.uint8 () <type -5>
 func (b <esc:0x2a> <type 98>) .debug/dwarf.bytes (n <type -11>) <type 45>
 func (b <esc:0x9> <type 98>) .debug/dwarf.skip (n <type -11>)
 func (b <esc:0x9> <type 98>) .debug/dwarf.string () <type -16>
 func (b <esc:0x9> <type 98>) .debug/dwarf.uint16 () <type -6>
 func (b <esc:0x9> <type 98>) .debug/dwarf.uint32 () <type -7>
 func (b <esc:0x9> <type 98>) .debug/dwarf.uint64 () <type -8>
 func (b <esc:0x1> <type 98>) .debug/dwarf.varint () (c <type -8>, bits <type -12>)
 func (b <esc:0x1> <type 98>) .debug/dwarf.uint () <type -8>
 func (b <esc:0x1> <type 98>) .debug/dwarf.int () <type -4>
 func (b <esc:0x9> <type 98>) .debug/dwarf.addr () <type -8>
 func (b <esc:0x9> <type 98>) .debug/dwarf.unitLength () (length <type 24>, dwarf64 <type -15>)
 func (b <esc:0x9> <type 98>) .debug/dwarf.error (s <type -16>)
 func (b <esc:0x9> <type 98>) .debug/dwarf.entry (atab <esc:0x1> <type 47>, ubase <type 24>) <type 68>
type 98 *<type 97>
type 99 struct { .debug/dwarf.dwarf <type 66>; .debug/dwarf.order <type 55>; .debug/dwarf.format <type 100>; .debug/dwarf.name <type -16>; .debug/dwarf.off <type 24>; .debug/dwarf.data <type 45>; .debug/dwarf.err <type -19>; }
type 100 ".debug/dwarf.dataFormat" <type 101>
type 101 interface { .debug/dwarf.addrsize () <type -11>; .debug/dwarf.dwarf64 () (dwarf64 <type -15>, isKnown <type -15>); .debug/dwarf.version () <type -11>; }
type 102 [] <type -11>
type 103 [] <type -16>
type 104 [] <type 94>
type 105 *<type 20>
type 106 struct { .debug/dwarf.off <type 24>; .debug/dwarf.numFileEntries <type -11>; .debug/dwarf.state <type 20>; .debug/dwarf.fileIndex <type -11>; }
type 107 struct { ? <type 8>; Type <type 31>; }
type 108 *<type 25>
type 109 struct { ? <type 8>; Qual <type -16>; Type <type 31>; }
type 110 *<type 26>
type 111 struct { .debug/dwarf.b <type 97>; .debug/dwarf.d <type 66>; .debug/dwarf.err <type -19>; .debug/dwarf.unit <type -11>; .debug/dwarf.lastChildren <type -15>; .debug/dwarf.lastSibling <type 24>; }
type 112 struct { Name <type -16>; Type <type 31>; ByteOffset <type -4>; ByteSize <type -4>; BitOffset <type -4>; BitSize <type -4>; }
type 113 struct { ? <type 8>; StructName <type -16>; Kind <type -16>; Field <type 114>; Incomplete <type -15>; }
type 114 [] <type 115>
type 115 *<type 28>
type 116 *<type 29>
type 117 interface { Common () <type 43>; Size () <type -4>; String () <type -16>; }
type 118 *<type 36>
const AttrAbstractOrigin <type 3> = 49 
const AttrAccessibility <type 3> = 50 
const AttrAddrClass <type 3> = 51 
const AttrAllocated <type 3> = 78 
const AttrArtificial <type 3> = 52 
const AttrAssociated <type 3> = 79 
const AttrBaseTypes <type 3> = 53 
const AttrBitOffset <type 3> = 12 
const AttrBitSize <type 3> = 13 
const AttrByteSize <type 3> = 11 
const AttrCallColumn <type 3> = 87 
const AttrCallFile <type 3> = 88 
const AttrCallLine <type 3> = 89 
const AttrCalling <type 3> = 54 
const AttrCommonRef <type 3> = 26 
const AttrCompDir <type 3> = 27 
const AttrConstValue <type 3> = 28 
const AttrContainingType <type 3> = 29 
const AttrCount <type 3> = 55 
const AttrDataLocation <type 3> = 80 
const AttrDataMemberLoc <type 3> = 56 
const AttrDeclColumn <type 3> = 57 
const AttrDeclFile <type 3> = 58 
const AttrDeclLine <type 3> = 59 
const AttrDeclaration <type 3> = 60 
const AttrDefaultValue <type 3> = 30 
const AttrDescription <type 3> = 90 
const AttrDiscr <type 3> = 21 
const AttrDiscrList <type 3> = 61 
const AttrDiscrValue <type 3> = 22 
const AttrEncoding <type 3> = 62 
const AttrEntrypc <type 3> = 82 
const AttrExtension <type 3> = 84 
const AttrExternal <type 3> = 63 
const AttrFrameBase <type 3> = 64 
const AttrFriend <type 3> = 65 
const AttrHighpc <type 3> = 18 
const AttrIdentifierCase <type 3> = 66 
const AttrImport <type 3> = 24 
const AttrInline <type 3> = 32 
const AttrIsOptional <type 3> = 33 
const AttrLanguage <type 3> = 19 
const AttrLocation <type 3> = 2 
const AttrLowerBound <type 3> = 34 
const AttrLowpc <type 3> = 17 
const AttrMacroInfo <type 3> = 67 
const AttrName <type 3> = 3 
const AttrNamelistItem <type 3> = 68 
const AttrOrdering <type 3> = 9 
const AttrPriority <type 3> = 69 
const AttrProducer <type 3> = 37 
const AttrPrototyped <type 3> = 39 
const AttrRanges <type 3> = 85 
const AttrReturnAddr <type 3> = 42 
const AttrSegment <type 3> = 70 
const AttrSibling <type 3> = 1 
const AttrSpecification <type 3> = 71 
const AttrStartScope <type 3> = 44 
const AttrStaticLink <type 3> = 72 
const AttrStmtList <type 3> = 16 
const AttrStride <type 3> = 81 
const AttrStrideSize <type 3> = 46 
const AttrStringLength <type 3> = 25 
const AttrTrampoline <type 3> = 86 
const AttrType <type 3> = 73 
const AttrUpperBound <type 3> = 47 
const AttrUseLocation <type 3> = 74 
const AttrUseUTF8 <type 3> = 83 
const AttrVarParam <type 3> = 75 
const AttrVirtuality <type 3> = 76 
const AttrVisibility <type 3> = 23 
const AttrVtableElemLoc <type 3> = 77 
const ClassAddress <type 7> = 1 
const ClassBlock <type 7> = 2 
const ClassConstant <type 7> = 3 
const ClassExprLoc <type 7> = 4 
const ClassFlag <type 7> = 5 
const ClassLinePtr <type 7> = 6 
const ClassLocListPtr <type 7> = 7 
const ClassMacPtr <type 7> = 8 
const ClassRangeListPtr <type 7> = 9 
const ClassReference <type 7> = 10 
const ClassReferenceAlt <type 7> = 13 
const ClassReferenceSig <type 7> = 11 
const ClassString <type 7> = 12 
const ClassStringAlt <type 7> = 14 
const ClassUnknown <type 7> = 0 
var ErrUnknownPC <type -19>
func New (abbrev <type 45>, aranges <type 45>, frame <type 45>, info <type 45>, line <type 45>, pubnames <type 45>, ranges <type 45>, str <type 45>) (? <type 66>, ? <type -19>)
const TagAccessDeclaration <type 30> = 35 
const TagArrayType <type 30> = 1 
const TagBaseType <type 30> = 36 
const TagCatchDwarfBlock <type 30> = 37 
const TagClassType <type 30> = 2 
const TagCommonDwarfBlock <type 30> = 26 
const TagCommonInclusion <type 30> = 27 
const TagCompileUnit <type 30> = 17 
const TagCondition <type 30> = 63 
const TagConstType <type 30> = 38 
const TagConstant <type 30> = 39 
const TagDwarfProcedure <type 30> = 54 
const TagEntryPoint <type 30> = 3 
const TagEnumerationType <type 30> = 4 
const TagEnumerator <type 30> = 40 
const TagFileType <type 30> = 41 
const TagFormalParameter <type 30> = 5 
const TagFriend <type 30> = 42 
const TagImportedDeclaration <type 30> = 8 
const TagImportedModule <type 30> = 58 
const TagImportedUnit <type 30> = 61 
const TagInheritance <type 30> = 28 
const TagInlinedSubroutine <type 30> = 29 
const TagInterfaceType <type 30> = 56 
const TagLabel <type 30> = 10 
const TagLexDwarfBlock <type 30> = 11 
const TagMember <type 30> = 13 
const TagModule <type 30> = 30 
const TagMutableType <type 30> = 62 
const TagNamelist <type 30> = 43 
const TagNamelistItem <type 30> = 44 
const TagNamespace <type 30> = 57 
const TagPackedType <type 30> = 45 
const TagPartialUnit <type 30> = 60 
const TagPointerType <type 30> = 15 
const TagPtrToMemberType <type 30> = 31 
const TagReferenceType <type 30> = 16 
const TagRestrictType <type 30> = 55 
const TagRvalueReferenceType <type 30> = 66 
const TagSetType <type 30> = 32 
const TagSharedType <type 30> = 64 
const TagStringType <type 30> = 18 
const TagStructType <type 30> = 19 
const TagSubprogram <type 30> = 46 
const TagSubrangeType <type 30> = 33 
const TagSubroutineType <type 30> = 21 
const TagTemplateAlias <type 30> = 67 
const TagTemplateTypeParameter <type 30> = 47 
const TagTemplateValueParameter <type 30> = 48 
const TagThrownType <type 30> = 49 
const TagTryDwarfBlock <type 30> = 50 
const TagTypeUnit <type 30> = 65 
const TagTypedef <type 30> = 22 
const TagUnionType <type 30> = 23 
const TagUnspecifiedParameters <type 30> = 24 
const TagUnspecifiedType <type 30> = 59 
const TagVariable <type 30> = 52 
const TagVariant <type 30> = 25 
const TagVariantPart <type 30> = 51 
const TagVolatileType <type 30> = 53 
const TagWithStmt <type 30> = 34 
checksum BAA805B2A5DE41CADE24A0BAF45DD9B85D203467
v3;
package elf
pkgpath debug/elf
import bytes bytes "bytes"
import zlib compress/zlib "compress/zlib"
import dwarf debug/dwarf "debug/dwarf"
import binary encoding/binary "encoding/binary"
import errors errors "errors"
import fmt fmt "fmt"
import io io "io"
import os os "os"
import strconv strconv "strconv"
import strings strings "strings"
init elf debug..z2felf..import bufio bufio..import bytes bytes..import flate compress..z2fflate..import zlib compress..z2fzlib..import dwarf debug..z2fdwarf..import binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import path path..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 1 2 1 8 1 11 1 15 1 16 1 18 1 21 2 8 2 11 2 15 2 16 2 18 2 21 3 1 3 2 3 7 3 8 3 9 3 10 3 11 3 12 3 14 3 15 3 16 3 17 3 18 3 19 3 20 3 21 4 1 4 2 4 3 4 6 4 7 4 8 4 9 4 10 4 11 4 12 4 14 4 15 4 16 4 17 4 18 4 19 4 20 4 21 5 6 5 7 5 8 5 9 5 10 5 11 5 12 5 13 5 14 5 15 5 16 5 17 5 18 5 19 5 20 5 21 6 8 6 11 6 14 6 15 6 16 6 17 6 18 6 21 7 8 7 9 7 10 7 11 7 12 7 14 7 15 7 16 7 17 7 18 7 19 7 20 7 21 9 8 9 11 9 15 9 16 9 18 9 19 9 20 11 8 11 15 11 16 11 18 12 8 12 9 12 10 12 11 12 15 12 16 12 18 12 19 12 20 13 8 13 11 13 15 13 16 13 18 13 21 14 8 14 15 14 16 14 17 14 18 14 21 15 8 15 16 17 8 17 15 17 16 18 8 18 15 18 16 19 8 19 15 19 16 19 18 20 8 20 15 20 16 20 18 20 19
types 178 55 26 26 108 118 107 25 25 110 109 2748 32 85 30 30 36 112 111 111 75 28 28 113 32 114 111 111 115 113 111 112 111 113 113 113 114 27 27 28 28 124 31 31 116 35 118 116 27 27 113 113 112 28 109 113 72 96 49 49 160 21 19 21 19 30 43 21 39 53 22 19 21 19 977 39 37 84 19 151 56 44 173 19 162 121 19 38 67 22 123 90 120 21 34 19 21 19 144 48 22 257 21 229 47 36 42 113 23 42 108 41 21 537 206 1036 21 229 48 255 46 162 21 803 48 154 44 270 21 43 73 21 644 23 23 23 23 24 428 36 36 21 44 123 22 20 183 99 20 274 26 274 77 34 91 73 21 369 98 36 51 32 74 32 95 154 154 154 51 51 69 69 150 188 188 212 119 119 124
type 1 "Chdr32" <type 55>
type 2 "Chdr64" <type 56>
type 3 "Class" <type -20>
 func (i <type 3>) String () <type -16>
 func (i <type 3>) GoString () <type -16>
type 4 "CompressionType" <type -11>
 func (i <type 4>) String () <type -16>
 func (i <type 4>) GoString () <type -16>
type 5 "Data" <type -20>
 func (i <type 5>) String () <type -16>
 func (i <type 5>) GoString () <type -16>
type 6 "Dyn32" <type 57>
type 7 "Dyn64" <type 58>
type 8 "DynFlag" <type -11>
 func (i <type 8>) String () <type -16>
 func (i <type 8>) GoString () <type -16>
type 9 "DynTag" <type -11>
 func (i <type 9>) String () <type -16>
 func (i <type 9>) GoString () <type -16>
type 10 "File" <type 59>
 func (f <esc:0x9> <type 70>) .debug/elf.stringTable (link <type -7>) (? <type 69>, ? <type -19>)
 func (f <esc:0x9> <type 70>) Close () <type -19>
 func (f <esc:0x32> <type 70>) SectionByType (typ <type 46>) <type 61>
 func (f <esc:0x9> <type 70>) .debug/elf.getSymbols (typ <type 46>) (? <type 71>, ? <type 69>, ? <type -19>)
 func (f <esc:0x9> <type 70>) .debug/elf.getSymbols32 (typ <type 46>) (? <type 71>, ? <type 69>, ? <type -19>)
 func (f <esc:0x9> <type 70>) .debug/elf.getSymbols64 (typ <type 46>) (? <type 71>, ? <type 69>, ? <type -19>)
 func (f <esc:0x32> <type 70>) Section (name <esc:0x1> <type -16>) <type 61>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocations (dst <type 69>, rels <type 69>) <type -19>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocationsAMD64 (dst <type 69>, rels <type 69>) <type -19>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocations386 (dst <type 69>, rels <type 69>) <type -19>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocationsARM (dst <type 69>, rels <type 69>) <type -19>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocationsARM64 (dst <type 69>, rels <type 69>) <type -19>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocationsPPC (dst <type 69>, rels <type 69>) <type -19>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocationsPPC64 (dst <type 69>, rels <type 69>) <type -19>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocationsMIPS (dst <type 69>, rels <type 69>) <type -19>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocationsMIPS64 (dst <type 69>, rels <type 69>) <type -19>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocationsRISCV64 (dst <type 69>, rels <type 69>) <type -19>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocationss390x (dst <type 69>, rels <type 69>) <type -19>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocationsSPARC (dst <type 69>, rels <type 69>) <type -19>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocationsSPARC64 (dst <type 69>, rels <type 69>) <type -19>
 func (f <esc:0x9> <type 70>) .debug/elf.applyRelocationsALPHA (dst <type 69>, rels <type 69>) <type -19>
 func (f <type 70>) DWARF () (? <type 72>, ? <type -19>)
 func (f <esc:0x9> <type 70>) Symbols () (? <type 71>, ? <type -19>)
 func (f <esc:0x9> <type 70>) DynamicSymbols () (? <type 71>, ? <type -19>)
 func (f <esc:0x9> <type 70>) ImportedSymbols () (? <type 143>, ? <type -19>)
 func (f <esc:0x9> <type 70>) .debug/elf.gnuVersionInit (str <esc:0x1> <type 69>)
 func (f <esc:0x9> <type 70>) .debug/elf.gnuVersion (i <type -11>, sym <esc:0x1> <type 144>)
 func (f <esc:0x9> <type 70>) ImportedLibraries () (? <type 133>, ? <type -19>)
 func (f <esc:0x9> <type 70>) DynString (tag <type 9>) (? <type 133>, ? <type -19>)
type 11 "FileHeader" <type 145>
type 12 "FormatError" <type 146>
 func (e <esc:0x2a> <type 147>) Error () <type -16>
type 13 "Header32" <type 148>
type 14 "Header64" <type 150>
type 15 "ImportedSymbol" <type 151>
type 16 "Machine" <type -6>
 func (i <type 16>) String () <type -16>
 func (i <type 16>) GoString () <type -16>
type 17 "NType" <type -11>
 func (i <type 17>) String () <type -16>
 func (i <type 17>) GoString () <type -16>
type 18 "OSABI" <type -20>
 func (i <type 18>) String () <type -16>
 func (i <type 18>) GoString () <type -16>
type 19 "Prog" <type 154>
 func (p <esc:0x9> <type 63>) Open () <type 158>
type 20 "Prog32" <type 164>
type 21 "Prog64" <type 165>
type 22 "ProgFlag" <type -7>
 func (i <type 22>) String () <type -16>
 func (i <type 22>) GoString () <type -16>
type 23 "ProgHeader" <type 166>
type 24 "ProgType" <type -11>
 func (i <type 24>) String () <type -16>
 func (i <type 24>) GoString () <type -16>
type 25 "R_386" <type -11>
 func (i <type 25>) String () <type -16>
 func (i <type 25>) GoString () <type -16>
type 26 "R_390" <type -11>
 func (i <type 26>) String () <type -16>
 func (i <type 26>) GoString () <type -16>
type 27 "R_AARCH64" <type -11>
 func (i <type 27>) String () <type -16>
 func (i <type 27>) GoString () <type -16>
type 28 "R_ALPHA" <type -11>
 func (i <type 28>) String () <type -16>
 func (i <type 28>) GoString () <type -16>
type 29 "R_ARM" <type -11>
 func (i <type 29>) String () <type -16>
 func (i <type 29>) GoString () <type -16>
type 30 "R_MIPS" <type -11>
 func (i <type 30>) String () <type -16>
 func (i <type 30>) GoString () <type -16>
type 31 "R_PPC" <type -11>
 func (i <type 31>) String () <type -16>
 func (i <type 31>) GoString () <type -16>
type 32 "R_PPC64" <type -11>
 func (i <type 32>) String () <type -16>
 func (i <type 32>) GoString () <type -16>
type 33 "R_RISCV" <type -11>
 func (i <type 33>) String () <type -16>
 func (i <type 33>) GoString () <type -16>
type 34 "R_SPARC" <type -11>
 func (i <type 34>) String () <type -16>
 func (i <type 34>) GoString () <type -16>
type 35 "R_X86_64" <type -11>
 func (i <type 35>) String () <type -16>
 func (i <type 35>) GoString () <type -16>
type 36 "Rel32" <type 167>
type 37 "Rel64" <type 168>
type 38 "Rela32" <type 169>
type 39 "Rela64" <type 170>
type 40 "Section" <type 171>
 func (s <type 61>) Data () (? <type 69>, ? <type -19>)
 func (s <type 61>) Open () <type 158>
type 41 "Section32" <type 172>
type 42 "Section64" <type 173>
type 43 "SectionFlag" <type -7>
 func (i <type 43>) String () <type -16>
 func (i <type 43>) GoString () <type -16>
type 44 "SectionHeader" <type 174>
type 45 "SectionIndex" <type -11>
 func (i <type 45>) String () <type -16>
 func (i <type 45>) GoString () <type -16>
type 46 "SectionType" <type -7>
 func (i <type 46>) String () <type -16>
 func (i <type 46>) GoString () <type -16>
type 47 "Sym32" <type 175>
type 48 "Sym64" <type 176>
type 49 "SymBind" <type -11>
 func (i <type 49>) String () <type -16>
 func (i <type 49>) GoString () <type -16>
type 50 "SymType" <type -11>
 func (i <type 50>) String () <type -16>
 func (i <type 50>) GoString () <type -16>
type 51 "SymVis" <type -11>
 func (i <type 51>) String () <type -16>
 func (i <type 51>) GoString () <type -16>
type 52 "Symbol" <type 177>
type 53 "Type" <type -6>
 func (i <type 53>) String () <type -16>
 func (i <type 53>) GoString () <type -16>
type 54 "Version" <type -20>
 func (i <type 54>) String () <type -16>
 func (i <type 54>) GoString () <type -16>
type 55 struct { Type <type -7>; Size <type -7>; Addralign <type -7>; }
type 56 struct { Type <type -7>; .debug/elf._ <type -7>; Size <type -8>; Addralign <type -8>; }
type 57 struct { Tag <type -3>; Val <type -7>; }
type 58 struct { Tag <type -4>; Val <type -8>; }
type 59 struct { ? <type 11>; Sections <type 60>; Progs <type 62>; .debug/elf.closer <type 64>; .debug/elf.gnuNeed <type 66>; .debug/elf.gnuVersym <type 69>; }
type 60 [] <type 61>
type 61 *<type 40>
type 62 [] <type 63>
type 63 *<type 19>
type 64 "io.Closer" <type 65>
type 65 interface { Close () <type -19>; }
type 66 [] <type 67>
type 67 ".debug/elf.verneed" <type 68>
type 68 struct { File <type -16>; Name <type -16>; }
type 69 [] <type -20>
type 70 *<type 10>
type 71 [] <type 52>
type 72 *<type 73>
type 73 "debug/dwarf.Data" <type 137>
 func (d <esc:0x1> <type 72>) .debug/dwarf.offsetToUnit (off <type 74>) <type -11>
 func (d <type 72>) .debug/dwarf.sigToType (sig <type -8>) (? <type 75>, ? <type -19>)
 func (d <type 72>) .debug/dwarf.parseTypes (name <type -16>, types <type 69>) <type -19>
 func (d <type 72>) .debug/dwarf.readType (name <type -16>, r <type 80>, off <type 74>, typeCache <type 93>, typedefs <type 94>) (? <type 75>, ? <type -19>)
 func (d <type 72>) AddTypes (name <type -16>, types <type 69>) <type -19>
 func (d <type 72>) .debug/dwarf.parseUnits () (? <type 99>, ? <type -19>)
 func (d <type 72>) Reader () <type 111>
 func (d <type 72>) Type (off <type 74>) (? <type 75>, ? <type -19>)
 func (d <type 72>) LineReader (cu <type 82>) (? <type 121>, ? <type -19>)
 func (d <type 72>) Ranges (e <esc:0x1> <type 82>) (? <type 135>, ? <type -19>)
 func (d <type 72>) .debug/dwarf.parseAbbrev (off <type -8>, vers <type -11>) (? <type 103>, ? <type -19>)
type 74 "debug/dwarf.Offset" <type -7>
type 75 "debug/dwarf.Type" <type 76>
type 76 interface { Common () <type 77>; Size () <type -4>; String () <type -16>; }
type 77 *<type 78>
type 78 "debug/dwarf.CommonType" <type 79>
 func (c <esc:0x1> <type 77>) Size () <type -4>
 func (c <esc:0x12> <type 77>) Common () ($ret51 <type 77>)
type 79 struct { ByteSize <type -4>; Name <type -16>; }
type 80 ".debug/dwarf.typeReader" <type 81>
type 81 interface { AddressSize () <type -11>; Next () (? <type 82>, ? <type -19>); Seek (? <type 74>); .debug/dwarf.clone () <type 80>; .debug/dwarf.offset () <type 74>; }
type 82 *<type 83>
type 83 "debug/dwarf.Entry" <type 90>
 func (e <esc:0x22> <type 82>) AttrField (a <type 84>) <type 85>
 func (e <esc:0x32> <type 82>) Val (a <type 84>) <type 88>
type 84 "debug/dwarf.Attr" <type -7>
 func (a <type 84>) GoString () <type -16>
 func (i <type 84>) String () <type -16>
type 85 *<type 86>
type 86 "debug/dwarf.Field" <type 87>
type 87 struct { Attr <type 84>; Val <type 88>; Class <type 89>; }
type 88 interface { }
type 89 "debug/dwarf.Class" <type -11>
 func (i <type 89>) GoString () <type -16>
 func (i <type 89>) String () <type -16>
type 90 struct { Offset <type 74>; Tag <type 91>; Children <type -15>; Field <type 92>; }
type 91 "debug/dwarf.Tag" <type -7>
 func (i <type 91>) String () <type -16>
 func (t <type 91>) GoString () <type -16>
type 92 [] <type 86>
type 93 map [<type 74>] <type 75>
type 94 *<type 95>
type 95 [] <type 96>
type 96 *<type 97>
type 97 "debug/dwarf.TypedefType" <type 98>
 func (t <esc:0x9> <type 96>) Size () <type -4>
 func (t <esc:0x22> <type 96>) String () <type -16>
type 98 struct { ? <type 78>; Type <type 75>; }
type 99 [] <type 100>
type 100 ".debug/dwarf.unit" <type 102>
 func (u <esc:0x1> <type 101>) .debug/dwarf.addrsize () <type -11>
 func (u <esc:0x1> <type 101>) .debug/dwarf.dwarf64 () (? <type -15>, ? <type -15>)
 func (u <esc:0x1> <type 101>) .debug/dwarf.version () <type -11>
type 101 *<type 100>
type 102 struct { .debug/dwarf.base <type 74>; .debug/dwarf.off <type 74>; .debug/dwarf.data <type 69>; .debug/dwarf.atable <type 103>; .debug/dwarf.asize <type -11>; .debug/dwarf.vers <type -11>; .debug/dwarf.is64 <type -15>; }
type 103 ".debug/dwarf.abbrevTable" <type 104>
type 104 map [<type -7>] <type 105>
type 105 ".debug/dwarf.abbrev" <type 106>
type 106 struct { .debug/dwarf.tag <type 91>; .debug/dwarf.children <type -15>; .debug/dwarf.field <type 107>; }
type 107 [] <type 108>
type 108 ".debug/dwarf.afield" <type 109>
type 109 struct { .debug/dwarf.attr <type 84>; .debug/dwarf.fmt <type 110>; .debug/dwarf.class <type 89>; }
type 110 ".debug/dwarf.format" <type -7>
type 111 *<type 112>
type 112 "debug/dwarf.Reader" <type 113>
 func (r <esc:0x10a> <type 111>) SeekPC (pc <type -8>) (? <type 82>, ? <type -19>)
 func (r <esc:0x1> <type 111>) .debug/dwarf.offset () <type 74>
 func (r <esc:0x9> <type 111>) SkipChildren ()
 func (r <esc:0x9> <type 111>) .debug/dwarf.clone () <type 80>
 func (r <esc:0x10a> <type 111>) Next () (? <type 82>, ? <type -19>)
 func (r <esc:0x9> <type 111>) .debug/dwarf.maybeNextUnit ()
 func (r <esc:0x9> <type 111>) Seek (off <type 74>)
 func (r <esc:0x1> <type 111>) AddressSize () <type -11>
type 113 struct { .debug/dwarf.b <type 114>; .debug/dwarf.d <type 72>; .debug/dwarf.err <type -19>; .debug/dwarf.unit <type -11>; .debug/dwarf.lastChildren <type -15>; .debug/dwarf.lastSibling <type 74>; }
type 114 ".debug/dwarf.buf" <type 116>
 func (b <esc:0x9> <type 115>) .debug/dwarf.uint8 () <type -5>
 func (b <esc:0x9> <type 115>) .debug/dwarf.entry (atab <esc:0x1> <type 103>, ubase <type 74>) <type 82>
 func (b <esc:0x9> <type 115>) .debug/dwarf.uint64 () <type -8>
 func (b <esc:0x1> <type 115>) .debug/dwarf.uint () <type -8>
 func (b <esc:0x9> <type 115>) .debug/dwarf.skip (n <type -11>)
 func (b <esc:0x9> <type 115>) .debug/dwarf.string () <type -16>
 func (b <esc:0x9> <type 115>) .debug/dwarf.error (s <type -16>)
 func (b <esc:0x2a> <type 115>) .debug/dwarf.bytes (n <type -11>) <type 69>
 func (b <esc:0x9> <type 115>) .debug/dwarf.uint16 () <type -6>
 func (b <esc:0x9> <type 115>) .debug/dwarf.uint32 () <type -7>
 func (b <esc:0x1> <type 115>) .debug/dwarf.varint () (c <type -8>, bits <type -12>)
 func (b <esc:0x1> <type 115>) .debug/dwarf.int () <type -4>
 func (b <esc:0x9> <type 115>) .debug/dwarf.addr () <type -8>
 func (b <esc:0x9> <type 115>) .debug/dwarf.unitLength () (length <type 74>, dwarf64 <type -15>)
type 115 *<type 114>
type 116 struct { .debug/dwarf.dwarf <type 72>; .debug/dwarf.order <type 117>; .debug/dwarf.format <type 119>; .debug/dwarf.name <type -16>; .debug/dwarf.off <type 74>; .debug/dwarf.data <type 69>; .debug/dwarf.err <type -19>; }
type 117 "encoding/binary.ByteOrder" <type 118>
type 118 interface { PutUint16 (? <type 69>, ? <type -6>); PutUint32 (? <type 69>, ? <type -7>); PutUint64 (? <type 69>, ? <type -8>); String () <type -16>; Uint16 (? <type 69>) <type -6>; Uint32 (? <type 69>) <type -7>; Uint64 (? <type 69>) <type -8>; }
type 119 ".debug/dwarf.dataFormat" <type 120>
type 120 interface { .debug/dwarf.addrsize () <type -11>; .debug/dwarf.dwarf64 () (dwarf64 <type -15>, isKnown <type -15>); .debug/dwarf.version () <type -11>; }
type 121 *<type 122>
type 122 "debug/dwarf.LineReader" <type 131>
 func (r <esc:0x9> <type 121>) .debug/dwarf.resetState ()
 func (r <esc:0x9> <type 121>) Reset ()
 func (r <esc:0x9> <type 121>) Seek (pos <type 123>)
 func (r <esc:0x1> <type 121>) .debug/dwarf.advancePC (opAdvance <type -11>)
 func (r <esc:0x9> <type 121>) .debug/dwarf.step (entry <esc:0x1> <type 130>) <type -15>
 func (r <esc:0x22> <type 121>) Tell () <type 123>
 func (r <esc:0x2a> <type 121>) Next (entry <esc:0x1> <type 130>) <type -19>
 func (r <esc:0x2a> <type 121>) SeekPC (pc <type -8>, entry <esc:0x1> <type 130>) <type -19>
 func (r <esc:0x9> <type 121>) .debug/dwarf.updateFile ()
 func (r <esc:0x10a> <type 121>) .debug/dwarf.readFileEntry () (? <type -15>, ? <type -19>)
 func (r <esc:0x2a> <type 121>) .debug/dwarf.readHeader () <type -19>
type 123 "debug/dwarf.LineReaderPos" <type 124>
type 124 struct { .debug/dwarf.off <type 74>; .debug/dwarf.numFileEntries <type -11>; .debug/dwarf.state <type 125>; .debug/dwarf.fileIndex <type -11>; }
type 125 "debug/dwarf.LineEntry" <type 126>
type 126 struct { Address <type -8>; OpIndex <type -11>; File <type 127>; Line <type -11>; Column <type -11>; IsStmt <type -15>; BasicBlock <type -15>; PrologueEnd <type -15>; EpilogueBegin <type -15>; ISA <type -11>; Discriminator <type -11>; EndSequence <type -15>; }
type 127 *<type 128>
type 128 "debug/dwarf.LineFile" <type 129>
type 129 struct { Name <type -16>; Mtime <type -8>; Length <type -11>; }
type 130 *<type 125>
type 131 struct { .debug/dwarf.buf <type 114>; .debug/dwarf.section <type 69>; .debug/dwarf.version <type -6>; .debug/dwarf.minInstructionLength <type -11>; .debug/dwarf.maxOpsPerInstruction <type -11>; .debug/dwarf.defaultIsStmt <type -15>; .debug/dwarf.lineBase <type -11>; .debug/dwarf.lineRange <type -11>; .debug/dwarf.opcodeBase <type -11>; .debug/dwarf.opcodeLengths <type 132>; .debug/dwarf.directories <type 133>; .debug/dwarf.fileEntries <type 134>; .debug/dwarf.programOffset <type 74>; .debug/dwarf.endOffset <type 74>; .debug/dwarf.initialFileEntries <type -11>; .debug/dwarf.state <type 125>; .debug/dwarf.fileIndex <type -11>; }
type 132 [] <type -11>
type 133 [] <type -16>
type 134 [] <type 127>
type 135 [] <type 136>
type 136 [2 ] <type -8>
type 137 struct { .debug/dwarf.abbrev <type 69>; .debug/dwarf.aranges <type 69>; .debug/dwarf.frame <type 69>; .debug/dwarf.info <type 69>; .debug/dwarf.line <type 69>; .debug/dwarf.pubnames <type 69>; .debug/dwarf.ranges <type 69>; .debug/dwarf.str <type 69>; .debug/dwarf.abbrevCache <type 138>; .debug/dwarf.order <type 117>; .debug/dwarf.typeCache <type 93>; .debug/dwarf.typeSigs <type 139>; .debug/dwarf.unit <type 99>; }
type 138 map [<type -8>] <type 103>
type 139 map [<type -8>] <type 140>
type 140 *<type 141>
type 141 ".debug/dwarf.typeUnit" <type 142>
type 142 struct { ? <type 100>; .debug/dwarf.toff <type 74>; .debug/dwarf.name <type -16>; .debug/dwarf.cache <type 75>; }
type 143 [] <type 15>
type 144 *<type 15>
type 145 struct { Class <type 3>; Data <type 5>; Version <type 54>; OSABI <type 18>; ABIVersion <type -5>; ByteOrder <type 117>; Type <type 53>; Machine <type 16>; Entry <type -8>; }
type 146 struct { .debug/elf.off <type -4>; .debug/elf.msg <type -16>; .debug/elf.val <type 88>; }
type 147 *<type 12>
type 148 struct { Ident <type 149>; Type <type -6>; Machine <type -6>; Version <type -7>; Entry <type -7>; Phoff <type -7>; Shoff <type -7>; Flags <type -7>; Ehsize <type -6>; Phentsize <type -6>; Phnum <type -6>; Shentsize <type -6>; Shnum <type -6>; Shstrndx <type -6>; }
type 149 [16 ] <type -20>
type 150 struct { Ident <type 149>; Type <type -6>; Machine <type -6>; Version <type -7>; Entry <type -8>; Phoff <type -8>; Shoff <type -8>; Flags <type -7>; Ehsize <type -6>; Phentsize <type -6>; Phnum <type -6>; Shentsize <type -6>; Shnum <type -6>; Shstrndx <type -6>; }
type 151 struct { Name <type -16>; Version <type -16>; Library <type -16>; }
type 152 "io.ReaderAt" <type 153>
type 153 interface { ReadAt (p <type 69>, off <type -4>) (n <type -11>, err <type -19>); }
type 154 struct { ? <type 23>; ? <type 152>; .debug/elf.sr <type 155>; }
type 155 *<type 156>
type 156 "io.SectionReader" <type 157>
 func (s <esc:0x1> <type 155>) Size () <type -4>
 func (s <esc:0x1> <type 155>) Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>)
 func (s <esc:0x9> <type 155>) ReadAt (p <type 69>, off <type -4>) (n <type -11>, err <type -19>)
 func (s <esc:0x9> <type 155>) Read (p <type 69>) (n <type -11>, err <type -19>)
type 157 struct { .io.r <type 152>; .io.base <type -4>; .io.off <type -4>; .io.limit <type -4>; }
type 158 "io.ReadSeeker" <type 159>
type 159 interface { ? <type 160>; ? <type 162>; }
type 160 "io.Reader" <type 161>
type 161 interface { Read (p <type 69>) (n <type -11>, err <type -19>); }
type 162 "io.Seeker" <type 163>
type 163 interface { Seek (offset <type -4>, whence <type -11>) (? <type -4>, ? <type -19>); }
type 164 struct { Type <type -7>; Off <type -7>; Vaddr <type -7>; Paddr <type -7>; Filesz <type -7>; Memsz <type -7>; Flags <type -7>; Align <type -7>; }
type 165 struct { Type <type -7>; Flags <type -7>; Off <type -8>; Vaddr <type -8>; Paddr <type -8>; Filesz <type -8>; Memsz <type -8>; Align <type -8>; }
type 166 struct { Type <type 24>; Flags <type 22>; Off <type -8>; Vaddr <type -8>; Paddr <type -8>; Filesz <type -8>; Memsz <type -8>; Align <type -8>; }
type 167 struct { Off <type -7>; Info <type -7>; }
type 168 struct { Off <type -8>; Info <type -8>; }
type 169 struct { Off <type -7>; Info <type -7>; Addend <type -3>; }
type 170 struct { Off <type -8>; Info <type -8>; Addend <type -4>; }
type 171 struct { ? <type 44>; ? <type 152>; .debug/elf.sr <type 155>; .debug/elf.compressionType <type 4>; .debug/elf.compressionOffset <type -4>; }
type 172 struct { Name <type -7>; Type <type -7>; Flags <type -7>; Addr <type -7>; Off <type -7>; Size <type -7>; Link <type -7>; Info <type -7>; Addralign <type -7>; Entsize <type -7>; }
type 173 struct { Name <type -7>; Type <type -7>; Flags <type -8>; Addr <type -8>; Off <type -8>; Size <type -8>; Link <type -7>; Info <type -7>; Addralign <type -8>; Entsize <type -8>; }
type 174 struct { Name <type -16>; Type <type 46>; Flags <type 43>; Addr <type -8>; Offset <type -8>; Size <type -8>; Link <type -7>; Info <type -7>; Addralign <type -8>; Entsize <type -8>; FileSize <type -8>; }
type 175 struct { Name <type -7>; Value <type -7>; Size <type -7>; Info <type -5>; Other <type -5>; Shndx <type -6>; }
type 176 struct { Name <type -7>; Info <type -5>; Other <type -5>; Shndx <type -6>; Value <type -8>; Size <type -8>; }
type 177 struct { Name <type -16>; Info <type -20>; Other <type -20>; Section <type 45>; Value <type -8>; Size <type -8>; }
const ARM_MAGIC_TRAMP_NUMBER = 1543503875 
const COMPRESS_HIOS <type 4> = 1879048191 
const COMPRESS_HIPROC <type 4> = 2147483647 
const COMPRESS_LOOS <type 4> = 1610612736 
const COMPRESS_LOPROC <type 4> = 1879048192 
const COMPRESS_ZLIB <type 4> = 1 
const DF_BIND_NOW <type 8> = 8 
const DF_ORIGIN <type 8> = 1 
const DF_STATIC_TLS <type 8> = 16 
const DF_SYMBOLIC <type 8> = 2 
const DF_TEXTREL <type 8> = 4 
const DT_BIND_NOW <type 9> = 24 
const DT_DEBUG <type 9> = 21 
const DT_ENCODING <type 9> = 32 
const DT_FINI <type 9> = 13 
const DT_FINI_ARRAY <type 9> = 26 
const DT_FINI_ARRAYSZ <type 9> = 28 
const DT_FLAGS <type 9> = 30 
const DT_HASH <type 9> = 4 
const DT_HIOS <type 9> = 1879044096 
const DT_HIPROC <type 9> = 2147483647 
const DT_INIT <type 9> = 12 
const DT_INIT_ARRAY <type 9> = 25 
const DT_INIT_ARRAYSZ <type 9> = 27 
const DT_JMPREL <type 9> = 23 
const DT_LOOS <type 9> = 1610612749 
const DT_LOPROC <type 9> = 1879048192 
const DT_NEEDED <type 9> = 1 
const DT_NULL <type 9> = 0 
const DT_PLTGOT <type 9> = 3 
const DT_PLTREL <type 9> = 20 
const DT_PLTRELSZ <type 9> = 2 
const DT_PREINIT_ARRAY <type 9> = 32 
const DT_PREINIT_ARRAYSZ <type 9> = 33 
const DT_REL <type 9> = 17 
const DT_RELA <type 9> = 7 
const DT_RELAENT <type 9> = 9 
const DT_RELASZ <type 9> = 8 
const DT_RELENT <type 9> = 19 
const DT_RELSZ <type 9> = 18 
const DT_RPATH <type 9> = 15 
const DT_RUNPATH <type 9> = 29 
const DT_SONAME <type 9> = 14 
const DT_STRSZ <type 9> = 10 
const DT_STRTAB <type 9> = 5 
const DT_SYMBOLIC <type 9> = 16 
const DT_SYMENT <type 9> = 11 
const DT_SYMTAB <type 9> = 6 
const DT_TEXTREL <type 9> = 22 
const DT_VERNEED <type 9> = 1879048190 
const DT_VERNEEDNUM <type 9> = 1879048191 
const DT_VERSYM <type 9> = 1879048176 
const EI_ABIVERSION = 8 
const EI_CLASS = 4 
const EI_DATA = 5 
const EI_NIDENT = 16 
const EI_OSABI = 7 
const EI_PAD = 9 
const EI_VERSION = 6 
const ELFCLASS32 <type 3> = 1 
const ELFCLASS64 <type 3> = 2 
const ELFCLASSNONE <type 3> = 0 
const ELFDATA2LSB <type 5> = 1 
const ELFDATA2MSB <type 5> = 2 
const ELFDATANONE <type 5> = 0 
const ELFMAG = "\x7FELF"
const ELFOSABI_86OPEN <type 18> = 5 
const ELFOSABI_AIX <type 18> = 7 
const ELFOSABI_ARM <type 18> = 97 
const ELFOSABI_AROS <type 18> = 15 
const ELFOSABI_CLOUDABI <type 18> = 17 
const ELFOSABI_FENIXOS <type 18> = 16 
const ELFOSABI_FREEBSD <type 18> = 9 
const ELFOSABI_HPUX <type 18> = 1 
const ELFOSABI_HURD <type 18> = 4 
const ELFOSABI_IRIX <type 18> = 8 
const ELFOSABI_LINUX <type 18> = 3 
const ELFOSABI_MODESTO <type 18> = 11 
const ELFOSABI_NETBSD <type 18> = 2 
const ELFOSABI_NONE <type 18> = 0 
const ELFOSABI_NSK <type 18> = 14 
const ELFOSABI_OPENBSD <type 18> = 12 
const ELFOSABI_OPENVMS <type 18> = 13 
const ELFOSABI_SOLARIS <type 18> = 6 
const ELFOSABI_STANDALONE <type 18> = 255 
const ELFOSABI_TRU64 <type 18> = 10 
const EM_386 <type 16> = 3 
const EM_486 <type 16> = 6 
const EM_56800EX <type 16> = 200 
const EM_68HC05 <type 16> = 72 
const EM_68HC08 <type 16> = 71 
const EM_68HC11 <type 16> = 70 
const EM_68HC12 <type 16> = 53 
const EM_68HC16 <type 16> = 69 
const EM_68K <type 16> = 4 
const EM_78KOR <type 16> = 199 
const EM_8051 <type 16> = 165 
const EM_860 <type 16> = 7 
const EM_88K <type 16> = 5 
const EM_960 <type 16> = 19 
const EM_AARCH64 <type 16> = 183 
const EM_ALPHA <type 16> = 36902 
const EM_ALPHA_STD <type 16> = 41 
const EM_ALTERA_NIOS2 <type 16> = 113 
const EM_AMDGPU <type 16> = 224 
const EM_ARC <type 16> = 45 
const EM_ARCA <type 16> = 109 
const EM_ARC_COMPACT <type 16> = 93 
const EM_ARC_COMPACT2 <type 16> = 195 
const EM_ARM <type 16> = 40 
const EM_AVR <type 16> = 83 
const EM_AVR32 <type 16> = 185 
const EM_BA1 <type 16> = 201 
const EM_BA2 <type 16> = 202 
const EM_BLACKFIN <type 16> = 106 
const EM_BPF <type 16> = 247 
const EM_C166 <type 16> = 116 
const EM_CDP <type 16> = 215 
const EM_CE <type 16> = 119 
const EM_CLOUDSHIELD <type 16> = 192 
const EM_COGE <type 16> = 216 
const EM_COLDFIRE <type 16> = 52 
const EM_COOL <type 16> = 217 
const EM_COREA_1ST <type 16> = 193 
const EM_COREA_2ND <type 16> = 194 
const EM_CR <type 16> = 103 
const EM_CR16 <type 16> = 177 
const EM_CRAYNV2 <type 16> = 172 
const EM_CRIS <type 16> = 76 
const EM_CRX <type 16> = 114 
const EM_CSR_KALIMBA <type 16> = 219 
const EM_CUDA <type 16> = 190 
const EM_CYPRESS_M8C <type 16> = 161 
const EM_D10V <type 16> = 85 
const EM_D30V <type 16> = 86 
const EM_DSP24 <type 16> = 136 
const EM_DSPIC30F <type 16> = 118 
const EM_DXP <type 16> = 112 
const EM_ECOG1 <type 16> = 168 
const EM_ECOG16 <type 16> = 176 
const EM_ECOG1X <type 16> = 168 
const EM_ECOG2 <type 16> = 134 
const EM_ETPU <type 16> = 178 
const EM_EXCESS <type 16> = 111 
const EM_F2MC16 <type 16> = 104 
const EM_FIREPATH <type 16> = 78 
const EM_FR20 <type 16> = 37 
const EM_FR30 <type 16> = 84 
const EM_FT32 <type 16> = 222 
const EM_FX66 <type 16> = 66 
const EM_H8S <type 16> = 48 
const EM_H8_300 <type 16> = 46 
const EM_H8_300H <type 16> = 47 
const EM_H8_500 <type 16> = 49 
const EM_HUANY <type 16> = 81 
const EM_IA_64 <type 16> = 50 
const EM_INTEL205 <type 16> = 205 
const EM_INTEL206 <type 16> = 206 
const EM_INTEL207 <type 16> = 207 
const EM_INTEL208 <type 16> = 208 
const EM_INTEL209 <type 16> = 209 
const EM_IP2K <type 16> = 101 
const EM_JAVELIN <type 16> = 77 
const EM_K10M <type 16> = 181 
const EM_KM32 <type 16> = 210 
const EM_KMX16 <type 16> = 212 
const EM_KMX32 <type 16> = 211 
const EM_KMX8 <type 16> = 213 
const EM_KVARC <type 16> = 214 
const EM_L10M <type 16> = 180 
const EM_LANAI <type 16> = 244 
const EM_LATTICEMICO32 <type 16> = 138 
const EM_M16C <type 16> = 117 
const EM_M32 <type 16> = 1 
const EM_M32C <type 16> = 120 
const EM_M32R <type 16> = 88 
const EM_MANIK <type 16> = 171 
const EM_MAX <type 16> = 102 
const EM_MAXQ30 <type 16> = 169 
const EM_MCHP_PIC <type 16> = 204 
const EM_MCST_ELBRUS <type 16> = 175 
const EM_ME16 <type 16> = 59 
const EM_METAG <type 16> = 174 
const EM_MICROBLAZE <type 16> = 189 
const EM_MIPS <type 16> = 8 
const EM_MIPS_RS3_LE <type 16> = 10 
const EM_MIPS_RS4_BE <type 16> = 10 
const EM_MIPS_X <type 16> = 51 
const EM_MMA <type 16> = 54 
const EM_MMDSP_PLUS <type 16> = 160 
const EM_MMIX <type 16> = 80 
const EM_MN10200 <type 16> = 90 
const EM_MN10300 <type 16> = 89 
const EM_MOXIE <type 16> = 223 
const EM_MSP430 <type 16> = 105 
const EM_NCPU <type 16> = 56 
const EM_NDR1 <type 16> = 57 
const EM_NDS32 <type 16> = 167 
const EM_NONE <type 16> = 0 
const EM_NORC <type 16> = 218 
const EM_NS32K <type 16> = 97 
const EM_OPEN8 <type 16> = 196 
const EM_OPENRISC <type 16> = 92 
const EM_PARISC <type 16> = 15 
const EM_PCP <type 16> = 55 
const EM_PDP10 <type 16> = 64 
const EM_PDP11 <type 16> = 65 
const EM_PDSP <type 16> = 63 
const EM_PJ <type 16> = 91 
const EM_PPC <type 16> = 20 
const EM_PPC64 <type 16> = 21 
const EM_PRISM <type 16> = 82 
const EM_QDSP6 <type 16> = 164 
const EM_R32C <type 16> = 162 
const EM_RCE <type 16> = 39 
const EM_RH32 <type 16> = 38 
const EM_RISCV <type 16> = 243 
const EM_RL78 <type 16> = 197 
const EM_RS08 <type 16> = 132 
const EM_RX <type 16> = 173 
const EM_S370 <type 16> = 9 
const EM_S390 <type 16> = 22 
const EM_SCORE7 <type 16> = 135 
const EM_SEP <type 16> = 108 
const EM_SE_C17 <type 16> = 139 
const EM_SE_C33 <type 16> = 107 
const EM_SH <type 16> = 42 
const EM_SHARC <type 16> = 133 
const EM_SLE9X <type 16> = 179 
const EM_SNP1K <type 16> = 99 
const EM_SPARC <type 16> = 2 
const EM_SPARC32PLUS <type 16> = 18 
const EM_SPARCV9 <type 16> = 43 
const EM_ST100 <type 16> = 60 
const EM_ST19 <type 16> = 74 
const EM_ST200 <type 16> = 100 
const EM_ST7 <type 16> = 68 
const EM_ST9PLUS <type 16> = 67 
const EM_STARCORE <type 16> = 58 
const EM_STM8 <type 16> = 186 
const EM_STXP7X <type 16> = 166 
const EM_SVX <type 16> = 73 
const EM_TILE64 <type 16> = 187 
const EM_TILEGX <type 16> = 191 
const EM_TILEPRO <type 16> = 188 
const EM_TINYJ <type 16> = 61 
const EM_TI_ARP32 <type 16> = 143 
const EM_TI_C2000 <type 16> = 141 
const EM_TI_C5500 <type 16> = 142 
const EM_TI_C6000 <type 16> = 140 
const EM_TI_PRU <type 16> = 144 
const EM_TMM_GPP <type 16> = 96 
const EM_TPC <type 16> = 98 
const EM_TRICORE <type 16> = 44 
const EM_TRIMEDIA <type 16> = 163 
const EM_TSK3000 <type 16> = 131 
const EM_UNICORE <type 16> = 110 
const EM_V800 <type 16> = 36 
const EM_V850 <type 16> = 87 
const EM_VAX <type 16> = 75 
const EM_VIDEOCORE <type 16> = 95 
const EM_VIDEOCORE3 <type 16> = 137 
const EM_VIDEOCORE5 <type 16> = 198 
const EM_VISIUM <type 16> = 221 
const EM_VPP500 <type 16> = 17 
const EM_X86_64 <type 16> = 62 
const EM_XCORE <type 16> = 203 
const EM_XGATE <type 16> = 115 
const EM_XIMO16 <type 16> = 170 
const EM_XTENSA <type 16> = 94 
const EM_Z80 <type 16> = 220 
const EM_ZSP <type 16> = 79 
const ET_CORE <type 53> = 4 
const ET_DYN <type 53> = 3 
const ET_EXEC <type 53> = 2 
const ET_HIOS <type 53> = 65279 
const ET_HIPROC <type 53> = 65535 
const ET_LOOS <type 53> = 65024 
const ET_LOPROC <type 53> = 65280 
const ET_NONE <type 53> = 0 
const ET_REL <type 53> = 1 
const EV_CURRENT <type 54> = 1 
const EV_NONE <type 54> = 0 
var ErrNoSymbols <type -19>
const NT_FPREGSET <type 17> = 2 
const NT_PRPSINFO <type 17> = 3 
const NT_PRSTATUS <type 17> = 1 
func NewFile (r <type 152>) (? <type 70>, ? <type -19>)
func Open (name <type -16>) (? <type 70>, ? <type -19>)
const PF_MASKOS <type 22> = 267386880 
const PF_MASKPROC <type 22> = 4026531840 
const PF_R <type 22> = 4 
const PF_W <type 22> = 2 
const PF_X <type 22> = 1 
const PT_DYNAMIC <type 24> = 2 
const PT_HIOS <type 24> = 1879048191 
const PT_HIPROC <type 24> = 2147483647 
const PT_INTERP <type 24> = 3 
const PT_LOAD <type 24> = 1 
const PT_LOOS <type 24> = 1610612736 
const PT_LOPROC <type 24> = 1879048192 
const PT_NOTE <type 24> = 4 
const PT_NULL <type 24> = 0 
const PT_PHDR <type 24> = 6 
const PT_SHLIB <type 24> = 5 
const PT_TLS <type 24> = 7 
const R_386_16 <type 25> = 20 
const R_386_32 <type 25> = 1 
const R_386_32PLT <type 25> = 11 
const R_386_8 <type 25> = 22 
const R_386_COPY <type 25> = 5 
const R_386_GLOB_DAT <type 25> = 6 
const R_386_GOT32 <type 25> = 3 
const R_386_GOT32X <type 25> = 43 
const R_386_GOTOFF <type 25> = 9 
const R_386_GOTPC <type 25> = 10 
const R_386_IRELATIVE <type 25> = 42 
const R_386_JMP_SLOT <type 25> = 7 
const R_386_NONE <type 25> = 0 
const R_386_PC16 <type 25> = 21 
const R_386_PC32 <type 25> = 2 
const R_386_PC8 <type 25> = 23 
const R_386_PLT32 <type 25> = 4 
const R_386_RELATIVE <type 25> = 8 
const R_386_SIZE32 <type 25> = 38 
const R_386_TLS_DESC <type 25> = 41 
const R_386_TLS_DESC_CALL <type 25> = 40 
const R_386_TLS_DTPMOD32 <type 25> = 35 
const R_386_TLS_DTPOFF32 <type 25> = 36 
const R_386_TLS_GD <type 25> = 18 
const R_386_TLS_GD_32 <type 25> = 24 
const R_386_TLS_GD_CALL <type 25> = 26 
const R_386_TLS_GD_POP <type 25> = 27 
const R_386_TLS_GD_PUSH <type 25> = 25 
const R_386_TLS_GOTDESC <type 25> = 39 
const R_386_TLS_GOTIE <type 25> = 16 
const R_386_TLS_IE <type 25> = 15 
const R_386_TLS_IE_32 <type 25> = 33 
const R_386_TLS_LDM <type 25> = 19 
const R_386_TLS_LDM_32 <type 25> = 28 
const R_386_TLS_LDM_CALL <type 25> = 30 
const R_386_TLS_LDM_POP <type 25> = 31 
const R_386_TLS_LDM_PUSH <type 25> = 29 
const R_386_TLS_LDO_32 <type 25> = 32 
const R_386_TLS_LE <type 25> = 17 
const R_386_TLS_LE_32 <type 25> = 34 
const R_386_TLS_TPOFF <type 25> = 14 
const R_386_TLS_TPOFF32 <type 25> = 37 
const R_390_12 <type 26> = 2 
const R_390_16 <type 26> = 3 
const R_390_20 <type 26> = 57 
const R_390_32 <type 26> = 4 
const R_390_64 <type 26> = 22 
const R_390_8 <type 26> = 1 
const R_390_COPY <type 26> = 9 
const R_390_GLOB_DAT <type 26> = 10 
const R_390_GOT12 <type 26> = 6 
const R_390_GOT16 <type 26> = 15 
const R_390_GOT20 <type 26> = 58 
const R_390_GOT32 <type 26> = 7 
const R_390_GOT64 <type 26> = 24 
const R_390_GOTENT <type 26> = 26 
const R_390_GOTOFF <type 26> = 13 
const R_390_GOTOFF16 <type 26> = 27 
const R_390_GOTOFF64 <type 26> = 28 
const R_390_GOTPC <type 26> = 14 
const R_390_GOTPCDBL <type 26> = 21 
const R_390_GOTPLT12 <type 26> = 29 
const R_390_GOTPLT16 <type 26> = 30 
const R_390_GOTPLT20 <type 26> = 59 
const R_390_GOTPLT32 <type 26> = 31 
const R_390_GOTPLT64 <type 26> = 32 
const R_390_GOTPLTENT <type 26> = 33 
const R_390_GOTPLTOFF16 <type 26> = 34 
const R_390_GOTPLTOFF32 <type 26> = 35 
const R_390_GOTPLTOFF64 <type 26> = 36 
const R_390_JMP_SLOT <type 26> = 11 
const R_390_NONE <type 26> = 0 
const R_390_PC16 <type 26> = 16 
const R_390_PC16DBL <type 26> = 17 
const R_390_PC32 <type 26> = 5 
const R_390_PC32DBL <type 26> = 19 
const R_390_PC64 <type 26> = 23 
const R_390_PLT16DBL <type 26> = 18 
const R_390_PLT32 <type 26> = 8 
const R_390_PLT32DBL <type 26> = 20 
const R_390_PLT64 <type 26> = 25 
const R_390_RELATIVE <type 26> = 12 
const R_390_TLS_DTPMOD <type 26> = 54 
const R_390_TLS_DTPOFF <type 26> = 55 
const R_390_TLS_GD32 <type 26> = 40 
const R_390_TLS_GD64 <type 26> = 41 
const R_390_TLS_GDCALL <type 26> = 38 
const R_390_TLS_GOTIE12 <type 26> = 42 
const R_390_TLS_GOTIE20 <type 26> = 60 
const R_390_TLS_GOTIE32 <type 26> = 43 
const R_390_TLS_GOTIE64 <type 26> = 44 
const R_390_TLS_IE32 <type 26> = 47 
const R_390_TLS_IE64 <type 26> = 48 
const R_390_TLS_IEENT <type 26> = 49 
const R_390_TLS_LDCALL <type 26> = 39 
const R_390_TLS_LDM32 <type 26> = 45 
const R_390_TLS_LDM64 <type 26> = 46 
const R_390_TLS_LDO32 <type 26> = 52 
const R_390_TLS_LDO64 <type 26> = 53 
const R_390_TLS_LE32 <type 26> = 50 
const R_390_TLS_LE64 <type 26> = 51 
const R_390_TLS_LOAD <type 26> = 37 
const R_390_TLS_TPOFF <type 26> = 56 
const R_AARCH64_ABS16 <type 27> = 259 
const R_AARCH64_ABS32 <type 27> = 258 
const R_AARCH64_ABS64 <type 27> = 257 
const R_AARCH64_ADD_ABS_LO12_NC <type 27> = 277 
const R_AARCH64_ADR_GOT_PAGE <type 27> = 311 
const R_AARCH64_ADR_PREL_LO21 <type 27> = 274 
const R_AARCH64_ADR_PREL_PG_HI21 <type 27> = 275 
const R_AARCH64_ADR_PREL_PG_HI21_NC <type 27> = 276 
const R_AARCH64_CALL26 <type 27> = 283 
const R_AARCH64_CONDBR19 <type 27> = 280 
const R_AARCH64_COPY <type 27> = 1024 
const R_AARCH64_GLOB_DAT <type 27> = 1025 
const R_AARCH64_GOT_LD_PREL19 <type 27> = 309 
const R_AARCH64_IRELATIVE <type 27> = 1032 
const R_AARCH64_JUMP26 <type 27> = 282 
const R_AARCH64_JUMP_SLOT <type 27> = 1026 
const R_AARCH64_LD64_GOTOFF_LO15 <type 27> = 310 
const R_AARCH64_LD64_GOTPAGE_LO15 <type 27> = 313 
const R_AARCH64_LD64_GOT_LO12_NC <type 27> = 312 
const R_AARCH64_LDST128_ABS_LO12_NC <type 27> = 299 
const R_AARCH64_LDST16_ABS_LO12_NC <type 27> = 284 
const R_AARCH64_LDST32_ABS_LO12_NC <type 27> = 285 
const R_AARCH64_LDST64_ABS_LO12_NC <type 27> = 286 
const R_AARCH64_LDST8_ABS_LO12_NC <type 27> = 278 
const R_AARCH64_LD_PREL_LO19 <type 27> = 273 
const R_AARCH64_MOVW_SABS_G0 <type 27> = 270 
const R_AARCH64_MOVW_SABS_G1 <type 27> = 271 
const R_AARCH64_MOVW_SABS_G2 <type 27> = 272 
const R_AARCH64_MOVW_UABS_G0 <type 27> = 263 
const R_AARCH64_MOVW_UABS_G0_NC <type 27> = 264 
const R_AARCH64_MOVW_UABS_G1 <type 27> = 265 
const R_AARCH64_MOVW_UABS_G1_NC <type 27> = 266 
const R_AARCH64_MOVW_UABS_G2 <type 27> = 267 
const R_AARCH64_MOVW_UABS_G2_NC <type 27> = 268 
const R_AARCH64_MOVW_UABS_G3 <type 27> = 269 
const R_AARCH64_NONE <type 27> = 0 
const R_AARCH64_NULL <type 27> = 256 
const R_AARCH64_P32_ABS16 <type 27> = 2 
const R_AARCH64_P32_ABS32 <type 27> = 1 
const R_AARCH64_P32_ADD_ABS_LO12_NC <type 27> = 12 
const R_AARCH64_P32_ADR_GOT_PAGE <type 27> = 26 
const R_AARCH64_P32_ADR_PREL_LO21 <type 27> = 10 
const R_AARCH64_P32_ADR_PREL_PG_HI21 <type 27> = 11 
const R_AARCH64_P32_CALL26 <type 27> = 21 
const R_AARCH64_P32_CONDBR19 <type 27> = 19 
const R_AARCH64_P32_COPY <type 27> = 180 
const R_AARCH64_P32_GLOB_DAT <type 27> = 181 
const R_AARCH64_P32_GOT_LD_PREL19 <type 27> = 25 
const R_AARCH64_P32_IRELATIVE <type 27> = 188 
const R_AARCH64_P32_JUMP26 <type 27> = 20 
const R_AARCH64_P32_JUMP_SLOT <type 27> = 182 
const R_AARCH64_P32_LD32_GOT_LO12_NC <type 27> = 27 
const R_AARCH64_P32_LDST128_ABS_LO12_NC <type 27> = 17 
const R_AARCH64_P32_LDST16_ABS_LO12_NC <type 27> = 14 
const R_AARCH64_P32_LDST32_ABS_LO12_NC <type 27> = 15 
const R_AARCH64_P32_LDST64_ABS_LO12_NC <type 27> = 16 
const R_AARCH64_P32_LDST8_ABS_LO12_NC <type 27> = 13 
const R_AARCH64_P32_LD_PREL_LO19 <type 27> = 9 
const R_AARCH64_P32_MOVW_SABS_G0 <type 27> = 8 
const R_AARCH64_P32_MOVW_UABS_G0 <type 27> = 5 
const R_AARCH64_P32_MOVW_UABS_G0_NC <type 27> = 6 
const R_AARCH64_P32_MOVW_UABS_G1 <type 27> = 7 
const R_AARCH64_P32_PREL16 <type 27> = 4 
const R_AARCH64_P32_PREL32 <type 27> = 3 
const R_AARCH64_P32_RELATIVE <type 27> = 183 
const R_AARCH64_P32_TLSDESC <type 27> = 187 
const R_AARCH64_P32_TLSDESC_ADD_LO12_NC <type 27> = 126 
const R_AARCH64_P32_TLSDESC_ADR_PAGE21 <type 27> = 124 
const R_AARCH64_P32_TLSDESC_ADR_PREL21 <type 27> = 123 
const R_AARCH64_P32_TLSDESC_CALL <type 27> = 127 
const R_AARCH64_P32_TLSDESC_LD32_LO12_NC <type 27> = 125 
const R_AARCH64_P32_TLSDESC_LD_PREL19 <type 27> = 122 
const R_AARCH64_P32_TLSGD_ADD_LO12_NC <type 27> = 82 
const R_AARCH64_P32_TLSGD_ADR_PAGE21 <type 27> = 81 
const R_AARCH64_P32_TLSIE_ADR_GOTTPREL_PAGE21 <type 27> = 103 
const R_AARCH64_P32_TLSIE_LD32_GOTTPREL_LO12_NC <type 27> = 104 
const R_AARCH64_P32_TLSIE_LD_GOTTPREL_PREL19 <type 27> = 105 
const R_AARCH64_P32_TLSLE_ADD_TPREL_HI12 <type 27> = 109 
const R_AARCH64_P32_TLSLE_ADD_TPREL_LO12 <type 27> = 110 
const R_AARCH64_P32_TLSLE_ADD_TPREL_LO12_NC <type 27> = 111 
const R_AARCH64_P32_TLSLE_MOVW_TPREL_G0 <type 27> = 107 
const R_AARCH64_P32_TLSLE_MOVW_TPREL_G0_NC <type 27> = 108 
const R_AARCH64_P32_TLSLE_MOVW_TPREL_G1 <type 27> = 106 
const R_AARCH64_P32_TLS_DTPMOD <type 27> = 184 
const R_AARCH64_P32_TLS_DTPREL <type 27> = 185 
const R_AARCH64_P32_TLS_TPREL <type 27> = 186 
const R_AARCH64_P32_TSTBR14 <type 27> = 18 
const R_AARCH64_PREL16 <type 27> = 262 
const R_AARCH64_PREL32 <type 27> = 261 
const R_AARCH64_PREL64 <type 27> = 260 
const R_AARCH64_RELATIVE <type 27> = 1027 
const R_AARCH64_TLSDESC <type 27> = 1031 
const R_AARCH64_TLSDESC_ADD <type 27> = 568 
const R_AARCH64_TLSDESC_ADD_LO12_NC <type 27> = 564 
const R_AARCH64_TLSDESC_ADR_PAGE21 <type 27> = 562 
const R_AARCH64_TLSDESC_ADR_PREL21 <type 27> = 561 
const R_AARCH64_TLSDESC_CALL <type 27> = 569 
const R_AARCH64_TLSDESC_LD64_LO12_NC <type 27> = 563 
const R_AARCH64_TLSDESC_LDR <type 27> = 567 
const R_AARCH64_TLSDESC_LD_PREL19 <type 27> = 560 
const R_AARCH64_TLSDESC_OFF_G0_NC <type 27> = 566 
const R_AARCH64_TLSDESC_OFF_G1 <type 27> = 565 
const R_AARCH64_TLSGD_ADD_LO12_NC <type 27> = 514 
const R_AARCH64_TLSGD_ADR_PAGE21 <type 27> = 513 
const R_AARCH64_TLSGD_ADR_PREL21 <type 27> = 512 
const R_AARCH64_TLSGD_MOVW_G0_NC <type 27> = 516 
const R_AARCH64_TLSGD_MOVW_G1 <type 27> = 515 
const R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21 <type 27> = 541 
const R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC <type 27> = 542 
const R_AARCH64_TLSIE_LD_GOTTPREL_PREL19 <type 27> = 543 
const R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC <type 27> = 540 
const R_AARCH64_TLSIE_MOVW_GOTTPREL_G1 <type 27> = 539 
const R_AARCH64_TLSLD_ADR_PAGE21 <type 27> = 518 
const R_AARCH64_TLSLD_ADR_PREL21 <type 27> = 517 
const R_AARCH64_TLSLD_LDST128_DTPREL_LO12 <type 27> = 572 
const R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC <type 27> = 573 
const R_AARCH64_TLSLE_ADD_TPREL_HI12 <type 27> = 549 
const R_AARCH64_TLSLE_ADD_TPREL_LO12 <type 27> = 550 
const R_AARCH64_TLSLE_ADD_TPREL_LO12_NC <type 27> = 551 
const R_AARCH64_TLSLE_LDST128_TPREL_LO12 <type 27> = 570 
const R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC <type 27> = 571 
const R_AARCH64_TLSLE_MOVW_TPREL_G0 <type 27> = 547 
const R_AARCH64_TLSLE_MOVW_TPREL_G0_NC <type 27> = 548 
const R_AARCH64_TLSLE_MOVW_TPREL_G1 <type 27> = 545 
const R_AARCH64_TLSLE_MOVW_TPREL_G1_NC <type 27> = 546 
const R_AARCH64_TLSLE_MOVW_TPREL_G2 <type 27> = 544 
const R_AARCH64_TLS_DTPMOD64 <type 27> = 1028 
const R_AARCH64_TLS_DTPREL64 <type 27> = 1029 
const R_AARCH64_TLS_TPREL64 <type 27> = 1030 
const R_AARCH64_TSTBR14 <type 27> = 279 
const R_ALPHA_BRADDR <type 28> = 7 
const R_ALPHA_COPY <type 28> = 24 
const R_ALPHA_GLOB_DAT <type 28> = 25 
const R_ALPHA_GPDISP <type 28> = 6 
const R_ALPHA_GPREL32 <type 28> = 3 
const R_ALPHA_GPRELHIGH <type 28> = 17 
const R_ALPHA_GPRELLOW <type 28> = 18 
const R_ALPHA_GPVALUE <type 28> = 16 
const R_ALPHA_HINT <type 28> = 8 
const R_ALPHA_IMMED_BR_HI32 <type 28> = 22 
const R_ALPHA_IMMED_GP_16 <type 28> = 19 
const R_ALPHA_IMMED_GP_HI32 <type 28> = 20 
const R_ALPHA_IMMED_LO32 <type 28> = 23 
const R_ALPHA_IMMED_SCN_HI32 <type 28> = 21 
const R_ALPHA_JMP_SLOT <type 28> = 26 
const R_ALPHA_LITERAL <type 28> = 4 
const R_ALPHA_LITUSE <type 28> = 5 
const R_ALPHA_NONE <type 28> = 0 
const R_ALPHA_OP_PRSHIFT <type 28> = 15 
const R_ALPHA_OP_PSUB <type 28> = 14 
const R_ALPHA_OP_PUSH <type 28> = 12 
const R_ALPHA_OP_STORE <type 28> = 13 
const R_ALPHA_REFLONG <type 28> = 1 
const R_ALPHA_REFQUAD <type 28> = 2 
const R_ALPHA_RELATIVE <type 28> = 27 
const R_ALPHA_SREL16 <type 28> = 9 
const R_ALPHA_SREL32 <type 28> = 10 
const R_ALPHA_SREL64 <type 28> = 11 
const R_ARM_ABS12 <type 29> = 6 
const R_ARM_ABS16 <type 29> = 5 
const R_ARM_ABS32 <type 29> = 2 
const R_ARM_ABS32_NOI <type 29> = 55 
const R_ARM_ABS8 <type 29> = 8 
const R_ARM_ALU_PCREL_15_8 <type 29> = 33 
const R_ARM_ALU_PCREL_23_15 <type 29> = 34 
const R_ARM_ALU_PCREL_7_0 <type 29> = 32 
const R_ARM_ALU_PC_G0 <type 29> = 58 
const R_ARM_ALU_PC_G0_NC <type 29> = 57 
const R_ARM_ALU_PC_G1 <type 29> = 60 
const R_ARM_ALU_PC_G1_NC <type 29> = 59 
const R_ARM_ALU_PC_G2 <type 29> = 61 
const R_ARM_ALU_SBREL_19_12_NC <type 29> = 36 
const R_ARM_ALU_SBREL_27_20_CK <type 29> = 37 
const R_ARM_ALU_SB_G0 <type 29> = 71 
const R_ARM_ALU_SB_G0_NC <type 29> = 70 
const R_ARM_ALU_SB_G1 <type 29> = 73 
const R_ARM_ALU_SB_G1_NC <type 29> = 72 
const R_ARM_ALU_SB_G2 <type 29> = 74 
const R_ARM_AMP_VCALL9 <type 29> = 12 
const R_ARM_BASE_ABS <type 29> = 31 
const R_ARM_CALL <type 29> = 28 
const R_ARM_COPY <type 29> = 20 
const R_ARM_GLOB_DAT <type 29> = 21 
const R_ARM_GNU_VTENTRY <type 29> = 100 
const R_ARM_GNU_VTINHERIT <type 29> = 101 
const R_ARM_GOT32 <type 29> = 26 
const R_ARM_GOTOFF <type 29> = 24 
const R_ARM_GOTOFF12 <type 29> = 98 
const R_ARM_GOTPC <type 29> = 25 
const R_ARM_GOTRELAX <type 29> = 99 
const R_ARM_GOT_ABS <type 29> = 95 
const R_ARM_GOT_BREL12 <type 29> = 97 
const R_ARM_GOT_PREL <type 29> = 96 
const R_ARM_IRELATIVE <type 29> = 160 
const R_ARM_JUMP24 <type 29> = 29 
const R_ARM_JUMP_SLOT <type 29> = 22 
const R_ARM_LDC_PC_G0 <type 29> = 67 
const R_ARM_LDC_PC_G1 <type 29> = 68 
const R_ARM_LDC_PC_G2 <type 29> = 69 
const R_ARM_LDC_SB_G0 <type 29> = 81 
const R_ARM_LDC_SB_G1 <type 29> = 82 
const R_ARM_LDC_SB_G2 <type 29> = 83 
const R_ARM_LDRS_PC_G0 <type 29> = 64 
const R_ARM_LDRS_PC_G1 <type 29> = 65 
const R_ARM_LDRS_PC_G2 <type 29> = 66 
const R_ARM_LDRS_SB_G0 <type 29> = 78 
const R_ARM_LDRS_SB_G1 <type 29> = 79 
const R_ARM_LDRS_SB_G2 <type 29> = 80 
const R_ARM_LDR_PC_G1 <type 29> = 62 
const R_ARM_LDR_PC_G2 <type 29> = 63 
const R_ARM_LDR_SBREL_11_10_NC <type 29> = 35 
const R_ARM_LDR_SB_G0 <type 29> = 75 
const R_ARM_LDR_SB_G1 <type 29> = 76 
const R_ARM_LDR_SB_G2 <type 29> = 77 
const R_ARM_ME_TOO <type 29> = 128 
const R_ARM_MOVT_ABS <type 29> = 44 
const R_ARM_MOVT_BREL <type 29> = 85 
const R_ARM_MOVT_PREL <type 29> = 46 
const R_ARM_MOVW_ABS_NC <type 29> = 43 
const R_ARM_MOVW_BREL <type 29> = 86 
const R_ARM_MOVW_BREL_NC <type 29> = 84 
const R_ARM_MOVW_PREL_NC <type 29> = 45 
const R_ARM_NONE <type 29> = 0 
const R_ARM_PC13 <type 29> = 4 
const R_ARM_PC24 <type 29> = 1 
const R_ARM_PLT32 <type 29> = 27 
const R_ARM_PLT32_ABS <type 29> = 94 
const R_ARM_PREL31 <type 29> = 42 
const R_ARM_PRIVATE_0 <type 29> = 112 
const R_ARM_PRIVATE_1 <type 29> = 113 
const R_ARM_PRIVATE_10 <type 29> = 122 
const R_ARM_PRIVATE_11 <type 29> = 123 
const R_ARM_PRIVATE_12 <type 29> = 124 
const R_ARM_PRIVATE_13 <type 29> = 125 
const R_ARM_PRIVATE_14 <type 29> = 126 
const R_ARM_PRIVATE_15 <type 29> = 127 
const R_ARM_PRIVATE_2 <type 29> = 114 
const R_ARM_PRIVATE_3 <type 29> = 115 
const R_ARM_PRIVATE_4 <type 29> = 116 
const R_ARM_PRIVATE_5 <type 29> = 117 
const R_ARM_PRIVATE_6 <type 29> = 118 
const R_ARM_PRIVATE_7 <type 29> = 119 
const R_ARM_PRIVATE_8 <type 29> = 120 
const R_ARM_PRIVATE_9 <type 29> = 121 
const R_ARM_RABS32 <type 29> = 253 
const R_ARM_RBASE <type 29> = 255 
const R_ARM_REL32 <type 29> = 3 
const R_ARM_REL32_NOI <type 29> = 56 
const R_ARM_RELATIVE <type 29> = 23 
const R_ARM_RPC24 <type 29> = 254 
const R_ARM_RREL32 <type 29> = 252 
const R_ARM_RSBREL32 <type 29> = 250 
const R_ARM_RXPC25 <type 29> = 249 
const R_ARM_SBREL31 <type 29> = 39 
const R_ARM_SBREL32 <type 29> = 9 
const R_ARM_SWI24 <type 29> = 13 
const R_ARM_TARGET1 <type 29> = 38 
const R_ARM_TARGET2 <type 29> = 41 
const R_ARM_THM_ABS5 <type 29> = 7 
const R_ARM_THM_ALU_ABS_G0_NC <type 29> = 132 
const R_ARM_THM_ALU_ABS_G1_NC <type 29> = 133 
const R_ARM_THM_ALU_ABS_G2_NC <type 29> = 134 
const R_ARM_THM_ALU_ABS_G3 <type 29> = 135 
const R_ARM_THM_ALU_PREL_11_0 <type 29> = 53 
const R_ARM_THM_GOT_BREL12 <type 29> = 131 
const R_ARM_THM_JUMP11 <type 29> = 102 
const R_ARM_THM_JUMP19 <type 29> = 51 
const R_ARM_THM_JUMP24 <type 29> = 30 
const R_ARM_THM_JUMP6 <type 29> = 52 
const R_ARM_THM_JUMP8 <type 29> = 103 
const R_ARM_THM_MOVT_ABS <type 29> = 48 
const R_ARM_THM_MOVT_BREL <type 29> = 88 
const R_ARM_THM_MOVT_PREL <type 29> = 50 
const R_ARM_THM_MOVW_ABS_NC <type 29> = 47 
const R_ARM_THM_MOVW_BREL <type 29> = 89 
const R_ARM_THM_MOVW_BREL_NC <type 29> = 87 
const R_ARM_THM_MOVW_PREL_NC <type 29> = 49 
const R_ARM_THM_PC12 <type 29> = 54 
const R_ARM_THM_PC22 <type 29> = 10 
const R_ARM_THM_PC8 <type 29> = 11 
const R_ARM_THM_RPC22 <type 29> = 251 
const R_ARM_THM_SWI8 <type 29> = 14 
const R_ARM_THM_TLS_CALL <type 29> = 93 
const R_ARM_THM_TLS_DESCSEQ16 <type 29> = 129 
const R_ARM_THM_TLS_DESCSEQ32 <type 29> = 130 
const R_ARM_THM_XPC22 <type 29> = 16 
const R_ARM_TLS_CALL <type 29> = 91 
const R_ARM_TLS_DESCSEQ <type 29> = 92 
const R_ARM_TLS_DTPMOD32 <type 29> = 17 
const R_ARM_TLS_DTPOFF32 <type 29> = 18 
const R_ARM_TLS_GD32 <type 29> = 104 
const R_ARM_TLS_GOTDESC <type 29> = 90 
const R_ARM_TLS_IE12GP <type 29> = 111 
const R_ARM_TLS_IE32 <type 29> = 107 
const R_ARM_TLS_LDM32 <type 29> = 105 
const R_ARM_TLS_LDO12 <type 29> = 109 
const R_ARM_TLS_LDO32 <type 29> = 106 
const R_ARM_TLS_LE12 <type 29> = 110 
const R_ARM_TLS_LE32 <type 29> = 108 
const R_ARM_TLS_TPOFF32 <type 29> = 19 
const R_ARM_V4BX <type 29> = 40 
const R_ARM_XPC25 <type 29> = 15 
func R_INFO (sym <type -7>, typ <type -7>) <type -8>
func R_INFO32 (sym <type -7>, typ <type -7>) <type -7>
const R_MIPS_16 <type 30> = 1 
const R_MIPS_26 <type 30> = 4 
const R_MIPS_32 <type 30> = 2 
const R_MIPS_64 <type 30> = 18 
const R_MIPS_ADD_IMMEDIATE <type 30> = 34 
const R_MIPS_CALL16 <type 30> = 11 
const R_MIPS_CALL_HI16 <type 30> = 30 
const R_MIPS_CALL_LO16 <type 30> = 31 
const R_MIPS_DELETE <type 30> = 27 
const R_MIPS_GOT16 <type 30> = 9 
const R_MIPS_GOT_DISP <type 30> = 19 
const R_MIPS_GOT_HI16 <type 30> = 22 
const R_MIPS_GOT_LO16 <type 30> = 23 
const R_MIPS_GOT_OFST <type 30> = 21 
const R_MIPS_GOT_PAGE <type 30> = 20 
const R_MIPS_GPREL16 <type 30> = 7 
const R_MIPS_GPREL32 <type 30> = 12 
const R_MIPS_HI16 <type 30> = 5 
const R_MIPS_HIGHER <type 30> = 28 
const R_MIPS_HIGHEST <type 30> = 29 
const R_MIPS_INSERT_A <type 30> = 25 
const R_MIPS_INSERT_B <type 30> = 26 
const R_MIPS_JALR <type 30> = 37 
const R_MIPS_LITERAL <type 30> = 8 
const R_MIPS_LO16 <type 30> = 6 
const R_MIPS_NONE <type 30> = 0 
const R_MIPS_PC16 <type 30> = 10 
const R_MIPS_PJUMP <type 30> = 35 
const R_MIPS_REL16 <type 30> = 33 
const R_MIPS_REL32 <type 30> = 3 
const R_MIPS_RELGOT <type 30> = 36 
const R_MIPS_SCN_DISP <type 30> = 32 
const R_MIPS_SHIFT5 <type 30> = 16 
const R_MIPS_SHIFT6 <type 30> = 17 
const R_MIPS_SUB <type 30> = 24 
const R_MIPS_TLS_DTPMOD32 <type 30> = 38 
const R_MIPS_TLS_DTPMOD64 <type 30> = 40 
const R_MIPS_TLS_DTPREL32 <type 30> = 39 
const R_MIPS_TLS_DTPREL64 <type 30> = 41 
const R_MIPS_TLS_DTPREL_HI16 <type 30> = 44 
const R_MIPS_TLS_DTPREL_LO16 <type 30> = 45 
const R_MIPS_TLS_GD <type 30> = 42 
const R_MIPS_TLS_GOTTPREL <type 30> = 46 
const R_MIPS_TLS_LDM <type 30> = 43 
const R_MIPS_TLS_TPREL32 <type 30> = 47 
const R_MIPS_TLS_TPREL64 <type 30> = 48 
const R_MIPS_TLS_TPREL_HI16 <type 30> = 49 
const R_MIPS_TLS_TPREL_LO16 <type 30> = 50 
const R_PPC64_ADDR14 <type 32> = 7 
const R_PPC64_ADDR14_BRNTAKEN <type 32> = 9 
const R_PPC64_ADDR14_BRTAKEN <type 32> = 8 
const R_PPC64_ADDR16 <type 32> = 3 
const R_PPC64_ADDR16_DS <type 32> = 56 
const R_PPC64_ADDR16_HA <type 32> = 6 
const R_PPC64_ADDR16_HI <type 32> = 5 
const R_PPC64_ADDR16_HIGH <type 32> = 110 
const R_PPC64_ADDR16_HIGHA <type 32> = 111 
const R_PPC64_ADDR16_HIGHER <type 32> = 39 
const R_PPC64_ADDR16_HIGHERA <type 32> = 40 
const R_PPC64_ADDR16_HIGHEST <type 32> = 41 
const R_PPC64_ADDR16_HIGHESTA <type 32> = 42 
const R_PPC64_ADDR16_LO <type 32> = 4 
const R_PPC64_ADDR16_LO_DS <type 32> = 57 
const R_PPC64_ADDR24 <type 32> = 2 
const R_PPC64_ADDR32 <type 32> = 1 
const R_PPC64_ADDR64 <type 32> = 38 
const R_PPC64_ADDR64_LOCAL <type 32> = 117 
const R_PPC64_DTPMOD64 <type 32> = 68 
const R_PPC64_DTPREL16 <type 32> = 74 
const R_PPC64_DTPREL16_DS <type 32> = 101 
const R_PPC64_DTPREL16_HA <type 32> = 77 
const R_PPC64_DTPREL16_HI <type 32> = 76 
const R_PPC64_DTPREL16_HIGH <type 32> = 114 
const R_PPC64_DTPREL16_HIGHA <type 32> = 115 
const R_PPC64_DTPREL16_HIGHER <type 32> = 103 
const R_PPC64_DTPREL16_HIGHERA <type 32> = 104 
const R_PPC64_DTPREL16_HIGHEST <type 32> = 105 
const R_PPC64_DTPREL16_HIGHESTA <type 32> = 106 
const R_PPC64_DTPREL16_LO <type 32> = 75 
const R_PPC64_DTPREL16_LO_DS <type 32> = 102 
const R_PPC64_DTPREL64 <type 32> = 78 
const R_PPC64_ENTRY <type 32> = 118 
const R_PPC64_GOT16 <type 32> = 14 
const R_PPC64_GOT16_DS <type 32> = 58 
const R_PPC64_GOT16_HA <type 32> = 17 
const R_PPC64_GOT16_HI <type 32> = 16 
const R_PPC64_GOT16_LO <type 32> = 15 
const R_PPC64_GOT16_LO_DS <type 32> = 59 
const R_PPC64_GOT_DTPREL16_DS <type 32> = 91 
const R_PPC64_GOT_DTPREL16_HA <type 32> = 94 
const R_PPC64_GOT_DTPREL16_HI <type 32> = 93 
const R_PPC64_GOT_DTPREL16_LO_DS <type 32> = 92 
const R_PPC64_GOT_TLSGD16 <type 32> = 79 
const R_PPC64_GOT_TLSGD16_HA <type 32> = 82 
const R_PPC64_GOT_TLSGD16_HI <type 32> = 81 
const R_PPC64_GOT_TLSGD16_LO <type 32> = 80 
const R_PPC64_GOT_TLSLD16 <type 32> = 83 
const R_PPC64_GOT_TLSLD16_HA <type 32> = 86 
const R_PPC64_GOT_TLSLD16_HI <type 32> = 85 
const R_PPC64_GOT_TLSLD16_LO <type 32> = 84 
const R_PPC64_GOT_TPREL16_DS <type 32> = 87 
const R_PPC64_GOT_TPREL16_HA <type 32> = 90 
const R_PPC64_GOT_TPREL16_HI <type 32> = 89 
const R_PPC64_GOT_TPREL16_LO_DS <type 32> = 88 
const R_PPC64_IRELATIVE <type 32> = 248 
const R_PPC64_JMP_IREL <type 32> = 247 
const R_PPC64_JMP_SLOT <type 32> = 21 
const R_PPC64_NONE <type 32> = 0 
const R_PPC64_PLT16_LO_DS <type 32> = 60 
const R_PPC64_PLTGOT16 <type 32> = 52 
const R_PPC64_PLTGOT16_DS <type 32> = 65 
const R_PPC64_PLTGOT16_HA <type 32> = 55 
const R_PPC64_PLTGOT16_HI <type 32> = 54 
const R_PPC64_PLTGOT16_LO <type 32> = 53 
const R_PPC64_PLTGOT_LO_DS <type 32> = 66 
const R_PPC64_REL14 <type 32> = 11 
const R_PPC64_REL14_BRNTAKEN <type 32> = 13 
const R_PPC64_REL14_BRTAKEN <type 32> = 12 
const R_PPC64_REL16 <type 32> = 249 
const R_PPC64_REL16DX_HA <type 32> = 246 
const R_PPC64_REL16_HA <type 32> = 252 
const R_PPC64_REL16_HI <type 32> = 251 
const R_PPC64_REL16_LO <type 32> = 250 
const R_PPC64_REL24 <type 32> = 10 
const R_PPC64_REL24_NOTOC <type 32> = 116 
const R_PPC64_REL32 <type 32> = 26 
const R_PPC64_REL64 <type 32> = 44 
const R_PPC64_SECTOFF_DS <type 32> = 61 
const R_PPC64_SECTOFF_LO_DS <type 32> = 61 
const R_PPC64_TLS <type 32> = 67 
const R_PPC64_TLSGD <type 32> = 107 
const R_PPC64_TLSLD <type 32> = 108 
const R_PPC64_TOC <type 32> = 51 
const R_PPC64_TOC16 <type 32> = 47 
const R_PPC64_TOC16_DS <type 32> = 63 
const R_PPC64_TOC16_HA <type 32> = 50 
const R_PPC64_TOC16_HI <type 32> = 49 
const R_PPC64_TOC16_LO <type 32> = 48 
const R_PPC64_TOC16_LO_DS <type 32> = 64 
const R_PPC64_TOCSAVE <type 32> = 109 
const R_PPC64_TPREL16 <type 32> = 69 
const R_PPC64_TPREL16_DS <type 32> = 95 
const R_PPC64_TPREL16_HA <type 32> = 72 
const R_PPC64_TPREL16_HI <type 32> = 71 
const R_PPC64_TPREL16_HIGH <type 32> = 112 
const R_PPC64_TPREL16_HIGHA <type 32> = 113 
const R_PPC64_TPREL16_HIGHER <type 32> = 97 
const R_PPC64_TPREL16_HIGHERA <type 32> = 98 
const R_PPC64_TPREL16_HIGHEST <type 32> = 99 
const R_PPC64_TPREL16_HIGHESTA <type 32> = 100 
const R_PPC64_TPREL16_LO <type 32> = 70 
const R_PPC64_TPREL16_LO_DS <type 32> = 96 
const R_PPC64_TPREL64 <type 32> = 73 
const R_PPC_ADDR14 <type 31> = 7 
const R_PPC_ADDR14_BRNTAKEN <type 31> = 9 
const R_PPC_ADDR14_BRTAKEN <type 31> = 8 
const R_PPC_ADDR16 <type 31> = 3 
const R_PPC_ADDR16_HA <type 31> = 6 
const R_PPC_ADDR16_HI <type 31> = 5 
const R_PPC_ADDR16_LO <type 31> = 4 
const R_PPC_ADDR24 <type 31> = 2 
const R_PPC_ADDR32 <type 31> = 1 
const R_PPC_COPY <type 31> = 19 
const R_PPC_DTPMOD32 <type 31> = 68 
const R_PPC_DTPREL16 <type 31> = 74 
const R_PPC_DTPREL16_HA <type 31> = 77 
const R_PPC_DTPREL16_HI <type 31> = 76 
const R_PPC_DTPREL16_LO <type 31> = 75 
const R_PPC_DTPREL32 <type 31> = 78 
const R_PPC_EMB_BIT_FLD <type 31> = 115 
const R_PPC_EMB_MRKREF <type 31> = 110 
const R_PPC_EMB_NADDR16 <type 31> = 102 
const R_PPC_EMB_NADDR16_HA <type 31> = 105 
const R_PPC_EMB_NADDR16_HI <type 31> = 104 
const R_PPC_EMB_NADDR16_LO <type 31> = 103 
const R_PPC_EMB_NADDR32 <type 31> = 101 
const R_PPC_EMB_RELSDA <type 31> = 116 
const R_PPC_EMB_RELSEC16 <type 31> = 111 
const R_PPC_EMB_RELST_HA <type 31> = 114 
const R_PPC_EMB_RELST_HI <type 31> = 113 
const R_PPC_EMB_RELST_LO <type 31> = 112 
const R_PPC_EMB_SDA21 <type 31> = 109 
const R_PPC_EMB_SDA2I16 <type 31> = 107 
const R_PPC_EMB_SDA2REL <type 31> = 108 
const R_PPC_EMB_SDAI16 <type 31> = 106 
const R_PPC_GLOB_DAT <type 31> = 20 
const R_PPC_GOT16 <type 31> = 14 
const R_PPC_GOT16_HA <type 31> = 17 
const R_PPC_GOT16_HI <type 31> = 16 
const R_PPC_GOT16_LO <type 31> = 15 
const R_PPC_GOT_TLSGD16 <type 31> = 79 
const R_PPC_GOT_TLSGD16_HA <type 31> = 82 
const R_PPC_GOT_TLSGD16_HI <type 31> = 81 
const R_PPC_GOT_TLSGD16_LO <type 31> = 80 
const R_PPC_GOT_TLSLD16 <type 31> = 83 
const R_PPC_GOT_TLSLD16_HA <type 31> = 86 
const R_PPC_GOT_TLSLD16_HI <type 31> = 85 
const R_PPC_GOT_TLSLD16_LO <type 31> = 84 
const R_PPC_GOT_TPREL16 <type 31> = 87 
const R_PPC_GOT_TPREL16_HA <type 31> = 90 
const R_PPC_GOT_TPREL16_HI <type 31> = 89 
const R_PPC_GOT_TPREL16_LO <type 31> = 88 
const R_PPC_JMP_SLOT <type 31> = 21 
const R_PPC_LOCAL24PC <type 31> = 23 
const R_PPC_NONE <type 31> = 0 
const R_PPC_PLT16_HA <type 31> = 31 
const R_PPC_PLT16_HI <type 31> = 30 
const R_PPC_PLT16_LO <type 31> = 29 
const R_PPC_PLT32 <type 31> = 27 
const R_PPC_PLTREL24 <type 31> = 18 
const R_PPC_PLTREL32 <type 31> = 28 
const R_PPC_REL14 <type 31> = 11 
const R_PPC_REL14_BRNTAKEN <type 31> = 13 
const R_PPC_REL14_BRTAKEN <type 31> = 12 
const R_PPC_REL24 <type 31> = 10 
const R_PPC_REL32 <type 31> = 26 
const R_PPC_RELATIVE <type 31> = 22 
const R_PPC_SDAREL16 <type 31> = 32 
const R_PPC_SECTOFF <type 31> = 33 
const R_PPC_SECTOFF_HA <type 31> = 36 
const R_PPC_SECTOFF_HI <type 31> = 35 
const R_PPC_SECTOFF_LO <type 31> = 34 
const R_PPC_TLS <type 31> = 67 
const R_PPC_TPREL16 <type 31> = 69 
const R_PPC_TPREL16_HA <type 31> = 72 
const R_PPC_TPREL16_HI <type 31> = 71 
const R_PPC_TPREL16_LO <type 31> = 70 
const R_PPC_TPREL32 <type 31> = 73 
const R_PPC_UADDR16 <type 31> = 25 
const R_PPC_UADDR32 <type 31> = 24 
const R_RISCV_32 <type 33> = 1 
const R_RISCV_32_PCREL <type 33> = 57 
const R_RISCV_64 <type 33> = 2 
const R_RISCV_ADD16 <type 33> = 34 
const R_RISCV_ADD32 <type 33> = 35 
const R_RISCV_ADD64 <type 33> = 36 
const R_RISCV_ADD8 <type 33> = 33 
const R_RISCV_ALIGN <type 33> = 43 
const R_RISCV_BRANCH <type 33> = 16 
const R_RISCV_CALL <type 33> = 18 
const R_RISCV_CALL_PLT <type 33> = 19 
const R_RISCV_COPY <type 33> = 4 
const R_RISCV_GNU_VTENTRY <type 33> = 42 
const R_RISCV_GNU_VTINHERIT <type 33> = 41 
const R_RISCV_GOT_HI20 <type 33> = 20 
const R_RISCV_GPREL_I <type 33> = 47 
const R_RISCV_GPREL_S <type 33> = 48 
const R_RISCV_HI20 <type 33> = 26 
const R_RISCV_JAL <type 33> = 17 
const R_RISCV_JUMP_SLOT <type 33> = 5 
const R_RISCV_LO12_I <type 33> = 27 
const R_RISCV_LO12_S <type 33> = 28 
const R_RISCV_NONE <type 33> = 0 
const R_RISCV_PCREL_HI20 <type 33> = 23 
const R_RISCV_PCREL_LO12_I <type 33> = 24 
const R_RISCV_PCREL_LO12_S <type 33> = 25 
const R_RISCV_RELATIVE <type 33> = 3 
const R_RISCV_RELAX <type 33> = 51 
const R_RISCV_RVC_BRANCH <type 33> = 44 
const R_RISCV_RVC_JUMP <type 33> = 45 
const R_RISCV_RVC_LUI <type 33> = 46 
const R_RISCV_SET16 <type 33> = 55 
const R_RISCV_SET32 <type 33> = 56 
const R_RISCV_SET6 <type 33> = 53 
const R_RISCV_SET8 <type 33> = 54 
const R_RISCV_SUB16 <type 33> = 38 
const R_RISCV_SUB32 <type 33> = 39 
const R_RISCV_SUB6 <type 33> = 52 
const R_RISCV_SUB64 <type 33> = 40 
const R_RISCV_SUB8 <type 33> = 37 
const R_RISCV_TLS_DTPMOD32 <type 33> = 6 
const R_RISCV_TLS_DTPMOD64 <type 33> = 7 
const R_RISCV_TLS_DTPREL32 <type 33> = 8 
const R_RISCV_TLS_DTPREL64 <type 33> = 9 
const R_RISCV_TLS_GD_HI20 <type 33> = 22 
const R_RISCV_TLS_GOT_HI20 <type 33> = 21 
const R_RISCV_TLS_TPREL32 <type 33> = 10 
const R_RISCV_TLS_TPREL64 <type 33> = 11 
const R_RISCV_TPREL_ADD <type 33> = 32 
const R_RISCV_TPREL_HI20 <type 33> = 29 
const R_RISCV_TPREL_I <type 33> = 49 
const R_RISCV_TPREL_LO12_I <type 33> = 30 
const R_RISCV_TPREL_LO12_S <type 33> = 31 
const R_RISCV_TPREL_S <type 33> = 50 
const R_SPARC_10 <type 34> = 30 
const R_SPARC_11 <type 34> = 31 
const R_SPARC_13 <type 34> = 11 
const R_SPARC_16 <type 34> = 2 
const R_SPARC_22 <type 34> = 10 
const R_SPARC_32 <type 34> = 3 
const R_SPARC_5 <type 34> = 44 
const R_SPARC_6 <type 34> = 45 
const R_SPARC_64 <type 34> = 32 
const R_SPARC_7 <type 34> = 43 
const R_SPARC_8 <type 34> = 1 
const R_SPARC_COPY <type 34> = 19 
const R_SPARC_DISP16 <type 34> = 5 
const R_SPARC_DISP32 <type 34> = 6 
const R_SPARC_DISP64 <type 34> = 46 
const R_SPARC_DISP8 <type 34> = 4 
const R_SPARC_GLOB_DAT <type 34> = 20 
const R_SPARC_GLOB_JMP <type 34> = 42 
const R_SPARC_GOT10 <type 34> = 13 
const R_SPARC_GOT13 <type 34> = 14 
const R_SPARC_GOT22 <type 34> = 15 
const R_SPARC_H44 <type 34> = 50 
const R_SPARC_HH22 <type 34> = 34 
const R_SPARC_HI22 <type 34> = 9 
const R_SPARC_HIPLT22 <type 34> = 25 
const R_SPARC_HIX22 <type 34> = 48 
const R_SPARC_HM10 <type 34> = 35 
const R_SPARC_JMP_SLOT <type 34> = 21 
const R_SPARC_L44 <type 34> = 52 
const R_SPARC_LM22 <type 34> = 36 
const R_SPARC_LO10 <type 34> = 12 
const R_SPARC_LOPLT10 <type 34> = 26 
const R_SPARC_LOX10 <type 34> = 49 
const R_SPARC_M44 <type 34> = 51 
const R_SPARC_NONE <type 34> = 0 
const R_SPARC_OLO10 <type 34> = 33 
const R_SPARC_PC10 <type 34> = 16 
const R_SPARC_PC22 <type 34> = 17 
const R_SPARC_PCPLT10 <type 34> = 29 
const R_SPARC_PCPLT22 <type 34> = 28 
const R_SPARC_PCPLT32 <type 34> = 27 
const R_SPARC_PC_HH22 <type 34> = 37 
const R_SPARC_PC_HM10 <type 34> = 38 
const R_SPARC_PC_LM22 <type 34> = 39 
const R_SPARC_PLT32 <type 34> = 24 
const R_SPARC_PLT64 <type 34> = 47 
const R_SPARC_REGISTER <type 34> = 53 
const R_SPARC_RELATIVE <type 34> = 22 
const R_SPARC_UA16 <type 34> = 55 
const R_SPARC_UA32 <type 34> = 23 
const R_SPARC_UA64 <type 34> = 54 
const R_SPARC_WDISP16 <type 34> = 40 
const R_SPARC_WDISP19 <type 34> = 41 
const R_SPARC_WDISP22 <type 34> = 8 
const R_SPARC_WDISP30 <type 34> = 7 
const R_SPARC_WPLT30 <type 34> = 18 
func R_SYM32 (info <type -7>) <type -7>
func R_SYM64 (info <type -8>) <type -7>
func R_TYPE32 (info <type -7>) <type -7>
func R_TYPE64 (info <type -8>) ($ret66 <type -7>) <inl:220>
 // /home/arreguin/utils/00-ccLab2-fedora35/opt/.build/HOST-riscv64-c06-linux-gnu/riscv64-c07-linux-gnu/src/gcc/libgo/go/debug/elf/elf.go:2928
 { //2928
  $ret66 = $convert(<type -7>, info) //2928
  return //2928
 } //0
const R_X86_64_16 <type 35> = 12 
const R_X86_64_32 <type 35> = 10 
const R_X86_64_32S <type 35> = 11 
const R_X86_64_64 <type 35> = 1 
const R_X86_64_8 <type 35> = 14 
const R_X86_64_COPY <type 35> = 5 
const R_X86_64_DTPMOD64 <type 35> = 16 
const R_X86_64_DTPOFF32 <type 35> = 21 
const R_X86_64_DTPOFF64 <type 35> = 17 
const R_X86_64_GLOB_DAT <type 35> = 6 
const R_X86_64_GOT32 <type 35> = 3 
const R_X86_64_GOT64 <type 35> = 27 
const R_X86_64_GOTOFF64 <type 35> = 25 
const R_X86_64_GOTPC32 <type 35> = 26 
const R_X86_64_GOTPC32_TLSDESC <type 35> = 34 
const R_X86_64_GOTPC64 <type 35> = 29 
const R_X86_64_GOTPCREL <type 35> = 9 
const R_X86_64_GOTPCREL64 <type 35> = 28 
const R_X86_64_GOTPCRELX <type 35> = 41 
const R_X86_64_GOTPLT64 <type 35> = 30 
const R_X86_64_GOTTPOFF <type 35> = 22 
const R_X86_64_IRELATIVE <type 35> = 37 
const R_X86_64_JMP_SLOT <type 35> = 7 
const R_X86_64_NONE <type 35> = 0 
const R_X86_64_PC16 <type 35> = 13 
const R_X86_64_PC32 <type 35> = 2 
const R_X86_64_PC32_BND <type 35> = 39 
const R_X86_64_PC64 <type 35> = 24 
const R_X86_64_PC8 <type 35> = 15 
const R_X86_64_PLT32 <type 35> = 4 
const R_X86_64_PLT32_BND <type 35> = 40 
const R_X86_64_PLTOFF64 <type 35> = 31 
const R_X86_64_RELATIVE <type 35> = 8 
const R_X86_64_RELATIVE64 <type 35> = 38 
const R_X86_64_REX_GOTPCRELX <type 35> = 42 
const R_X86_64_SIZE32 <type 35> = 32 
const R_X86_64_SIZE64 <type 35> = 33 
const R_X86_64_TLSDESC <type 35> = 36 
const R_X86_64_TLSDESC_CALL <type 35> = 35 
const R_X86_64_TLSGD <type 35> = 19 
const R_X86_64_TLSLD <type 35> = 20 
const R_X86_64_TPOFF32 <type 35> = 23 
const R_X86_64_TPOFF64 <type 35> = 18 
const SHF_ALLOC <type 43> = 2 
const SHF_COMPRESSED <type 43> = 2048 
const SHF_EXECINSTR <type 43> = 4 
const SHF_GROUP <type 43> = 512 
const SHF_INFO_LINK <type 43> = 64 
const SHF_LINK_ORDER <type 43> = 128 
const SHF_MASKOS <type 43> = 267386880 
const SHF_MASKPROC <type 43> = 4026531840 
const SHF_MERGE <type 43> = 16 
const SHF_OS_NONCONFORMING <type 43> = 256 
const SHF_STRINGS <type 43> = 32 
const SHF_TLS <type 43> = 1024 
const SHF_WRITE <type 43> = 1 
const SHN_ABS <type 45> = 65521 
const SHN_COMMON <type 45> = 65522 
const SHN_HIOS <type 45> = 65343 
const SHN_HIPROC <type 45> = 65311 
const SHN_HIRESERVE <type 45> = 65535 
const SHN_LOOS <type 45> = 65312 
const SHN_LOPROC <type 45> = 65280 
const SHN_LORESERVE <type 45> = 65280 
const SHN_UNDEF <type 45> = 0 
const SHN_XINDEX <type 45> = 65535 
const SHT_DYNAMIC <type 46> = 6 
const SHT_DYNSYM <type 46> = 11 
const SHT_FINI_ARRAY <type 46> = 15 
const SHT_GNU_ATTRIBUTES <type 46> = 1879048181 
const SHT_GNU_HASH <type 46> = 1879048182 
const SHT_GNU_LIBLIST <type 46> = 1879048183 
const SHT_GNU_VERDEF <type 46> = 1879048189 
const SHT_GNU_VERNEED <type 46> = 1879048190 
const SHT_GNU_VERSYM <type 46> = 1879048191 
const SHT_GROUP <type 46> = 17 
const SHT_HASH <type 46> = 5 
const SHT_HIOS <type 46> = 1879048191 
const SHT_HIPROC <type 46> = 2147483647 
const SHT_HIUSER <type 46> = 4294967295 
const SHT_INIT_ARRAY <type 46> = 14 
const SHT_LOOS <type 46> = 1610612736 
const SHT_LOPROC <type 46> = 1879048192 
const SHT_LOUSER <type 46> = 2147483648 
const SHT_NOBITS <type 46> = 8 
const SHT_NOTE <type 46> = 7 
const SHT_NULL <type 46> = 0 
const SHT_PREINIT_ARRAY <type 46> = 16 
const SHT_PROGBITS <type 46> = 1 
const SHT_REL <type 46> = 9 
const SHT_RELA <type 46> = 4 
const SHT_SHLIB <type 46> = 10 
const SHT_STRTAB <type 46> = 3 
const SHT_SYMTAB <type 46> = 2 
const SHT_SYMTAB_SHNDX <type 46> = 18 
const STB_GLOBAL <type 49> = 1 
const STB_HIOS <type 49> = 12 
const STB_HIPROC <type 49> = 15 
const STB_LOCAL <type 49> = 0 
const STB_LOOS <type 49> = 10 
const STB_LOPROC <type 49> = 13 
const STB_WEAK <type 49> = 2 
const STT_COMMON <type 50> = 5 
const STT_FILE <type 50> = 4 
const STT_FUNC <type 50> = 2 
const STT_HIOS <type 50> = 12 
const STT_HIPROC <type 50> = 15 
const STT_LOOS <type 50> = 10 
const STT_LOPROC <type 50> = 13 
const STT_NOTYPE <type 50> = 0 
const STT_OBJECT <type 50> = 1 
const STT_SECTION <type 50> = 3 
const STT_TLS <type 50> = 6 
const STV_DEFAULT <type 51> = 0 
const STV_HIDDEN <type 51> = 2 
const STV_INTERNAL <type 51> = 1 
const STV_PROTECTED <type 51> = 3 
func ST_BIND (info <type -5>) <type 49>
func ST_INFO (bind <type 49>, typ <type 50>) <type -5>
func ST_TYPE (info <type -5>) <type 50>
func ST_VISIBILITY (other <type -5>) <type 51>
const Sym32Size = 16 
const Sym64Size = 24 
checksum F4E1CDD53BEC99CCB7E7801C6A57392EB5DEE8AC
v3;
package gosym
pkgpath debug/gosym
import bytes bytes "bytes"
import binary encoding/binary "encoding/binary"
import fmt fmt "fmt"
import strconv strconv "strconv"
import strings strings "strings"
import sync sync "sync"
init gosym debug..z2fgosym..import bytes bytes..import binary encoding..z2fbinary..import fmt fmt..import cpu internal..z2fcpu..import poll internal..z2fpoll..import testlog internal..z2ftestlog..import io io..import os os..import reflect reflect..import runtime runtime..import sys runtime..z2finternal..z2fsys..import strconv strconv..import sync sync..import syscall syscall..import time time..import unicode unicode..import
init_graph 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 1 4 1 7 1 10 1 11 1 13 1 16 2 4 2 7 2 9 2 10 2 11 2 12 2 13 2 16 3 4 3 5 3 6 3 7 3 8 3 9 3 10 3 11 3 12 3 13 3 14 3 15 3 16 5 4 5 7 5 10 5 11 5 13 5 14 5 15 7 4 7 10 7 11 7 13 8 4 8 5 8 6 8 7 8 10 8 11 8 13 8 14 8 15 9 4 9 10 9 11 9 12 9 13 9 16 10 4 10 11 12 4 12 10 12 11 13 4 13 10 13 11 14 4 14 10 14 11 14 13 15 4 15 10 15 11 15 13 15 14
types 40 9 83 24 1683 239 243 543 86 86 104 22 18 158 18 21 18 18 412 22 89 19 64 46 254 35 35 20 19 19 19 35 18 53 20 104 18 118 20 53 18
type 1 "DecodingError" <type 9>
 func (e <esc:0x2a> <type 11>) Error () <type -16>
type 2 "Func" <type 12>
type 3 "LineTable" <type 17>
 func (t <esc:0x22> <type 15>) .debug/gosym.parse (targetPC <type -8>, targetLine <type -11>) (b <type 18>, pc <type -8>, line <type -11>)
 func (t <esc:0xa> <type 15>) .debug/gosym.slice (pc <type -8>) <type 15>
 func (t <type 15>) PCToLine (pc <type -8>) <type -11>
 func (t <type 15>) LineToPC (line <type -11>, maxpc <type -8>) <type -8>
 func (t <type 15>) .debug/gosym.isGo12 () <type -15>
 func (t <esc:0x9> <type 15>) .debug/gosym.uintptr (b <type 18>) <type -8>
 func (t <type 15>) .debug/gosym.go12Init ()
 func (t <type 15>) .debug/gosym.go12Funcs () <type 26>
 func (t <esc:0x2a> <type 15>) .debug/gosym.findFunc (pc <type -8>) <type 18>
 func (t <esc:0x1> <type 15>) .debug/gosym.readvarint (pp <esc:0x9> <type 27>) <type -7>
 func (t <esc:0x1> <type 15>) .debug/gosym.string (off <type -7>) <type -16>
 func (t <esc:0x1> <type 15>) .debug/gosym.step (p <esc:0x9> <type 27>, pc <esc:0x1> <type 28>, val <esc:0x1> <type 29>, first <type -15>) <type -15>
 func (t <esc:0x9> <type 15>) .debug/gosym.pcvalue (off <type -7>, entry <type -8>, targetpc <type -8>) <type -3>
 func (t <esc:0x9> <type 15>) .debug/gosym.findFileLine (entry <type -8>, filetab <type -7>, linetab <type -7>, filenum <type -3>, line <type -3>) <type -8>
 func (t <esc:0x9> <type 15>) .debug/gosym.go12PCToLine (pc <type -8>) (line <type -11>)
 func (t <esc:0x9> <type 15>) .debug/gosym.go12PCToFile (pc <type -8>) (file <type -16>)
 func (t <type 15>) .debug/gosym.go12LineToPC (file <esc:0x1> <type -16>, line <type -11>) (pc <type -8>)
 func (t <type 15>) .debug/gosym.initFileMap ()
 func (t <type 15>) .debug/gosym.go12MapFiles (m <esc:0x1> <type 30>, obj <type 16>)
type 4 "Obj" <type 32>
 func (o <type 16>) .debug/gosym.lineFromAline (aline <type -11>) (? <type -16>, ? <type -11>)
 func (o <esc:0x1> <type 16>) .debug/gosym.alineFromLine (path <type -16>, line <type -11>) (? <type -11>, ? <type -19>)
type 5 "Sym" <type 34>
 func (s <esc:0x1> <type 13>) Static () <type -15>
 func (s <esc:0x22> <type 13>) PackageName () <type -16>
 func (s <esc:0x22> <type 13>) ReceiverName () <type -16>
 func (s <esc:0x22> <type 13>) BaseName () <type -16>
type 6 "Table" <type 36>
 func (t <esc:0x22> <type 31>) PCToFunc (pc <type -8>) <type 35>
 func (t <esc:0x80a> <type 31>) PCToLine (pc <type -8>) (file <type -16>, line <type -11>, fn <type 35>)
 func (t <esc:0x10a> <type 31>) LineToPC (file <type -16>, line <type -11>) (pc <type -8>, fn <type 35>, err <type -19>)
 func (t <esc:0x22> <type 31>) LookupSym (name <esc:0x1> <type -16>) <type 13>
 func (t <esc:0x22> <type 31>) LookupFunc (name <esc:0x1> <type -16>) <type 35>
 func (t <esc:0x22> <type 31>) SymByAddr (addr <type -8>) <type 13>
type 7 "UnknownFileError" <type -16>
 func (e <esc:0x1> <type 7>) Error () <type -16>
type 8 "UnknownLineError" <type 38>
 func (e <esc:0x1> <type 39>) Error () <type -16>
type 9 struct { .debug/gosym.off <type -11>; .debug/gosym.msg <type -16>; .debug/gosym.val <type 10>; }
type 10 interface { }
type 11 *<type 1>
type 12 struct { Entry <type -8>; ? <type 13>; End <type -8>; Params <type 14>; Locals <type 14>; FrameSize <type -11>; LineTable <type 15>; Obj <type 16>; }
type 13 *<type 5>
type 14 [] <type 13>
type 15 *<type 3>
type 16 *<type 4>
type 17 struct { Data <type 18>; PC <type -8>; Line <type -11>; .debug/gosym.mu <type 19>; .debug/gosym.go12 <type -11>; .debug/gosym.binary <type 22>; .debug/gosym.quantum <type -7>; .debug/gosym.ptrsize <type -7>; .debug/gosym.functab <type 18>; .debug/gosym.nfunctab <type -7>; .debug/gosym.filetab <type 18>; .debug/gosym.nfiletab <type -7>; .debug/gosym.fileMap <type 24>; .debug/gosym.strings <type 25>; }
type 18 [] <type -20>
type 19 "sync.Mutex" <type 21>
 func (m <type 20>) Unlock ()
 func (m <type 20>) Lock ()
type 20 *<type 19>
type 21 struct { .sync.state <type -3>; .sync.sema <type -7>; }
type 22 "encoding/binary.ByteOrder" <type 23>
type 23 interface { PutUint16 (? <type 18>, ? <type -6>); PutUint32 (? <type 18>, ? <type -7>); PutUint64 (? <type 18>, ? <type -8>); String () <type -16>; Uint16 (? <type 18>) <type -6>; Uint32 (? <type 18>) <type -7>; Uint64 (? <type 18>) <type -8>; }
type 24 map [<type -16>] <type -7>
type 25 map [<type -7>] <type -16>
type 26 [] <type 2>
type 27 *<type 18>
type 28 *<type -8>
type 29 *<type -3>
type 30 map [<type -16>] <type 16>
type 31 *<type 6>
type 32 struct { Funcs <type 26>; Paths <type 33>; }
type 33 [] <type 5>
type 34 struct { Value <type -8>; Type <type -20>; Name <type -16>; GoType <type -8>; Func <type 35>; }
type 35 *<type 2>
type 36 struct { Syms <type 33>; Funcs <type 26>; Files <type 30>; Objs <type 37>; .debug/gosym.go12line <type 15>; }
type 37 [] <type 4>
type 38 struct { File <type -16>; Line <type -11>; }
type 39 *<type 8>
func NewLineTable (data <type 18>, text <type -8>) <type 15>
func NewTable (symtab <type 18>, pcln <t