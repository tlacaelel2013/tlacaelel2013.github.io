unc _pthread_kill (uint32, int32) int32 __asm__("pthread_kill")
func ___libc_current_sigrtmin () int32 __asm__("__libc_current_sigrtmin")
func ___libc_current_sigrtmax () int32 __asm__("__libc_current_sigrtmax")
type _greg_t int32
type _gregset_t [18+1]int32
type _rwindow struct { rw_local [7+1]int32; rw_in [7+1]int32; }
const _sizeof_rwindow = 64
type _gwindows struct { wbcnt int32; spbuf [30+1]*int32; wbuf [30+1]_rwindow; }
const _sizeof_gwindows = 2112
type _gwindows_t struct { wbcnt int32; spbuf [30+1]*int32; wbuf [30+1]_rwindow; }
const _sizeof_gwindows_t = 2112
type _fpq struct { fpq_addr *uint32; fpq_instr uint32; }
const _sizeof_fpq = 8
type _fq struct { FQu struct { whole float64; }; }
const _sizeof_fq = 8
type _fpu struct { fpu_fr struct { fpu_regs [31+1]uint64; }; fpu_q *_fq; fpu_fsr uint32; fpu_qcnt uint8; fpu_q_entrysize uint8; fpu_en uint8; Godump_0_pad [5]byte; }
const _sizeof_fpu = 272
type _fpregset_t struct { fpu_fr struct { fpu_regs [31+1]uint64; }; fpu_q *_fq; fpu_fsr uint32; fpu_qcnt uint8; fpu_q_entrysize uint8; fpu_en uint8; Godump_0_pad [5]byte; }
const _sizeof_fpregset_t = 272
type _xrs_t struct { xrs_id uint32; xrs_ptr *byte; }
const _sizeof_xrs_t = 8
type _mcontext_t struct { gregs _gregset_t; gwins *_gwindows_t; fpregs _fpregset_t; xrs _xrs_t; filler [18+1]int32; Godump_0_pad [4]byte; }
const _sizeof_mcontext_t = 440
type _ucontext struct { uc_flags uint32; uc_link *_ucontext; uc_sigmask ___sigset_t; uc_stack _stack_t; uc_mcontext _mcontext_t; }
const _sizeof_ucontext = 592
type _ucontext_t struct { uc_flags uint32; uc_link *_ucontext; uc_sigmask ___sigset_t; uc_stack _stack_t; uc_mcontext _mcontext_t; }
const _sizeof_ucontext_t = 592
func _getcontext (*_ucontext_t) int32 __asm__("getcontext")
func _setcontext (*_ucontext_t) int32 __asm__("setcontext")
func _swapcontext (*_ucontext_t, *_ucontext_t) int32 __asm__("swapcontext")
func _makecontext (*_ucontext_t, func(), int32, ...interface{}) __asm__("makecontext")
type _uint8_t uint8
type _uint16_t uint16
type _uint32_t uint32
type _uint64_t uint64
type _int_least8_t int8
type _int_least16_t int16
type _int_least32_t int32
type _int_least64_t int64
type _uint_least8_t uint8
type _uint_least16_t uint16
type _uint_least32_t uint32
type _uint_least64_t uint64
type _int_fast8_t int8
type _int_fast16_t int32
type _int_fast32_t int32
type _int_fast64_t int64
type _uint_fast8_t uint8
type _uint_fast16_t uint32
type _uint_fast32_t uint32
type _uint_fast64_t uint64
type _intptr_t int32
type _uintptr_t uint32
type _intmax_t int64
type _uintmax_t uint64
type _iovec struct { iov_base *byte; iov_len uint32; }
const _sizeof_iovec = 8
func _readv (int32, *_iovec, int32) int32 __asm__("readv")
func _writev (int32, *_iovec, int32) int32 __asm__("writev")
type _socklen_t uint32
type _sa_family_t uint16
type _sockaddr struct { sa_family uint16; sa_data [13+1]int8; }
const _sizeof_sockaddr = 16
type _sockaddr_storage struct { ss_family uint16; __ss_align uint32; __ss_padding [119+1]int8; }
const _sizeof_sockaddr_storage = 128
type _msghdr struct { msg_name *byte; msg_namelen uint32; msg_iov *_iovec; msg_iovlen uint32; msg_control *byte; msg_controllen uint32; msg_flags int32; }
const _sizeof_msghdr = 28
type _cmsghdr struct { cmsg_len uint32; cmsg_level int32; cmsg_type int32; __cmsg_data [0]uint8; }
const _sizeof_cmsghdr = 12
func ___cmsg_nxthdr (*_msghdr, *_cmsghdr) *_cmsghdr __asm__("__cmsg_nxthdr")
type _ucred struct { pid int32; uid uint32; gid uint32; }
const _sizeof_ucred = 12
type _linger struct { l_onoff int32; l_linger int32; }
const _sizeof_linger = 8
type _osockaddr struct { sa_family uint16; sa_data [13+1]uint8; }
const _sizeof_osockaddr = 16
type ___SOCKADDR_ARG struct { __sockaddr__ *_sockaddr; }
const _sizeof___SOCKADDR_ARG = 4
type ___CONST_SOCKADDR_ARG struct { __sockaddr__ *_sockaddr; }
const _sizeof___CONST_SOCKADDR_ARG = 4
func _socket (int32, int32, int32) int32 __asm__("socket")
func _socketpair (int32, int32, int32, *int32) int32 __asm__("socketpair")
func _bind (int32, ___CONST_SOCKADDR_ARG, uint32) int32 __asm__("bind")
func _getsockname (int32, ___SOCKADDR_ARG, *uint32) int32 __asm__("getsockname")
func _connect (int32, ___CONST_SOCKADDR_ARG, uint32) int32 __asm__("connect")
func _getpeername (int32, ___SOCKADDR_ARG, *uint32) int32 __asm__("getpeername")
func _send (int32, *byte, uint32, int32) int32 __asm__("send")
func _recv (int32, *byte, uint32, int32) int32 __asm__("recv")
func _sendto (int32, *byte, uint32, int32, ___CONST_SOCKADDR_ARG, uint32) int32 __asm__("sendto")
func _recvfrom (int32, *byte, uint32, int32, ___SOCKADDR_ARG, *uint32) int32 __asm__("recvfrom")
func _sendmsg (int32, *_msghdr, int32) int32 __asm__("sendmsg")
func _recvmsg (int32, *_msghdr, int32) int32 __asm__("recvmsg")
func _getsockopt (int32, int32, int32, *byte, *uint32) int32 __asm__("getsockopt")
func _setsockopt (int32, int32, int32, *byte, uint32) int32 __asm__("setsockopt")
func _listen (int32, int32) int32 __asm__("listen")
func _accept (int32, ___SOCKADDR_ARG, *uint32) int32 __asm__("accept")
func _shutdown (int32, int32) int32 __asm__("shutdown")
func _sockatmark (int32) int32 __asm__("sockatmark")
func _isfdtype (int32, int32) int32 __asm__("isfdtype")
type _in_port_t uint16
type _in_addr_t uint32
type _in_addr struct { s_addr uint32; }
const _sizeof_in_addr = 4
type _in6_addr struct { in6_u struct { u6_addr8 [15+1]uint8; Godump_0_align [0]int32; }; }
const _sizeof_in6_addr = 16
var _in6addr_any _in6_addr
var _in6addr_loopback _in6_addr
type _sockaddr_in struct { sin_family uint16; sin_port uint16; sin_addr _in_addr; sin_zero [7+1]uint8; }
const _sizeof_sockaddr_in = 16
type _sockaddr_in6 struct { sin6_family uint16; sin6_port uint16; sin6_flowinfo uint32; sin6_addr _in6_addr; sin6_scope_id uint32; }
const _sizeof_sockaddr_in6 = 28
type _ipv6_mreq struct { ipv6mr_multiaddr _in6_addr; ipv6mr_interface uint32; }
const _sizeof_ipv6_mreq = 20
type _ip_opts struct { ip_dst _in_addr; ip_opts [39+1]int8; }
const _sizeof_ip_opts = 44
type _ip_mreq struct { imr_multiaddr _in_addr; imr_interface _in_addr; }
const _sizeof_ip_mreq = 8
type _ip_mreqn struct { imr_multiaddr _in_addr; imr_address _in_addr; imr_ifindex int32; }
const _sizeof_ip_mreqn = 12
type _in_pktinfo struct { ipi_ifindex int32; ipi_spec_dst _in_addr; ipi_addr _in_addr; }
const _sizeof_in_pktinfo = 12
func _ntohl (uint32) uint32 __asm__("ntohl")
func _ntohs (uint16) uint16 __asm__("ntohs")
func _htonl (uint32) uint32 __asm__("htonl")
func _htons (uint16) uint16 __asm__("htons")
func _bindresvport (int32, *_sockaddr_in) int32 __asm__("bindresvport")
func _bindresvport6 (int32, *_sockaddr_in6) int32 __asm__("bindresvport6")
type _in6_pktinfo struct { ipi6_addr _in6_addr; ipi6_ifindex uint32; }
const _sizeof_in6_pktinfo = 20
func _inet6_option_space (int32) int32 __asm__("inet6_option_space")
func _inet6_option_init (*byte, **_cmsghdr, int32) int32 __asm__("inet6_option_init")
func _inet6_option_append (*_cmsghdr, *uint8, int32, int32) int32 __asm__("inet6_option_append")
func _inet6_option_alloc (*_cmsghdr, int32, int32, int32) *uint8 __asm__("inet6_option_alloc")
func _inet6_option_next (*_cmsghdr, **uint8) int32 __asm__("inet6_option_next")
func _inet6_option_find (*_cmsghdr, **uint8, int32) int32 __asm__("inet6_option_find")
type _tcphdr struct { source uint16; dest uint16; seq uint32; ack_seq uint32; Godump_0_pad [2]byte; window uint16; check uint16; urg_ptr uint16; }
const _sizeof_tcphdr = 20
type _tcp_info struct { tcpi_state uint8; tcpi_ca_state uint8; tcpi_retransmits uint8; tcpi_probes uint8; tcpi_backoff uint8; tcpi_options uint8; tcpi_rto uint32; tcpi_ato uint32; tcpi_snd_mss uint32; tcpi_rcv_mss uint32; tcpi_unacked uint32; tcpi_sacked uint32; tcpi_lost uint32; tcpi_retrans uint32; tcpi_fackets uint32; tcpi_last_data_sent uint32; tcpi_last_ack_sent uint32; tcpi_last_data_recv uint32; tcpi_last_ack_recv uint32; tcpi_pmtu uint32; tcpi_rcv_ssthresh uint32; tcpi_rtt uint32; tcpi_rttvar uint32; tcpi_snd_ssthresh uint32; tcpi_snd_cwnd uint32; tcpi_advmss uint32; tcpi_reordering uint32; }
const _sizeof_tcp_info = 92
type _timestamp struct { len uint8; ptr uint8; data [8+1]uint32; }
const _sizeof_timestamp = 40
type _iphdr struct { Godump_0_pad [1]byte; tos uint8; tot_len uint16; id uint16; frag_off uint16; ttl uint8; protocol uint8; check uint16; saddr uint32; daddr uint32; }
const _sizeof_iphdr = 20
type _ip struct { Godump_0_pad [1]byte; ip_tos uint8; ip_len uint16; ip_id uint16; ip_off uint16; ip_ttl uint8; ip_p uint8; ip_sum uint16; ip_src _in_addr; ip_dst _in_addr; }
const _sizeof_ip = 20
type _ip_timestamp struct { ipt_code uint8; ipt_len uint8; ipt_ptr uint8; data [8+1]uint32; }
const _sizeof_ip_timestamp = 40
type ___kernel_fd_set struct { fds_bits [31+1]uint32; }
const _sizeof___kernel_fd_set = 128
type ___kernel_sighandler_t func(int32)
type ___kernel_key_t int32
type ___kernel_mqd_t int32
type ___kernel_size_t uint32
type ___kernel_ssize_t int32
type ___kernel_ptrdiff_t int32
type ___kernel_time_t int32
type ___kernel_suseconds_t int32
type ___kernel_clock_t int32
type ___kernel_pid_t int32
type ___kernel_ipc_pid_t uint16
type ___kernel_uid_t uint16
type ___kernel_gid_t uint16
type ___kernel_ino_t uint32
type ___kernel_mode_t uint16
type ___kernel_umode_t uint16
type ___kernel_nlink_t int16
type ___kernel_daddr_t int32
type ___kernel_off_t int32
type ___kernel_caddr_t *int8
type ___kernel_uid16_t uint16
type ___kernel_gid16_t uint16
type ___kernel_uid32_t uint32
type ___kernel_gid32_t uint32
type ___kernel_old_uid_t uint16
type ___kernel_old_gid_t uint16
type ___kernel_old_dev_t uint16
type ___kernel_clockid_t int32
type ___kernel_timer_t int32
type ___kernel_loff_t int64
type ___kernel_fsid_t struct { __val [1+1]int32; }
const _sizeof___kernel_fsid_t = 8
type _umode_t uint16
type ___s8 int8
type ___u8 uint8
type ___s16 int16
type ___u16 uint16
type ___s32 int32
type ___u32 uint32
type ___s64 int64
type ___u64 uint64
type ___le16 uint16
type ___be16 uint16
type ___le32 uint32
type ___be32 uint32
type ___le64 uint64
type ___be64 uint64
type _ustat struct { f_tfree int32; f_tinode uint32; f_fname [5+1]int8; f_fpack [5+1]int8; }
const _sizeof_ustat = 20
type _ethhdr struct { h_dest [5+1]uint8; h_source [5+1]uint8; h_proto uint16; }
const _sizeof_ethhdr = 14
type _ether_addr struct { ether_addr_octet [5+1]uint8; }
const _sizeof_ether_addr = 6
type _ether_header struct { ether_dhost [5+1]uint8; ether_shost [5+1]uint8; ether_type uint16; }
const _sizeof_ether_header = 14
type _arphdr struct { ar_hrd uint16; ar_pro uint16; ar_hln uint8; ar_pln uint8; ar_op uint16; }
const _sizeof_arphdr = 8
type _arpreq struct { arp_pa _sockaddr; arp_ha _sockaddr; arp_flags int32; arp_netmask _sockaddr; arp_dev [15+1]int8; }
const _sizeof_arpreq = 68
type _arpreq_old struct { arp_pa _sockaddr; arp_ha _sockaddr; arp_flags int32; arp_netmask _sockaddr; }
const _sizeof_arpreq_old = 52
type _arpd_request struct { req uint16; ip uint32; dev uint32; stamp uint32; updated uint32; ha [6+1]uint8; Godump_0_pad [1]byte; }
const _sizeof_arpd_request = 28
type _ether_arp struct { ea_hdr _arphdr; arp_sha [5+1]uint8; arp_spa [3+1]uint8; arp_tha [5+1]uint8; arp_tpa [3+1]uint8; }
const _sizeof_ether_arp = 28
type _winsize struct { ws_row uint16; ws_col uint16; ws_xpixel uint16; ws_ypixel uint16; }
const _sizeof_winsize = 8
type _termio struct { c_iflag uint16; c_oflag uint16; c_cflag uint16; c_lflag uint16; c_line uint8; c_cc [7+1]uint8; Godump_0_pad [1]byte; }
const _sizeof_termio = 18
func _ioctl (int32, uint32, ...interface{}) int32 __asm__("ioctl")
type _cc_t uint8
type _speed_t uint32
type _tcflag_t uint32
type _termios struct { c_iflag uint32; c_oflag uint32; c_cflag uint32; c_lflag uint32; c_line uint8; c_cc [16+1]uint8; Godump_0_pad [2]byte; }
const _sizeof_termios = 36
func _cfgetospeed (*_termios) uint32 __asm__("cfgetospeed")
func _cfgetispeed (*_termios) uint32 __asm__("cfgetispeed")
func _cfsetospeed (*_termios, uint32) int32 __asm__("cfsetospeed")
func _cfsetispeed (*_termios, uint32) int32 __asm__("cfsetispeed")
func _cfsetspeed (*_termios, uint32) int32 __asm__("cfsetspeed")
func _tcgetattr (int32, *_termios) int32 __asm__("tcgetattr")
func _tcsetattr (int32, int32, *_termios) int32 __asm__("tcsetattr")
func _cfmakeraw (*_termios) __asm__("cfmakeraw")
func _tcsendbreak (int32, int32) int32 __asm__("tcsendbreak")
func _tcdrain (int32) int32 __asm__("tcdrain")
func _tcflush (int32, int32) int32 __asm__("tcflush")
func _tcflow (int32, int32) int32 __asm__("tcflow")
func _tcgetsid (int32) int32 __asm__("tcgetsid")
type _epoll_data struct { ptr *byte; Godump_0_pad [4]byte; Godump_1_align [0]int64; }
const _sizeof_epoll_data = 8
type _epoll_data_t struct { ptr *byte; Godump_0_pad [4]byte; Godump_1_align [0]int64; }
const _sizeof_epoll_data_t = 8
type _epoll_event struct { events uint32; data _epoll_data_t; }
const _sizeof_epoll_event = 16
func _epoll_create (int32) int32 __asm__("epoll_create")
func _epoll_ctl (int32, int32, int32, *_epoll_event) int32 __asm__("epoll_ctl")
func _epoll_wait (int32, *_epoll_event, int32, int32) int32 __asm__("epoll_wait")
func _flock (int32, int32) int32 __asm__("flock")
func _mmap (*byte, uint32, int32, int32, int32, int64) *byte __asm__("*mmap64")
func _mmap64 (*byte, uint32, int32, int32, int32, int64) *byte __asm__("mmap64")
func _munmap (*byte, uint32) int32 __asm__("munmap")
func _mprotect (*byte, uint32, int32) int32 __asm__("mprotect")
func _msync (*byte, uint32, int32) int32 __asm__("msync")
func _madvise (*byte, uint32, int32) int32 __asm__("madvise")
func _posix_madvise (*byte, uint32, int32) int32 __asm__("posix_madvise")
func _mlock (*byte, uint32) int32 __asm__("mlock")
func _munlock (*byte, uint32) int32 __asm__("munlock")
func _mlockall (int32) int32 __asm__("mlockall")
func _munlockall () int32 __asm__("munlockall")
func _mremap (*byte, uint32, uint32, int32) *byte __asm__("mremap")
func _mincore (*byte, uint32, *uint8) int32 __asm__("mincore")
func _remap_file_pages (*byte, uint32, int32, uint32, int32) int32 __asm__("remap_file_pages")
func _shm_open (*int8, int32, uint32) int32 __asm__("shm_open")
func _shm_unlink (*int8) int32 __asm__("shm_unlink")
func _prctl (int32, ...interface{}) int32 __asm__("prctl")
func _ptrace (uint32, ...interface{}) int32 __asm__("ptrace")
type _rlim_t uint64
type _rlim64_t uint64
type _rlimit struct { rlim_cur uint64; rlim_max uint64; }
const _sizeof_rlimit = 16
type _rlimit64 struct { rlim_cur uint64; rlim_max uint64; }
const _sizeof_rlimit64 = 16
type _rusage struct { ru_utime _timeval; ru_stime _timeval; ru_maxrss int32; ru_ixrss int32; ru_idrss int32; ru_isrss int32; ru_minflt int32; ru_majflt int32; ru_nswap int32; ru_inblock int32; ru_oublock int32; ru_msgsnd int32; ru_msgrcv int32; ru_nsignals int32; ru_nvcsw int32; ru_nivcsw int32; }
const _sizeof_rusage = 72
type ___rlimit_resource_t uint32
type ___rusage_who_t int32
type ___priority_which_t uint32
func _getrlimit (uint32, *_rlimit) int32 __asm__("*getrlimit64")
func _getrlimit64 (uint32, *_rlimit64) int32 __asm__("getrlimit64")
func _setrlimit (uint32, *_rlimit) int32 __asm__("*setrlimit64")
func _setrlimit64 (uint32, *_rlimit64) int32 __asm__("setrlimit64")
func _getrusage (int32, *_rusage) int32 __asm__("getrusage")
func _getpriority (uint32, uint32) int32 __asm__("getpriority")
func _setpriority (uint32, uint32, int32) int32 __asm__("setpriority")
type _timezone struct { tz_minuteswest int32; tz_dsttime int32; }
const _sizeof_timezone = 8
type ___timezone_ptr_t *_timezone
func _gettimeofday (*_timeval, ___timezone_ptr_t) int32 __asm__("gettimeofday")
func _settimeofday (*_timeval, *_timezone) int32 __asm__("settimeofday")
func _adjtime (*_timeval, *_timeval) int32 __asm__("adjtime")
type _itimerval struct { it_interval _timeval; it_value _timeval; }
const _sizeof_itimerval = 16
type ___itimer_which_t uint32
func _getitimer (uint32, *_itimerval) int32 __asm__("getitimer")
func _setitimer (uint32, *_itimerval, *_itimerval) int32 __asm__("setitimer")
func _utimes (*int8, *_timeval) int32 __asm__("utimes")
func _lutimes (*int8, *_timeval) int32 __asm__("lutimes")
func _futimes (int32, *_timeval) int32 __asm__("futimes")
type _tms struct { tms_utime int32; tms_stime int32; tms_cutime int32; tms_cstime int32; }
const _sizeof_tms = 16
func _times (*_tms) int32 __asm__("times")
type ___WAIT_STATUS struct { __uptr *_wait; }
const _sizeof___WAIT_STATUS = 4
type _wait struct { w_status int32; }
const _sizeof_wait = 4
type _idtype_t uint32
func _wait (___WAIT_STATUS) int32 __asm__("wait")
func _waitpid (int32, *int32, int32) int32 __asm__("waitpid")
func _waitid (uint32, uint32, *_siginfo_t, int32) int32 __asm__("waitid")
func _wait3 (___WAIT_STATUS, int32, *_rusage) int32 __asm__("wait3")
func _wait4 (int32, ___WAIT_STATUS, int32, *_rusage) int32 __asm__("wait4")
type _sockaddr_un struct { sun_family uint16; sun_path [107+1]int8; }
const _sizeof_sockaddr_un = 110
func _memcpy (*byte, *byte, uint32) *byte __asm__("memcpy")
func _memmove (*byte, *byte, uint32) *byte __asm__("memmove")
func _memccpy (*byte, *byte, int32, uint32) *byte __asm__("memccpy")
func _memset (*byte, int32, uint32) *byte __asm__("memset")
func _memcmp (*byte, *byte, uint32) int32 __asm__("memcmp")
func _memchr (*byte, int32, uint32) *byte __asm__("memchr")
func _rawmemchr (*byte, int32) *byte __asm__("rawmemchr")
func _memrchr (*byte, int32, uint32) *byte __asm__("memrchr")
func _strcpy (*int8, *int8) *int8 __asm__("strcpy")
func _strncpy (*int8, *int8, uint32) *int8 __asm__("strncpy")
func _strcat (*int8, *int8) *int8 __asm__("strcat")
func _strncat (*int8, *int8, uint32) *int8 __asm__("strncat")
func _strcmp (*int8, *int8) int32 __asm__("strcmp")
func _strncmp (*int8, *int8, uint32) int32 __asm__("strncmp")
func _strcoll (*int8, *int8) int32 __asm__("strcoll")
func _strxfrm (*int8, *int8, uint32) uint32 __asm__("strxfrm")
type ___locale_struct struct { __locales [12+1]*_locale_data; __ctype_b *uint16; __ctype_tolower *int32; __ctype_toupper *int32; __names [12+1]*int8; }
const _sizeof___locale_struct = 116
type ___locale_t *___locale_struct
func _strcoll_l (*int8, *int8, ___locale_t) int32 __asm__("strcoll_l")
func _strxfrm_l (*int8, *int8, uint32, ___locale_t) uint32 __asm__("strxfrm_l")
func _strdup (*int8) *int8 __asm__("strdup")
func _strndup (*int8, uint32) *int8 __asm__("strndup")
func _strchr (*int8, int32) *int8 __asm__("strchr")
func _strrchr (*int8, int32) *int8 __asm__("strrchr")
func _strchrnul (*int8, int32) *int8 __asm__("strchrnul")
func _strcspn (*int8, *int8) uint32 __asm__("strcspn")
func _strspn (*int8, *int8) uint32 __asm__("strspn")
func _strpbrk (*int8, *int8) *int8 __asm__("strpbrk")
func _strstr (*int8, *int8) *int8 __asm__("strstr")
func _strtok (*int8, *int8) *int8 __asm__("strtok")
func ___strtok_r (*int8, *int8, **int8) *int8 __asm__("__strtok_r")
func _strtok_r (*int8, *int8, **int8) *int8 __asm__("strtok_r")
func _strcasestr (*int8, *int8) *int8 __asm__("strcasestr")
func _memmem (*byte, uint32, *byte, uint32) *byte __asm__("memmem")
func ___mempcpy (*byte, *byte, uint32) *byte __asm__("__mempcpy")
func _mempcpy (*byte, *byte, uint32) *byte __asm__("mempcpy")
func _strlen (*int8) uint32 __asm__("strlen")
func _strnlen (*int8, uint32) uint32 __asm__("strnlen")
func _strerror (int32) *int8 __asm__("strerror")
func _strerror_r (int32, *int8, uint32) *int8 __asm__("strerror_r")
func ___bzero (*byte, uint32) __asm__("__bzero")
func _bcopy (*byte, *byte, uint32) __asm__("bcopy")
func _bzero (*byte, uint32) __asm__("bzero")
func _bcmp (*byte, *byte, uint32) int32 __asm__("bcmp")
func _index (*int8, int32) *int8 __asm__("index")
func _rindex (*int8, int32) *int8 __asm__("rindex")
func _ffs (int32) int32 __asm__("ffs")
func _ffsl (int32) int32 __asm__("ffsl")
func _ffsll (int64) int32 __asm__("ffsll")
func _strcasecmp (*int8, *int8) int32 __asm__("strcasecmp")
func _strncasecmp (*int8, *int8, uint32) int32 __asm__("strncasecmp")
func _strcasecmp_l (*int8, *int8, ___locale_t) int32 __asm__("strcasecmp_l")
func _strncasecmp_l (*int8, *int8, uint32, ___locale_t) int32 __asm__("strncasecmp_l")
func _strsep (**int8, *int8) *int8 __asm__("strsep")
func _strverscmp (*int8, *int8) int32 __asm__("strverscmp")
func _strsignal (int32) *int8 __asm__("strsignal")
func ___stpcpy (*int8, *int8) *int8 __asm__("__stpcpy")
func _stpcpy (*int8, *int8) *int8 __asm__("stpcpy")
func ___stpncpy (*int8, *int8, uint32) *int8 __asm__("__stpncpy")
func _stpncpy (*int8, *int8, uint32) *int8 __asm__("stpncpy")
func _strfry (*int8) *int8 __asm__("strfry")
func _memfrob (*byte, uint32) *byte __asm__("memfrob")
func _basename (*int8) *int8 __asm__("basename")
type ___STRING2_COPY_ARR2 struct { __arr [1+1]uint8; }
const _sizeof___STRING2_COPY_ARR2 = 2
type ___STRING2_COPY_ARR3 struct { __arr [2+1]uint8; }
const _sizeof___STRING2_COPY_ARR3 = 3
type ___STRING2_COPY_ARR4 struct { __arr [3+1]uint8; }
const _sizeof___STRING2_COPY_ARR4 = 4
type ___STRING2_COPY_ARR5 struct { __arr [4+1]uint8; }
const _sizeof___STRING2_COPY_ARR5 = 5
type ___STRING2_COPY_ARR6 struct { __arr [5+1]uint8; }
const _sizeof___STRING2_COPY_ARR6 = 6
type ___STRING2_COPY_ARR7 struct { __arr [6+1]uint8; }
const _sizeof___STRING2_COPY_ARR7 = 7
type ___STRING2_COPY_ARR8 struct { __arr [7+1]uint8; }
const _sizeof___STRING2_COPY_ARR8 = 8
func ___strcspn_c1 (*int8, int32) uint32 __asm__("__strcspn_c1")
func ___strcspn_c2 (*int8, int32, int32) uint32 __asm__("__strcspn_c2")
func ___strcspn_c3 (*int8, int32, int32, int32) uint32 __asm__("__strcspn_c3")
func ___strspn_c1 (*int8, int32) uint32 __asm__("__strspn_c1")
func ___strspn_c2 (*int8, int32, int32) uint32 __asm__("__strspn_c2")
func ___strspn_c3 (*int8, int32, int32, int32) uint32 __asm__("__strspn_c3")
func ___strpbrk_c2 (*int8, int32, int32) *int8 __asm__("__strpbrk_c2")
func ___strpbrk_c3 (*int8, int32, int32, int32) *int8 __asm__("__strpbrk_c3")
func ___strtok_r_1c (*int8, int8, **int8) *int8 __asm__("__strtok_r_1c")
func ___strsep_g (**int8, *int8) *int8 __asm__("__strsep_g")
func ___strsep_1c (**int8, int8) *int8 __asm__("__strsep_1c")
func ___strsep_2c (**int8, int8, int8) *int8 __asm__("__strsep_2c")
func ___strsep_3c (**int8, int8, int8, int8) *int8 __asm__("__strsep_3c")
func _malloc (uint32) *byte __asm__("malloc")
func _calloc (uint32, uint32) *byte __asm__("calloc")
func ___strdup (*int8) *int8 __asm__("__strdup")
func ___strndup (*int8, uint32) *int8 __asm__("__strndup")
type _sunos_regs struct { psr uint32; pc uint32; npc uint32; y uint32; regs [14+1]uint32; }
const _sizeof_sunos_regs = 76
type _sunos_fpqueue struct { addr *uint32; inst uint32; }
const _sizeof_sunos_fpqueue = 8
type _sunos_fp struct { fregs struct { regs [31+1]uint32; Godump_0_align [0]int64; }; fsr uint32; flags uint32; extra uint32; fpq_count uint32; fpq [15+1]_sunos_fpqueue; }
const _sizeof_sunos_fp = 272
type _sunos_fpu struct { fpstatus _sunos_fp; }
const _sizeof_sunos_fpu = 272
type _user struct { magic uint32; len uint32; regs _sunos_regs; uexec struct { Godump_0_pad [1]byte; a_machtype uint8; a_info uint16; a_text uint32; a_data uint32; a_bss uint32; a_syms uint32; a_entry uint32; a_trsize uint32; a_drsize uint32; }; signal int32; u_tsize uint32; u_dsize uint32; u_ssize uint32; u_comm [16+1]int8; fpu _sunos_fpu; sigcode uint32; Godump_1_pad [4]byte; }
const _sizeof_user = 432
type _utsname struct { sysname [64+1]int8; nodename [64+1]int8; release [64+1]int8; version [64+1]int8; machine [64+1]int8; domainname [64+1]int8; }
const _sizeof_utsname = 390
func _uname (*_utsname) int32 __asm__("uname")
type _tm struct { tm_sec int32; tm_min int32; tm_hour int32; tm_mday int32; tm_mon int32; tm_year int32; tm_wday int32; tm_yday int32; tm_isdst int32; tm_gmtoff int32; tm_zone *int8; }
const _sizeof_tm = 44
type _itimerspec struct { it_interval _timespec; it_value _timespec; }
const _sizeof_itimerspec = 16
func _clock () int32 __asm__("clock")
func _time (*int32) int32 __asm__("time")
func _difftime (int32, int32) float64 __asm__("difftime")
func _mktime (*_tm) int32 __asm__("mktime")
func _strftime (*int8, uint32, *int8, *_tm) uint32 __asm__("strftime")
func _strptime (*int8, *int8, *_tm) *int8 __asm__("strptime")
func _strftime_l (*int8, uint32, *int8, *_tm, ___locale_t) uint32 __asm__("strftime_l")
func _strptime_l (*int8, *int8, *_tm, ___locale_t) *int8 __asm__("strptime_l")
func _gmtime (*int32) *_tm __asm__("gmtime")
func _localtime (*int32) *_tm __asm__("localtime")
func _gmtime_r (*int32, *_tm) *_tm __asm__("gmtime_r")
func _localtime_r (*int32, *_tm) *_tm __asm__("localtime_r")
func _asctime (*_tm) *int8 __asm__("asctime")
func _ctime (*int32) *int8 __asm__("ctime")
func _asctime_r (*_tm, *int8) *int8 __asm__("asctime_r")
func _ctime_r (*int32, *int8) *int8 __asm__("ctime_r")
var ___tzname [1+1]*int8
var ___daylight int32
var ___timezone int32
var _tzname [1+1]*int8
func _tzset () __asm__("tzset")
var _daylight int32
// var _timezone int32
func _stime (*int32) int32 __asm__("stime")
func _timegm (*_tm) int32 __asm__("timegm")
func _timelocal (*_tm) int32 __asm__("timelocal")
func _dysize (int32) int32 __asm__("dysize")
func _nanosleep (*_timespec, *_timespec) int32 __asm__("nanosleep")
func _clock_getres (int32, *_timespec) int32 __asm__("clock_getres")
func _clock_gettime (int32, *_timespec) int32 __asm__("clock_gettime")
func _clock_settime (int32, *_timespec) int32 __asm__("clock_settime")
func _clock_nanosleep (int32, int32, *_timespec, *_timespec) int32 __asm__("clock_nanosleep")
func _clock_getcpuclockid (int32, *int32) int32 __asm__("clock_getcpuclockid")
func _timer_create (int32, *_sigevent, *int32) int32 __asm__("timer_create")
func _timer_delete (int32) int32 __asm__("timer_delete")
func _timer_settime (int32, int32, *_itimerspec, *_itimerspec) int32 __asm__("timer_settime")
func _timer_gettime (int32, *_itimerspec) int32 __asm__("timer_gettime")
func _timer_getoverrun (int32) int32 __asm__("timer_getoverrun")
var _getdate_err int32
func _getdate (*int8) *_tm __asm__("getdate")
func _getdate_r (*int8, *_tm) int32 __asm__("getdate_r")
func _access (*int8, int32) int32 __asm__("access")
func _euidaccess (*int8, int32) int32 __asm__("euidaccess")
func _lseek (int32, int64, int32) int64 __asm__("*lseek64")
func _lseek64 (int32, int64, int32) int64 __asm__("lseek64")
func _close (int32) int32 __asm__("close")
func _read (int32, *byte, uint32) int32 __asm__("read")
func _write (int32, *byte, uint32) int32 __asm__("write")
func _pread (int32, *byte, uint32, int64) int32 __asm__("*pread64")
func _pwrite (int32, *byte, uint32, int64) int32 __asm__("*pwrite64")
func _pread64 (int32, *byte, uint32, int64) int32 __asm__("pread64")
func _pwrite64 (int32, *byte, uint32, int64) int32 __asm__("pwrite64")
func _pipe (*int32) int32 __asm__("pipe")
func _alarm (uint32) uint32 __asm__("alarm")
func _sleep (uint32) uint32 __asm__("sleep")
func _ualarm (uint32, uint32) uint32 __asm__("ualarm")
func _usleep (uint32) int32 __asm__("usleep")
func _pause () int32 __asm__("pause")
func _chown (*int8, uint32, uint32) int32 __asm__("chown")
func _fchown (int32, uint32, uint32) int32 __asm__("fchown")
func _lchown (*int8, uint32, uint32) int32 __asm__("lchown")
func _chdir (*int8) int32 __asm__("chdir")
func _fchdir (int32) int32 __asm__("fchdir")
func _getcwd (*int8, uint32) *int8 __asm__("getcwd")
func _get_current_dir_name () *int8 __asm__("get_current_dir_name")
func _getwd (*int8) *int8 __asm__("getwd")
func _dup (int32) int32 __asm__("dup")
func _dup2 (int32, int32) int32 __asm__("dup2")
var ___environ **int8
var _environ **int8
func _execve (*int8, **int8, **int8) int32 __asm__("execve")
func _fexecve (int32, **int8, **int8) int32 __asm__("fexecve")
func _execv (*int8, **int8) int32 __asm__("execv")
func _execle (*int8, *int8, ...interface{}) int32 __asm__("execle")
func _execl (*int8, *int8, ...interface{}) int32 __asm__("execl")
func _execvp (*int8, **int8) int32 __asm__("execvp")
func _execlp (*int8, *int8, ...interface{}) int32 __asm__("execlp")
func _nice (int32) int32 __asm__("nice")
func __exit (int32) __asm__("_exit")
func _pathconf (*int8, int32) int32 __asm__("pathconf")
func _fpathconf (int32, int32) int32 __asm__("fpathconf")
func _sysconf (int32) int32 __asm__("sysconf")
func _confstr (int32, *int8, uint32) uint32 __asm__("confstr")
func _getpid () int32 __asm__("getpid")
func _getppid () int32 __asm__("getppid")
func _getpgrp () int32 __asm__("getpgrp")
func ___getpgid (int32) int32 __asm__("__getpgid")
func _getpgid (int32) int32 __asm__("getpgid")
func _setpgid (int32, int32) int32 __asm__("setpgid")
func _setpgrp () int32 __asm__("setpgrp")
func _setsid () int32 __asm__("setsid")
func _getsid (int32) int32 __asm__("getsid")
func _getuid () uint32 __asm__("getuid")
func _geteuid () uint32 __asm__("geteuid")
func _getgid () uint32 __asm__("getgid")
func _getegid () uint32 __asm__("getegid")
func _getgroups (int32, *uint32) int32 __asm__("getgroups")
func _group_member (uint32) int32 __asm__("group_member")
func _setuid (uint32) int32 __asm__("setuid")
func _setreuid (uint32, uint32) int32 __asm__("setreuid")
func _seteuid (uint32) int32 __asm__("seteuid")
func _setgid (uint32) int32 __asm__("setgid")
func _setregid (uint32, uint32) int32 __asm__("setregid")
func _setegid (uint32) int32 __asm__("setegid")
func _getresuid (*uint32, *uint32, *uint32) int32 __asm__("getresuid")
func _getresgid (*uint32, *uint32, *uint32) int32 __asm__("getresgid")
func _setresuid (uint32, uint32, uint32) int32 __asm__("setresuid")
func _setresgid (uint32, uint32, uint32) int32 __asm__("setresgid")
func _fork () int32 __asm__("fork")
func _vfork () int32 __asm__("vfork")
func _ttyname (int32) *int8 __asm__("ttyname")
func _ttyname_r (int32, *int8, uint32) int32 __asm__("ttyname_r")
func _isatty (int32) int32 __asm__("isatty")
func _ttyslot () int32 __asm__("ttyslot")
func _link (*int8, *int8) int32 __asm__("link")
func _symlink (*int8, *int8) int32 __asm__("symlink")
func _readlink (*int8, *int8, uint32) int32 __asm__("readlink")
func _unlink (*int8) int32 __asm__("unlink")
func _rmdir (*int8) int32 __asm__("rmdir")
func _tcgetpgrp (int32) int32 __asm__("tcgetpgrp")
func _tcsetpgrp (int32, int32) int32 __asm__("tcsetpgrp")
func _getlogin () *int8 __asm__("getlogin")
func _getlogin_r (*int8, uint32) int32 __asm__("getlogin_r")
func _setlogin (*int8) int32 __asm__("setlogin")
var _optarg *int8
var _optind int32
var _opterr int32
var _optopt int32
func _getopt (int32, **int8, *int8) int32 __asm__("getopt")
func _gethostname (*int8, uint32) int32 __asm__("gethostname")
func _sethostname (*int8, uint32) int32 __asm__("sethostname")
func _sethostid (int32) int32 __asm__("sethostid")
func _getdomainname (*int8, uint32) int32 __asm__("getdomainname")
func _setdomainname (*int8, uint32) int32 __asm__("setdomainname")
func _vhangup () int32 __asm__("vhangup")
func _revoke (*int8) int32 __asm__("revoke")
func _profil (*uint16, uint32, uint32, uint32) int32 __asm__("profil")
func _acct (*int8) int32 __asm__("acct")
func _getusershell () *int8 __asm__("getusershell")
func _endusershell () __asm__("endusershell")
func _setusershell () __asm__("setusershell")
func _daemon (int32, int32) int32 __asm__("daemon")
func _chroot (*int8) int32 __asm__("chroot")
func _getpass (*int8) *int8 __asm__("getpass")
func _fsync (int32) int32 __asm__("fsync")
func _gethostid () int32 __asm__("gethostid")
func _sync () __asm__("sync")
func _getpagesize () int32 __asm__("getpagesize")
func _truncate (*int8, int64) int32 __asm__("*truncate64")
func _truncate64 (*int8, int64) int32 __asm__("truncate64")
func _ftruncate (int32, int64) int32 __asm__("*ftruncate64")
func _ftruncate64 (int32, int64) int32 __asm__("ftruncate64")
func _getdtablesize () int32 __asm__("getdtablesize")
func _brk (*byte) int32 __asm__("brk")
func _sbrk (int32) *byte __asm__("sbrk")
func _syscall (int32, ...interface{}) int32 __asm__("syscall")
func _fdatasync (int32) int32 __asm__("fdatasync")
func _crypt (*int8, *int8) *int8 __asm__("crypt")
func _encrypt (*int8, int32) __asm__("encrypt")
func _swab (*byte, *byte, int32) __asm__("swab")
func _ctermid (*int8) *int8 __asm__("ctermid")
type _rpcent struct { r_name *int8; r_aliases **int8; r_number int32; }
const _sizeof_rpcent = 12
func _setrpcent (int32) __asm__("setrpcent")
func _endrpcent () __asm__("endrpcent")
func _getrpcbyname (*int8) *_rpcent __asm__("getrpcbyname")
func _getrpcbynumber (int32) *_rpcent __asm__("getrpcbynumber")
func _getrpcent () *_rpcent __asm__("getrpcent")
func _getrpcbyname_r (*int8, *_rpcent, *int8, uint32, **_rpcent) int32 __asm__("getrpcbyname_r")
func _getrpcbynumber_r (int32, *_rpcent, *int8, uint32, **_rpcent) int32 __asm__("getrpcbynumber_r")
func _getrpcent_r (*_rpcent, *int8, uint32, **_rpcent) int32 __asm__("getrpcent_r")